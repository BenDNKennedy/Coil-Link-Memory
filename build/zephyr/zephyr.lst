
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	80 0f 00 20 29 33 00 08 21 b6 00 08 fd 32 00 08     ... )3..!....2..
 8000010:	fd 32 00 08 fd 32 00 08 fd 32 00 08 00 00 00 00     .2...2...2......
	...
 800002c:	11 30 00 08 fd 32 00 08 00 00 00 00 bd 2f 00 08     .0...2......./..
 800003c:	0d 3e 00 08                                         .>..

08000040 <_irq_vector_table>:
 8000040:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 8000050:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 8000060:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 8000070:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 8000080:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 8000090:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 80000a0:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 80000b0:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 80000c0:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 80000d0:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 80000e0:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 80000f0:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 8000100:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 8000110:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 8000120:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 8000130:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 8000140:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 8000150:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 8000160:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 8000170:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 8000180:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 8000190:	c1 30 00 08 c1 30 00 08 c1 30 00 08 c1 30 00 08     .0...0...0...0..
 80001a0:	c1 30 00 08 c1 30 00 08 c1 30 00 08                 .0...0...0..

Disassembly of section text:

080001c0 <strlen>:
 80001c0:	f890 f000 	pld	[r0]
 80001c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 80001c8:	f020 0107 	bic.w	r1, r0, #7
 80001cc:	f06f 0c00 	mvn.w	ip, #0
 80001d0:	f010 0407 	ands.w	r4, r0, #7
 80001d4:	f891 f020 	pld	[r1, #32]
 80001d8:	f040 8049 	bne.w	800026e <strlen+0xae>
 80001dc:	f04f 0400 	mov.w	r4, #0
 80001e0:	f06f 0007 	mvn.w	r0, #7
 80001e4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80001e8:	f891 f040 	pld	[r1, #64]	; 0x40
 80001ec:	f100 0008 	add.w	r0, r0, #8
 80001f0:	fa82 f24c 	uadd8	r2, r2, ip
 80001f4:	faa4 f28c 	sel	r2, r4, ip
 80001f8:	fa83 f34c 	uadd8	r3, r3, ip
 80001fc:	faa2 f38c 	sel	r3, r2, ip
 8000200:	bb4b      	cbnz	r3, 8000256 <strlen+0x96>
 8000202:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000206:	fa82 f24c 	uadd8	r2, r2, ip
 800020a:	f100 0008 	add.w	r0, r0, #8
 800020e:	faa4 f28c 	sel	r2, r4, ip
 8000212:	fa83 f34c 	uadd8	r3, r3, ip
 8000216:	faa2 f38c 	sel	r3, r2, ip
 800021a:	b9e3      	cbnz	r3, 8000256 <strlen+0x96>
 800021c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000220:	fa82 f24c 	uadd8	r2, r2, ip
 8000224:	f100 0008 	add.w	r0, r0, #8
 8000228:	faa4 f28c 	sel	r2, r4, ip
 800022c:	fa83 f34c 	uadd8	r3, r3, ip
 8000230:	faa2 f38c 	sel	r3, r2, ip
 8000234:	b97b      	cbnz	r3, 8000256 <strlen+0x96>
 8000236:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800023a:	f101 0120 	add.w	r1, r1, #32
 800023e:	fa82 f24c 	uadd8	r2, r2, ip
 8000242:	f100 0008 	add.w	r0, r0, #8
 8000246:	faa4 f28c 	sel	r2, r4, ip
 800024a:	fa83 f34c 	uadd8	r3, r3, ip
 800024e:	faa2 f38c 	sel	r3, r2, ip
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0c6      	beq.n	80001e4 <strlen+0x24>
 8000256:	2a00      	cmp	r2, #0
 8000258:	bf04      	itt	eq
 800025a:	3004      	addeq	r0, #4
 800025c:	461a      	moveq	r2, r3
 800025e:	ba12      	rev	r2, r2
 8000260:	fab2 f282 	clz	r2, r2
 8000264:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000268:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800026c:	4770      	bx	lr
 800026e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000272:	f004 0503 	and.w	r5, r4, #3
 8000276:	f1c4 0000 	rsb	r0, r4, #0
 800027a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800027e:	f014 0f04 	tst.w	r4, #4
 8000282:	f891 f040 	pld	[r1, #64]	; 0x40
 8000286:	fa0c f505 	lsl.w	r5, ip, r5
 800028a:	ea62 0205 	orn	r2, r2, r5
 800028e:	bf1c      	itt	ne
 8000290:	ea63 0305 	ornne	r3, r3, r5
 8000294:	4662      	movne	r2, ip
 8000296:	f04f 0400 	mov.w	r4, #0
 800029a:	e7a9      	b.n	80001f0 <strlen+0x30>
 800029c:	0000      	movs	r0, r0
	...

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b80c 	b.w	8000b0c <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f968 	bl	8000dd0 <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_idiv0>:
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__gedf2>:
 8000b10:	f04f 3cff 	mov.w	ip, #4294967295
 8000b14:	e006      	b.n	8000b24 <__cmpdf2+0x4>
 8000b16:	bf00      	nop

08000b18 <__ledf2>:
 8000b18:	f04f 0c01 	mov.w	ip, #1
 8000b1c:	e002      	b.n	8000b24 <__cmpdf2+0x4>
 8000b1e:	bf00      	nop

08000b20 <__cmpdf2>:
 8000b20:	f04f 0c01 	mov.w	ip, #1
 8000b24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	bf18      	it	ne
 8000b36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b3a:	d01b      	beq.n	8000b74 <__cmpdf2+0x54>
 8000b3c:	b001      	add	sp, #4
 8000b3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b42:	bf0c      	ite	eq
 8000b44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b48:	ea91 0f03 	teqne	r1, r3
 8000b4c:	bf02      	ittt	eq
 8000b4e:	ea90 0f02 	teqeq	r0, r2
 8000b52:	2000      	moveq	r0, #0
 8000b54:	4770      	bxeq	lr
 8000b56:	f110 0f00 	cmn.w	r0, #0
 8000b5a:	ea91 0f03 	teq	r1, r3
 8000b5e:	bf58      	it	pl
 8000b60:	4299      	cmppl	r1, r3
 8000b62:	bf08      	it	eq
 8000b64:	4290      	cmpeq	r0, r2
 8000b66:	bf2c      	ite	cs
 8000b68:	17d8      	asrcs	r0, r3, #31
 8000b6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6e:	f040 0001 	orr.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__cmpdf2+0x64>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d107      	bne.n	8000b94 <__cmpdf2+0x74>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d1d6      	bne.n	8000b3c <__cmpdf2+0x1c>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d0d3      	beq.n	8000b3c <__cmpdf2+0x1c>
 8000b94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_cdrcmple>:
 8000b9c:	4684      	mov	ip, r0
 8000b9e:	4610      	mov	r0, r2
 8000ba0:	4662      	mov	r2, ip
 8000ba2:	468c      	mov	ip, r1
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4663      	mov	r3, ip
 8000ba8:	e000      	b.n	8000bac <__aeabi_cdcmpeq>
 8000baa:	bf00      	nop

08000bac <__aeabi_cdcmpeq>:
 8000bac:	b501      	push	{r0, lr}
 8000bae:	f7ff ffb7 	bl	8000b20 <__cmpdf2>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	bf48      	it	mi
 8000bb6:	f110 0f00 	cmnmi.w	r0, #0
 8000bba:	bd01      	pop	{r0, pc}

08000bbc <__aeabi_dcmpeq>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff fff4 	bl	8000bac <__aeabi_cdcmpeq>
 8000bc4:	bf0c      	ite	eq
 8000bc6:	2001      	moveq	r0, #1
 8000bc8:	2000      	movne	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmplt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffea 	bl	8000bac <__aeabi_cdcmpeq>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmple>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffe0 	bl	8000bac <__aeabi_cdcmpeq>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpge>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffce 	bl	8000b9c <__aeabi_cdrcmple>
 8000c00:	bf94      	ite	ls
 8000c02:	2001      	movls	r0, #1
 8000c04:	2000      	movhi	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpgt>:
 8000c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c10:	f7ff ffc4 	bl	8000b9c <__aeabi_cdrcmple>
 8000c14:	bf34      	ite	cc
 8000c16:	2001      	movcc	r0, #1
 8000c18:	2000      	movcs	r0, #0
 8000c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1e:	bf00      	nop

08000c20 <memcpy>:
 8000c20:	4684      	mov	ip, r0
 8000c22:	ea41 0300 	orr.w	r3, r1, r0
 8000c26:	f013 0303 	ands.w	r3, r3, #3
 8000c2a:	d16d      	bne.n	8000d08 <memcpy+0xe8>
 8000c2c:	3a40      	subs	r2, #64	; 0x40
 8000c2e:	d341      	bcc.n	8000cb4 <memcpy+0x94>
 8000c30:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c34:	f840 3b04 	str.w	r3, [r0], #4
 8000c38:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c3c:	f840 3b04 	str.w	r3, [r0], #4
 8000c40:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c44:	f840 3b04 	str.w	r3, [r0], #4
 8000c48:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c4c:	f840 3b04 	str.w	r3, [r0], #4
 8000c50:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c54:	f840 3b04 	str.w	r3, [r0], #4
 8000c58:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c5c:	f840 3b04 	str.w	r3, [r0], #4
 8000c60:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c64:	f840 3b04 	str.w	r3, [r0], #4
 8000c68:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c6c:	f840 3b04 	str.w	r3, [r0], #4
 8000c70:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c74:	f840 3b04 	str.w	r3, [r0], #4
 8000c78:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c7c:	f840 3b04 	str.w	r3, [r0], #4
 8000c80:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c84:	f840 3b04 	str.w	r3, [r0], #4
 8000c88:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c8c:	f840 3b04 	str.w	r3, [r0], #4
 8000c90:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c94:	f840 3b04 	str.w	r3, [r0], #4
 8000c98:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c9c:	f840 3b04 	str.w	r3, [r0], #4
 8000ca0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ca4:	f840 3b04 	str.w	r3, [r0], #4
 8000ca8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cac:	f840 3b04 	str.w	r3, [r0], #4
 8000cb0:	3a40      	subs	r2, #64	; 0x40
 8000cb2:	d2bd      	bcs.n	8000c30 <memcpy+0x10>
 8000cb4:	3230      	adds	r2, #48	; 0x30
 8000cb6:	d311      	bcc.n	8000cdc <memcpy+0xbc>
 8000cb8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cbc:	f840 3b04 	str.w	r3, [r0], #4
 8000cc0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cc4:	f840 3b04 	str.w	r3, [r0], #4
 8000cc8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ccc:	f840 3b04 	str.w	r3, [r0], #4
 8000cd0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cd4:	f840 3b04 	str.w	r3, [r0], #4
 8000cd8:	3a10      	subs	r2, #16
 8000cda:	d2ed      	bcs.n	8000cb8 <memcpy+0x98>
 8000cdc:	320c      	adds	r2, #12
 8000cde:	d305      	bcc.n	8000cec <memcpy+0xcc>
 8000ce0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ce4:	f840 3b04 	str.w	r3, [r0], #4
 8000ce8:	3a04      	subs	r2, #4
 8000cea:	d2f9      	bcs.n	8000ce0 <memcpy+0xc0>
 8000cec:	3204      	adds	r2, #4
 8000cee:	d008      	beq.n	8000d02 <memcpy+0xe2>
 8000cf0:	07d2      	lsls	r2, r2, #31
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000cf8:	f800 3b01 	strbne.w	r3, [r0], #1
 8000cfc:	d301      	bcc.n	8000d02 <memcpy+0xe2>
 8000cfe:	880b      	ldrh	r3, [r1, #0]
 8000d00:	8003      	strh	r3, [r0, #0]
 8000d02:	4660      	mov	r0, ip
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	2a08      	cmp	r2, #8
 8000d0a:	d313      	bcc.n	8000d34 <memcpy+0x114>
 8000d0c:	078b      	lsls	r3, r1, #30
 8000d0e:	d08d      	beq.n	8000c2c <memcpy+0xc>
 8000d10:	f010 0303 	ands.w	r3, r0, #3
 8000d14:	d08a      	beq.n	8000c2c <memcpy+0xc>
 8000d16:	f1c3 0304 	rsb	r3, r3, #4
 8000d1a:	1ad2      	subs	r2, r2, r3
 8000d1c:	07db      	lsls	r3, r3, #31
 8000d1e:	bf1c      	itt	ne
 8000d20:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000d24:	f800 3b01 	strbne.w	r3, [r0], #1
 8000d28:	d380      	bcc.n	8000c2c <memcpy+0xc>
 8000d2a:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000d2e:	f820 3b02 	strh.w	r3, [r0], #2
 8000d32:	e77b      	b.n	8000c2c <memcpy+0xc>
 8000d34:	3a04      	subs	r2, #4
 8000d36:	d3d9      	bcc.n	8000cec <memcpy+0xcc>
 8000d38:	3a01      	subs	r2, #1
 8000d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d3e:	f800 3b01 	strb.w	r3, [r0], #1
 8000d42:	d2f9      	bcs.n	8000d38 <memcpy+0x118>
 8000d44:	780b      	ldrb	r3, [r1, #0]
 8000d46:	7003      	strb	r3, [r0, #0]
 8000d48:	784b      	ldrb	r3, [r1, #1]
 8000d4a:	7043      	strb	r3, [r0, #1]
 8000d4c:	788b      	ldrb	r3, [r1, #2]
 8000d4e:	7083      	strb	r3, [r0, #2]
 8000d50:	4660      	mov	r0, ip
 8000d52:	4770      	bx	lr

08000d54 <__aeabi_dcmpun>:
 8000d54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d5c:	d102      	bne.n	8000d64 <__aeabi_dcmpun+0x10>
 8000d5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d62:	d10a      	bne.n	8000d7a <__aeabi_dcmpun+0x26>
 8000d64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d6c:	d102      	bne.n	8000d74 <__aeabi_dcmpun+0x20>
 8000d6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d72:	d102      	bne.n	8000d7a <__aeabi_dcmpun+0x26>
 8000d74:	f04f 0000 	mov.w	r0, #0
 8000d78:	4770      	bx	lr
 8000d7a:	f04f 0001 	mov.w	r0, #1
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_d2iz>:
 8000d80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000d88:	d215      	bcs.n	8000db6 <__aeabi_d2iz+0x36>
 8000d8a:	d511      	bpl.n	8000db0 <__aeabi_d2iz+0x30>
 8000d8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000d90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d94:	d912      	bls.n	8000dbc <__aeabi_d2iz+0x3c>
 8000d96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000da2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000da6:	fa23 f002 	lsr.w	r0, r3, r2
 8000daa:	bf18      	it	ne
 8000dac:	4240      	negne	r0, r0
 8000dae:	4770      	bx	lr
 8000db0:	f04f 0000 	mov.w	r0, #0
 8000db4:	4770      	bx	lr
 8000db6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000dba:	d105      	bne.n	8000dc8 <__aeabi_d2iz+0x48>
 8000dbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000dc0:	bf08      	it	eq
 8000dc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000dc6:	4770      	bx	lr
 8000dc8:	f04f 0000 	mov.w	r0, #0
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <__udivmoddi4>:
 8000dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dd4:	4607      	mov	r7, r0
 8000dd6:	468c      	mov	ip, r1
 8000dd8:	4608      	mov	r0, r1
 8000dda:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000ddc:	4615      	mov	r5, r2
 8000dde:	463c      	mov	r4, r7
 8000de0:	4619      	mov	r1, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 80c6 	bne.w	8000f74 <__udivmoddi4+0x1a4>
 8000de8:	4282      	cmp	r2, r0
 8000dea:	fab2 f782 	clz	r7, r2
 8000dee:	d946      	bls.n	8000e7e <__udivmoddi4+0xae>
 8000df0:	b14f      	cbz	r7, 8000e06 <__udivmoddi4+0x36>
 8000df2:	f1c7 0e20 	rsb	lr, r7, #32
 8000df6:	fa24 fe0e 	lsr.w	lr, r4, lr
 8000dfa:	fa00 f307 	lsl.w	r3, r0, r7
 8000dfe:	40bd      	lsls	r5, r7
 8000e00:	ea4e 0c03 	orr.w	ip, lr, r3
 8000e04:	40bc      	lsls	r4, r7
 8000e06:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000e0a:	fa1f fe85 	uxth.w	lr, r5
 8000e0e:	fbbc f9f8 	udiv	r9, ip, r8
 8000e12:	0c22      	lsrs	r2, r4, #16
 8000e14:	fb08 c319 	mls	r3, r8, r9, ip
 8000e18:	fb09 fa0e 	mul.w	sl, r9, lr
 8000e1c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000e20:	459a      	cmp	sl, r3
 8000e22:	d928      	bls.n	8000e76 <__udivmoddi4+0xa6>
 8000e24:	18eb      	adds	r3, r5, r3
 8000e26:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2a:	d204      	bcs.n	8000e36 <__udivmoddi4+0x66>
 8000e2c:	459a      	cmp	sl, r3
 8000e2e:	d902      	bls.n	8000e36 <__udivmoddi4+0x66>
 8000e30:	f1a9 0002 	sub.w	r0, r9, #2
 8000e34:	442b      	add	r3, r5
 8000e36:	eba3 030a 	sub.w	r3, r3, sl
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f2f8 	udiv	r2, r3, r8
 8000e40:	fb08 3312 	mls	r3, r8, r2, r3
 8000e44:	fb02 fe0e 	mul.w	lr, r2, lr
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d914      	bls.n	8000e7a <__udivmoddi4+0xaa>
 8000e50:	192c      	adds	r4, r5, r4
 8000e52:	f102 33ff 	add.w	r3, r2, #4294967295
 8000e56:	d203      	bcs.n	8000e60 <__udivmoddi4+0x90>
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	d901      	bls.n	8000e60 <__udivmoddi4+0x90>
 8000e5c:	1e93      	subs	r3, r2, #2
 8000e5e:	442c      	add	r4, r5
 8000e60:	eba4 040e 	sub.w	r4, r4, lr
 8000e64:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e68:	b11e      	cbz	r6, 8000e72 <__udivmoddi4+0xa2>
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	6034      	str	r4, [r6, #0]
 8000e70:	6073      	str	r3, [r6, #4]
 8000e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e76:	4648      	mov	r0, r9
 8000e78:	e7dd      	b.n	8000e36 <__udivmoddi4+0x66>
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7f0      	b.n	8000e60 <__udivmoddi4+0x90>
 8000e7e:	b902      	cbnz	r2, 8000e82 <__udivmoddi4+0xb2>
 8000e80:	deff      	udf	#255	; 0xff
 8000e82:	bb87      	cbnz	r7, 8000ee6 <__udivmoddi4+0x116>
 8000e84:	1a83      	subs	r3, r0, r2
 8000e86:	2101      	movs	r1, #1
 8000e88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8c:	b2aa      	uxth	r2, r5
 8000e8e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e92:	0c20      	lsrs	r0, r4, #16
 8000e94:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e98:	fb0c f802 	mul.w	r8, ip, r2
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	4598      	cmp	r8, r3
 8000ea2:	d963      	bls.n	8000f6c <__udivmoddi4+0x19c>
 8000ea4:	18eb      	adds	r3, r5, r3
 8000ea6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eaa:	d204      	bcs.n	8000eb6 <__udivmoddi4+0xe6>
 8000eac:	4598      	cmp	r8, r3
 8000eae:	d902      	bls.n	8000eb6 <__udivmoddi4+0xe6>
 8000eb0:	f1ac 0002 	sub.w	r0, ip, #2
 8000eb4:	442b      	add	r3, r5
 8000eb6:	eba3 0308 	sub.w	r3, r3, r8
 8000eba:	b2a4      	uxth	r4, r4
 8000ebc:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ec4:	fb0c f202 	mul.w	r2, ip, r2
 8000ec8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ecc:	42a2      	cmp	r2, r4
 8000ece:	d94f      	bls.n	8000f70 <__udivmoddi4+0x1a0>
 8000ed0:	192c      	adds	r4, r5, r4
 8000ed2:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000ed6:	d204      	bcs.n	8000ee2 <__udivmoddi4+0x112>
 8000ed8:	42a2      	cmp	r2, r4
 8000eda:	d902      	bls.n	8000ee2 <__udivmoddi4+0x112>
 8000edc:	f1ac 0302 	sub.w	r3, ip, #2
 8000ee0:	442c      	add	r4, r5
 8000ee2:	1aa4      	subs	r4, r4, r2
 8000ee4:	e7be      	b.n	8000e64 <__udivmoddi4+0x94>
 8000ee6:	f1c7 0c20 	rsb	ip, r7, #32
 8000eea:	fa20 f80c 	lsr.w	r8, r0, ip
 8000eee:	fa00 f307 	lsl.w	r3, r0, r7
 8000ef2:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000ef6:	40bd      	lsls	r5, r7
 8000ef8:	ea4c 0203 	orr.w	r2, ip, r3
 8000efc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f00:	b2ab      	uxth	r3, r5
 8000f02:	fbb8 fcfe 	udiv	ip, r8, lr
 8000f06:	0c11      	lsrs	r1, r2, #16
 8000f08:	fb0e 801c 	mls	r0, lr, ip, r8
 8000f0c:	fb0c f903 	mul.w	r9, ip, r3
 8000f10:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000f14:	4581      	cmp	r9, r0
 8000f16:	fa04 f407 	lsl.w	r4, r4, r7
 8000f1a:	d923      	bls.n	8000f64 <__udivmoddi4+0x194>
 8000f1c:	1828      	adds	r0, r5, r0
 8000f1e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000f22:	d204      	bcs.n	8000f2e <__udivmoddi4+0x15e>
 8000f24:	4581      	cmp	r9, r0
 8000f26:	d902      	bls.n	8000f2e <__udivmoddi4+0x15e>
 8000f28:	f1ac 0102 	sub.w	r1, ip, #2
 8000f2c:	4428      	add	r0, r5
 8000f2e:	eba0 0009 	sub.w	r0, r0, r9
 8000f32:	b292      	uxth	r2, r2
 8000f34:	fbb0 fcfe 	udiv	ip, r0, lr
 8000f38:	fb0e 001c 	mls	r0, lr, ip, r0
 8000f3c:	fb0c f803 	mul.w	r8, ip, r3
 8000f40:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000f44:	4598      	cmp	r8, r3
 8000f46:	d90f      	bls.n	8000f68 <__udivmoddi4+0x198>
 8000f48:	18eb      	adds	r3, r5, r3
 8000f4a:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000f4e:	d204      	bcs.n	8000f5a <__udivmoddi4+0x18a>
 8000f50:	4598      	cmp	r8, r3
 8000f52:	d902      	bls.n	8000f5a <__udivmoddi4+0x18a>
 8000f54:	f1ac 0202 	sub.w	r2, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	eba3 0308 	sub.w	r3, r3, r8
 8000f5e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000f62:	e791      	b.n	8000e88 <__udivmoddi4+0xb8>
 8000f64:	4661      	mov	r1, ip
 8000f66:	e7e2      	b.n	8000f2e <__udivmoddi4+0x15e>
 8000f68:	4662      	mov	r2, ip
 8000f6a:	e7f6      	b.n	8000f5a <__udivmoddi4+0x18a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e7a2      	b.n	8000eb6 <__udivmoddi4+0xe6>
 8000f70:	4663      	mov	r3, ip
 8000f72:	e7b6      	b.n	8000ee2 <__udivmoddi4+0x112>
 8000f74:	4283      	cmp	r3, r0
 8000f76:	d905      	bls.n	8000f84 <__udivmoddi4+0x1b4>
 8000f78:	b10e      	cbz	r6, 8000f7e <__udivmoddi4+0x1ae>
 8000f7a:	e9c6 7000 	strd	r7, r0, [r6]
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4608      	mov	r0, r1
 8000f82:	e776      	b.n	8000e72 <__udivmoddi4+0xa2>
 8000f84:	fab3 f183 	clz	r1, r3
 8000f88:	b981      	cbnz	r1, 8000fac <__udivmoddi4+0x1dc>
 8000f8a:	4283      	cmp	r3, r0
 8000f8c:	d301      	bcc.n	8000f92 <__udivmoddi4+0x1c2>
 8000f8e:	42ba      	cmp	r2, r7
 8000f90:	d80a      	bhi.n	8000fa8 <__udivmoddi4+0x1d8>
 8000f92:	1abc      	subs	r4, r7, r2
 8000f94:	eb60 0303 	sbc.w	r3, r0, r3
 8000f98:	2001      	movs	r0, #1
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	2e00      	cmp	r6, #0
 8000f9e:	d068      	beq.n	8001072 <__udivmoddi4+0x2a2>
 8000fa0:	e9c6 4c00 	strd	r4, ip, [r6]
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	e764      	b.n	8000e72 <__udivmoddi4+0xa2>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e7f7      	b.n	8000f9c <__udivmoddi4+0x1cc>
 8000fac:	f1c1 0c20 	rsb	ip, r1, #32
 8000fb0:	408b      	lsls	r3, r1
 8000fb2:	fa22 f40c 	lsr.w	r4, r2, ip
 8000fb6:	431c      	orrs	r4, r3
 8000fb8:	fa02 f501 	lsl.w	r5, r2, r1
 8000fbc:	fa00 f301 	lsl.w	r3, r0, r1
 8000fc0:	fa27 f20c 	lsr.w	r2, r7, ip
 8000fc4:	fa20 fb0c 	lsr.w	fp, r0, ip
 8000fc8:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	fbbb f8f9 	udiv	r8, fp, r9
 8000fd2:	fa1f fe84 	uxth.w	lr, r4
 8000fd6:	fb09 bb18 	mls	fp, r9, r8, fp
 8000fda:	0c1a      	lsrs	r2, r3, #16
 8000fdc:	fb08 fa0e 	mul.w	sl, r8, lr
 8000fe0:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000fe4:	4592      	cmp	sl, r2
 8000fe6:	fa07 f701 	lsl.w	r7, r7, r1
 8000fea:	d93e      	bls.n	800106a <__udivmoddi4+0x29a>
 8000fec:	18a2      	adds	r2, r4, r2
 8000fee:	f108 30ff 	add.w	r0, r8, #4294967295
 8000ff2:	d204      	bcs.n	8000ffe <__udivmoddi4+0x22e>
 8000ff4:	4592      	cmp	sl, r2
 8000ff6:	d902      	bls.n	8000ffe <__udivmoddi4+0x22e>
 8000ff8:	f1a8 0002 	sub.w	r0, r8, #2
 8000ffc:	4422      	add	r2, r4
 8000ffe:	eba2 020a 	sub.w	r2, r2, sl
 8001002:	b29b      	uxth	r3, r3
 8001004:	fbb2 f8f9 	udiv	r8, r2, r9
 8001008:	fb09 2218 	mls	r2, r9, r8, r2
 800100c:	fb08 fe0e 	mul.w	lr, r8, lr
 8001010:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8001014:	4596      	cmp	lr, r2
 8001016:	d92a      	bls.n	800106e <__udivmoddi4+0x29e>
 8001018:	18a2      	adds	r2, r4, r2
 800101a:	f108 33ff 	add.w	r3, r8, #4294967295
 800101e:	d204      	bcs.n	800102a <__udivmoddi4+0x25a>
 8001020:	4596      	cmp	lr, r2
 8001022:	d902      	bls.n	800102a <__udivmoddi4+0x25a>
 8001024:	f1a8 0302 	sub.w	r3, r8, #2
 8001028:	4422      	add	r2, r4
 800102a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800102e:	fba0 9305 	umull	r9, r3, r0, r5
 8001032:	eba2 020e 	sub.w	r2, r2, lr
 8001036:	429a      	cmp	r2, r3
 8001038:	46ce      	mov	lr, r9
 800103a:	4698      	mov	r8, r3
 800103c:	d302      	bcc.n	8001044 <__udivmoddi4+0x274>
 800103e:	d106      	bne.n	800104e <__udivmoddi4+0x27e>
 8001040:	454f      	cmp	r7, r9
 8001042:	d204      	bcs.n	800104e <__udivmoddi4+0x27e>
 8001044:	ebb9 0e05 	subs.w	lr, r9, r5
 8001048:	eb63 0804 	sbc.w	r8, r3, r4
 800104c:	3801      	subs	r0, #1
 800104e:	b186      	cbz	r6, 8001072 <__udivmoddi4+0x2a2>
 8001050:	ebb7 030e 	subs.w	r3, r7, lr
 8001054:	eb62 0708 	sbc.w	r7, r2, r8
 8001058:	fa07 fc0c 	lsl.w	ip, r7, ip
 800105c:	40cb      	lsrs	r3, r1
 800105e:	ea4c 0303 	orr.w	r3, ip, r3
 8001062:	40cf      	lsrs	r7, r1
 8001064:	e9c6 3700 	strd	r3, r7, [r6]
 8001068:	e79c      	b.n	8000fa4 <__udivmoddi4+0x1d4>
 800106a:	4640      	mov	r0, r8
 800106c:	e7c7      	b.n	8000ffe <__udivmoddi4+0x22e>
 800106e:	4643      	mov	r3, r8
 8001070:	e7db      	b.n	800102a <__udivmoddi4+0x25a>
 8001072:	4631      	mov	r1, r6
 8001074:	e6fd      	b.n	8000e72 <__udivmoddi4+0xa2>
	...

08001078 <main>:
		 h, min, s, ms);
	return buf;
}

void main(void)
{
 8001078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800107c:	b089      	sub	sp, #36	; 0x24
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 800107e:	f8df a110 	ldr.w	sl, [pc, #272]	; 8001190 <main+0x118>
 8001082:	4650      	mov	r0, sl
 8001084:	f00a fe2f 	bl	800bce6 <z_device_is_ready>
	const struct device *dht22 = DEVICE_DT_GET_ONE(aosong_dht);

	if (!device_is_ready(dht22)) {
 8001088:	b178      	cbz	r0, 80010aa <main+0x32>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
 800108a:	f20f 09fc 	addw	r9, pc, #252	; 0xfc
 800108e:	e9d9 8900 	ldrd	r8, r9, [r9]
	snprintf(buf, sizeof(buf), "%u:%02u:%02u.%03u",
 8001092:	f8df b100 	ldr.w	fp, [pc, #256]	; 8001194 <main+0x11c>
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
 8001096:	f8da 4008 	ldr.w	r4, [sl, #8]
 800109a:	2139      	movs	r1, #57	; 0x39
 800109c:	68e3      	ldr	r3, [r4, #12]
 800109e:	4650      	mov	r0, sl
 80010a0:	4798      	blx	r3
	}

	while (true) {
		int rc = sensor_sample_fetch(dht22);

		if (rc != 0) {
 80010a2:	4601      	mov	r1, r0
 80010a4:	b148      	cbz	r0, 80010ba <main+0x42>
			printf("Sensor fetch failed: %d\n", rc);
 80010a6:	483c      	ldr	r0, [pc, #240]	; (8001198 <main+0x120>)
 80010a8:	e002      	b.n	80010b0 <main+0x38>
		printf("Device %s is not ready\n", dht22->name);
 80010aa:	f8da 1000 	ldr.w	r1, [sl]
 80010ae:	483b      	ldr	r0, [pc, #236]	; (800119c <main+0x124>)
		       now_str(),
		       sensor_value_to_double(&temperature),
		       sensor_value_to_double(&humidity));
		k_sleep(K_SECONDS(2));
	}
}
 80010b0:	b009      	add	sp, #36	; 0x24
 80010b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			printf("Sensor fetch failed: %d\n", rc);
 80010b6:	f004 ba59 	b.w	800556c <printf>
	return api->channel_get(dev, chan, val);
 80010ba:	210d      	movs	r1, #13
 80010bc:	6923      	ldr	r3, [r4, #16]
 80010be:	aa04      	add	r2, sp, #16
 80010c0:	4650      	mov	r0, sl
 80010c2:	4798      	blx	r3
		if (rc == 0) {
 80010c4:	4601      	mov	r1, r0
 80010c6:	b930      	cbnz	r0, 80010d6 <main+0x5e>
 80010c8:	2110      	movs	r1, #16
 80010ca:	6923      	ldr	r3, [r4, #16]
 80010cc:	aa06      	add	r2, sp, #24
 80010ce:	4650      	mov	r0, sl
 80010d0:	4798      	blx	r3
		if (rc != 0) {
 80010d2:	4601      	mov	r1, r0
 80010d4:	b128      	cbz	r0, 80010e2 <main+0x6a>
			printf("get failed: %d\n", rc);
 80010d6:	4832      	ldr	r0, [pc, #200]	; (80011a0 <main+0x128>)
 80010d8:	f004 fa48 	bl	800556c <printf>
}
 80010dc:	b009      	add	sp, #36	; 0x24
 80010de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
 80010e2:	f00a ff26 	bl	800bf32 <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
 80010e6:	220a      	movs	r2, #10
 80010e8:	2300      	movs	r3, #0
 80010ea:	f7ff fcf7 	bl	8000adc <__aeabi_uldivmod>
	now /= 60U;
 80010ee:	243c      	movs	r4, #60	; 0x3c
	now /= MSEC_PER_SEC;
 80010f0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80010f4:	fbb0 f1f5 	udiv	r1, r0, r5
	unsigned int ms = now % MSEC_PER_SEC;
 80010f8:	fb05 0011 	mls	r0, r5, r1, r0
	now /= 60U;
 80010fc:	fbb1 f2f4 	udiv	r2, r1, r4
	now /= 60U;
 8001100:	fbb2 f3f4 	udiv	r3, r2, r4
	s = now % 60U;
 8001104:	fb04 1112 	mls	r1, r4, r2, r1
	min = now % 60U;
 8001108:	fb04 2213 	mls	r2, r4, r3, r2
	snprintf(buf, sizeof(buf), "%u:%02u:%02u.%03u",
 800110c:	9002      	str	r0, [sp, #8]
 800110e:	9101      	str	r1, [sp, #4]
 8001110:	9200      	str	r2, [sp, #0]
 8001112:	2110      	movs	r1, #16
 8001114:	465a      	mov	r2, fp
 8001116:	4823      	ldr	r0, [pc, #140]	; (80011a4 <main+0x12c>)
 8001118:	f004 fa4e 	bl	80055b8 <snprintf>
	return (double)val->val1 + (double)val->val2 / 1000000;
 800111c:	9805      	ldr	r0, [sp, #20]
 800111e:	f7ff fa61 	bl	80005e4 <__aeabi_i2d>
 8001122:	4642      	mov	r2, r8
 8001124:	464b      	mov	r3, r9
 8001126:	f7ff fbf1 	bl	800090c <__aeabi_ddiv>
 800112a:	4604      	mov	r4, r0
 800112c:	9804      	ldr	r0, [sp, #16]
 800112e:	460d      	mov	r5, r1
 8001130:	f7ff fa58 	bl	80005e4 <__aeabi_i2d>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4620      	mov	r0, r4
 800113a:	4629      	mov	r1, r5
 800113c:	f7ff f906 	bl	800034c <__adddf3>
 8001140:	4604      	mov	r4, r0
 8001142:	9807      	ldr	r0, [sp, #28]
 8001144:	460d      	mov	r5, r1
 8001146:	f7ff fa4d 	bl	80005e4 <__aeabi_i2d>
 800114a:	4642      	mov	r2, r8
 800114c:	464b      	mov	r3, r9
 800114e:	f7ff fbdd 	bl	800090c <__aeabi_ddiv>
 8001152:	4606      	mov	r6, r0
 8001154:	9806      	ldr	r0, [sp, #24]
 8001156:	460f      	mov	r7, r1
 8001158:	f7ff fa44 	bl	80005e4 <__aeabi_i2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4630      	mov	r0, r6
 8001162:	4639      	mov	r1, r7
 8001164:	f7ff f8f2 	bl	800034c <__adddf3>
		printf("[%s]: %.1f Cel ; %.1f %%RH\n",
 8001168:	4622      	mov	r2, r4
 800116a:	e9cd 0100 	strd	r0, r1, [sp]
 800116e:	462b      	mov	r3, r5
 8001170:	490c      	ldr	r1, [pc, #48]	; (80011a4 <main+0x12c>)
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <main+0x130>)
 8001174:	f004 f9fa 	bl	800556c <printf>
	return z_impl_k_sleep(timeout);
 8001178:	2100      	movs	r1, #0
 800117a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800117e:	f003 fcd5 	bl	8004b2c <z_impl_k_sleep>
	while (true) {
 8001182:	e788      	b.n	8001096 <main+0x1e>
 8001184:	f3af 8000 	nop.w
 8001188:	00000000 	.word	0x00000000
 800118c:	412e8480 	.word	0x412e8480
 8001190:	0800c130 	.word	0x0800c130
 8001194:	0800cb79 	.word	0x0800cb79
 8001198:	0800cb50 	.word	0x0800cb50
 800119c:	0800cb38 	.word	0x0800cb38
 80011a0:	0800cb69 	.word	0x0800cb69
 80011a4:	20000b68 	.word	0x20000b68
 80011a8:	0800cb8b 	.word	0x0800cb8b
 80011ac:	00000000 	.word	0x00000000

080011b0 <dht_measure_signal_duration.isra.0>:
 * @param active Whether current signal is active
 *
 * @return duration in usec of signal being measured,
 *         -1 if duration exceeds DHT_SIGNAL_MAX_WAIT_DURATION
 */
static int8_t dht_measure_signal_duration(const struct device *dev,
 80011b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80011b4:	4606      	mov	r6, r0
 80011b6:	460f      	mov	r7, r1
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 80011b8:	f002 fed6 	bl	8003f68 <sys_clock_cycle_get_32>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 80011bc:	f04f 0901 	mov.w	r9, #1
 80011c0:	4680      	mov	r8, r0
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
 80011c2:	6830      	ldr	r0, [r6, #0]
 80011c4:	7935      	ldrb	r5, [r6, #4]
	const struct gpio_driver_data *const data =
 80011c6:	f8d0 a010 	ldr.w	sl, [r0, #16]
	return api->port_get_raw(port, value);
 80011ca:	6883      	ldr	r3, [r0, #8]
 80011cc:	a901      	add	r1, sp, #4
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	4798      	blx	r3
	if (ret == 0) {
 80011d2:	4604      	mov	r4, r0
 80011d4:	b948      	cbnz	r0, 80011ea <dht_measure_signal_duration.isra.0+0x3a>
		*value ^= data->invert;
 80011d6:	f8da 2000 	ldr.w	r2, [sl]
 80011da:	9b01      	ldr	r3, [sp, #4]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 80011dc:	fa09 f505 	lsl.w	r5, r9, r5
		*value ^= data->invert;
 80011e0:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 80011e2:	422b      	tst	r3, r5
 80011e4:	bf14      	ite	ne
 80011e6:	2401      	movne	r4, #1
 80011e8:	2400      	moveq	r4, #0
 80011ea:	f002 febd 	bl	8003f68 <sys_clock_cycle_get_32>

	do {
		rc = gpio_pin_get_dt(&cfg->dio_gpio);
		elapsed_cycles = k_cycle_get_32() - start_cycles;

		if ((rc < 0)
 80011ee:	2c00      	cmp	r4, #0
		elapsed_cycles = k_cycle_get_32() - start_cycles;
 80011f0:	eba0 0108 	sub.w	r1, r0, r8
		if ((rc < 0)
 80011f4:	db13      	blt.n	800121e <dht_measure_signal_duration.isra.0+0x6e>
		    || (elapsed_cycles > max_wait_cycles)) {
 80011f6:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 80011fa:	d810      	bhi.n	800121e <dht_measure_signal_duration.isra.0+0x6e>
			return -1;
		}
	} while ((bool)rc == active);
 80011fc:	3c00      	subs	r4, #0
 80011fe:	bf18      	it	ne
 8001200:	2401      	movne	r4, #1
 8001202:	42bc      	cmp	r4, r7
 8001204:	d0dd      	beq.n	80011c2 <dht_measure_signal_duration.isra.0+0x12>

	return (uint64_t)elapsed_cycles *
 8001206:	480a      	ldr	r0, [pc, #40]	; (8001230 <dht_measure_signal_duration.isra.0+0x80>)
	       (uint64_t)USEC_PER_SEC /
 8001208:	a307      	add	r3, pc, #28	; (adr r3, 8001228 <dht_measure_signal_duration.isra.0+0x78>)
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	fba1 0100 	umull	r0, r1, r1, r0
 8001212:	f7ff fc63 	bl	8000adc <__aeabi_uldivmod>
 8001216:	b240      	sxtb	r0, r0
	       (uint64_t)sys_clock_hw_cycles_per_sec();
}
 8001218:	b002      	add	sp, #8
 800121a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return -1;
 800121e:	f04f 30ff 	mov.w	r0, #4294967295
 8001222:	e7f9      	b.n	8001218 <dht_measure_signal_duration.isra.0+0x68>
 8001224:	f3af 8000 	nop.w
 8001228:	04c4b400 	.word	0x04c4b400
 800122c:	00000000 	.word	0x00000000
 8001230:	000f4240 	.word	0x000f4240
 8001234:	00000000 	.word	0x00000000

08001238 <_dtoa_r>:
 8001238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800123c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800123e:	b09d      	sub	sp, #116	; 0x74
 8001240:	4616      	mov	r6, r2
 8001242:	461f      	mov	r7, r3
 8001244:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8001248:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800124a:	4682      	mov	sl, r0
 800124c:	b149      	cbz	r1, 8001262 <_dtoa_r+0x2a>
 800124e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001250:	604a      	str	r2, [r1, #4]
 8001252:	2301      	movs	r3, #1
 8001254:	4093      	lsls	r3, r2
 8001256:	608b      	str	r3, [r1, #8]
 8001258:	f008 f87a 	bl	8009350 <_Bfree>
 800125c:	2300      	movs	r3, #0
 800125e:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
 8001262:	f1b7 0800 	subs.w	r8, r7, #0
 8001266:	bfb4      	ite	lt
 8001268:	2301      	movlt	r3, #1
 800126a:	2300      	movge	r3, #0
 800126c:	6023      	str	r3, [r4, #0]
 800126e:	4b76      	ldr	r3, [pc, #472]	; (8001448 <_dtoa_r+0x210>)
 8001270:	bfbc      	itt	lt
 8001272:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
 8001276:	f8cd 800c 	strlt.w	r8, [sp, #12]
 800127a:	ea33 0308 	bics.w	r3, r3, r8
 800127e:	f000 80ac 	beq.w	80013da <_dtoa_r+0x1a2>
 8001282:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8001286:	2200      	movs	r2, #0
 8001288:	4618      	mov	r0, r3
 800128a:	4621      	mov	r1, r4
 800128c:	2300      	movs	r3, #0
 800128e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001292:	f7ff fc93 	bl	8000bbc <__aeabi_dcmpeq>
 8001296:	4605      	mov	r5, r0
 8001298:	b170      	cbz	r0, 80012b8 <_dtoa_r+0x80>
 800129a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800129c:	2301      	movs	r3, #1
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 82f0 	beq.w	8001888 <_dtoa_r+0x650>
 80012a8:	4868      	ldr	r0, [pc, #416]	; (800144c <_dtoa_r+0x214>)
 80012aa:	6018      	str	r0, [r3, #0]
 80012ac:	1e43      	subs	r3, r0, #1
 80012ae:	9306      	str	r3, [sp, #24]
 80012b0:	9806      	ldr	r0, [sp, #24]
 80012b2:	b01d      	add	sp, #116	; 0x74
 80012b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012b8:	ab1a      	add	r3, sp, #104	; 0x68
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	ab1b      	add	r3, sp, #108	; 0x6c
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	4650      	mov	r0, sl
 80012c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80012c6:	f008 fb65 	bl	8009994 <__d2b>
 80012ca:	ea5f 5418 	movs.w	r4, r8, lsr #20
 80012ce:	4683      	mov	fp, r0
 80012d0:	f040 8099 	bne.w	8001406 <_dtoa_r+0x1ce>
 80012d4:	e9dd 541a 	ldrd	r5, r4, [sp, #104]	; 0x68
 80012d8:	442c      	add	r4, r5
 80012da:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80012de:	2b20      	cmp	r3, #32
 80012e0:	f340 83b8 	ble.w	8001a54 <_dtoa_r+0x81c>
 80012e4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80012e8:	f204 4012 	addw	r0, r4, #1042	; 0x412
 80012ec:	fa08 f803 	lsl.w	r8, r8, r3
 80012f0:	fa26 f000 	lsr.w	r0, r6, r0
 80012f4:	ea48 0000 	orr.w	r0, r8, r0
 80012f8:	f7ff f964 	bl	80005c4 <__aeabi_ui2d>
 80012fc:	2301      	movs	r3, #1
 80012fe:	3c01      	subs	r4, #1
 8001300:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8001304:	930f      	str	r3, [sp, #60]	; 0x3c
 8001306:	4b52      	ldr	r3, [pc, #328]	; (8001450 <_dtoa_r+0x218>)
 8001308:	2200      	movs	r2, #0
 800130a:	f7ff f81d 	bl	8000348 <__aeabi_dsub>
 800130e:	a348      	add	r3, pc, #288	; (adr r3, 8001430 <_dtoa_r+0x1f8>)
 8001310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001314:	f7ff f9d0 	bl	80006b8 <__aeabi_dmul>
 8001318:	a347      	add	r3, pc, #284	; (adr r3, 8001438 <_dtoa_r+0x200>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff f815 	bl	800034c <__adddf3>
 8001322:	4606      	mov	r6, r0
 8001324:	4620      	mov	r0, r4
 8001326:	460f      	mov	r7, r1
 8001328:	f7ff f95c 	bl	80005e4 <__aeabi_i2d>
 800132c:	a344      	add	r3, pc, #272	; (adr r3, 8001440 <_dtoa_r+0x208>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff f9c1 	bl	80006b8 <__aeabi_dmul>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4630      	mov	r0, r6
 800133c:	4639      	mov	r1, r7
 800133e:	f7ff f805 	bl	800034c <__adddf3>
 8001342:	4606      	mov	r6, r0
 8001344:	460f      	mov	r7, r1
 8001346:	f7ff fd1b 	bl	8000d80 <__aeabi_d2iz>
 800134a:	2200      	movs	r2, #0
 800134c:	4681      	mov	r9, r0
 800134e:	2300      	movs	r3, #0
 8001350:	4630      	mov	r0, r6
 8001352:	4639      	mov	r1, r7
 8001354:	f7ff fc3c 	bl	8000bd0 <__aeabi_dcmplt>
 8001358:	2800      	cmp	r0, #0
 800135a:	f040 8288 	bne.w	800186e <_dtoa_r+0x636>
 800135e:	1b2c      	subs	r4, r5, r4
 8001360:	1e63      	subs	r3, r4, #1
 8001362:	f1b9 0f16 	cmp.w	r9, #22
 8001366:	9304      	str	r3, [sp, #16]
 8001368:	f200 8275 	bhi.w	8001856 <_dtoa_r+0x61e>
 800136c:	4b39      	ldr	r3, [pc, #228]	; (8001454 <_dtoa_r+0x21c>)
 800136e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800137a:	f7ff fc29 	bl	8000bd0 <__aeabi_dcmplt>
 800137e:	2800      	cmp	r0, #0
 8001380:	d06e      	beq.n	8001460 <_dtoa_r+0x228>
 8001382:	2300      	movs	r3, #0
 8001384:	930e      	str	r3, [sp, #56]	; 0x38
 8001386:	1e63      	subs	r3, r4, #1
 8001388:	2b00      	cmp	r3, #0
 800138a:	f109 39ff 	add.w	r9, r9, #4294967295
 800138e:	f2c0 8268 	blt.w	8001862 <_dtoa_r+0x62a>
 8001392:	2300      	movs	r3, #0
 8001394:	930a      	str	r3, [sp, #40]	; 0x28
 8001396:	f1b9 0f00 	cmp.w	r9, #0
 800139a:	da67      	bge.n	800146c <_dtoa_r+0x234>
 800139c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800139e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 80013a2:	eba3 0309 	sub.w	r3, r3, r9
 80013a6:	930a      	str	r3, [sp, #40]	; 0x28
 80013a8:	f1c9 0300 	rsb	r3, r9, #0
 80013ac:	930d      	str	r3, [sp, #52]	; 0x34
 80013ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80013b0:	2b09      	cmp	r3, #9
 80013b2:	f04f 0900 	mov.w	r9, #0
 80013b6:	d863      	bhi.n	8001480 <_dtoa_r+0x248>
 80013b8:	2b05      	cmp	r3, #5
 80013ba:	f340 8349 	ble.w	8001a50 <_dtoa_r+0x818>
 80013be:	3b04      	subs	r3, #4
 80013c0:	9326      	str	r3, [sp, #152]	; 0x98
 80013c2:	2400      	movs	r4, #0
 80013c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80013c6:	3b02      	subs	r3, #2
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	f200 864e 	bhi.w	800206a <_dtoa_r+0xe32>
 80013ce:	e8df f013 	tbh	[pc, r3, lsl #1]
 80013d2:	0452      	.short	0x0452
 80013d4:	0446044f 	.word	0x0446044f
 80013d8:	0427      	.short	0x0427
 80013da:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80013dc:	f242 730f 	movw	r3, #9999	; 0x270f
 80013e0:	f3c8 0813 	ubfx	r8, r8, #0, #20
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	ea58 0306 	orrs.w	r3, r8, r6
 80013ea:	d11a      	bne.n	8001422 <_dtoa_r+0x1ea>
 80013ec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 8652 	beq.w	8002098 <_dtoa_r+0xe60>
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <_dtoa_r+0x220>)
 80013f6:	9306      	str	r3, [sp, #24]
 80013f8:	3308      	adds	r3, #8
 80013fa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80013fc:	9806      	ldr	r0, [sp, #24]
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	b01d      	add	sp, #116	; 0x74
 8001402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001406:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800140a:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800140e:	4608      	mov	r0, r1
 8001410:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8001414:	950f      	str	r5, [sp, #60]	; 0x3c
 8001416:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800141a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800141c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8001420:	e771      	b.n	8001306 <_dtoa_r+0xce>
 8001422:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001424:	2b00      	cmp	r3, #0
 8001426:	f040 83ea 	bne.w	8001bfe <_dtoa_r+0x9c6>
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <_dtoa_r+0x224>)
 800142c:	9306      	str	r3, [sp, #24]
 800142e:	e73f      	b.n	80012b0 <_dtoa_r+0x78>
 8001430:	636f4361 	.word	0x636f4361
 8001434:	3fd287a7 	.word	0x3fd287a7
 8001438:	8b60c8b3 	.word	0x8b60c8b3
 800143c:	3fc68a28 	.word	0x3fc68a28
 8001440:	509f79fb 	.word	0x509f79fb
 8001444:	3fd34413 	.word	0x3fd34413
 8001448:	7ff00000 	.word	0x7ff00000
 800144c:	0800c961 	.word	0x0800c961
 8001450:	3ff80000 	.word	0x3ff80000
 8001454:	0800c4e0 	.word	0x0800c4e0
 8001458:	0800c9a8 	.word	0x0800c9a8
 800145c:	0800c9a4 	.word	0x0800c9a4
 8001460:	1e63      	subs	r3, r4, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	f2c0 8475 	blt.w	8001d52 <_dtoa_r+0xb1a>
 8001468:	900e      	str	r0, [sp, #56]	; 0x38
 800146a:	900a      	str	r0, [sp, #40]	; 0x28
 800146c:	9b04      	ldr	r3, [sp, #16]
 800146e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8001472:	444b      	add	r3, r9
 8001474:	9304      	str	r3, [sp, #16]
 8001476:	2300      	movs	r3, #0
 8001478:	930d      	str	r3, [sp, #52]	; 0x34
 800147a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800147c:	2b09      	cmp	r3, #9
 800147e:	d99b      	bls.n	80013b8 <_dtoa_r+0x180>
 8001480:	2300      	movs	r3, #0
 8001482:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
 8001486:	2401      	movs	r4, #1
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
 800148c:	940c      	str	r4, [sp, #48]	; 0x30
 800148e:	9307      	str	r3, [sp, #28]
 8001490:	9b07      	ldr	r3, [sp, #28]
 8001492:	9316      	str	r3, [sp, #88]	; 0x58
 8001494:	2100      	movs	r1, #0
 8001496:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 800149a:	4650      	mov	r0, sl
 800149c:	f007 ff32 	bl	8009304 <_Balloc>
 80014a0:	9006      	str	r0, [sp, #24]
 80014a2:	2800      	cmp	r0, #0
 80014a4:	f000 85ea 	beq.w	800207c <_dtoa_r+0xe44>
 80014a8:	9b06      	ldr	r3, [sp, #24]
 80014aa:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
 80014ae:	9b07      	ldr	r3, [sp, #28]
 80014b0:	2b0e      	cmp	r3, #14
 80014b2:	f200 811d 	bhi.w	80016f0 <_dtoa_r+0x4b8>
 80014b6:	2c00      	cmp	r4, #0
 80014b8:	f000 811a 	beq.w	80016f0 <_dtoa_r+0x4b8>
 80014bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80014be:	2900      	cmp	r1, #0
 80014c0:	f340 8449 	ble.w	8001d56 <_dtoa_r+0xb1e>
 80014c4:	4bb4      	ldr	r3, [pc, #720]	; (8001798 <_dtoa_r+0x560>)
 80014c6:	f001 020f 	and.w	r2, r1, #15
 80014ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80014ce:	460a      	mov	r2, r1
 80014d0:	05d2      	lsls	r2, r2, #23
 80014d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80014d6:	ea4f 1621 	mov.w	r6, r1, asr #4
 80014da:	f140 8402 	bpl.w	8001ce2 <_dtoa_r+0xaaa>
 80014de:	4baf      	ldr	r3, [pc, #700]	; (800179c <_dtoa_r+0x564>)
 80014e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80014e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80014e8:	f7ff fa10 	bl	800090c <__aeabi_ddiv>
 80014ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80014f0:	f006 060f 	and.w	r6, r6, #15
 80014f4:	f04f 0803 	mov.w	r8, #3
 80014f8:	b186      	cbz	r6, 800151c <_dtoa_r+0x2e4>
 80014fa:	4fa8      	ldr	r7, [pc, #672]	; (800179c <_dtoa_r+0x564>)
 80014fc:	07f3      	lsls	r3, r6, #31
 80014fe:	d509      	bpl.n	8001514 <_dtoa_r+0x2dc>
 8001500:	4620      	mov	r0, r4
 8001502:	4629      	mov	r1, r5
 8001504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001508:	f7ff f8d6 	bl	80006b8 <__aeabi_dmul>
 800150c:	f108 0801 	add.w	r8, r8, #1
 8001510:	4604      	mov	r4, r0
 8001512:	460d      	mov	r5, r1
 8001514:	1076      	asrs	r6, r6, #1
 8001516:	f107 0708 	add.w	r7, r7, #8
 800151a:	d1ef      	bne.n	80014fc <_dtoa_r+0x2c4>
 800151c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001520:	4622      	mov	r2, r4
 8001522:	462b      	mov	r3, r5
 8001524:	f7ff f9f2 	bl	800090c <__aeabi_ddiv>
 8001528:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800152c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800152e:	b153      	cbz	r3, 8001546 <_dtoa_r+0x30e>
 8001530:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8001534:	4b9a      	ldr	r3, [pc, #616]	; (80017a0 <_dtoa_r+0x568>)
 8001536:	2200      	movs	r2, #0
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7ff fb48 	bl	8000bd0 <__aeabi_dcmplt>
 8001540:	2800      	cmp	r0, #0
 8001542:	f040 8516 	bne.w	8001f72 <_dtoa_r+0xd3a>
 8001546:	4640      	mov	r0, r8
 8001548:	f7ff f84c 	bl	80005e4 <__aeabi_i2d>
 800154c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8001550:	f7ff f8b2 	bl	80006b8 <__aeabi_dmul>
 8001554:	4b93      	ldr	r3, [pc, #588]	; (80017a4 <_dtoa_r+0x56c>)
 8001556:	2200      	movs	r2, #0
 8001558:	f7fe fef8 	bl	800034c <__adddf3>
 800155c:	9b07      	ldr	r3, [sp, #28]
 800155e:	4606      	mov	r6, r0
 8001560:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 80a9 	beq.w	80016bc <_dtoa_r+0x484>
 800156a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800156c:	9317      	str	r3, [sp, #92]	; 0x5c
 800156e:	9b07      	ldr	r3, [sp, #28]
 8001570:	9310      	str	r3, [sp, #64]	; 0x40
 8001572:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8001576:	9b06      	ldr	r3, [sp, #24]
 8001578:	4629      	mov	r1, r5
 800157a:	4620      	mov	r0, r4
 800157c:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
 8001580:	1c5f      	adds	r7, r3, #1
 8001582:	f7ff fbfd 	bl	8000d80 <__aeabi_d2iz>
 8001586:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001588:	4b83      	ldr	r3, [pc, #524]	; (8001798 <_dtoa_r+0x560>)
 800158a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800158e:	e953 1202 	ldrd	r1, r2, [r3, #-8]
 8001592:	f100 0630 	add.w	r6, r0, #48	; 0x30
 8001596:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
 800159a:	f7ff f823 	bl	80005e4 <__aeabi_i2d>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4620      	mov	r0, r4
 80015a4:	4629      	mov	r1, r5
 80015a6:	f7fe fecf 	bl	8000348 <__aeabi_dsub>
 80015aa:	460d      	mov	r5, r1
 80015ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80015ae:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80015b2:	b2f6      	uxtb	r6, r6
 80015b4:	4604      	mov	r4, r0
 80015b6:	2900      	cmp	r1, #0
 80015b8:	f000 8488 	beq.w	8001ecc <_dtoa_r+0xc94>
 80015bc:	497a      	ldr	r1, [pc, #488]	; (80017a8 <_dtoa_r+0x570>)
 80015be:	2000      	movs	r0, #0
 80015c0:	f7ff f9a4 	bl	800090c <__aeabi_ddiv>
 80015c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80015c8:	f7fe febe 	bl	8000348 <__aeabi_dsub>
 80015cc:	f8dd c018 	ldr.w	ip, [sp, #24]
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80015d8:	f88c 6000 	strb.w	r6, [ip]
 80015dc:	4622      	mov	r2, r4
 80015de:	462b      	mov	r3, r5
 80015e0:	f7ff fb14 	bl	8000c0c <__aeabi_dcmpgt>
 80015e4:	2800      	cmp	r0, #0
 80015e6:	f040 84bc 	bne.w	8001f62 <_dtoa_r+0xd2a>
 80015ea:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
 80015ee:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
 80015f2:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
 80015f6:	f04f 0800 	mov.w	r8, #0
 80015fa:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 80015fe:	46b9      	mov	r9, r7
 8001600:	e02c      	b.n	800165c <_dtoa_r+0x424>
 8001602:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001604:	f108 0801 	add.w	r8, r8, #1
 8001608:	4598      	cmp	r8, r3
 800160a:	f280 8507 	bge.w	800201c <_dtoa_r+0xde4>
 800160e:	4b67      	ldr	r3, [pc, #412]	; (80017ac <_dtoa_r+0x574>)
 8001610:	4650      	mov	r0, sl
 8001612:	4659      	mov	r1, fp
 8001614:	2200      	movs	r2, #0
 8001616:	f7ff f84f 	bl	80006b8 <__aeabi_dmul>
 800161a:	4b64      	ldr	r3, [pc, #400]	; (80017ac <_dtoa_r+0x574>)
 800161c:	2200      	movs	r2, #0
 800161e:	4682      	mov	sl, r0
 8001620:	468b      	mov	fp, r1
 8001622:	4620      	mov	r0, r4
 8001624:	4629      	mov	r1, r5
 8001626:	f7ff f847 	bl	80006b8 <__aeabi_dmul>
 800162a:	460f      	mov	r7, r1
 800162c:	4606      	mov	r6, r0
 800162e:	f7ff fba7 	bl	8000d80 <__aeabi_d2iz>
 8001632:	4605      	mov	r5, r0
 8001634:	f7fe ffd6 	bl	80005e4 <__aeabi_i2d>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4630      	mov	r0, r6
 800163e:	4639      	mov	r1, r7
 8001640:	f7fe fe82 	bl	8000348 <__aeabi_dsub>
 8001644:	3530      	adds	r5, #48	; 0x30
 8001646:	f809 5b01 	strb.w	r5, [r9], #1
 800164a:	4652      	mov	r2, sl
 800164c:	465b      	mov	r3, fp
 800164e:	4604      	mov	r4, r0
 8001650:	460d      	mov	r5, r1
 8001652:	f7ff fabd 	bl	8000bd0 <__aeabi_dcmplt>
 8001656:	2800      	cmp	r0, #0
 8001658:	f040 84d8 	bne.w	800200c <_dtoa_r+0xdd4>
 800165c:	4622      	mov	r2, r4
 800165e:	462b      	mov	r3, r5
 8001660:	494f      	ldr	r1, [pc, #316]	; (80017a0 <_dtoa_r+0x568>)
 8001662:	2000      	movs	r0, #0
 8001664:	f7fe fe70 	bl	8000348 <__aeabi_dsub>
 8001668:	4652      	mov	r2, sl
 800166a:	465b      	mov	r3, fp
 800166c:	f7ff fab0 	bl	8000bd0 <__aeabi_dcmplt>
 8001670:	2800      	cmp	r0, #0
 8001672:	d0c6      	beq.n	8001602 <_dtoa_r+0x3ca>
 8001674:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8001676:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800167a:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 800167e:	9a06      	ldr	r2, [sp, #24]
 8001680:	464e      	mov	r6, r9
 8001682:	3401      	adds	r4, #1
 8001684:	e002      	b.n	800168c <_dtoa_r+0x454>
 8001686:	4296      	cmp	r6, r2
 8001688:	f000 84a2 	beq.w	8001fd0 <_dtoa_r+0xd98>
 800168c:	4637      	mov	r7, r6
 800168e:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
 8001692:	2b39      	cmp	r3, #57	; 0x39
 8001694:	d0f7      	beq.n	8001686 <_dtoa_r+0x44e>
 8001696:	3301      	adds	r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	7033      	strb	r3, [r6, #0]
 800169c:	9402      	str	r4, [sp, #8]
 800169e:	e1bc      	b.n	8001a1a <_dtoa_r+0x7e2>
 80016a0:	4640      	mov	r0, r8
 80016a2:	f7fe ff9f 	bl	80005e4 <__aeabi_i2d>
 80016a6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80016aa:	f7ff f805 	bl	80006b8 <__aeabi_dmul>
 80016ae:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <_dtoa_r+0x56c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	f7fe fe4b 	bl	800034c <__adddf3>
 80016b6:	4606      	mov	r6, r0
 80016b8:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80016bc:	4b3c      	ldr	r3, [pc, #240]	; (80017b0 <_dtoa_r+0x578>)
 80016be:	2200      	movs	r2, #0
 80016c0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80016c4:	f7fe fe40 	bl	8000348 <__aeabi_dsub>
 80016c8:	4632      	mov	r2, r6
 80016ca:	463b      	mov	r3, r7
 80016cc:	4604      	mov	r4, r0
 80016ce:	460d      	mov	r5, r1
 80016d0:	f7ff fa9c 	bl	8000c0c <__aeabi_dcmpgt>
 80016d4:	4680      	mov	r8, r0
 80016d6:	2800      	cmp	r0, #0
 80016d8:	f040 8489 	bne.w	8001fee <_dtoa_r+0xdb6>
 80016dc:	4632      	mov	r2, r6
 80016de:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80016e2:	4620      	mov	r0, r4
 80016e4:	4629      	mov	r1, r5
 80016e6:	f7ff fa73 	bl	8000bd0 <__aeabi_dcmplt>
 80016ea:	2800      	cmp	r0, #0
 80016ec:	f040 8328 	bne.w	8001d40 <_dtoa_r+0xb08>
 80016f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f2c0 8090 	blt.w	8001818 <_dtoa_r+0x5e0>
 80016f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80016fa:	2a0e      	cmp	r2, #14
 80016fc:	f300 808c 	bgt.w	8001818 <_dtoa_r+0x5e0>
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <_dtoa_r+0x560>)
 8001702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001706:	e9d3 8900 	ldrd	r8, r9, [r3]
 800170a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800170c:	2b00      	cmp	r3, #0
 800170e:	da1b      	bge.n	8001748 <_dtoa_r+0x510>
 8001710:	9b07      	ldr	r3, [sp, #28]
 8001712:	2b00      	cmp	r3, #0
 8001714:	dc18      	bgt.n	8001748 <_dtoa_r+0x510>
 8001716:	f040 8311 	bne.w	8001d3c <_dtoa_r+0xb04>
 800171a:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <_dtoa_r+0x578>)
 800171c:	4640      	mov	r0, r8
 800171e:	2200      	movs	r2, #0
 8001720:	4649      	mov	r1, r9
 8001722:	f7fe ffc9 	bl	80006b8 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800172e:	f7ff fa59 	bl	8000be4 <__aeabi_dcmple>
 8001732:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8001736:	4644      	mov	r4, r8
 8001738:	2800      	cmp	r0, #0
 800173a:	f000 82b3 	beq.w	8001ca4 <_dtoa_r+0xa6c>
 800173e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001740:	9f06      	ldr	r7, [sp, #24]
 8001742:	ea6f 0903 	mvn.w	r9, r3
 8001746:	e2b4      	b.n	8001cb2 <_dtoa_r+0xa7a>
 8001748:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 800174c:	4642      	mov	r2, r8
 800174e:	464b      	mov	r3, r9
 8001750:	4620      	mov	r0, r4
 8001752:	4629      	mov	r1, r5
 8001754:	f7ff f8da 	bl	800090c <__aeabi_ddiv>
 8001758:	f7ff fb12 	bl	8000d80 <__aeabi_d2iz>
 800175c:	4607      	mov	r7, r0
 800175e:	f7fe ff41 	bl	80005e4 <__aeabi_i2d>
 8001762:	4642      	mov	r2, r8
 8001764:	464b      	mov	r3, r9
 8001766:	f7fe ffa7 	bl	80006b8 <__aeabi_dmul>
 800176a:	9e06      	ldr	r6, [sp, #24]
 800176c:	460b      	mov	r3, r1
 800176e:	4602      	mov	r2, r0
 8001770:	4629      	mov	r1, r5
 8001772:	4620      	mov	r0, r4
 8001774:	f7fe fde8 	bl	8000348 <__aeabi_dsub>
 8001778:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800177c:	f806 3b01 	strb.w	r3, [r6], #1
 8001780:	9b07      	ldr	r3, [sp, #28]
 8001782:	2b01      	cmp	r3, #1
 8001784:	f000 834e 	beq.w	8001e24 <_dtoa_r+0xbec>
 8001788:	f8cd a010 	str.w	sl, [sp, #16]
 800178c:	2701      	movs	r7, #1
 800178e:	f8cd b008 	str.w	fp, [sp, #8]
 8001792:	469a      	mov	sl, r3
 8001794:	e02b      	b.n	80017ee <_dtoa_r+0x5b6>
 8001796:	bf00      	nop
 8001798:	0800c4e0 	.word	0x0800c4e0
 800179c:	0800c4b8 	.word	0x0800c4b8
 80017a0:	3ff00000 	.word	0x3ff00000
 80017a4:	401c0000 	.word	0x401c0000
 80017a8:	3fe00000 	.word	0x3fe00000
 80017ac:	40240000 	.word	0x40240000
 80017b0:	40140000 	.word	0x40140000
 80017b4:	4642      	mov	r2, r8
 80017b6:	464b      	mov	r3, r9
 80017b8:	4620      	mov	r0, r4
 80017ba:	4629      	mov	r1, r5
 80017bc:	f7ff f8a6 	bl	800090c <__aeabi_ddiv>
 80017c0:	f7ff fade 	bl	8000d80 <__aeabi_d2iz>
 80017c4:	4683      	mov	fp, r0
 80017c6:	f7fe ff0d 	bl	80005e4 <__aeabi_i2d>
 80017ca:	4642      	mov	r2, r8
 80017cc:	464b      	mov	r3, r9
 80017ce:	f7fe ff73 	bl	80006b8 <__aeabi_dmul>
 80017d2:	3701      	adds	r7, #1
 80017d4:	460b      	mov	r3, r1
 80017d6:	4602      	mov	r2, r0
 80017d8:	4629      	mov	r1, r5
 80017da:	4620      	mov	r0, r4
 80017dc:	f7fe fdb4 	bl	8000348 <__aeabi_dsub>
 80017e0:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 80017e4:	4557      	cmp	r7, sl
 80017e6:	f806 3b01 	strb.w	r3, [r6], #1
 80017ea:	f000 8316 	beq.w	8001e1a <_dtoa_r+0xbe2>
 80017ee:	4ba6      	ldr	r3, [pc, #664]	; (8001a88 <_dtoa_r+0x850>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	f7fe ff61 	bl	80006b8 <__aeabi_dmul>
 80017f6:	2200      	movs	r2, #0
 80017f8:	2300      	movs	r3, #0
 80017fa:	4604      	mov	r4, r0
 80017fc:	460d      	mov	r5, r1
 80017fe:	f7ff f9dd 	bl	8000bbc <__aeabi_dcmpeq>
 8001802:	2800      	cmp	r0, #0
 8001804:	d0d6      	beq.n	80017b4 <_dtoa_r+0x57c>
 8001806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001808:	f8dd b008 	ldr.w	fp, [sp, #8]
 800180c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8001810:	3301      	adds	r3, #1
 8001812:	9302      	str	r3, [sp, #8]
 8001814:	4637      	mov	r7, r6
 8001816:	e100      	b.n	8001a1a <_dtoa_r+0x7e2>
 8001818:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800181a:	2a00      	cmp	r2, #0
 800181c:	d03a      	beq.n	8001894 <_dtoa_r+0x65c>
 800181e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8001820:	2a01      	cmp	r2, #1
 8001822:	f340 827c 	ble.w	8001d1e <_dtoa_r+0xae6>
 8001826:	9b07      	ldr	r3, [sp, #28]
 8001828:	1e5e      	subs	r6, r3, #1
 800182a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800182c:	42b3      	cmp	r3, r6
 800182e:	f2c0 8252 	blt.w	8001cd6 <_dtoa_r+0xa9e>
 8001832:	1b9e      	subs	r6, r3, r6
 8001834:	9b07      	ldr	r3, [sp, #28]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f2c0 832f 	blt.w	8001e9a <_dtoa_r+0xc62>
 800183c:	9a04      	ldr	r2, [sp, #16]
 800183e:	441a      	add	r2, r3
 8001840:	9204      	str	r2, [sp, #16]
 8001842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001844:	4615      	mov	r5, r2
 8001846:	441a      	add	r2, r3
 8001848:	920a      	str	r2, [sp, #40]	; 0x28
 800184a:	2101      	movs	r1, #1
 800184c:	4650      	mov	r0, sl
 800184e:	f007 fe27 	bl	80094a0 <__i2b>
 8001852:	4604      	mov	r4, r0
 8001854:	e021      	b.n	800189a <_dtoa_r+0x662>
 8001856:	2301      	movs	r3, #1
 8001858:	930e      	str	r3, [sp, #56]	; 0x38
 800185a:	1e63      	subs	r3, r4, #1
 800185c:	2b00      	cmp	r3, #0
 800185e:	f6bf ad98 	bge.w	8001392 <_dtoa_r+0x15a>
 8001862:	f1c4 0301 	rsb	r3, r4, #1
 8001866:	930a      	str	r3, [sp, #40]	; 0x28
 8001868:	2300      	movs	r3, #0
 800186a:	9304      	str	r3, [sp, #16]
 800186c:	e593      	b.n	8001396 <_dtoa_r+0x15e>
 800186e:	4648      	mov	r0, r9
 8001870:	f7fe feb8 	bl	80005e4 <__aeabi_i2d>
 8001874:	4632      	mov	r2, r6
 8001876:	463b      	mov	r3, r7
 8001878:	f7ff f9a0 	bl	8000bbc <__aeabi_dcmpeq>
 800187c:	2800      	cmp	r0, #0
 800187e:	f47f ad6e 	bne.w	800135e <_dtoa_r+0x126>
 8001882:	f109 39ff 	add.w	r9, r9, #4294967295
 8001886:	e56a      	b.n	800135e <_dtoa_r+0x126>
 8001888:	4b80      	ldr	r3, [pc, #512]	; (8001a8c <_dtoa_r+0x854>)
 800188a:	9306      	str	r3, [sp, #24]
 800188c:	9806      	ldr	r0, [sp, #24]
 800188e:	b01d      	add	sp, #116	; 0x74
 8001890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001894:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8001896:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001898:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800189a:	2d00      	cmp	r5, #0
 800189c:	dd0c      	ble.n	80018b8 <_dtoa_r+0x680>
 800189e:	9904      	ldr	r1, [sp, #16]
 80018a0:	2900      	cmp	r1, #0
 80018a2:	460b      	mov	r3, r1
 80018a4:	dd08      	ble.n	80018b8 <_dtoa_r+0x680>
 80018a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80018a8:	42a9      	cmp	r1, r5
 80018aa:	bfa8      	it	ge
 80018ac:	462b      	movge	r3, r5
 80018ae:	1ad2      	subs	r2, r2, r3
 80018b0:	1aed      	subs	r5, r5, r3
 80018b2:	1acb      	subs	r3, r1, r3
 80018b4:	920a      	str	r2, [sp, #40]	; 0x28
 80018b6:	9304      	str	r3, [sp, #16]
 80018b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80018ba:	b1cb      	cbz	r3, 80018f0 <_dtoa_r+0x6b8>
 80018bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 8240 	beq.w	8001d44 <_dtoa_r+0xb0c>
 80018c4:	2e00      	cmp	r6, #0
 80018c6:	dd0f      	ble.n	80018e8 <_dtoa_r+0x6b0>
 80018c8:	4621      	mov	r1, r4
 80018ca:	4632      	mov	r2, r6
 80018cc:	4650      	mov	r0, sl
 80018ce:	f007 fec3 	bl	8009658 <__pow5mult>
 80018d2:	465a      	mov	r2, fp
 80018d4:	4601      	mov	r1, r0
 80018d6:	4604      	mov	r4, r0
 80018d8:	4650      	mov	r0, sl
 80018da:	f007 fe0f 	bl	80094fc <__multiply>
 80018de:	4659      	mov	r1, fp
 80018e0:	4683      	mov	fp, r0
 80018e2:	4650      	mov	r0, sl
 80018e4:	f007 fd34 	bl	8009350 <_Bfree>
 80018e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80018ea:	1b9a      	subs	r2, r3, r6
 80018ec:	f040 82cf 	bne.w	8001e8e <_dtoa_r+0xc56>
 80018f0:	2101      	movs	r1, #1
 80018f2:	4650      	mov	r0, sl
 80018f4:	f007 fdd4 	bl	80094a0 <__i2b>
 80018f8:	f1b9 0f00 	cmp.w	r9, #0
 80018fc:	4680      	mov	r8, r0
 80018fe:	f300 80ae 	bgt.w	8001a5e <_dtoa_r+0x826>
 8001902:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001904:	2b01      	cmp	r3, #1
 8001906:	f340 817f 	ble.w	8001c08 <_dtoa_r+0x9d0>
 800190a:	2600      	movs	r6, #0
 800190c:	2001      	movs	r0, #1
 800190e:	f1b9 0f00 	cmp.w	r9, #0
 8001912:	f040 80af 	bne.w	8001a74 <_dtoa_r+0x83c>
 8001916:	9a04      	ldr	r2, [sp, #16]
 8001918:	4410      	add	r0, r2
 800191a:	f010 001f 	ands.w	r0, r0, #31
 800191e:	f000 808e 	beq.w	8001a3e <_dtoa_r+0x806>
 8001922:	f1c0 0320 	rsb	r3, r0, #32
 8001926:	2b04      	cmp	r3, #4
 8001928:	f340 83ba 	ble.w	80020a0 <_dtoa_r+0xe68>
 800192c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800192e:	f1c0 001c 	rsb	r0, r0, #28
 8001932:	4403      	add	r3, r0
 8001934:	4402      	add	r2, r0
 8001936:	930a      	str	r3, [sp, #40]	; 0x28
 8001938:	4405      	add	r5, r0
 800193a:	9204      	str	r2, [sp, #16]
 800193c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800193e:	2b00      	cmp	r3, #0
 8001940:	dd05      	ble.n	800194e <_dtoa_r+0x716>
 8001942:	4659      	mov	r1, fp
 8001944:	461a      	mov	r2, r3
 8001946:	4650      	mov	r0, sl
 8001948:	f007 fee6 	bl	8009718 <__lshift>
 800194c:	4683      	mov	fp, r0
 800194e:	9b04      	ldr	r3, [sp, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	dd05      	ble.n	8001960 <_dtoa_r+0x728>
 8001954:	4641      	mov	r1, r8
 8001956:	461a      	mov	r2, r3
 8001958:	4650      	mov	r0, sl
 800195a:	f007 fedd 	bl	8009718 <__lshift>
 800195e:	4680      	mov	r8, r0
 8001960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 812f 	bne.w	8001bc6 <_dtoa_r+0x98e>
 8001968:	9b07      	ldr	r3, [sp, #28]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f340 8116 	ble.w	8001b9c <_dtoa_r+0x964>
 8001970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 8099 	bne.w	8001aaa <_dtoa_r+0x872>
 8001978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800197a:	3301      	adds	r3, #1
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	9e06      	ldr	r6, [sp, #24]
 8001980:	9f07      	ldr	r7, [sp, #28]
 8001982:	2501      	movs	r5, #1
 8001984:	e007      	b.n	8001996 <_dtoa_r+0x75e>
 8001986:	4659      	mov	r1, fp
 8001988:	2300      	movs	r3, #0
 800198a:	220a      	movs	r2, #10
 800198c:	4650      	mov	r0, sl
 800198e:	f007 fce9 	bl	8009364 <__multadd>
 8001992:	3501      	adds	r5, #1
 8001994:	4683      	mov	fp, r0
 8001996:	4641      	mov	r1, r8
 8001998:	4658      	mov	r0, fp
 800199a:	f007 f905 	bl	8008ba8 <quorem>
 800199e:	42bd      	cmp	r5, r7
 80019a0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80019a4:	f806 3b01 	strb.w	r3, [r6], #1
 80019a8:	dbed      	blt.n	8001986 <_dtoa_r+0x74e>
 80019aa:	9a07      	ldr	r2, [sp, #28]
 80019ac:	2a00      	cmp	r2, #0
 80019ae:	bfc8      	it	gt
 80019b0:	4615      	movgt	r5, r2
 80019b2:	9a06      	ldr	r2, [sp, #24]
 80019b4:	bfd8      	it	le
 80019b6:	2501      	movle	r5, #1
 80019b8:	4415      	add	r5, r2
 80019ba:	2200      	movs	r2, #0
 80019bc:	9204      	str	r2, [sp, #16]
 80019be:	4659      	mov	r1, fp
 80019c0:	2201      	movs	r2, #1
 80019c2:	4650      	mov	r0, sl
 80019c4:	9307      	str	r3, [sp, #28]
 80019c6:	f007 fea7 	bl	8009718 <__lshift>
 80019ca:	4641      	mov	r1, r8
 80019cc:	4683      	mov	fp, r0
 80019ce:	f007 ff1b 	bl	8009808 <__mcmp>
 80019d2:	2800      	cmp	r0, #0
 80019d4:	f340 8191 	ble.w	8001cfa <_dtoa_r+0xac2>
 80019d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80019dc:	9a06      	ldr	r2, [sp, #24]
 80019de:	3d01      	subs	r5, #1
 80019e0:	e004      	b.n	80019ec <_dtoa_r+0x7b4>
 80019e2:	42aa      	cmp	r2, r5
 80019e4:	f000 8194 	beq.w	8001d10 <_dtoa_r+0xad8>
 80019e8:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
 80019ec:	2b39      	cmp	r3, #57	; 0x39
 80019ee:	f105 0701 	add.w	r7, r5, #1
 80019f2:	d0f6      	beq.n	80019e2 <_dtoa_r+0x7aa>
 80019f4:	3301      	adds	r3, #1
 80019f6:	702b      	strb	r3, [r5, #0]
 80019f8:	4641      	mov	r1, r8
 80019fa:	4650      	mov	r0, sl
 80019fc:	f007 fca8 	bl	8009350 <_Bfree>
 8001a00:	b15c      	cbz	r4, 8001a1a <_dtoa_r+0x7e2>
 8001a02:	9b04      	ldr	r3, [sp, #16]
 8001a04:	b12b      	cbz	r3, 8001a12 <_dtoa_r+0x7da>
 8001a06:	42a3      	cmp	r3, r4
 8001a08:	d003      	beq.n	8001a12 <_dtoa_r+0x7da>
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4650      	mov	r0, sl
 8001a0e:	f007 fc9f 	bl	8009350 <_Bfree>
 8001a12:	4621      	mov	r1, r4
 8001a14:	4650      	mov	r0, sl
 8001a16:	f007 fc9b 	bl	8009350 <_Bfree>
 8001a1a:	4659      	mov	r1, fp
 8001a1c:	4650      	mov	r0, sl
 8001a1e:	f007 fc97 	bl	8009350 <_Bfree>
 8001a22:	2300      	movs	r3, #0
 8001a24:	703b      	strb	r3, [r7, #0]
 8001a26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001a28:	9a02      	ldr	r2, [sp, #8]
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f43f ac3e 	beq.w	80012b0 <_dtoa_r+0x78>
 8001a34:	9806      	ldr	r0, [sp, #24]
 8001a36:	601f      	str	r7, [r3, #0]
 8001a38:	b01d      	add	sp, #116	; 0x74
 8001a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a3e:	201c      	movs	r0, #28
 8001a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a42:	4403      	add	r3, r0
 8001a44:	930a      	str	r3, [sp, #40]	; 0x28
 8001a46:	9b04      	ldr	r3, [sp, #16]
 8001a48:	4403      	add	r3, r0
 8001a4a:	4405      	add	r5, r0
 8001a4c:	9304      	str	r3, [sp, #16]
 8001a4e:	e775      	b.n	800193c <_dtoa_r+0x704>
 8001a50:	2401      	movs	r4, #1
 8001a52:	e4b7      	b.n	80013c4 <_dtoa_r+0x18c>
 8001a54:	f1c3 0320 	rsb	r3, r3, #32
 8001a58:	fa06 f003 	lsl.w	r0, r6, r3
 8001a5c:	e44c      	b.n	80012f8 <_dtoa_r+0xc0>
 8001a5e:	4601      	mov	r1, r0
 8001a60:	464a      	mov	r2, r9
 8001a62:	4650      	mov	r0, sl
 8001a64:	f007 fdf8 	bl	8009658 <__pow5mult>
 8001a68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	4680      	mov	r8, r0
 8001a6e:	f340 819e 	ble.w	8001dae <_dtoa_r+0xb76>
 8001a72:	2600      	movs	r6, #0
 8001a74:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8001a78:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8001a7c:	6918      	ldr	r0, [r3, #16]
 8001a7e:	f007 fcc1 	bl	8009404 <__hi0bits>
 8001a82:	f1c0 0020 	rsb	r0, r0, #32
 8001a86:	e746      	b.n	8001916 <_dtoa_r+0x6de>
 8001a88:	40240000 	.word	0x40240000
 8001a8c:	0800c960 	.word	0x0800c960
 8001a90:	4621      	mov	r1, r4
 8001a92:	2300      	movs	r3, #0
 8001a94:	220a      	movs	r2, #10
 8001a96:	4650      	mov	r0, sl
 8001a98:	f007 fc64 	bl	8009364 <__multadd>
 8001a9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	f340 82d6 	ble.w	8002052 <_dtoa_r+0xe1a>
 8001aa6:	970b      	str	r7, [sp, #44]	; 0x2c
 8001aa8:	9307      	str	r3, [sp, #28]
 8001aaa:	2d00      	cmp	r5, #0
 8001aac:	f300 810c 	bgt.w	8001cc8 <_dtoa_r+0xa90>
 8001ab0:	2e00      	cmp	r6, #0
 8001ab2:	f040 81d5 	bne.w	8001e60 <_dtoa_r+0xc28>
 8001ab6:	4626      	mov	r6, r4
 8001ab8:	9b02      	ldr	r3, [sp, #8]
 8001aba:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8001abe:	9907      	ldr	r1, [sp, #28]
 8001ac0:	f003 0201 	and.w	r2, r3, #1
 8001ac4:	f109 33ff 	add.w	r3, r9, #4294967295
 8001ac8:	4419      	add	r1, r3
 8001aca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001acc:	920c      	str	r2, [sp, #48]	; 0x30
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	910a      	str	r1, [sp, #40]	; 0x28
 8001ad2:	9308      	str	r3, [sp, #32]
 8001ad4:	4641      	mov	r1, r8
 8001ad6:	4658      	mov	r0, fp
 8001ad8:	f007 f866 	bl	8008ba8 <quorem>
 8001adc:	4621      	mov	r1, r4
 8001ade:	9002      	str	r0, [sp, #8]
 8001ae0:	4658      	mov	r0, fp
 8001ae2:	f007 fe91 	bl	8009808 <__mcmp>
 8001ae6:	4632      	mov	r2, r6
 8001ae8:	4607      	mov	r7, r0
 8001aea:	4641      	mov	r1, r8
 8001aec:	4650      	mov	r0, sl
 8001aee:	f007 feab 	bl	8009848 <__mdiff>
 8001af2:	9b02      	ldr	r3, [sp, #8]
 8001af4:	68c2      	ldr	r2, [r0, #12]
 8001af6:	4605      	mov	r5, r0
 8001af8:	3330      	adds	r3, #48	; 0x30
 8001afa:	2a00      	cmp	r2, #0
 8001afc:	d140      	bne.n	8001b80 <_dtoa_r+0x948>
 8001afe:	4601      	mov	r1, r0
 8001b00:	4658      	mov	r0, fp
 8001b02:	9307      	str	r3, [sp, #28]
 8001b04:	f007 fe80 	bl	8009808 <__mcmp>
 8001b08:	4629      	mov	r1, r5
 8001b0a:	9004      	str	r0, [sp, #16]
 8001b0c:	4650      	mov	r0, sl
 8001b0e:	f007 fc1f 	bl	8009350 <_Bfree>
 8001b12:	9a04      	ldr	r2, [sp, #16]
 8001b14:	9b07      	ldr	r3, [sp, #28]
 8001b16:	b91a      	cbnz	r2, 8001b20 <_dtoa_r+0x8e8>
 8001b18:	9908      	ldr	r1, [sp, #32]
 8001b1a:	2900      	cmp	r1, #0
 8001b1c:	f000 8286 	beq.w	800202c <_dtoa_r+0xdf4>
 8001b20:	f109 0101 	add.w	r1, r9, #1
 8001b24:	2f00      	cmp	r7, #0
 8001b26:	460d      	mov	r5, r1
 8001b28:	f2c0 8159 	blt.w	8001dde <_dtoa_r+0xba6>
 8001b2c:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001b2e:	4307      	orrs	r7, r0
 8001b30:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001b32:	4338      	orrs	r0, r7
 8001b34:	f000 8153 	beq.w	8001dde <_dtoa_r+0xba6>
 8001b38:	2a00      	cmp	r2, #0
 8001b3a:	f300 81b2 	bgt.w	8001ea2 <_dtoa_r+0xc6a>
 8001b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b40:	f889 3000 	strb.w	r3, [r9]
 8001b44:	4591      	cmp	r9, r2
 8001b46:	f000 81b2 	beq.w	8001eae <_dtoa_r+0xc76>
 8001b4a:	4659      	mov	r1, fp
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	220a      	movs	r2, #10
 8001b50:	4650      	mov	r0, sl
 8001b52:	f007 fc07 	bl	8009364 <__multadd>
 8001b56:	42b4      	cmp	r4, r6
 8001b58:	4683      	mov	fp, r0
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	f04f 020a 	mov.w	r2, #10
 8001b64:	4650      	mov	r0, sl
 8001b66:	d013      	beq.n	8001b90 <_dtoa_r+0x958>
 8001b68:	f007 fbfc 	bl	8009364 <__multadd>
 8001b6c:	4631      	mov	r1, r6
 8001b6e:	4604      	mov	r4, r0
 8001b70:	2300      	movs	r3, #0
 8001b72:	220a      	movs	r2, #10
 8001b74:	4650      	mov	r0, sl
 8001b76:	f007 fbf5 	bl	8009364 <__multadd>
 8001b7a:	46a9      	mov	r9, r5
 8001b7c:	4606      	mov	r6, r0
 8001b7e:	e7a9      	b.n	8001ad4 <_dtoa_r+0x89c>
 8001b80:	4601      	mov	r1, r0
 8001b82:	4650      	mov	r0, sl
 8001b84:	9304      	str	r3, [sp, #16]
 8001b86:	f007 fbe3 	bl	8009350 <_Bfree>
 8001b8a:	9b04      	ldr	r3, [sp, #16]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	e7c7      	b.n	8001b20 <_dtoa_r+0x8e8>
 8001b90:	f007 fbe8 	bl	8009364 <__multadd>
 8001b94:	46a9      	mov	r9, r5
 8001b96:	4604      	mov	r4, r0
 8001b98:	4606      	mov	r6, r0
 8001b9a:	e79b      	b.n	8001ad4 <_dtoa_r+0x89c>
 8001b9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	dc6f      	bgt.n	8001c82 <_dtoa_r+0xa4a>
 8001ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d180      	bne.n	8001aaa <_dtoa_r+0x872>
 8001ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001baa:	4641      	mov	r1, r8
 8001bac:	3301      	adds	r3, #1
 8001bae:	4658      	mov	r0, fp
 8001bb0:	9302      	str	r3, [sp, #8]
 8001bb2:	f006 fff9 	bl	8008ba8 <quorem>
 8001bb6:	9d06      	ldr	r5, [sp, #24]
 8001bb8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f805 3b01 	strb.w	r3, [r5], #1
 8001bc2:	9204      	str	r2, [sp, #16]
 8001bc4:	e6fb      	b.n	80019be <_dtoa_r+0x786>
 8001bc6:	4641      	mov	r1, r8
 8001bc8:	4658      	mov	r0, fp
 8001bca:	f007 fe1d 	bl	8009808 <__mcmp>
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	f6bf aeca 	bge.w	8001968 <_dtoa_r+0x730>
 8001bd4:	4659      	mov	r1, fp
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	220a      	movs	r2, #10
 8001bda:	4650      	mov	r0, sl
 8001bdc:	f007 fbc2 	bl	8009364 <__multadd>
 8001be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001be2:	1e5f      	subs	r7, r3, #1
 8001be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001be6:	4683      	mov	fp, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f47f af51 	bne.w	8001a90 <_dtoa_r+0x858>
 8001bee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f340 8226 	ble.w	8002042 <_dtoa_r+0xe0a>
 8001bf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001bf8:	9202      	str	r2, [sp, #8]
 8001bfa:	9307      	str	r3, [sp, #28]
 8001bfc:	e6bf      	b.n	800197e <_dtoa_r+0x746>
 8001bfe:	4baf      	ldr	r3, [pc, #700]	; (8001ebc <_dtoa_r+0xc84>)
 8001c00:	9306      	str	r3, [sp, #24]
 8001c02:	3303      	adds	r3, #3
 8001c04:	f7ff bbf9 	b.w	80013fa <_dtoa_r+0x1c2>
 8001c08:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8001c0c:	2900      	cmp	r1, #0
 8001c0e:	f47f ae7c 	bne.w	800190a <_dtoa_r+0x6d2>
 8001c12:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 80d4 	beq.w	8001dc4 <_dtoa_r+0xb8c>
 8001c1c:	9e02      	ldr	r6, [sp, #8]
 8001c1e:	e675      	b.n	800190c <_dtoa_r+0x6d4>
 8001c20:	2301      	movs	r3, #1
 8001c22:	930c      	str	r3, [sp, #48]	; 0x30
 8001c24:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001c26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001c28:	4413      	add	r3, r2
 8001c2a:	9316      	str	r3, [sp, #88]	; 0x58
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	461d      	mov	r5, r3
 8001c32:	9307      	str	r3, [sp, #28]
 8001c34:	bfb8      	it	lt
 8001c36:	2501      	movlt	r5, #1
 8001c38:	2100      	movs	r1, #0
 8001c3a:	2d17      	cmp	r5, #23
 8001c3c:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 8001c40:	f77f ac2b 	ble.w	800149a <_dtoa_r+0x262>
 8001c44:	2201      	movs	r2, #1
 8001c46:	2304      	movs	r3, #4
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	f103 0014 	add.w	r0, r3, #20
 8001c4e:	42a8      	cmp	r0, r5
 8001c50:	4611      	mov	r1, r2
 8001c52:	f102 0201 	add.w	r2, r2, #1
 8001c56:	d9f7      	bls.n	8001c48 <_dtoa_r+0xa10>
 8001c58:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 8001c5c:	e41d      	b.n	800149a <_dtoa_r+0x262>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	930c      	str	r3, [sp, #48]	; 0x30
 8001c62:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	dd43      	ble.n	8001cf0 <_dtoa_r+0xab8>
 8001c68:	9316      	str	r3, [sp, #88]	; 0x58
 8001c6a:	9307      	str	r3, [sp, #28]
 8001c6c:	461d      	mov	r5, r3
 8001c6e:	e7e3      	b.n	8001c38 <_dtoa_r+0xa00>
 8001c70:	2300      	movs	r3, #0
 8001c72:	930c      	str	r3, [sp, #48]	; 0x30
 8001c74:	e7d6      	b.n	8001c24 <_dtoa_r+0x9ec>
 8001c76:	2300      	movs	r3, #0
 8001c78:	930c      	str	r3, [sp, #48]	; 0x30
 8001c7a:	e7f2      	b.n	8001c62 <_dtoa_r+0xa2a>
 8001c7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001c7e:	970b      	str	r7, [sp, #44]	; 0x2c
 8001c80:	9307      	str	r3, [sp, #28]
 8001c82:	9b07      	ldr	r3, [sp, #28]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f47f ad5a 	bne.w	800173e <_dtoa_r+0x506>
 8001c8a:	4641      	mov	r1, r8
 8001c8c:	2205      	movs	r2, #5
 8001c8e:	4650      	mov	r0, sl
 8001c90:	f007 fb68 	bl	8009364 <__multadd>
 8001c94:	4601      	mov	r1, r0
 8001c96:	4680      	mov	r8, r0
 8001c98:	4658      	mov	r0, fp
 8001c9a:	f007 fdb5 	bl	8009808 <__mcmp>
 8001c9e:	2800      	cmp	r0, #0
 8001ca0:	f77f ad4d 	ble.w	800173e <_dtoa_r+0x506>
 8001ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001ca6:	9f06      	ldr	r7, [sp, #24]
 8001ca8:	f103 0901 	add.w	r9, r3, #1
 8001cac:	2331      	movs	r3, #49	; 0x31
 8001cae:	f807 3b01 	strb.w	r3, [r7], #1
 8001cb2:	f109 0301 	add.w	r3, r9, #1
 8001cb6:	4641      	mov	r1, r8
 8001cb8:	4650      	mov	r0, sl
 8001cba:	9302      	str	r3, [sp, #8]
 8001cbc:	f007 fb48 	bl	8009350 <_Bfree>
 8001cc0:	2c00      	cmp	r4, #0
 8001cc2:	f47f aea6 	bne.w	8001a12 <_dtoa_r+0x7da>
 8001cc6:	e6a8      	b.n	8001a1a <_dtoa_r+0x7e2>
 8001cc8:	4621      	mov	r1, r4
 8001cca:	462a      	mov	r2, r5
 8001ccc:	4650      	mov	r0, sl
 8001cce:	f007 fd23 	bl	8009718 <__lshift>
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	e6ec      	b.n	8001ab0 <_dtoa_r+0x878>
 8001cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001cd8:	960d      	str	r6, [sp, #52]	; 0x34
 8001cda:	1af3      	subs	r3, r6, r3
 8001cdc:	4499      	add	r9, r3
 8001cde:	2600      	movs	r6, #0
 8001ce0:	e5a8      	b.n	8001834 <_dtoa_r+0x5fc>
 8001ce2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001ce6:	f04f 0802 	mov.w	r8, #2
 8001cea:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001cee:	e403      	b.n	80014f8 <_dtoa_r+0x2c0>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	9327      	str	r3, [sp, #156]	; 0x9c
 8001cf4:	9307      	str	r3, [sp, #28]
 8001cf6:	f7ff bbcb 	b.w	8001490 <_dtoa_r+0x258>
 8001cfa:	d103      	bne.n	8001d04 <_dtoa_r+0xacc>
 8001cfc:	9b07      	ldr	r3, [sp, #28]
 8001cfe:	07db      	lsls	r3, r3, #31
 8001d00:	f53f ae6a 	bmi.w	80019d8 <_dtoa_r+0x7a0>
 8001d04:	462f      	mov	r7, r5
 8001d06:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
 8001d0a:	2b30      	cmp	r3, #48	; 0x30
 8001d0c:	d0fa      	beq.n	8001d04 <_dtoa_r+0xacc>
 8001d0e:	e673      	b.n	80019f8 <_dtoa_r+0x7c0>
 8001d10:	9b02      	ldr	r3, [sp, #8]
 8001d12:	9a06      	ldr	r2, [sp, #24]
 8001d14:	3301      	adds	r3, #1
 8001d16:	9302      	str	r3, [sp, #8]
 8001d18:	2331      	movs	r3, #49	; 0x31
 8001d1a:	7013      	strb	r3, [r2, #0]
 8001d1c:	e66c      	b.n	80019f8 <_dtoa_r+0x7c0>
 8001d1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001d20:	2a00      	cmp	r2, #0
 8001d22:	f000 8122 	beq.w	8001f6a <_dtoa_r+0xd32>
 8001d26:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8001d2a:	9a04      	ldr	r2, [sp, #16]
 8001d2c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8001d2e:	441a      	add	r2, r3
 8001d30:	9204      	str	r2, [sp, #16]
 8001d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001d34:	4615      	mov	r5, r2
 8001d36:	441a      	add	r2, r3
 8001d38:	920a      	str	r2, [sp, #40]	; 0x28
 8001d3a:	e586      	b.n	800184a <_dtoa_r+0x612>
 8001d3c:	f04f 0800 	mov.w	r8, #0
 8001d40:	4644      	mov	r4, r8
 8001d42:	e4fc      	b.n	800173e <_dtoa_r+0x506>
 8001d44:	4659      	mov	r1, fp
 8001d46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001d48:	4650      	mov	r0, sl
 8001d4a:	f007 fc85 	bl	8009658 <__pow5mult>
 8001d4e:	4683      	mov	fp, r0
 8001d50:	e5ce      	b.n	80018f0 <_dtoa_r+0x6b8>
 8001d52:	900e      	str	r0, [sp, #56]	; 0x38
 8001d54:	e585      	b.n	8001862 <_dtoa_r+0x62a>
 8001d56:	f000 8133 	beq.w	8001fc0 <_dtoa_r+0xd88>
 8001d5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001d5c:	4b58      	ldr	r3, [pc, #352]	; (8001ec0 <_dtoa_r+0xc88>)
 8001d5e:	4254      	negs	r4, r2
 8001d60:	f004 020f 	and.w	r2, r4, #15
 8001d64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001d70:	f7fe fca2 	bl	80006b8 <__aeabi_dmul>
 8001d74:	1124      	asrs	r4, r4, #4
 8001d76:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8001d7a:	f000 8172 	beq.w	8002062 <_dtoa_r+0xe2a>
 8001d7e:	4d51      	ldr	r5, [pc, #324]	; (8001ec4 <_dtoa_r+0xc8c>)
 8001d80:	2300      	movs	r3, #0
 8001d82:	f04f 0802 	mov.w	r8, #2
 8001d86:	07e6      	lsls	r6, r4, #31
 8001d88:	d506      	bpl.n	8001d98 <_dtoa_r+0xb60>
 8001d8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001d8e:	f7fe fc93 	bl	80006b8 <__aeabi_dmul>
 8001d92:	f108 0801 	add.w	r8, r8, #1
 8001d96:	2301      	movs	r3, #1
 8001d98:	1064      	asrs	r4, r4, #1
 8001d9a:	f105 0508 	add.w	r5, r5, #8
 8001d9e:	d1f2      	bne.n	8001d86 <_dtoa_r+0xb4e>
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f43f abc3 	beq.w	800152c <_dtoa_r+0x2f4>
 8001da6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8001daa:	f7ff bbbf 	b.w	800152c <_dtoa_r+0x2f4>
 8001dae:	9b02      	ldr	r3, [sp, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f47f ae5e 	bne.w	8001a72 <_dtoa_r+0x83a>
 8001db6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8001dba:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f47f ae57 	bne.w	8001a72 <_dtoa_r+0x83a>
 8001dc4:	4e40      	ldr	r6, [pc, #256]	; (8001ec8 <_dtoa_r+0xc90>)
 8001dc6:	4016      	ands	r6, r2
 8001dc8:	2e00      	cmp	r6, #0
 8001dca:	f43f ad9f 	beq.w	800190c <_dtoa_r+0x6d4>
 8001dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8001dd4:	9b04      	ldr	r3, [sp, #16]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	9304      	str	r3, [sp, #16]
 8001dda:	2601      	movs	r6, #1
 8001ddc:	e596      	b.n	800190c <_dtoa_r+0x6d4>
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	460f      	mov	r7, r1
 8001de2:	dd12      	ble.n	8001e0a <_dtoa_r+0xbd2>
 8001de4:	4659      	mov	r1, fp
 8001de6:	2201      	movs	r2, #1
 8001de8:	4650      	mov	r0, sl
 8001dea:	9304      	str	r3, [sp, #16]
 8001dec:	f007 fc94 	bl	8009718 <__lshift>
 8001df0:	4641      	mov	r1, r8
 8001df2:	4683      	mov	fp, r0
 8001df4:	f007 fd08 	bl	8009808 <__mcmp>
 8001df8:	2800      	cmp	r0, #0
 8001dfa:	9b04      	ldr	r3, [sp, #16]
 8001dfc:	f340 8100 	ble.w	8002000 <_dtoa_r+0xdc8>
 8001e00:	2b39      	cmp	r3, #57	; 0x39
 8001e02:	f000 80eb 	beq.w	8001fdc <_dtoa_r+0xda4>
 8001e06:	9b02      	ldr	r3, [sp, #8]
 8001e08:	3331      	adds	r3, #49	; 0x31
 8001e0a:	f889 3000 	strb.w	r3, [r9]
 8001e0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001e10:	9404      	str	r4, [sp, #16]
 8001e12:	3301      	adds	r3, #1
 8001e14:	9302      	str	r3, [sp, #8]
 8001e16:	4634      	mov	r4, r6
 8001e18:	e5ee      	b.n	80019f8 <_dtoa_r+0x7c0>
 8001e1a:	465f      	mov	r7, fp
 8001e1c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8001e20:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001e24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001e26:	3301      	adds	r3, #1
 8001e28:	9302      	str	r3, [sp, #8]
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	461c      	mov	r4, r3
 8001e2e:	460b      	mov	r3, r1
 8001e30:	f7fe fa8c 	bl	800034c <__adddf3>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001e3c:	4642      	mov	r2, r8
 8001e3e:	464b      	mov	r3, r9
 8001e40:	f7fe fee4 	bl	8000c0c <__aeabi_dcmpgt>
 8001e44:	b940      	cbnz	r0, 8001e58 <_dtoa_r+0xc20>
 8001e46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001e4a:	4642      	mov	r2, r8
 8001e4c:	464b      	mov	r3, r9
 8001e4e:	f7fe feb5 	bl	8000bbc <__aeabi_dcmpeq>
 8001e52:	b118      	cbz	r0, 8001e5c <_dtoa_r+0xc24>
 8001e54:	07f9      	lsls	r1, r7, #31
 8001e56:	d501      	bpl.n	8001e5c <_dtoa_r+0xc24>
 8001e58:	9a06      	ldr	r2, [sp, #24]
 8001e5a:	e417      	b.n	800168c <_dtoa_r+0x454>
 8001e5c:	4637      	mov	r7, r6
 8001e5e:	e5dc      	b.n	8001a1a <_dtoa_r+0x7e2>
 8001e60:	6861      	ldr	r1, [r4, #4]
 8001e62:	4650      	mov	r0, sl
 8001e64:	f007 fa4e 	bl	8009304 <_Balloc>
 8001e68:	4605      	mov	r5, r0
 8001e6a:	2800      	cmp	r0, #0
 8001e6c:	f000 810d 	beq.w	800208a <_dtoa_r+0xe52>
 8001e70:	6923      	ldr	r3, [r4, #16]
 8001e72:	3302      	adds	r3, #2
 8001e74:	009a      	lsls	r2, r3, #2
 8001e76:	f104 010c 	add.w	r1, r4, #12
 8001e7a:	300c      	adds	r0, #12
 8001e7c:	f7fe fed0 	bl	8000c20 <memcpy>
 8001e80:	4629      	mov	r1, r5
 8001e82:	2201      	movs	r2, #1
 8001e84:	4650      	mov	r0, sl
 8001e86:	f007 fc47 	bl	8009718 <__lshift>
 8001e8a:	4606      	mov	r6, r0
 8001e8c:	e614      	b.n	8001ab8 <_dtoa_r+0x880>
 8001e8e:	4659      	mov	r1, fp
 8001e90:	4650      	mov	r0, sl
 8001e92:	f007 fbe1 	bl	8009658 <__pow5mult>
 8001e96:	4683      	mov	fp, r0
 8001e98:	e52a      	b.n	80018f0 <_dtoa_r+0x6b8>
 8001e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e9c:	9a07      	ldr	r2, [sp, #28]
 8001e9e:	1a9d      	subs	r5, r3, r2
 8001ea0:	e4d3      	b.n	800184a <_dtoa_r+0x612>
 8001ea2:	2b39      	cmp	r3, #57	; 0x39
 8001ea4:	460f      	mov	r7, r1
 8001ea6:	f000 8099 	beq.w	8001fdc <_dtoa_r+0xda4>
 8001eaa:	3301      	adds	r3, #1
 8001eac:	e7ad      	b.n	8001e0a <_dtoa_r+0xbd2>
 8001eae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001eb0:	9404      	str	r4, [sp, #16]
 8001eb2:	3201      	adds	r2, #1
 8001eb4:	9202      	str	r2, [sp, #8]
 8001eb6:	4634      	mov	r4, r6
 8001eb8:	e581      	b.n	80019be <_dtoa_r+0x786>
 8001eba:	bf00      	nop
 8001ebc:	0800c9a4 	.word	0x0800c9a4
 8001ec0:	0800c4e0 	.word	0x0800c4e0
 8001ec4:	0800c4b8 	.word	0x0800c4b8
 8001ec8:	7ff00000 	.word	0x7ff00000
 8001ecc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8001ed0:	f7fe fbf2 	bl	80006b8 <__aeabi_dmul>
 8001ed4:	9b06      	ldr	r3, [sp, #24]
 8001ed6:	701e      	strb	r6, [r3, #0]
 8001ed8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8001ee0:	f000 80b5 	beq.w	800204e <_dtoa_r+0xe16>
 8001ee4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001ee6:	9b06      	ldr	r3, [sp, #24]
 8001ee8:	441e      	add	r6, r3
 8001eea:	4b76      	ldr	r3, [pc, #472]	; (80020c4 <_dtoa_r+0xe8c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	4620      	mov	r0, r4
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	f7fe fbe1 	bl	80006b8 <__aeabi_dmul>
 8001ef6:	460d      	mov	r5, r1
 8001ef8:	4604      	mov	r4, r0
 8001efa:	f7fe ff41 	bl	8000d80 <__aeabi_d2iz>
 8001efe:	4680      	mov	r8, r0
 8001f00:	f7fe fb70 	bl	80005e4 <__aeabi_i2d>
 8001f04:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	4629      	mov	r1, r5
 8001f10:	f7fe fa1a 	bl	8000348 <__aeabi_dsub>
 8001f14:	f807 8b01 	strb.w	r8, [r7], #1
 8001f18:	42b7      	cmp	r7, r6
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	460d      	mov	r5, r1
 8001f1e:	d1e4      	bne.n	8001eea <_dtoa_r+0xcb2>
 8001f20:	e9dd 7812 	ldrd	r7, r8, [sp, #72]	; 0x48
 8001f24:	4b68      	ldr	r3, [pc, #416]	; (80020c8 <_dtoa_r+0xe90>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	4638      	mov	r0, r7
 8001f2a:	4641      	mov	r1, r8
 8001f2c:	f7fe fa0e 	bl	800034c <__adddf3>
 8001f30:	4622      	mov	r2, r4
 8001f32:	462b      	mov	r3, r5
 8001f34:	f7fe fe4c 	bl	8000bd0 <__aeabi_dcmplt>
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	d15c      	bne.n	8001ff6 <_dtoa_r+0xdbe>
 8001f3c:	463a      	mov	r2, r7
 8001f3e:	4643      	mov	r3, r8
 8001f40:	4961      	ldr	r1, [pc, #388]	; (80020c8 <_dtoa_r+0xe90>)
 8001f42:	2000      	movs	r0, #0
 8001f44:	f7fe fa00 	bl	8000348 <__aeabi_dsub>
 8001f48:	4622      	mov	r2, r4
 8001f4a:	462b      	mov	r3, r5
 8001f4c:	f7fe fe5e 	bl	8000c0c <__aeabi_dcmpgt>
 8001f50:	2800      	cmp	r0, #0
 8001f52:	f43f abcd 	beq.w	80016f0 <_dtoa_r+0x4b8>
 8001f56:	4637      	mov	r7, r6
 8001f58:	3e01      	subs	r6, #1
 8001f5a:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8001f5e:	2b30      	cmp	r3, #48	; 0x30
 8001f60:	d0f9      	beq.n	8001f56 <_dtoa_r+0xd1e>
 8001f62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001f64:	3301      	adds	r3, #1
 8001f66:	9302      	str	r3, [sp, #8]
 8001f68:	e557      	b.n	8001a1a <_dtoa_r+0x7e2>
 8001f6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001f6c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8001f70:	e6db      	b.n	8001d2a <_dtoa_r+0xaf2>
 8001f72:	9b07      	ldr	r3, [sp, #28]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f43f ab93 	beq.w	80016a0 <_dtoa_r+0x468>
 8001f7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f77f abb7 	ble.w	80016f0 <_dtoa_r+0x4b8>
 8001f82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001f84:	9310      	str	r3, [sp, #64]	; 0x40
 8001f86:	3a01      	subs	r2, #1
 8001f88:	4b4e      	ldr	r3, [pc, #312]	; (80020c4 <_dtoa_r+0xe8c>)
 8001f8a:	9217      	str	r2, [sp, #92]	; 0x5c
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	2200      	movs	r2, #0
 8001f90:	4629      	mov	r1, r5
 8001f92:	f7fe fb91 	bl	80006b8 <__aeabi_dmul>
 8001f96:	4604      	mov	r4, r0
 8001f98:	460d      	mov	r5, r1
 8001f9a:	f108 0001 	add.w	r0, r8, #1
 8001f9e:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8001fa2:	f7fe fb1f 	bl	80005e4 <__aeabi_i2d>
 8001fa6:	4622      	mov	r2, r4
 8001fa8:	462b      	mov	r3, r5
 8001faa:	f7fe fb85 	bl	80006b8 <__aeabi_dmul>
 8001fae:	4b47      	ldr	r3, [pc, #284]	; (80020cc <_dtoa_r+0xe94>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f7fe f9cb 	bl	800034c <__adddf3>
 8001fb6:	4606      	mov	r6, r0
 8001fb8:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8001fbc:	f7ff bad9 	b.w	8001572 <_dtoa_r+0x33a>
 8001fc0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8001fc4:	f04f 0802 	mov.w	r8, #2
 8001fc8:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 8001fcc:	f7ff baae 	b.w	800152c <_dtoa_r+0x2f4>
 8001fd0:	3401      	adds	r4, #1
 8001fd2:	2331      	movs	r3, #49	; 0x31
 8001fd4:	f7ff bb61 	b.w	800169a <_dtoa_r+0x462>
 8001fd8:	f109 0501 	add.w	r5, r9, #1
 8001fdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001fde:	9404      	str	r4, [sp, #16]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	9302      	str	r3, [sp, #8]
 8001fe4:	2339      	movs	r3, #57	; 0x39
 8001fe6:	4634      	mov	r4, r6
 8001fe8:	f889 3000 	strb.w	r3, [r9]
 8001fec:	e4f6      	b.n	80019dc <_dtoa_r+0x7a4>
 8001fee:	f04f 0800 	mov.w	r8, #0
 8001ff2:	4644      	mov	r4, r8
 8001ff4:	e656      	b.n	8001ca4 <_dtoa_r+0xa6c>
 8001ff6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8001ff8:	9a06      	ldr	r2, [sp, #24]
 8001ffa:	3401      	adds	r4, #1
 8001ffc:	f7ff bb46 	b.w	800168c <_dtoa_r+0x454>
 8002000:	f47f af03 	bne.w	8001e0a <_dtoa_r+0xbd2>
 8002004:	07da      	lsls	r2, r3, #31
 8002006:	f57f af00 	bpl.w	8001e0a <_dtoa_r+0xbd2>
 800200a:	e6f9      	b.n	8001e00 <_dtoa_r+0xbc8>
 800200c:	e9dd 3a17 	ldrd	r3, sl, [sp, #92]	; 0x5c
 8002010:	3301      	adds	r3, #1
 8002012:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8002016:	9302      	str	r3, [sp, #8]
 8002018:	464f      	mov	r7, r9
 800201a:	e4fe      	b.n	8001a1a <_dtoa_r+0x7e2>
 800201c:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8002020:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8002024:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8002028:	f7ff bb62 	b.w	80016f0 <_dtoa_r+0x4b8>
 800202c:	2b39      	cmp	r3, #57	; 0x39
 800202e:	d0d3      	beq.n	8001fd8 <_dtoa_r+0xda0>
 8002030:	2f00      	cmp	r7, #0
 8002032:	bfc8      	it	gt
 8002034:	9b02      	ldrgt	r3, [sp, #8]
 8002036:	464f      	mov	r7, r9
 8002038:	bfc8      	it	gt
 800203a:	3331      	addgt	r3, #49	; 0x31
 800203c:	f807 3b01 	strb.w	r3, [r7], #1
 8002040:	e6e5      	b.n	8001e0e <_dtoa_r+0xbd6>
 8002042:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002044:	2b02      	cmp	r3, #2
 8002046:	f73f ae19 	bgt.w	8001c7c <_dtoa_r+0xa44>
 800204a:	970b      	str	r7, [sp, #44]	; 0x2c
 800204c:	e5ac      	b.n	8001ba8 <_dtoa_r+0x970>
 800204e:	463e      	mov	r6, r7
 8002050:	e766      	b.n	8001f20 <_dtoa_r+0xce8>
 8002052:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002054:	2b02      	cmp	r3, #2
 8002056:	f73f ae11 	bgt.w	8001c7c <_dtoa_r+0xa44>
 800205a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800205c:	970b      	str	r7, [sp, #44]	; 0x2c
 800205e:	9307      	str	r3, [sp, #28]
 8002060:	e523      	b.n	8001aaa <_dtoa_r+0x872>
 8002062:	f04f 0802 	mov.w	r8, #2
 8002066:	f7ff ba61 	b.w	800152c <_dtoa_r+0x2f4>
 800206a:	2400      	movs	r4, #0
 800206c:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 8002070:	4621      	mov	r1, r4
 8002072:	4650      	mov	r0, sl
 8002074:	f007 f946 	bl	8009304 <_Balloc>
 8002078:	9006      	str	r0, [sp, #24]
 800207a:	b9b0      	cbnz	r0, 80020aa <_dtoa_r+0xe72>
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <_dtoa_r+0xe98>)
 800207e:	4815      	ldr	r0, [pc, #84]	; (80020d4 <_dtoa_r+0xe9c>)
 8002080:	2200      	movs	r2, #0
 8002082:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002086:	f008 fd43 	bl	800ab10 <__assert_func>
 800208a:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <_dtoa_r+0xe98>)
 800208c:	4811      	ldr	r0, [pc, #68]	; (80020d4 <_dtoa_r+0xe9c>)
 800208e:	462a      	mov	r2, r5
 8002090:	f240 21ea 	movw	r1, #746	; 0x2ea
 8002094:	f008 fd3c 	bl	800ab10 <__assert_func>
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <_dtoa_r+0xea0>)
 800209a:	9306      	str	r3, [sp, #24]
 800209c:	f7ff b908 	b.w	80012b0 <_dtoa_r+0x78>
 80020a0:	f43f ac4c 	beq.w	800193c <_dtoa_r+0x704>
 80020a4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 80020a8:	e4ca      	b.n	8001a40 <_dtoa_r+0x808>
 80020aa:	9b06      	ldr	r3, [sp, #24]
 80020ac:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
 80020b0:	2201      	movs	r2, #1
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
 80020b6:	9427      	str	r4, [sp, #156]	; 0x9c
 80020b8:	9316      	str	r3, [sp, #88]	; 0x58
 80020ba:	920c      	str	r2, [sp, #48]	; 0x30
 80020bc:	9307      	str	r3, [sp, #28]
 80020be:	f7ff bb17 	b.w	80016f0 <_dtoa_r+0x4b8>
 80020c2:	bf00      	nop
 80020c4:	40240000 	.word	0x40240000
 80020c8:	3fe00000 	.word	0x3fe00000
 80020cc:	401c0000 	.word	0x401c0000
 80020d0:	0800c9b4 	.word	0x0800c9b4
 80020d4:	0800c9c8 	.word	0x0800c9c8
 80020d8:	0800c9a8 	.word	0x0800c9a8

080020dc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80020dc:	680b      	ldr	r3, [r1, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80020e2:	4b01      	ldr	r3, [pc, #4]	; (80020e8 <char_out+0xc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4718      	bx	r3
 80020e8:	20000290 	.word	0x20000290

080020ec <__printk_hook_install>:
	_char_out = fn;
 80020ec:	4b01      	ldr	r3, [pc, #4]	; (80020f4 <__printk_hook_install+0x8>)
 80020ee:	6018      	str	r0, [r3, #0]
}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000290 	.word	0x20000290

080020f8 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 80020f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
 80020fa:	2400      	movs	r4, #0
{
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 * returned from invoking @p out.
 */
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 8002100:	9400      	str	r4, [sp, #0]
 8002102:	a903      	add	r1, sp, #12
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <vprintk+0x18>)
		struct out_context ctx = { 0 };
 8002106:	9403      	str	r4, [sp, #12]
 8002108:	f000 f864 	bl	80021d4 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 800210c:	b004      	add	sp, #16
 800210e:	bd10      	pop	{r4, pc}
 8002110:	080020dd 	.word	0x080020dd

08002114 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 8002114:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
 8002116:	4e08      	ldr	r6, [pc, #32]	; (8002138 <extract_decimal+0x24>)
 8002118:	6802      	ldr	r2, [r0, #0]
{
 800211a:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
 800211c:	270a      	movs	r7, #10
	size_t val = 0;
 800211e:	2000      	movs	r0, #0
 8002120:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
 8002122:	3201      	adds	r2, #1
 8002124:	780c      	ldrb	r4, [r1, #0]
 8002126:	5da5      	ldrb	r5, [r4, r6]
 8002128:	076d      	lsls	r5, r5, #29
 800212a:	d401      	bmi.n	8002130 <extract_decimal+0x1c>
	}
	*str = sp;
 800212c:	6019      	str	r1, [r3, #0]
	return val;
}
 800212e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
 8002130:	fb07 4000 	mla	r0, r7, r0, r4
 8002134:	3830      	subs	r0, #48	; 0x30
 8002136:	e7f3      	b.n	8002120 <extract_decimal+0xc>
 8002138:	0800c81d 	.word	0x0800c81d

0800213c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 800213c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002140:	4615      	mov	r5, r2
 8002142:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8002144:	78d3      	ldrb	r3, [r2, #3]
 8002146:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <encode_uint+0x94>)
 8002148:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
 800214c:	2b6f      	cmp	r3, #111	; 0x6f
{
 800214e:	4680      	mov	r8, r0
 8002150:	460f      	mov	r7, r1
 8002152:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8002156:	d029      	beq.n	80021ac <encode_uint+0x70>
 8002158:	d824      	bhi.n	80021a4 <encode_uint+0x68>
		return 16;
 800215a:	2b58      	cmp	r3, #88	; 0x58
 800215c:	bf14      	ite	ne
 800215e:	260a      	movne	r6, #10
 8002160:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8002162:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
 8002166:	4632      	mov	r2, r6
 8002168:	2300      	movs	r3, #0
 800216a:	4640      	mov	r0, r8
 800216c:	4639      	mov	r1, r7
 800216e:	f7fe fcb5 	bl	8000adc <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002172:	2a09      	cmp	r2, #9
 8002174:	b2d4      	uxtb	r4, r2
 8002176:	d81e      	bhi.n	80021b6 <encode_uint+0x7a>
 8002178:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
 800217a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800217c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 800217e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002182:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8002186:	d301      	bcc.n	800218c <encode_uint+0x50>
 8002188:	45d1      	cmp	r9, sl
 800218a:	d811      	bhi.n	80021b0 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 800218c:	782b      	ldrb	r3, [r5, #0]
 800218e:	069b      	lsls	r3, r3, #26
 8002190:	d505      	bpl.n	800219e <encode_uint+0x62>
		if (radix == 8) {
 8002192:	2e08      	cmp	r6, #8
 8002194:	d115      	bne.n	80021c2 <encode_uint+0x86>
			conv->altform_0 = true;
 8002196:	78ab      	ldrb	r3, [r5, #2]
 8002198:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
 800219c:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
 800219e:	4648      	mov	r0, r9
 80021a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 80021a4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 80021a8:	2b70      	cmp	r3, #112	; 0x70
 80021aa:	e7d7      	b.n	800215c <encode_uint+0x20>
	switch (specifier) {
 80021ac:	2608      	movs	r6, #8
 80021ae:	e7d8      	b.n	8002162 <encode_uint+0x26>
		value /= radix;
 80021b0:	4680      	mov	r8, r0
 80021b2:	460f      	mov	r7, r1
 80021b4:	e7d7      	b.n	8002166 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80021b6:	f1bb 0f01 	cmp.w	fp, #1
 80021ba:	bf0c      	ite	eq
 80021bc:	3437      	addeq	r4, #55	; 0x37
 80021be:	3457      	addne	r4, #87	; 0x57
 80021c0:	e7db      	b.n	800217a <encode_uint+0x3e>
		} else if (radix == 16) {
 80021c2:	2e10      	cmp	r6, #16
 80021c4:	d1eb      	bne.n	800219e <encode_uint+0x62>
			conv->altform_0c = true;
 80021c6:	78ab      	ldrb	r3, [r5, #2]
 80021c8:	f043 0310 	orr.w	r3, r3, #16
 80021cc:	e7e6      	b.n	800219c <encode_uint+0x60>
 80021ce:	bf00      	nop
 80021d0:	0800c81d 	.word	0x0800c81d

080021d4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 80021d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021d8:	4681      	mov	r9, r0
 80021da:	b09b      	sub	sp, #108	; 0x6c
 80021dc:	468a      	mov	sl, r1
 80021de:	4615      	mov	r5, r2
 80021e0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 80021e2:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 80021e4:	7828      	ldrb	r0, [r5, #0]
 80021e6:	b910      	cbnz	r0, 80021ee <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 80021e8:	4630      	mov	r0, r6
 80021ea:	f000 bdc7 	b.w	8002d7c <z_cbvprintf_impl+0xba8>
			OUTC(*fp++);
 80021ee:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
 80021f0:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 80021f2:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
 80021f4:	d006      	beq.n	8002204 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
 80021f6:	4651      	mov	r1, sl
			OUTC('%');
 80021f8:	47c8      	blx	r9
 80021fa:	2800      	cmp	r0, #0
 80021fc:	f2c0 85be 	blt.w	8002d7c <z_cbvprintf_impl+0xba8>
 8002200:	3601      	adds	r6, #1
		if (bps == NULL) {
 8002202:	e226      	b.n	8002652 <z_cbvprintf_impl+0x47e>
		} state = {
 8002204:	2218      	movs	r2, #24
 8002206:	2100      	movs	r1, #0
 8002208:	a80c      	add	r0, sp, #48	; 0x30
 800220a:	f003 f951 	bl	80054b0 <memset>
	if (*sp == '%') {
 800220e:	786b      	ldrb	r3, [r5, #1]
 8002210:	2b25      	cmp	r3, #37	; 0x25
 8002212:	d059      	beq.n	80022c8 <z_cbvprintf_impl+0xf4>
 8002214:	1c6a      	adds	r2, r5, #1
 8002216:	4617      	mov	r7, r2
		switch (*sp) {
 8002218:	f812 3b01 	ldrb.w	r3, [r2], #1
 800221c:	2b2b      	cmp	r3, #43	; 0x2b
 800221e:	f000 808b 	beq.w	8002338 <z_cbvprintf_impl+0x164>
 8002222:	d879      	bhi.n	8002318 <z_cbvprintf_impl+0x144>
 8002224:	2b20      	cmp	r3, #32
 8002226:	f000 808c 	beq.w	8002342 <z_cbvprintf_impl+0x16e>
 800222a:	2b23      	cmp	r3, #35	; 0x23
 800222c:	f000 808e 	beq.w	800234c <z_cbvprintf_impl+0x178>
	if (conv->flag_zero && conv->flag_dash) {
 8002230:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002234:	f003 0244 	and.w	r2, r3, #68	; 0x44
 8002238:	2a44      	cmp	r2, #68	; 0x44
 800223a:	d103      	bne.n	8002244 <z_cbvprintf_impl+0x70>
		conv->flag_zero = false;
 800223c:	f36f 1386 	bfc	r3, #6, #1
 8002240:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
 8002244:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002248:	970a      	str	r7, [sp, #40]	; 0x28
 800224a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800224e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
 8002252:	783b      	ldrb	r3, [r7, #0]
 8002254:	2b2a      	cmp	r3, #42	; 0x2a
 8002256:	d17e      	bne.n	8002356 <z_cbvprintf_impl+0x182>
		conv->width_star = true;
 8002258:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
 8002264:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
 8002266:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	2a2e      	cmp	r2, #46	; 0x2e
 800226c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8002270:	bf0c      	ite	eq
 8002272:	2101      	moveq	r1, #1
 8002274:	2100      	movne	r1, #0
 8002276:	f361 0241 	bfi	r2, r1, #1, #1
 800227a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
 800227e:	d10b      	bne.n	8002298 <z_cbvprintf_impl+0xc4>
	++sp;
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
 8002284:	785a      	ldrb	r2, [r3, #1]
 8002286:	2a2a      	cmp	r2, #42	; 0x2a
 8002288:	d17b      	bne.n	8002382 <z_cbvprintf_impl+0x1ae>
		conv->prec_star = true;
 800228a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800228e:	f042 0204 	orr.w	r2, r2, #4
 8002292:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
 8002296:	3302      	adds	r3, #2
	switch (*sp) {
 8002298:	461a      	mov	r2, r3
 800229a:	f812 0b01 	ldrb.w	r0, [r2], #1
 800229e:	286c      	cmp	r0, #108	; 0x6c
 80022a0:	f000 80cf 	beq.w	8002442 <z_cbvprintf_impl+0x26e>
 80022a4:	d87d      	bhi.n	80023a2 <z_cbvprintf_impl+0x1ce>
 80022a6:	2868      	cmp	r0, #104	; 0x68
 80022a8:	f000 8084 	beq.w	80023b4 <z_cbvprintf_impl+0x1e0>
 80022ac:	286a      	cmp	r0, #106	; 0x6a
 80022ae:	f000 80d2 	beq.w	8002456 <z_cbvprintf_impl+0x282>
 80022b2:	284c      	cmp	r0, #76	; 0x4c
 80022b4:	f000 80d6 	beq.w	8002464 <z_cbvprintf_impl+0x290>
		conv->length_mod = LENGTH_NONE;
 80022b8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80022bc:	f36f 02c6 	bfc	r2, #3, #4
 80022c0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
 80022c4:	461a      	mov	r2, r3
 80022c6:	e080      	b.n	80023ca <z_cbvprintf_impl+0x1f6>
		conv->specifier = *sp++;
 80022c8:	1caa      	adds	r2, r5, #2
 80022ca:	9202      	str	r2, [sp, #8]
 80022cc:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
 80022d0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80022d4:	07df      	lsls	r7, r3, #31
 80022d6:	f140 8170 	bpl.w	80025ba <z_cbvprintf_impl+0x3e6>
			width = va_arg(ap, int);
 80022da:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
 80022de:	f1bb 0f00 	cmp.w	fp, #0
 80022e2:	da07      	bge.n	80022f4 <z_cbvprintf_impl+0x120>
				conv->flag_dash = true;
 80022e4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80022e8:	f042 0204 	orr.w	r2, r2, #4
 80022ec:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
 80022f0:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
 80022f4:	0758      	lsls	r0, r3, #29
 80022f6:	f140 8169 	bpl.w	80025cc <z_cbvprintf_impl+0x3f8>
			int arg = va_arg(ap, int);
 80022fa:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 80022fe:	f1b8 0f00 	cmp.w	r8, #0
 8002302:	f280 8168 	bge.w	80025d6 <z_cbvprintf_impl+0x402>
				conv->prec_present = false;
 8002306:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800230a:	f36f 0341 	bfc	r3, #1, #1
 800230e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
 8002312:	f04f 38ff 	mov.w	r8, #4294967295
 8002316:	e15e      	b.n	80025d6 <z_cbvprintf_impl+0x402>
		switch (*sp) {
 8002318:	2b2d      	cmp	r3, #45	; 0x2d
 800231a:	d006      	beq.n	800232a <z_cbvprintf_impl+0x156>
 800231c:	2b30      	cmp	r3, #48	; 0x30
 800231e:	d187      	bne.n	8002230 <z_cbvprintf_impl+0x5c>
			conv->flag_zero = true;
 8002320:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002328:	e003      	b.n	8002332 <z_cbvprintf_impl+0x15e>
			conv->flag_dash = true;
 800232a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800232e:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
 8002332:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
 8002336:	e76e      	b.n	8002216 <z_cbvprintf_impl+0x42>
			conv->flag_plus = true;
 8002338:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800233c:	f043 0308 	orr.w	r3, r3, #8
 8002340:	e7f7      	b.n	8002332 <z_cbvprintf_impl+0x15e>
			conv->flag_space = true;
 8002342:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002346:	f043 0310 	orr.w	r3, r3, #16
 800234a:	e7f2      	b.n	8002332 <z_cbvprintf_impl+0x15e>
			conv->flag_hash = true;
 800234c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002350:	f043 0320 	orr.w	r3, r3, #32
 8002354:	e7ed      	b.n	8002332 <z_cbvprintf_impl+0x15e>
	size_t width = extract_decimal(&sp);
 8002356:	a80a      	add	r0, sp, #40	; 0x28
 8002358:	f7ff fedc 	bl	8002114 <extract_decimal>
	if (sp != wp) {
 800235c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800235e:	42bb      	cmp	r3, r7
 8002360:	d081      	beq.n	8002266 <z_cbvprintf_impl+0x92>
		conv->unsupported |= ((conv->width_value < 0)
 8002362:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
 8002366:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
 8002368:	f3c1 0240 	ubfx	r2, r1, #1, #1
 800236c:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
 8002370:	0052      	lsls	r2, r2, #1
 8002372:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002376:	f001 017d 	and.w	r1, r1, #125	; 0x7d
 800237a:	430a      	orrs	r2, r1
 800237c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8002380:	e771      	b.n	8002266 <z_cbvprintf_impl+0x92>
	size_t prec = extract_decimal(&sp);
 8002382:	a80a      	add	r0, sp, #40	; 0x28
 8002384:	f7ff fec6 	bl	8002114 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
 8002388:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
 800238c:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
 800238e:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8002392:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
 8002396:	f360 0341 	bfi	r3, r0, #1, #1
 800239a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
 800239e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023a0:	e77a      	b.n	8002298 <z_cbvprintf_impl+0xc4>
	switch (*sp) {
 80023a2:	2874      	cmp	r0, #116	; 0x74
 80023a4:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 80023a8:	d059      	beq.n	800245e <z_cbvprintf_impl+0x28a>
 80023aa:	287a      	cmp	r0, #122	; 0x7a
 80023ac:	d184      	bne.n	80022b8 <z_cbvprintf_impl+0xe4>
		conv->length_mod = LENGTH_Z;
 80023ae:	460b      	mov	r3, r1
 80023b0:	2106      	movs	r1, #6
 80023b2:	e041      	b.n	8002438 <z_cbvprintf_impl+0x264>
		if (*++sp == 'h') {
 80023b4:	7859      	ldrb	r1, [r3, #1]
 80023b6:	2968      	cmp	r1, #104	; 0x68
 80023b8:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 80023bc:	d13a      	bne.n	8002434 <z_cbvprintf_impl+0x260>
			conv->length_mod = LENGTH_HH;
 80023be:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
 80023c0:	f362 01c6 	bfi	r1, r2, #3, #4
 80023c4:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
			++sp;
 80023c8:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
 80023ca:	4613      	mov	r3, r2
 80023cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023d0:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
 80023d2:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 80023d4:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
 80023d8:	f200 80c5 	bhi.w	8002566 <z_cbvprintf_impl+0x392>
 80023dc:	2a57      	cmp	r2, #87	; 0x57
 80023de:	d84e      	bhi.n	800247e <z_cbvprintf_impl+0x2aa>
 80023e0:	2a41      	cmp	r2, #65	; 0x41
 80023e2:	d004      	beq.n	80023ee <z_cbvprintf_impl+0x21a>
 80023e4:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	f200 80bc 	bhi.w	8002566 <z_cbvprintf_impl+0x392>
		conv->specifier_cat = SPECIFIER_FP;
 80023ee:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
 80023f2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
 80023f6:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
 80023f8:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
 80023fc:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
 8002400:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
 8002404:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
 8002408:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
 800240c:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
 8002410:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
 8002414:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
 8002416:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
 800241a:	b2cb      	uxtb	r3, r1
 800241c:	f100 80cb 	bmi.w	80025b6 <z_cbvprintf_impl+0x3e2>
		if (conv->length_mod == LENGTH_L) {
 8002420:	f003 0278 	and.w	r2, r3, #120	; 0x78
 8002424:	2a18      	cmp	r2, #24
 8002426:	f040 809b 	bne.w	8002560 <z_cbvprintf_impl+0x38c>
			conv->length_mod = LENGTH_NONE;
 800242a:	f36f 03c6 	bfc	r3, #3, #4
 800242e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8002432:	e082      	b.n	800253a <z_cbvprintf_impl+0x366>
			conv->length_mod = LENGTH_H;
 8002434:	460b      	mov	r3, r1
 8002436:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
 8002438:	f361 03c6 	bfi	r3, r1, #3, #4
 800243c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8002440:	e7c3      	b.n	80023ca <z_cbvprintf_impl+0x1f6>
		if (*++sp == 'l') {
 8002442:	7859      	ldrb	r1, [r3, #1]
 8002444:	296c      	cmp	r1, #108	; 0x6c
 8002446:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 800244a:	d101      	bne.n	8002450 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_LL;
 800244c:	2204      	movs	r2, #4
 800244e:	e7b7      	b.n	80023c0 <z_cbvprintf_impl+0x1ec>
			conv->length_mod = LENGTH_L;
 8002450:	460b      	mov	r3, r1
 8002452:	2103      	movs	r1, #3
 8002454:	e7f0      	b.n	8002438 <z_cbvprintf_impl+0x264>
		conv->length_mod = LENGTH_J;
 8002456:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800245a:	2105      	movs	r1, #5
 800245c:	e7ec      	b.n	8002438 <z_cbvprintf_impl+0x264>
		conv->length_mod = LENGTH_T;
 800245e:	460b      	mov	r3, r1
 8002460:	2107      	movs	r1, #7
 8002462:	e7e9      	b.n	8002438 <z_cbvprintf_impl+0x264>
		conv->unsupported = true;
 8002464:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8002468:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800246c:	f023 0302 	bic.w	r3, r3, #2
 8002470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
 800247c:	e7a5      	b.n	80023ca <z_cbvprintf_impl+0x1f6>
	switch (conv->specifier) {
 800247e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8002482:	2b20      	cmp	r3, #32
 8002484:	d86f      	bhi.n	8002566 <z_cbvprintf_impl+0x392>
 8002486:	a101      	add	r1, pc, #4	; (adr r1, 800248c <z_cbvprintf_impl+0x2b8>)
 8002488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800248c:	0800253f 	.word	0x0800253f
 8002490:	08002567 	.word	0x08002567
 8002494:	08002567 	.word	0x08002567
 8002498:	08002567 	.word	0x08002567
 800249c:	08002567 	.word	0x08002567
 80024a0:	08002567 	.word	0x08002567
 80024a4:	08002567 	.word	0x08002567
 80024a8:	08002567 	.word	0x08002567
 80024ac:	08002567 	.word	0x08002567
 80024b0:	080023ef 	.word	0x080023ef
 80024b4:	08002567 	.word	0x08002567
 80024b8:	0800253f 	.word	0x0800253f
 80024bc:	08002511 	.word	0x08002511
 80024c0:	080023ef 	.word	0x080023ef
 80024c4:	080023ef 	.word	0x080023ef
 80024c8:	080023ef 	.word	0x080023ef
 80024cc:	08002567 	.word	0x08002567
 80024d0:	08002511 	.word	0x08002511
 80024d4:	08002567 	.word	0x08002567
 80024d8:	08002567 	.word	0x08002567
 80024dc:	08002567 	.word	0x08002567
 80024e0:	08002567 	.word	0x08002567
 80024e4:	08002575 	.word	0x08002575
 80024e8:	0800253f 	.word	0x0800253f
 80024ec:	08002599 	.word	0x08002599
 80024f0:	08002567 	.word	0x08002567
 80024f4:	08002567 	.word	0x08002567
 80024f8:	08002599 	.word	0x08002599
 80024fc:	08002567 	.word	0x08002567
 8002500:	0800253f 	.word	0x0800253f
 8002504:	08002567 	.word	0x08002567
 8002508:	08002567 	.word	0x08002567
 800250c:	0800253f 	.word	0x0800253f
		conv->specifier_cat = SPECIFIER_SINT;
 8002510:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8002514:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
 8002516:	f361 0302 	bfi	r3, r1, #0, #3
 800251a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 800251e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8002522:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8002526:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
 8002528:	bf02      	ittt	eq
 800252a:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
 800252e:	f041 0101 	orreq.w	r1, r1, #1
 8002532:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
 8002536:	2a63      	cmp	r2, #99	; 0x63
 8002538:	d005      	beq.n	8002546 <z_cbvprintf_impl+0x372>
	bool unsupported = false;
 800253a:	2300      	movs	r3, #0
 800253c:	e006      	b.n	800254c <z_cbvprintf_impl+0x378>
		conv->specifier_cat = SPECIFIER_UINT;
 800253e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8002542:	2102      	movs	r1, #2
 8002544:	e7e7      	b.n	8002516 <z_cbvprintf_impl+0x342>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8002546:	3b00      	subs	r3, #0
 8002548:	bf18      	it	ne
 800254a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 800254c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8002550:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8002554:	430b      	orrs	r3, r1
 8002556:	f363 0241 	bfi	r2, r3, #1, #1
 800255a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
 800255e:	e6b7      	b.n	80022d0 <z_cbvprintf_impl+0xfc>
		} else if ((conv->length_mod != LENGTH_NONE)
 8002560:	f013 0f38 	tst.w	r3, #56	; 0x38
 8002564:	d0e9      	beq.n	800253a <z_cbvprintf_impl+0x366>
			conv->invalid = true;
 8002566:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8002572:	e7e2      	b.n	800253a <z_cbvprintf_impl+0x366>
		conv->specifier_cat = SPECIFIER_PTR;
 8002574:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8002578:	2203      	movs	r2, #3
 800257a:	f362 0302 	bfi	r3, r2, #0, #3
 800257e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002582:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8002586:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800258a:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
 800258e:	f1dc 0300 	rsbs	r3, ip, #0
 8002592:	eb43 030c 	adc.w	r3, r3, ip
 8002596:	e7d9      	b.n	800254c <z_cbvprintf_impl+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
 8002598:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800259c:	2203      	movs	r2, #3
 800259e:	f362 0302 	bfi	r3, r2, #0, #3
 80025a2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
 80025a6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80025aa:	f013 0f78 	tst.w	r3, #120	; 0x78
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	e7ca      	b.n	800254c <z_cbvprintf_impl+0x378>
			unsupported = true;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e7c8      	b.n	800254c <z_cbvprintf_impl+0x378>
		} else if (conv->width_present) {
 80025ba:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
 80025be:	2a00      	cmp	r2, #0
			width = conv->width_value;
 80025c0:	bfb4      	ite	lt
 80025c2:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
 80025c6:	f04f 3bff 	movge.w	fp, #4294967295
 80025ca:	e693      	b.n	80022f4 <z_cbvprintf_impl+0x120>
		} else if (conv->prec_present) {
 80025cc:	0799      	lsls	r1, r3, #30
 80025ce:	f57f aea0 	bpl.w	8002312 <z_cbvprintf_impl+0x13e>
			precision = conv->prec_value;
 80025d2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
 80025d6:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 80025da:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 80025dc:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
 80025e0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
 80025e4:	f003 0207 	and.w	r2, r3, #7
 80025e8:	2a04      	cmp	r2, #4
 80025ea:	d109      	bne.n	8002600 <z_cbvprintf_impl+0x42c>
		    && !conv->prec_present) {
 80025ec:	078a      	lsls	r2, r1, #30
 80025ee:	d407      	bmi.n	8002600 <z_cbvprintf_impl+0x42c>
			if (conv->specifier_a) {
 80025f0:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
 80025f4:	2a00      	cmp	r2, #0
 80025f6:	bfb4      	ite	lt
 80025f8:	f04f 080d 	movlt.w	r8, #13
 80025fc:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
 8002600:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8002604:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8002606:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 800260a:	d134      	bne.n	8002676 <z_cbvprintf_impl+0x4a2>
			switch (length_mod) {
 800260c:	1ecb      	subs	r3, r1, #3
 800260e:	2b04      	cmp	r3, #4
 8002610:	d821      	bhi.n	8002656 <z_cbvprintf_impl+0x482>
 8002612:	e8df f003 	tbb	[pc, r3]
 8002616:	0903      	.short	0x0903
 8002618:	2009      	.short	0x2009
 800261a:	20          	.byte	0x20
 800261b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 800261c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 8002620:	17da      	asrs	r2, r3, #31
 8002622:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 8002626:	e006      	b.n	8002636 <z_cbvprintf_impl+0x462>
					(sint_value_type)va_arg(ap, intmax_t);
 8002628:	3407      	adds	r4, #7
 800262a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 800262e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8002632:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
 8002636:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 800263a:	07bb      	lsls	r3, r7, #30
 800263c:	d059      	beq.n	80026f2 <z_cbvprintf_impl+0x51e>
			OUTS(sp, fp);
 800263e:	9b02      	ldr	r3, [sp, #8]
 8002640:	462a      	mov	r2, r5
 8002642:	4651      	mov	r1, sl
 8002644:	4648      	mov	r0, r9
 8002646:	f008 ffc8 	bl	800b5da <outs>
 800264a:	2800      	cmp	r0, #0
 800264c:	f2c0 8396 	blt.w	8002d7c <z_cbvprintf_impl+0xba8>
 8002650:	4406      	add	r6, r0
			continue;
 8002652:	9d02      	ldr	r5, [sp, #8]
 8002654:	e5c6      	b.n	80021e4 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8002656:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 800265a:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 800265c:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8002660:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 8002664:	d102      	bne.n	800266c <z_cbvprintf_impl+0x498>
				value->sint = (signed char)value->sint;
 8002666:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
 800266a:	e7d9      	b.n	8002620 <z_cbvprintf_impl+0x44c>
			} else if (length_mod == LENGTH_H) {
 800266c:	2902      	cmp	r1, #2
 800266e:	d1e2      	bne.n	8002636 <z_cbvprintf_impl+0x462>
				value->sint = (short)value->sint;
 8002670:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8002674:	e7d4      	b.n	8002620 <z_cbvprintf_impl+0x44c>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8002676:	2b02      	cmp	r3, #2
 8002678:	d129      	bne.n	80026ce <z_cbvprintf_impl+0x4fa>
			switch (length_mod) {
 800267a:	1ecb      	subs	r3, r1, #3
 800267c:	2b04      	cmp	r3, #4
 800267e:	d813      	bhi.n	80026a8 <z_cbvprintf_impl+0x4d4>
 8002680:	e8df f003 	tbb	[pc, r3]
 8002684:	120a0a03 	.word	0x120a0a03
 8002688:	12          	.byte	0x12
 8002689:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 800268a:	6822      	ldr	r2, [r4, #0]
 800268c:	920c      	str	r2, [sp, #48]	; 0x30
 800268e:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
 8002690:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 8002692:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
 8002694:	4604      	mov	r4, r0
 8002696:	e7ce      	b.n	8002636 <z_cbvprintf_impl+0x462>
					(uint_value_type)va_arg(ap,
 8002698:	1de0      	adds	r0, r4, #7
 800269a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 800269e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 80026a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
 80026a6:	e7f5      	b.n	8002694 <z_cbvprintf_impl+0x4c0>
					(uint_value_type)va_arg(ap, size_t);
 80026a8:	f854 3b04 	ldr.w	r3, [r4], #4
 80026ac:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 80026ae:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
 80026b6:	d105      	bne.n	80026c4 <z_cbvprintf_impl+0x4f0>
				value->uint = (unsigned char)value->uint;
 80026b8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
 80026bc:	930c      	str	r3, [sp, #48]	; 0x30
 80026be:	2300      	movs	r3, #0
 80026c0:	930d      	str	r3, [sp, #52]	; 0x34
 80026c2:	e7b8      	b.n	8002636 <z_cbvprintf_impl+0x462>
			} else if (length_mod == LENGTH_H) {
 80026c4:	2902      	cmp	r1, #2
 80026c6:	d1b6      	bne.n	8002636 <z_cbvprintf_impl+0x462>
				value->uint = (unsigned short)value->uint;
 80026c8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80026cc:	e7f6      	b.n	80026bc <z_cbvprintf_impl+0x4e8>
		} else if (specifier_cat == SPECIFIER_FP) {
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d109      	bne.n	80026e6 <z_cbvprintf_impl+0x512>
					(sint_value_type)va_arg(ap, long long);
 80026d2:	1de3      	adds	r3, r4, #7
 80026d4:	f023 0307 	bic.w	r3, r3, #7
 80026d8:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 80026dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80026e4:	e7a7      	b.n	8002636 <z_cbvprintf_impl+0x462>
		} else if (specifier_cat == SPECIFIER_PTR) {
 80026e6:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 80026e8:	bf04      	itt	eq
 80026ea:	f854 3b04 	ldreq.w	r3, [r4], #4
 80026ee:	930c      	streq	r3, [sp, #48]	; 0x30
 80026f0:	e7a1      	b.n	8002636 <z_cbvprintf_impl+0x462>
		switch (conv->specifier) {
 80026f2:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 80026f6:	2a78      	cmp	r2, #120	; 0x78
 80026f8:	d8ab      	bhi.n	8002652 <z_cbvprintf_impl+0x47e>
 80026fa:	2a57      	cmp	r2, #87	; 0x57
 80026fc:	f200 808c 	bhi.w	8002818 <z_cbvprintf_impl+0x644>
 8002700:	2a25      	cmp	r2, #37	; 0x25
 8002702:	f000 80d3 	beq.w	80028ac <z_cbvprintf_impl+0x6d8>
 8002706:	2a24      	cmp	r2, #36	; 0x24
 8002708:	d9a3      	bls.n	8002652 <z_cbvprintf_impl+0x47e>
 800270a:	2a41      	cmp	r2, #65	; 0x41
 800270c:	d003      	beq.n	8002716 <z_cbvprintf_impl+0x542>
 800270e:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 8002712:	2b02      	cmp	r3, #2
 8002714:	d89d      	bhi.n	8002652 <z_cbvprintf_impl+0x47e>
	} u = {
 8002716:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
 800271a:	2b00      	cmp	r3, #0
 800271c:	f2c0 81b6 	blt.w	8002a8c <z_cbvprintf_impl+0x8b8>
	} else if (conv->flag_plus) {
 8002720:	0738      	lsls	r0, r7, #28
 8002722:	f100 81b5 	bmi.w	8002a90 <z_cbvprintf_impl+0x8bc>
		*sign = ' ';
 8002726:	f017 0710 	ands.w	r7, r7, #16
 800272a:	bf18      	it	ne
 800272c:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 800272e:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
 8002732:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002736:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
 800273a:	2d00      	cmp	r5, #0
 800273c:	f040 81aa 	bne.w	8002a94 <z_cbvprintf_impl+0x8c0>
 8002740:	ea51 0003 	orrs.w	r0, r1, r3
 8002744:	bf14      	ite	ne
 8002746:	2001      	movne	r0, #1
 8002748:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
 800274a:	02db      	lsls	r3, r3, #11
 800274c:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8002750:	02c9      	lsls	r1, r1, #11
		c = 'f';
 8002752:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
 8002754:	ea45 0e01 	orr.w	lr, r5, r1
 8002758:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
 800275c:	bf08      	it	eq
 800275e:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
 8002760:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
 8002764:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
 8002768:	f000 8202 	beq.w	8002b70 <z_cbvprintf_impl+0x99c>
		if (is_subnormal) {
 800276c:	2800      	cmp	r0, #0
 800276e:	f040 81ca 	bne.w	8002b06 <z_cbvprintf_impl+0x932>
		fract |= BIT_63;
 8002772:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002776:	f04f 0c00 	mov.w	ip, #0
 800277a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
 800277e:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
 8002782:	9109      	str	r1, [sp, #36]	; 0x24
 8002784:	4663      	mov	r3, ip
		fract *= 5U;
 8002786:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
 800278a:	f115 0f02 	cmn.w	r5, #2
 800278e:	f2c0 81c1 	blt.w	8002b14 <z_cbvprintf_impl+0x940>
 8002792:	f1bc 0f00 	cmp.w	ip, #0
 8002796:	d001      	beq.n	800279c <z_cbvprintf_impl+0x5c8>
 8002798:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
 800279c:	2d00      	cmp	r5, #0
		fract += 2;
 800279e:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
 80027a2:	f300 81cc 	bgt.w	8002b3e <z_cbvprintf_impl+0x96a>
	fract >>= (4 - expo);
 80027a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027a8:	9908      	ldr	r1, [sp, #32]
 80027aa:	f1c5 0c04 	rsb	ip, r5, #4
 80027ae:	351c      	adds	r5, #28
 80027b0:	fa00 f505 	lsl.w	r5, r0, r5
 80027b4:	f1ac 0e20 	sub.w	lr, ip, #32
 80027b8:	fa21 f10c 	lsr.w	r1, r1, ip
 80027bc:	fa20 fe0e 	lsr.w	lr, r0, lr
 80027c0:	4329      	orrs	r1, r5
 80027c2:	ea41 010e 	orr.w	r1, r1, lr
 80027c6:	fa20 f00c 	lsr.w	r0, r0, ip
 80027ca:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
 80027ce:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 80027d2:	2947      	cmp	r1, #71	; 0x47
 80027d4:	f040 81d3 	bne.w	8002b7e <z_cbvprintf_impl+0x9aa>
		if (decexp < (-4 + 1) || decexp > precision) {
 80027d8:	1cdd      	adds	r5, r3, #3
 80027da:	db02      	blt.n	80027e2 <z_cbvprintf_impl+0x60e>
 80027dc:	4598      	cmp	r8, r3
 80027de:	f280 81ca 	bge.w	8002b76 <z_cbvprintf_impl+0x9a2>
			c += 'e' - 'g';  /* e or E */
 80027e2:	3a02      	subs	r2, #2
			if (precision > 0) {
 80027e4:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
 80027e8:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
 80027ea:	dd01      	ble.n	80027f0 <z_cbvprintf_impl+0x61c>
				precision--;
 80027ec:	f108 38ff 	add.w	r8, r8, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
 80027f0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 80027f4:	0688      	lsls	r0, r1, #26
 80027f6:	f100 81c2 	bmi.w	8002b7e <z_cbvprintf_impl+0x9aa>
 80027fa:	f1b8 0f00 	cmp.w	r8, #0
 80027fe:	bfd4      	ite	le
 8002800:	2100      	movle	r1, #0
 8002802:	2101      	movgt	r1, #1
	if (c == 'f') {
 8002804:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
 8002806:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
 8002808:	f040 81bb 	bne.w	8002b82 <z_cbvprintf_impl+0x9ae>
		if (decimals < 0) {
 800280c:	eb13 0508 	adds.w	r5, r3, r8
 8002810:	f140 81b9 	bpl.w	8002b86 <z_cbvprintf_impl+0x9b2>
			decimals = 0;
 8002814:	2500      	movs	r5, #0
 8002816:	e1b9      	b.n	8002b8c <z_cbvprintf_impl+0x9b8>
		switch (conv->specifier) {
 8002818:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 800281c:	2b20      	cmp	r3, #32
 800281e:	f63f af18 	bhi.w	8002652 <z_cbvprintf_impl+0x47e>
 8002822:	a001      	add	r0, pc, #4	; (adr r0, 8002828 <z_cbvprintf_impl+0x654>)
 8002824:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002828:	08002a2f 	.word	0x08002a2f
 800282c:	08002653 	.word	0x08002653
 8002830:	08002653 	.word	0x08002653
 8002834:	08002653 	.word	0x08002653
 8002838:	08002653 	.word	0x08002653
 800283c:	08002653 	.word	0x08002653
 8002840:	08002653 	.word	0x08002653
 8002844:	08002653 	.word	0x08002653
 8002848:	08002653 	.word	0x08002653
 800284c:	08002717 	.word	0x08002717
 8002850:	08002653 	.word	0x08002653
 8002854:	080028d9 	.word	0x080028d9
 8002858:	080029cf 	.word	0x080029cf
 800285c:	08002717 	.word	0x08002717
 8002860:	08002717 	.word	0x08002717
 8002864:	08002717 	.word	0x08002717
 8002868:	08002653 	.word	0x08002653
 800286c:	080029cf 	.word	0x080029cf
 8002870:	08002653 	.word	0x08002653
 8002874:	08002653 	.word	0x08002653
 8002878:	08002653 	.word	0x08002653
 800287c:	08002653 	.word	0x08002653
 8002880:	08002a65 	.word	0x08002a65
 8002884:	08002a2f 	.word	0x08002a2f
 8002888:	08002a33 	.word	0x08002a33
 800288c:	08002653 	.word	0x08002653
 8002890:	08002653 	.word	0x08002653
 8002894:	080028b3 	.word	0x080028b3
 8002898:	08002653 	.word	0x08002653
 800289c:	08002a2f 	.word	0x08002a2f
 80028a0:	08002653 	.word	0x08002653
 80028a4:	08002653 	.word	0x08002653
 80028a8:	08002a2f 	.word	0x08002a2f
			OUTC('%');
 80028ac:	4651      	mov	r1, sl
 80028ae:	4610      	mov	r0, r2
 80028b0:	e4a2      	b.n	80021f8 <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
 80028b2:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 80028b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
 80028b8:	db09      	blt.n	80028ce <z_cbvprintf_impl+0x6fa>
				len = strnlen(bps, precision);
 80028ba:	4641      	mov	r1, r8
 80028bc:	4610      	mov	r0, r2
 80028be:	9203      	str	r2, [sp, #12]
 80028c0:	f002 febe 	bl	8005640 <strnlen>
				len = strlen(bps);
 80028c4:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
 80028c6:	2700      	movs	r7, #0
			bpe = bps + len;
 80028c8:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
 80028ca:	b962      	cbnz	r2, 80028e6 <z_cbvprintf_impl+0x712>
 80028cc:	e6c1      	b.n	8002652 <z_cbvprintf_impl+0x47e>
				len = strlen(bps);
 80028ce:	4610      	mov	r0, r2
 80028d0:	9203      	str	r2, [sp, #12]
 80028d2:	f7fd fc75 	bl	80001c0 <strlen>
 80028d6:	e7f5      	b.n	80028c4 <z_cbvprintf_impl+0x6f0>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 80028d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80028da:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
 80028de:	2700      	movs	r7, #0
			bpe = buf + 1;
 80028e0:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
 80028e4:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
 80028e6:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
 80028e8:	b107      	cbz	r7, 80028ec <z_cbvprintf_impl+0x718>
			nj_len += 1U;
 80028ea:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 80028ec:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
 80028f0:	06c1      	lsls	r1, r0, #27
 80028f2:	f140 8237 	bpl.w	8002d64 <z_cbvprintf_impl+0xb90>
			nj_len += 2U;
 80028f6:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
 80028f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
 80028fa:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
 80028fc:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 80028fe:	bf44      	itt	mi
 8002900:	9910      	ldrmi	r1, [sp, #64]	; 0x40
 8002902:	185b      	addmi	r3, r3, r1
		if (width > 0) {
 8002904:	f1bb 0f00 	cmp.w	fp, #0
 8002908:	dd23      	ble.n	8002952 <z_cbvprintf_impl+0x77e>
			width -= (int)nj_len;
 800290a:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
 800290e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002912:	0759      	lsls	r1, r3, #29
 8002914:	f3c3 0880 	ubfx	r8, r3, #2, #1
 8002918:	d41b      	bmi.n	8002952 <z_cbvprintf_impl+0x77e>
				if (conv->flag_zero) {
 800291a:	0658      	lsls	r0, r3, #25
 800291c:	f140 8236 	bpl.w	8002d8c <z_cbvprintf_impl+0xbb8>
					if (sign != 0) {
 8002920:	2f00      	cmp	r7, #0
 8002922:	f000 8236 	beq.w	8002d92 <z_cbvprintf_impl+0xbbe>
						OUTC(sign);
 8002926:	4651      	mov	r1, sl
 8002928:	4638      	mov	r0, r7
 800292a:	9203      	str	r2, [sp, #12]
 800292c:	47c8      	blx	r9
 800292e:	2800      	cmp	r0, #0
 8002930:	f2c0 8224 	blt.w	8002d7c <z_cbvprintf_impl+0xba8>
 8002934:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
 8002936:	4647      	mov	r7, r8
						OUTC(sign);
 8002938:	3601      	adds	r6, #1
					pad = '0';
 800293a:	f04f 0830 	mov.w	r8, #48	; 0x30
 800293e:	445e      	add	r6, fp
 8002940:	465b      	mov	r3, fp
				while (width-- > 0) {
 8002942:	2b00      	cmp	r3, #0
 8002944:	eba6 000b 	sub.w	r0, r6, fp
 8002948:	f10b 3bff 	add.w	fp, fp, #4294967295
 800294c:	f300 820e 	bgt.w	8002d6c <z_cbvprintf_impl+0xb98>
 8002950:	4606      	mov	r6, r0
		if (sign != 0) {
 8002952:	b147      	cbz	r7, 8002966 <z_cbvprintf_impl+0x792>
			OUTC(sign);
 8002954:	4651      	mov	r1, sl
 8002956:	4638      	mov	r0, r7
 8002958:	9203      	str	r2, [sp, #12]
 800295a:	47c8      	blx	r9
 800295c:	2800      	cmp	r0, #0
 800295e:	f2c0 820d 	blt.w	8002d7c <z_cbvprintf_impl+0xba8>
 8002962:	9a03      	ldr	r2, [sp, #12]
 8002964:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
 8002966:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800296a:	0659      	lsls	r1, r3, #25
 800296c:	f140 8265 	bpl.w	8002e3a <z_cbvprintf_impl+0xc66>
			if (conv->specifier_a) {
 8002970:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8002974:	2b00      	cmp	r3, #0
 8002976:	eba6 0602 	sub.w	r6, r6, r2
 800297a:	f280 8219 	bge.w	8002db0 <z_cbvprintf_impl+0xbdc>
 800297e:	4617      	mov	r7, r2
 8002980:	46b8      	mov	r8, r7
 8002982:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
 8002984:	f817 0b01 	ldrb.w	r0, [r7], #1
 8002988:	2870      	cmp	r0, #112	; 0x70
 800298a:	f040 8205 	bne.w	8002d98 <z_cbvprintf_impl+0xbc4>
			while (pad_len-- > 0) {
 800298e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8002990:	461e      	mov	r6, r3
 8002992:	441f      	add	r7, r3
 8002994:	1bbb      	subs	r3, r7, r6
 8002996:	2b00      	cmp	r3, #0
 8002998:	f300 8248 	bgt.w	8002e2c <z_cbvprintf_impl+0xc58>
			OUTS(cp, bpe);
 800299c:	462b      	mov	r3, r5
 800299e:	4642      	mov	r2, r8
			OUTS(bps, bpe);
 80029a0:	4651      	mov	r1, sl
 80029a2:	4648      	mov	r0, r9
 80029a4:	f008 fe19 	bl	800b5da <outs>
 80029a8:	2800      	cmp	r0, #0
 80029aa:	f2c0 81e7 	blt.w	8002d7c <z_cbvprintf_impl+0xba8>
 80029ae:	4430      	add	r0, r6
			while (pad_len-- > 0) {
 80029b0:	4606      	mov	r6, r0
 80029b2:	4483      	add	fp, r0
		while (width > 0) {
 80029b4:	ebab 0306 	sub.w	r3, fp, r6
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f77f ae4a 	ble.w	8002652 <z_cbvprintf_impl+0x47e>
			OUTC(' ');
 80029be:	4651      	mov	r1, sl
 80029c0:	2020      	movs	r0, #32
 80029c2:	47c8      	blx	r9
 80029c4:	2800      	cmp	r0, #0
 80029c6:	f2c0 81d9 	blt.w	8002d7c <z_cbvprintf_impl+0xba8>
 80029ca:	3601      	adds	r6, #1
			--width;
 80029cc:	e7f2      	b.n	80029b4 <z_cbvprintf_impl+0x7e0>
			if (conv->flag_plus) {
 80029ce:	073d      	lsls	r5, r7, #28
 80029d0:	d42b      	bmi.n	8002a2a <z_cbvprintf_impl+0x856>
				sign = ' ';
 80029d2:	f017 0710 	ands.w	r7, r7, #16
 80029d6:	bf18      	it	ne
 80029d8:	2720      	movne	r7, #32
			sint = value->sint;
 80029da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
 80029de:	2b00      	cmp	r3, #0
 80029e0:	da05      	bge.n	80029ee <z_cbvprintf_impl+0x81a>
				value->uint = (uint_value_type)-sint;
 80029e2:	4252      	negs	r2, r2
 80029e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80029e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
 80029ec:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
 80029ee:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	aa0e      	add	r2, sp, #56	; 0x38
 80029f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80029fa:	ab13      	add	r3, sp, #76	; 0x4c
 80029fc:	f7ff fb9e 	bl	800213c <encode_uint>
 8002a00:	4602      	mov	r2, r0
			if (precision >= 0) {
 8002a02:	f1b8 0f00 	cmp.w	r8, #0
 8002a06:	f10d 0565 	add.w	r5, sp, #101	; 0x65
 8002a0a:	f6ff af5e 	blt.w	80028ca <z_cbvprintf_impl+0x6f6>
				conv->flag_zero = false;
 8002a0e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
 8002a12:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
 8002a14:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
 8002a18:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 8002a1a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
 8002a1e:	f67f af54 	bls.w	80028ca <z_cbvprintf_impl+0x6f6>
					conv->pad0_value = precision - (int)len;
 8002a22:	eba8 0303 	sub.w	r3, r8, r3
 8002a26:	930f      	str	r3, [sp, #60]	; 0x3c
 8002a28:	e74f      	b.n	80028ca <z_cbvprintf_impl+0x6f6>
				sign = '+';
 8002a2a:	272b      	movs	r7, #43	; 0x2b
 8002a2c:	e7d5      	b.n	80029da <z_cbvprintf_impl+0x806>
		switch (conv->specifier) {
 8002a2e:	2700      	movs	r7, #0
 8002a30:	e7dd      	b.n	80029ee <z_cbvprintf_impl+0x81a>
			if (value->ptr != NULL) {
 8002a32:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002a34:	2800      	cmp	r0, #0
 8002a36:	f000 8191 	beq.w	8002d5c <z_cbvprintf_impl+0xb88>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8002a3a:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	aa0e      	add	r2, sp, #56	; 0x38
 8002a42:	ab13      	add	r3, sp, #76	; 0x4c
 8002a44:	2100      	movs	r1, #0
 8002a46:	f7ff fb79 	bl	800213c <encode_uint>
				conv->altform_0c = true;
 8002a4a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8002a4e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002a52:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8002a56:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8002a5a:	4602      	mov	r2, r0
				conv->altform_0c = true;
 8002a5c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
 8002a60:	2700      	movs	r7, #0
				goto prec_int_pad0;
 8002a62:	e7ce      	b.n	8002a02 <z_cbvprintf_impl+0x82e>
				store_count(conv, value->ptr, count);
 8002a64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
 8002a66:	2907      	cmp	r1, #7
 8002a68:	f63f adf3 	bhi.w	8002652 <z_cbvprintf_impl+0x47e>
 8002a6c:	e8df f001 	tbb	[pc, r1]
 8002a70:	0c06040c 	.word	0x0c06040c
 8002a74:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8002a78:	701e      	strb	r6, [r3, #0]
		break;
 8002a7a:	e5ea      	b.n	8002652 <z_cbvprintf_impl+0x47e>
		*(short *)dp = (short)count;
 8002a7c:	801e      	strh	r6, [r3, #0]
		break;
 8002a7e:	e5e8      	b.n	8002652 <z_cbvprintf_impl+0x47e>
		*(intmax_t *)dp = (intmax_t)count;
 8002a80:	17f2      	asrs	r2, r6, #31
 8002a82:	e9c3 6200 	strd	r6, r2, [r3]
		break;
 8002a86:	e5e4      	b.n	8002652 <z_cbvprintf_impl+0x47e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8002a88:	601e      	str	r6, [r3, #0]
		break;
 8002a8a:	e5e2      	b.n	8002652 <z_cbvprintf_impl+0x47e>
		*sign = '-';
 8002a8c:	272d      	movs	r7, #45	; 0x2d
 8002a8e:	e64e      	b.n	800272e <z_cbvprintf_impl+0x55a>
		*sign = '+';
 8002a90:	272b      	movs	r7, #43	; 0x2b
 8002a92:	e64c      	b.n	800272e <z_cbvprintf_impl+0x55a>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
 8002a94:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002a98:	4285      	cmp	r5, r0
 8002a9a:	d131      	bne.n	8002b00 <z_cbvprintf_impl+0x92c>
			if (isupper((int)c)) {
 8002a9c:	3201      	adds	r2, #1
 8002a9e:	48b9      	ldr	r0, [pc, #740]	; (8002d84 <z_cbvprintf_impl+0xbb0>)
 8002aa0:	b2d2      	uxtb	r2, r2
		if (fract == 0) {
 8002aa2:	430b      	orrs	r3, r1
 8002aa4:	5c12      	ldrb	r2, [r2, r0]
 8002aa6:	f002 0203 	and.w	r2, r2, #3
 8002aaa:	d11b      	bne.n	8002ae4 <z_cbvprintf_impl+0x910>
			if (isupper((int)c)) {
 8002aac:	2a01      	cmp	r2, #1
 8002aae:	d111      	bne.n	8002ad4 <z_cbvprintf_impl+0x900>
				*buf++ = 'I';
 8002ab0:	2349      	movs	r3, #73	; 0x49
 8002ab2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
 8002ab6:	234e      	movs	r3, #78	; 0x4e
 8002ab8:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
 8002abc:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
 8002abe:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
 8002ac2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002ac6:	f36f 1386 	bfc	r3, #6, #1
 8002aca:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
 8002ace:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
 8002ad2:	e707      	b.n	80028e4 <z_cbvprintf_impl+0x710>
				*buf++ = 'i';
 8002ad4:	2369      	movs	r3, #105	; 0x69
 8002ad6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 8002ada:	236e      	movs	r3, #110	; 0x6e
 8002adc:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
 8002ae0:	2366      	movs	r3, #102	; 0x66
 8002ae2:	e7ec      	b.n	8002abe <z_cbvprintf_impl+0x8ea>
			if (isupper((int)c)) {
 8002ae4:	2a01      	cmp	r2, #1
				*buf++ = 'N';
 8002ae6:	bf07      	ittee	eq
 8002ae8:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
 8002aea:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
 8002aec:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
 8002aee:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
 8002af0:	bf0c      	ite	eq
 8002af2:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 8002af6:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
 8002afa:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 8002afe:	e7de      	b.n	8002abe <z_cbvprintf_impl+0x8ea>
	bool is_subnormal = (expo == 0) && (fract != 0);
 8002b00:	2000      	movs	r0, #0
 8002b02:	e622      	b.n	800274a <z_cbvprintf_impl+0x576>
				expo--;
 8002b04:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
 8002b06:	1849      	adds	r1, r1, r1
 8002b08:	415b      	adcs	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	dafa      	bge.n	8002b04 <z_cbvprintf_impl+0x930>
 8002b0e:	e9cd 1308 	strd	r1, r3, [sp, #32]
 8002b12:	e62e      	b.n	8002772 <z_cbvprintf_impl+0x59e>
			fract >>= 1;
 8002b14:	0840      	lsrs	r0, r0, #1
 8002b16:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 8002b1a:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8002b1c:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
 8002b20:	46ac      	mov	ip, r5
			expo++;
 8002b22:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8002b26:	d2f5      	bcs.n	8002b14 <z_cbvprintf_impl+0x940>
		fract *= 5U;
 8002b28:	fb0e f501 	mul.w	r5, lr, r1
 8002b2c:	fba0 010e 	umull	r0, r1, r0, lr
 8002b30:	4429      	add	r1, r5
		decexp--;
 8002b32:	3b01      	subs	r3, #1
		expo++;
 8002b34:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
 8002b38:	f04f 0c01 	mov.w	ip, #1
 8002b3c:	e625      	b.n	800278a <z_cbvprintf_impl+0x5b6>
		fract += 2;
 8002b3e:	3102      	adds	r1, #2
 8002b40:	f140 0000 	adc.w	r0, r0, #0
 8002b44:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
 8002b48:	a808      	add	r0, sp, #32
 8002b4a:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8002b4e:	f008 fd15 	bl	800b57c <_ldiv5>
		decexp++;
 8002b52:	9b04      	ldr	r3, [sp, #16]
 8002b54:	9a03      	ldr	r2, [sp, #12]
 8002b56:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
 8002b5a:	3d01      	subs	r5, #1
		decexp++;
 8002b5c:	3301      	adds	r3, #1
			fract <<= 1;
 8002b5e:	1849      	adds	r1, r1, r1
 8002b60:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
 8002b62:	2800      	cmp	r0, #0
			expo--;
 8002b64:	f105 35ff 	add.w	r5, r5, #4294967295
		} while (!(fract & BIT_63));
 8002b68:	daf9      	bge.n	8002b5e <z_cbvprintf_impl+0x98a>
 8002b6a:	e9cd 1008 	strd	r1, r0, [sp, #32]
 8002b6e:	e615      	b.n	800279c <z_cbvprintf_impl+0x5c8>
 8002b70:	2300      	movs	r3, #0
 8002b72:	461d      	mov	r5, r3
 8002b74:	e617      	b.n	80027a6 <z_cbvprintf_impl+0x5d2>
			precision -= decexp;
 8002b76:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
 8002b7a:	2266      	movs	r2, #102	; 0x66
 8002b7c:	e638      	b.n	80027f0 <z_cbvprintf_impl+0x61c>
	bool prune_zero = false;
 8002b7e:	2100      	movs	r1, #0
 8002b80:	e640      	b.n	8002804 <z_cbvprintf_impl+0x630>
		decimals = precision + 1;
 8002b82:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
 8002b86:	2d10      	cmp	r5, #16
 8002b88:	bfa8      	it	ge
 8002b8a:	2510      	movge	r5, #16
 8002b8c:	2110      	movs	r1, #16
 8002b8e:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
 8002b90:	2000      	movs	r0, #0
 8002b92:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002b96:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
 8002b9a:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
 8002b9e:	b9a5      	cbnz	r5, 8002bca <z_cbvprintf_impl+0x9f6>
	fract += round;
 8002ba0:	9d08      	ldr	r5, [sp, #32]
 8002ba2:	1949      	adds	r1, r1, r5
 8002ba4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002ba6:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
 8002baa:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8002bae:	d21b      	bcs.n	8002be8 <z_cbvprintf_impl+0xa14>
	fract += round;
 8002bb0:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
 8002bb4:	2a66      	cmp	r2, #102	; 0x66
 8002bb6:	f040 8099 	bne.w	8002cec <z_cbvprintf_impl+0xb18>
		if (decexp > 0) {
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	dc23      	bgt.n	8002c06 <z_cbvprintf_impl+0xa32>
			*buf++ = '0';
 8002bbe:	2130      	movs	r1, #48	; 0x30
 8002bc0:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 8002bc4:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 8002bc8:	e02f      	b.n	8002c2a <z_cbvprintf_impl+0xa56>
	*v >>= 1;
 8002bca:	0849      	lsrs	r1, r1, #1
 8002bcc:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 8002bd0:	0840      	lsrs	r0, r0, #1
 8002bd2:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
 8002bd6:	a80a      	add	r0, sp, #40	; 0x28
 8002bd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002bdc:	3d01      	subs	r5, #1
 8002bde:	f008 fccd 	bl	800b57c <_ldiv5>
 8002be2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
 8002be6:	e7d8      	b.n	8002b9a <z_cbvprintf_impl+0x9c6>
	*v >>= 1;
 8002be8:	0849      	lsrs	r1, r1, #1
 8002bea:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
 8002bee:	a808      	add	r0, sp, #32
	*v >>= 1;
 8002bf0:	086d      	lsrs	r5, r5, #1
 8002bf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002bf6:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
 8002bfa:	f008 fcbf 	bl	800b57c <_ldiv5>
		decexp++;
 8002bfe:	9b05      	ldr	r3, [sp, #20]
 8002c00:	9a04      	ldr	r2, [sp, #16]
 8002c02:	3301      	adds	r3, #1
 8002c04:	e7d6      	b.n	8002bb4 <z_cbvprintf_impl+0x9e0>
	char *buf = bps;
 8002c06:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
 8002c08:	9907      	ldr	r1, [sp, #28]
 8002c0a:	2900      	cmp	r1, #0
 8002c0c:	dd0b      	ble.n	8002c26 <z_cbvprintf_impl+0xa52>
				*buf++ = _get_digit(&fract, &digit_count);
 8002c0e:	a907      	add	r1, sp, #28
 8002c10:	a808      	add	r0, sp, #32
 8002c12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c16:	f008 fcc9 	bl	800b5ac <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 8002c1a:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
 8002c1c:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
 8002c20:	3b01      	subs	r3, #1
 8002c22:	9a04      	ldr	r2, [sp, #16]
 8002c24:	d1f0      	bne.n	8002c08 <z_cbvprintf_impl+0xa34>
			conv->pad0_value = decexp;
 8002c26:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
 8002c28:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
 8002c2a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8002c2e:	0689      	lsls	r1, r1, #26
 8002c30:	d402      	bmi.n	8002c38 <z_cbvprintf_impl+0xa64>
 8002c32:	f1b8 0f00 	cmp.w	r8, #0
 8002c36:	dd1d      	ble.n	8002c74 <z_cbvprintf_impl+0xaa0>
			*buf++ = '.';
 8002c38:	212e      	movs	r1, #46	; 0x2e
 8002c3a:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
 8002c3e:	b19b      	cbz	r3, 8002c68 <z_cbvprintf_impl+0xa94>
 8002c40:	f1b8 0f00 	cmp.w	r8, #0
 8002c44:	dd16      	ble.n	8002c74 <z_cbvprintf_impl+0xaa0>
			conv->pad0_value = -decexp;
 8002c46:	4259      	negs	r1, r3
 8002c48:	4541      	cmp	r1, r8
 8002c4a:	bfa8      	it	ge
 8002c4c:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
 8002c4e:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
 8002c52:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
 8002c54:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
 8002c56:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
 8002c5a:	bfd4      	ite	le
 8002c5c:	2100      	movle	r1, #0
 8002c5e:	2101      	movgt	r1, #1
 8002c60:	f361 1045 	bfi	r0, r1, #5, #1
 8002c64:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
 8002c68:	f1b8 0f00 	cmp.w	r8, #0
 8002c6c:	dd02      	ble.n	8002c74 <z_cbvprintf_impl+0xaa0>
 8002c6e:	9907      	ldr	r1, [sp, #28]
 8002c70:	2900      	cmp	r1, #0
 8002c72:	dc56      	bgt.n	8002d22 <z_cbvprintf_impl+0xb4e>
	if (prune_zero) {
 8002c74:	9903      	ldr	r1, [sp, #12]
 8002c76:	2900      	cmp	r1, #0
 8002c78:	d163      	bne.n	8002d42 <z_cbvprintf_impl+0xb6e>
	conv->pad0_pre_exp = precision;
 8002c7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
 8002c7e:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8002c82:	2945      	cmp	r1, #69	; 0x45
 8002c84:	d121      	bne.n	8002cca <z_cbvprintf_impl+0xaf6>
		if (decexp < 0) {
 8002c86:	2b00      	cmp	r3, #0
		*buf++ = c;
 8002c88:	4629      	mov	r1, r5
			decexp = -decexp;
 8002c8a:	bfb8      	it	lt
 8002c8c:	425b      	neglt	r3, r3
		*buf++ = c;
 8002c8e:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
 8002c92:	bfb4      	ite	lt
 8002c94:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
 8002c96:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
 8002c98:	2b63      	cmp	r3, #99	; 0x63
 8002c9a:	706a      	strb	r2, [r5, #1]
 8002c9c:	dd09      	ble.n	8002cb2 <z_cbvprintf_impl+0xade>
			*buf++ = (decexp / 100) + '0';
 8002c9e:	2064      	movs	r0, #100	; 0x64
 8002ca0:	fbb3 f2f0 	udiv	r2, r3, r0
 8002ca4:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 8002ca8:	1ce9      	adds	r1, r5, #3
 8002caa:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
 8002cae:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
 8002cb2:	200a      	movs	r0, #10
 8002cb4:	460d      	mov	r5, r1
 8002cb6:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
 8002cba:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
 8002cbe:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
 8002cc2:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 8002cc4:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
 8002cc8:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
 8002cca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	dc43      	bgt.n	8002d58 <z_cbvprintf_impl+0xb84>
 8002cd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bfd4      	ite	le
 8002cd6:	2300      	movle	r3, #0
 8002cd8:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
 8002cda:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8002cde:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
 8002ce2:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
 8002ce4:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
 8002ce8:	702b      	strb	r3, [r5, #0]
	return bps;
 8002cea:	e5fb      	b.n	80028e4 <z_cbvprintf_impl+0x710>
		*buf = _get_digit(&fract, &digit_count);
 8002cec:	a907      	add	r1, sp, #28
 8002cee:	a808      	add	r0, sp, #32
 8002cf0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002cf4:	f008 fc5a 	bl	800b5ac <_get_digit>
		if (*buf++ != '0') {
 8002cf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
 8002cfc:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
 8002d00:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
 8002d04:	2830      	cmp	r0, #48	; 0x30
			decexp--;
 8002d06:	bf18      	it	ne
 8002d08:	f103 33ff 	addne.w	r3, r3, #4294967295
		if (conv->flag_hash || (precision > 0)) {
 8002d0c:	0688      	lsls	r0, r1, #26
 8002d0e:	d402      	bmi.n	8002d16 <z_cbvprintf_impl+0xb42>
 8002d10:	f1b8 0f00 	cmp.w	r8, #0
 8002d14:	dd12      	ble.n	8002d3c <z_cbvprintf_impl+0xb68>
			*buf++ = '.';
 8002d16:	212e      	movs	r1, #46	; 0x2e
 8002d18:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
 8002d1c:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
 8002d20:	e7a2      	b.n	8002c68 <z_cbvprintf_impl+0xa94>
		*buf++ = _get_digit(&fract, &digit_count);
 8002d22:	a907      	add	r1, sp, #28
 8002d24:	a808      	add	r0, sp, #32
 8002d26:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002d2a:	f008 fc3f 	bl	800b5ac <_get_digit>
		precision--;
 8002d2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8002d32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
 8002d36:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
 8002d3a:	e795      	b.n	8002c68 <z_cbvprintf_impl+0xa94>
		if (*buf++ != '0') {
 8002d3c:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 8002d40:	e798      	b.n	8002c74 <z_cbvprintf_impl+0xaa0>
		conv->pad0_pre_exp = 0;
 8002d42:	2100      	movs	r1, #0
 8002d44:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
 8002d46:	4628      	mov	r0, r5
 8002d48:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8002d4c:	2930      	cmp	r1, #48	; 0x30
 8002d4e:	d0fa      	beq.n	8002d46 <z_cbvprintf_impl+0xb72>
		if (*buf != '.') {
 8002d50:	292e      	cmp	r1, #46	; 0x2e
 8002d52:	bf18      	it	ne
 8002d54:	4605      	movne	r5, r0
 8002d56:	e792      	b.n	8002c7e <z_cbvprintf_impl+0xaaa>
		|| (conv->pad0_pre_exp > 0);
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e7be      	b.n	8002cda <z_cbvprintf_impl+0xb06>
			bpe = bps + 5;
 8002d5c:	4d0a      	ldr	r5, [pc, #40]	; (8002d88 <z_cbvprintf_impl+0xbb4>)
		char sign = 0;
 8002d5e:	4607      	mov	r7, r0
			bps = "(nil)";
 8002d60:	1f6a      	subs	r2, r5, #5
 8002d62:	e5c0      	b.n	80028e6 <z_cbvprintf_impl+0x712>
		} else if (conv->altform_0) {
 8002d64:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
 8002d66:	bf48      	it	mi
 8002d68:	3301      	addmi	r3, #1
 8002d6a:	e5c5      	b.n	80028f8 <z_cbvprintf_impl+0x724>
					OUTC(pad);
 8002d6c:	4651      	mov	r1, sl
 8002d6e:	4640      	mov	r0, r8
 8002d70:	9203      	str	r2, [sp, #12]
 8002d72:	47c8      	blx	r9
 8002d74:	2800      	cmp	r0, #0
 8002d76:	9a03      	ldr	r2, [sp, #12]
 8002d78:	f6bf ade2 	bge.w	8002940 <z_cbvprintf_impl+0x76c>
#undef OUTS
#undef OUTC
}
 8002d7c:	b01b      	add	sp, #108	; 0x6c
 8002d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d82:	bf00      	nop
 8002d84:	0800c81c 	.word	0x0800c81c
 8002d88:	0800cbac 	.word	0x0800cbac
				char pad = ' ';
 8002d8c:	f04f 0820 	mov.w	r8, #32
 8002d90:	e5d5      	b.n	800293e <z_cbvprintf_impl+0x76a>
					pad = '0';
 8002d92:	f04f 0830 	mov.w	r8, #48	; 0x30
 8002d96:	e5d2      	b.n	800293e <z_cbvprintf_impl+0x76a>
					OUTC(*cp++);
 8002d98:	4651      	mov	r1, sl
 8002d9a:	47c8      	blx	r9
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	f6bf adef 	bge.w	8002980 <z_cbvprintf_impl+0x7ac>
 8002da2:	e7eb      	b.n	8002d7c <z_cbvprintf_impl+0xba8>
					OUTC(*cp++);
 8002da4:	4651      	mov	r1, sl
 8002da6:	9203      	str	r2, [sp, #12]
 8002da8:	47c8      	blx	r9
 8002daa:	2800      	cmp	r0, #0
 8002dac:	9a03      	ldr	r2, [sp, #12]
 8002dae:	dbe5      	blt.n	8002d7c <z_cbvprintf_impl+0xba8>
				while (isdigit((int)*cp)) {
 8002db0:	7810      	ldrb	r0, [r2, #0]
 8002db2:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <z_cbvprintf_impl+0xcbc>)
 8002db4:	5cc3      	ldrb	r3, [r0, r3]
 8002db6:	075b      	lsls	r3, r3, #29
 8002db8:	4617      	mov	r7, r2
 8002dba:	eb06 0802 	add.w	r8, r6, r2
 8002dbe:	f102 0201 	add.w	r2, r2, #1
 8002dc2:	d4ef      	bmi.n	8002da4 <z_cbvprintf_impl+0xbd0>
				if (!conv->pad_postdp) {
 8002dc4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
 8002dc8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
 8002dca:	0699      	lsls	r1, r3, #26
 8002dcc:	d407      	bmi.n	8002dde <z_cbvprintf_impl+0xc0a>
 8002dce:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
 8002dd0:	2e00      	cmp	r6, #0
 8002dd2:	eba8 0206 	sub.w	r2, r8, r6
 8002dd6:	f106 36ff 	add.w	r6, r6, #4294967295
 8002dda:	dc0f      	bgt.n	8002dfc <z_cbvprintf_impl+0xc28>
 8002ddc:	4690      	mov	r8, r2
				if (*cp == '.') {
 8002dde:	7838      	ldrb	r0, [r7, #0]
 8002de0:	282e      	cmp	r0, #46	; 0x2e
 8002de2:	d108      	bne.n	8002df6 <z_cbvprintf_impl+0xc22>
					OUTC(*cp++);
 8002de4:	4651      	mov	r1, sl
 8002de6:	47c8      	blx	r9
						OUTC('0');
 8002de8:	2800      	cmp	r0, #0
 8002dea:	dbc7      	blt.n	8002d7c <z_cbvprintf_impl+0xba8>
					while (pad_len-- > 0) {
 8002dec:	2e00      	cmp	r6, #0
						OUTC('0');
 8002dee:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
 8002df2:	dc09      	bgt.n	8002e08 <z_cbvprintf_impl+0xc34>
					OUTC(*cp++);
 8002df4:	3701      	adds	r7, #1
 8002df6:	eba8 0607 	sub.w	r6, r8, r7
 8002dfa:	e00e      	b.n	8002e1a <z_cbvprintf_impl+0xc46>
						OUTC('0');
 8002dfc:	4651      	mov	r1, sl
 8002dfe:	2030      	movs	r0, #48	; 0x30
 8002e00:	47c8      	blx	r9
 8002e02:	2800      	cmp	r0, #0
 8002e04:	dae4      	bge.n	8002dd0 <z_cbvprintf_impl+0xbfc>
 8002e06:	e7b9      	b.n	8002d7c <z_cbvprintf_impl+0xba8>
						OUTC('0');
 8002e08:	4651      	mov	r1, sl
 8002e0a:	2030      	movs	r0, #48	; 0x30
 8002e0c:	47c8      	blx	r9
 8002e0e:	3e01      	subs	r6, #1
 8002e10:	e7ea      	b.n	8002de8 <z_cbvprintf_impl+0xc14>
					OUTC(*cp++);
 8002e12:	4651      	mov	r1, sl
 8002e14:	47c8      	blx	r9
 8002e16:	2800      	cmp	r0, #0
 8002e18:	dbb0      	blt.n	8002d7c <z_cbvprintf_impl+0xba8>
				while (isdigit((int)*cp)) {
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <z_cbvprintf_impl+0xcbc>)
 8002e1c:	46b8      	mov	r8, r7
 8002e1e:	19f3      	adds	r3, r6, r7
 8002e20:	f817 0b01 	ldrb.w	r0, [r7], #1
 8002e24:	5c12      	ldrb	r2, [r2, r0]
 8002e26:	0752      	lsls	r2, r2, #29
 8002e28:	d4f3      	bmi.n	8002e12 <z_cbvprintf_impl+0xc3e>
 8002e2a:	e5b0      	b.n	800298e <z_cbvprintf_impl+0x7ba>
				OUTC('0');
 8002e2c:	4651      	mov	r1, sl
 8002e2e:	2030      	movs	r0, #48	; 0x30
 8002e30:	47c8      	blx	r9
 8002e32:	2800      	cmp	r0, #0
 8002e34:	dba2      	blt.n	8002d7c <z_cbvprintf_impl+0xba8>
 8002e36:	3601      	adds	r6, #1
 8002e38:	e5ac      	b.n	8002994 <z_cbvprintf_impl+0x7c0>
			if (conv->altform_0c | conv->altform_0) {
 8002e3a:	06d8      	lsls	r0, r3, #27
 8002e3c:	d401      	bmi.n	8002e42 <z_cbvprintf_impl+0xc6e>
 8002e3e:	0719      	lsls	r1, r3, #28
 8002e40:	d507      	bpl.n	8002e52 <z_cbvprintf_impl+0xc7e>
				OUTC('0');
 8002e42:	4651      	mov	r1, sl
 8002e44:	2030      	movs	r0, #48	; 0x30
 8002e46:	9203      	str	r2, [sp, #12]
 8002e48:	47c8      	blx	r9
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	db96      	blt.n	8002d7c <z_cbvprintf_impl+0xba8>
 8002e4e:	9a03      	ldr	r2, [sp, #12]
 8002e50:	3601      	adds	r6, #1
			if (conv->altform_0c) {
 8002e52:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8002e56:	06db      	lsls	r3, r3, #27
 8002e58:	d508      	bpl.n	8002e6c <z_cbvprintf_impl+0xc98>
				OUTC(conv->specifier);
 8002e5a:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8002e5e:	9203      	str	r2, [sp, #12]
 8002e60:	4651      	mov	r1, sl
 8002e62:	47c8      	blx	r9
 8002e64:	2800      	cmp	r0, #0
 8002e66:	db89      	blt.n	8002d7c <z_cbvprintf_impl+0xba8>
 8002e68:	9a03      	ldr	r2, [sp, #12]
 8002e6a:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
 8002e6c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8002e6e:	4437      	add	r7, r6
 8002e70:	1bbb      	subs	r3, r7, r6
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	dc01      	bgt.n	8002e7a <z_cbvprintf_impl+0xca6>
			OUTS(bps, bpe);
 8002e76:	462b      	mov	r3, r5
 8002e78:	e592      	b.n	80029a0 <z_cbvprintf_impl+0x7cc>
				OUTC('0');
 8002e7a:	4651      	mov	r1, sl
 8002e7c:	2030      	movs	r0, #48	; 0x30
 8002e7e:	9203      	str	r2, [sp, #12]
 8002e80:	47c8      	blx	r9
 8002e82:	2800      	cmp	r0, #0
 8002e84:	f6ff af7a 	blt.w	8002d7c <z_cbvprintf_impl+0xba8>
 8002e88:	9a03      	ldr	r2, [sp, #12]
 8002e8a:	3601      	adds	r6, #1
 8002e8c:	e7f0      	b.n	8002e70 <z_cbvprintf_impl+0xc9c>
 8002e8e:	bf00      	nop
 8002e90:	0800c81d 	.word	0x0800c81d

08002e94 <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8002e94:	f04f 0210 	mov.w	r2, #16
 8002e98:	f3ef 8311 	mrs	r3, BASEPRI
 8002e9c:	f382 8812 	msr	BASEPRI_MAX, r2
 8002ea0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8002eac:	4b02      	ldr	r3, [pc, #8]	; (8002eb8 <stm32l4_init+0x24>)
 8002eae:	4a03      	ldr	r2, [pc, #12]	; (8002ebc <stm32l4_init+0x28>)
 8002eb0:	601a      	str	r2, [r3, #0]

	return 0;
}
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	200002d0 	.word	0x200002d0
 8002ebc:	003d0900 	.word	0x003d0900

08002ec0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8002ec0:	4901      	ldr	r1, [pc, #4]	; (8002ec8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8002ec2:	2210      	movs	r2, #16
	str	r2, [r1]
 8002ec4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8002ec6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8002ec8:	e000ed10 	.word	0xe000ed10

08002ecc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8002ecc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8002ece:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8002ed0:	f380 8811 	msr	BASEPRI, r0
	isb
 8002ed4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8002ed8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8002edc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8002ede:	b662      	cpsie	i
	isb
 8002ee0:	f3bf 8f6f 	isb	sy

	bx	lr
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop

08002ee8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8002ee8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	db08      	blt.n	8002f00 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f000 001f 	and.w	r0, r0, #31
 8002ef4:	fa02 f000 	lsl.w	r0, r2, r0
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	4a02      	ldr	r2, [pc, #8]	; (8002f04 <arch_irq_enable+0x1c>)
 8002efc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	e000e100 	.word	0xe000e100

08002f08 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8002f08:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002f0a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0c:	bfa8      	it	ge
 8002f0e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8002f12:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f16:	bfb8      	it	lt
 8002f18:	4b06      	ldrlt	r3, [pc, #24]	; (8002f34 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1a:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8002f1e:	bfac      	ite	ge
 8002f20:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f24:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f28:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2a:	bfb4      	ite	lt
 8002f2c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8002f32:	4770      	bx	lr
 8002f34:	e000ed14 	.word	0xe000ed14

08002f38 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8002f38:	bf30      	wfi
    b z_SysNmiOnReset
 8002f3a:	f7ff bffd 	b.w	8002f38 <z_SysNmiOnReset>
 8002f3e:	bf00      	nop

08002f40 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8002f40:	4a0f      	ldr	r2, [pc, #60]	; (8002f80 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8002f42:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <z_arm_prep_c+0x44>)
 8002f46:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002f4a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f50:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8002f54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f58:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002f60:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8002f64:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8002f68:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8002f6c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8002f70:	f001 f930 	bl	80041d4 <z_bss_zero>
	z_data_copy();
 8002f74:	f001 fe58 	bl	8004c28 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8002f78:	f000 f9ca 	bl	8003310 <z_arm_interrupt_init>
	z_cstart();
 8002f7c:	f001 f96e 	bl	800425c <z_cstart>
 8002f80:	08000000 	.word	0x08000000
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8002f88:	4a09      	ldr	r2, [pc, #36]	; (8002fb0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8002f8a:	490a      	ldr	r1, [pc, #40]	; (8002fb4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8002f8c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8002f8e:	6809      	ldr	r1, [r1, #0]
 8002f90:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8002f92:	4909      	ldr	r1, [pc, #36]	; (8002fb8 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8002f94:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8002f96:	684b      	ldr	r3, [r1, #4]
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	604b      	str	r3, [r1, #4]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8002fa8:	6893      	ldr	r3, [r2, #8]
}
 8002faa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000afc 	.word	0x20000afc
 8002fb4:	0800c818 	.word	0x0800c818
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8002fbc:	4912      	ldr	r1, [pc, #72]	; (8003008 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8002fbe:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8002fc0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8002fc4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8002fc6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8002fca:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002fce:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8002fd0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8002fd4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8002fd8:	4f0c      	ldr	r7, [pc, #48]	; (800300c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8002fda:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8002fde:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8002fe0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8002fe2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8002fe4:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 8002fe6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8002fe8:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8002fea:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8002fee:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8002ff0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8002ff2:	f000 f9d1 	bl	8003398 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8002ff6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8002ffa:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8002ffe:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8003002:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8003006:	4770      	bx	lr
    ldr r1, =_kernel
 8003008:	20000afc 	.word	0x20000afc
    ldr v4, =_SCS_ICSR
 800300c:	e000ed04 	.word	0xe000ed04

08003010 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8003010:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8003014:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8003016:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 800301a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 800301e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8003020:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8003024:	2902      	cmp	r1, #2
    beq _oops
 8003026:	d0ff      	beq.n	8003028 <_oops>

08003028 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8003028:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 800302a:	f008 faf1 	bl	800b610 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 800302e:	bd01      	pop	{r0, pc}

08003030 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8003030:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8003034:	9b00      	ldr	r3, [sp, #0]
 8003036:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 800303a:	490a      	ldr	r1, [pc, #40]	; (8003064 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 800303c:	9b01      	ldr	r3, [sp, #4]
 800303e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8003042:	9b02      	ldr	r3, [sp, #8]
 8003044:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8003048:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 800304c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003050:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8003054:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8003058:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 800305a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 800305c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 800305e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	0800b569 	.word	0x0800b569

08003068 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8003068:	4a09      	ldr	r2, [pc, #36]	; (8003090 <z_check_thread_stack_fail+0x28>)
{
 800306a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 800306c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 800306e:	b170      	cbz	r0, 800308e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8003070:	f113 0f16 	cmn.w	r3, #22
 8003074:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8003076:	d005      	beq.n	8003084 <z_check_thread_stack_fail+0x1c>
 8003078:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
 800307c:	429a      	cmp	r2, r3
 800307e:	d805      	bhi.n	800308c <z_check_thread_stack_fail+0x24>
 8003080:	4283      	cmp	r3, r0
 8003082:	d203      	bcs.n	800308c <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8003084:	4281      	cmp	r1, r0
 8003086:	bf28      	it	cs
 8003088:	2000      	movcs	r0, #0
 800308a:	4770      	bx	lr
 800308c:	2000      	movs	r0, #0
}
 800308e:	4770      	bx	lr
 8003090:	20000afc 	.word	0x20000afc

08003094 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8003094:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <arch_switch_to_main_thread+0x28>)
 8003098:	6098      	str	r0, [r3, #8]
{
 800309a:	460d      	mov	r5, r1
 800309c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 800309e:	f000 f97b 	bl	8003398 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 80030a2:	4620      	mov	r0, r4
 80030a4:	f385 8809 	msr	PSP, r5
 80030a8:	2100      	movs	r1, #0
 80030aa:	b663      	cpsie	if
 80030ac:	f381 8811 	msr	BASEPRI, r1
 80030b0:	f3bf 8f6f 	isb	sy
 80030b4:	2200      	movs	r2, #0
 80030b6:	2300      	movs	r3, #0
 80030b8:	f008 fa56 	bl	800b568 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 80030bc:	20000afc 	.word	0x20000afc

080030c0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 80030c0:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 80030c2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80030c6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80030ca:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 80030ce:	4904      	ldr	r1, [pc, #16]	; (80030e0 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 80030d0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 80030d2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 80030d4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 80030d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 80030da:	4902      	ldr	r1, [pc, #8]	; (80030e4 <_isr_wrapper+0x24>)
	bx r1
 80030dc:	4708      	bx	r1
 80030de:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80030e0:	0800c148 	.word	0x0800c148
	ldr r1, =z_arm_int_exit
 80030e4:	080030e9 	.word	0x080030e9

080030e8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 80030e8:	4b04      	ldr	r3, [pc, #16]	; (80030fc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 80030ea:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 80030ec:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 80030ee:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 80030f0:	d003      	beq.n	80030fa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 80030f2:	4903      	ldr	r1, [pc, #12]	; (8003100 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 80030f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 80030f8:	600a      	str	r2, [r1, #0]

080030fa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 80030fa:	4770      	bx	lr
	ldr r3, =_kernel
 80030fc:	20000afc 	.word	0x20000afc
	ldr r1, =_SCS_ICSR
 8003100:	e000ed04 	.word	0xe000ed04

08003104 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8003104:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8003106:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <mem_manage_fault+0x74>)
{
 8003108:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800310a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 800310c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800310e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
 8003110:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8003112:	0790      	lsls	r0, r2, #30
 8003114:	d520      	bpl.n	8003158 <mem_manage_fault+0x54>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 8003116:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8003118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800311a:	0612      	lsls	r2, r2, #24
 800311c:	d51c      	bpl.n	8003158 <mem_manage_fault+0x54>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
 800311e:	b119      	cbz	r1, 8003128 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8003120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003126:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8003128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800312a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800312c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800312e:	06d2      	lsls	r2, r2, #27
 8003130:	d415      	bmi.n	800315e <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8003134:	079b      	lsls	r3, r3, #30
 8003136:	d412      	bmi.n	800315e <mem_manage_fault+0x5a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8003138:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800313a:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <mem_manage_fault+0x74>)
 800313c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800313e:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 8003140:	bf42      	ittt	mi
 8003142:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
 8003144:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
 8003148:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800314a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800314c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8003150:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 8003152:	2300      	movs	r3, #0
 8003154:	7023      	strb	r3, [r4, #0]

	return reason;
}
 8003156:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
 8003158:	f06f 0015 	mvn.w	r0, #21
 800315c:	e7e4      	b.n	8003128 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <mem_manage_fault+0x74>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	0519      	lsls	r1, r3, #20
 8003164:	d5e8      	bpl.n	8003138 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8003166:	4629      	mov	r1, r5
 8003168:	f7ff ff7e 	bl	8003068 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 800316c:	2800      	cmp	r0, #0
 800316e:	d0e3      	beq.n	8003138 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003170:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8003174:	2002      	movs	r0, #2
 8003176:	e7e0      	b.n	800313a <mem_manage_fault+0x36>
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800317c:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <bus_fault.constprop.0+0x38>)
 800317e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8003180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8003182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003184:	0592      	lsls	r2, r2, #22
 8003186:	d508      	bpl.n	800319a <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8003188:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 800318a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800318c:	0412      	lsls	r2, r2, #16
 800318e:	d504      	bpl.n	800319a <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 8003190:	b118      	cbz	r0, 800319a <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8003192:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003194:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003198:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <bus_fault.constprop.0+0x38>)
 800319c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800319e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031a0:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 80031a2:	bf58      	it	pl
 80031a4:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80031a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 80031a8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80031aa:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 80031ae:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80031b0:	7008      	strb	r0, [r1, #0]

	return reason;
}
 80031b2:	4770      	bx	lr
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 80031b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80031ba:	4b4b      	ldr	r3, [pc, #300]	; (80032e8 <z_arm_fault+0x130>)
 80031bc:	685b      	ldr	r3, [r3, #4]
{
 80031be:	b08b      	sub	sp, #44	; 0x2c
 80031c0:	460c      	mov	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80031c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c6:	2500      	movs	r5, #0
 80031c8:	f385 8811 	msr	BASEPRI, r5
 80031cc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80031d0:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 80031d4:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 80031d8:	d111      	bne.n	80031fe <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80031da:	f002 010c 	and.w	r1, r2, #12
 80031de:	2908      	cmp	r1, #8
 80031e0:	d00d      	beq.n	80031fe <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80031e2:	0716      	lsls	r6, r2, #28
 80031e4:	d401      	bmi.n	80031ea <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 80031e6:	4604      	mov	r4, r0
			*nested_exc = true;
 80031e8:	2501      	movs	r5, #1
	*recoverable = false;
 80031ea:	2200      	movs	r2, #0
	switch (fault) {
 80031ec:	3b03      	subs	r3, #3
	*recoverable = false;
 80031ee:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d871      	bhi.n	80032da <z_arm_fault+0x122>
 80031f6:	e8df f003 	tbb	[pc, r3]
 80031fa:	5b04      	.short	0x5b04
 80031fc:	635f      	.short	0x635f
		return NULL;
 80031fe:	462c      	mov	r4, r5
 8003200:	e7f3      	b.n	80031ea <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8003202:	4a39      	ldr	r2, [pc, #228]	; (80032e8 <z_arm_fault+0x130>)
 8003204:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003206:	f013 0302 	ands.w	r3, r3, #2
 800320a:	d166      	bne.n	80032da <z_arm_fault+0x122>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 800320c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800320e:	2900      	cmp	r1, #0
 8003210:	db15      	blt.n	800323e <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8003212:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003214:	0049      	lsls	r1, r1, #1
 8003216:	d512      	bpl.n	800323e <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
 8003218:	69a1      	ldr	r1, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 800321a:	f831 0c02 	ldrh.w	r0, [r1, #-2]
 800321e:	f64d 7102 	movw	r1, #57090	; 0xdf02
 8003222:	4288      	cmp	r0, r1
 8003224:	d00a      	beq.n	800323c <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
 8003226:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 800322a:	b339      	cbz	r1, 800327c <z_arm_fault+0xc4>
			reason = mem_manage_fault(esf, 1, recoverable);
 800322c:	f10d 0207 	add.w	r2, sp, #7
 8003230:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8003232:	4620      	mov	r0, r4
 8003234:	f7ff ff66 	bl	8003104 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
 8003238:	4603      	mov	r3, r0
		break;
 800323a:	e000      	b.n	800323e <z_arm_fault+0x86>
			reason = esf->basic.r0;
 800323c:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 800323e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003242:	b9ca      	cbnz	r2, 8003278 <z_arm_fault+0xc0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8003244:	ae02      	add	r6, sp, #8
 8003246:	f104 0720 	add.w	r7, r4, #32
 800324a:	6820      	ldr	r0, [r4, #0]
 800324c:	6861      	ldr	r1, [r4, #4]
 800324e:	4632      	mov	r2, r6
 8003250:	c203      	stmia	r2!, {r0, r1}
 8003252:	3408      	adds	r4, #8
 8003254:	42bc      	cmp	r4, r7
 8003256:	4616      	mov	r6, r2
 8003258:	d1f7      	bne.n	800324a <z_arm_fault+0x92>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 800325a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800325c:	2d00      	cmp	r5, #0
 800325e:	d03e      	beq.n	80032de <z_arm_fault+0x126>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8003260:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003264:	b921      	cbnz	r1, 8003270 <z_arm_fault+0xb8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8003266:	ea6f 2252 	mvn.w	r2, r2, lsr #9
 800326a:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800326e:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 8003270:	a902      	add	r1, sp, #8
 8003272:	4618      	mov	r0, r3
 8003274:	f008 f9ca 	bl	800b60c <z_arm_fatal_error>
}
 8003278:	b00b      	add	sp, #44	; 0x2c
 800327a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
 800327c:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
 8003280:	b129      	cbz	r1, 800328e <z_arm_fault+0xd6>
			reason = bus_fault(esf, 1, recoverable);
 8003282:	f10d 0107 	add.w	r1, sp, #7
 8003286:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8003288:	f7ff ff78 	bl	800317c <bus_fault.constprop.0>
 800328c:	e7d4      	b.n	8003238 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
 800328e:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8003290:	b289      	uxth	r1, r1
 8003292:	2900      	cmp	r1, #0
 8003294:	d0d3      	beq.n	800323e <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8003296:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8003298:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800329a:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800329c:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800329e:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 80032a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80032a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80032a4:	ea6f 4101 	mvn.w	r1, r1, lsl #16
 80032a8:	ea6f 4111 	mvn.w	r1, r1, lsr #16
 80032ac:	6291      	str	r1, [r2, #40]	; 0x28
	return reason;
 80032ae:	e7c6      	b.n	800323e <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
 80032b0:	f10d 0207 	add.w	r2, sp, #7
 80032b4:	2100      	movs	r1, #0
 80032b6:	e7bc      	b.n	8003232 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
 80032b8:	f10d 0107 	add.w	r1, sp, #7
 80032bc:	2000      	movs	r0, #0
 80032be:	e7e3      	b.n	8003288 <z_arm_fault+0xd0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80032c0:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <z_arm_fault+0x130>)
 80032c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 80032c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 80032c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 80032c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 80032ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 80032cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80032ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032d0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80032d4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80032d8:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80032da:	2300      	movs	r3, #0
 80032dc:	e7af      	b.n	800323e <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80032de:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	e7c2      	b.n	800326e <z_arm_fault+0xb6>
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80032ec:	4a02      	ldr	r2, [pc, #8]	; (80032f8 <z_arm_fault_init+0xc>)
 80032ee:	6953      	ldr	r3, [r2, #20]
 80032f0:	f043 0310 	orr.w	r3, r3, #16
 80032f4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 80032f6:	4770      	bx	lr
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80032fc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8003300:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8003304:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8003306:	4672      	mov	r2, lr
	bl z_arm_fault
 8003308:	f7ff ff56 	bl	80031b8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 800330c:	bd01      	pop	{r0, pc}
 800330e:	bf00      	nop

08003310 <z_arm_interrupt_init>:
 8003310:	4804      	ldr	r0, [pc, #16]	; (8003324 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	2110      	movs	r1, #16
 8003316:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8003318:	3301      	adds	r3, #1
 800331a:	2b5b      	cmp	r3, #91	; 0x5b
 800331c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8003320:	d1f9      	bne.n	8003316 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8003322:	4770      	bx	lr
 8003324:	e000e100 	.word	0xe000e100

08003328 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003328:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800332a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 800332e:	4808      	ldr	r0, [pc, #32]	; (8003350 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8003330:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
 8003334:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8003336:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 800333a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 800333e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8003340:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8003342:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8003346:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800334a:	f7ff fdf9 	bl	8002f40 <z_arm_prep_c>
 800334e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8003350:	20001140 	.word	0x20001140

08003354 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <z_impl_k_thread_abort+0x24>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4283      	cmp	r3, r0
 800335a:	d10b      	bne.n	8003374 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800335c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8003360:	b143      	cbz	r3, 8003374 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <z_impl_k_thread_abort+0x28>)
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800336a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 800336c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800336e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003372:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 8003374:	f001 bbf8 	b.w	8004b68 <z_thread_abort>
 8003378:	20000afc 	.word	0x20000afc
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8003380:	4b02      	ldr	r3, [pc, #8]	; (800338c <z_arm_configure_static_mpu_regions+0xc>)
 8003382:	4a03      	ldr	r2, [pc, #12]	; (8003390 <z_arm_configure_static_mpu_regions+0x10>)
 8003384:	4803      	ldr	r0, [pc, #12]	; (8003394 <z_arm_configure_static_mpu_regions+0x14>)
 8003386:	2101      	movs	r1, #1
 8003388:	f000 b86e 	b.w	8003468 <arm_core_mpu_configure_static_mpu_regions>
 800338c:	20050000 	.word	0x20050000
 8003390:	20000000 	.word	0x20000000
 8003394:	0800c5a8 	.word	0x0800c5a8

08003398 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8003398:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 800339a:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 800339c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
 800339e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 80033a0:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 80033a2:	2140      	movs	r1, #64	; 0x40
 80033a4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 80033a8:	4618      	mov	r0, r3
 80033aa:	2101      	movs	r1, #1
 80033ac:	f000 b866 	b.w	800347c <arm_core_mpu_configure_dynamic_mpu_regions>
 80033b0:	200009c8 	.word	0x200009c8
 80033b4:	150b0000 	.word	0x150b0000

080033b8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 80033b8:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 80033ba:	4f1f      	ldr	r7, [pc, #124]	; (8003438 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 80033bc:	2600      	movs	r6, #0
 80033be:	428e      	cmp	r6, r1
 80033c0:	db01      	blt.n	80033c6 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80033c2:	4610      	mov	r0, r2
 80033c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
 80033c6:	6844      	ldr	r4, [r0, #4]
 80033c8:	b39c      	cbz	r4, 8003432 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
 80033ca:	b153      	cbz	r3, 80033e2 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 80033cc:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 80033d0:	ea14 0f0c 	tst.w	r4, ip
 80033d4:	d118      	bne.n	8003408 <mpu_configure_regions+0x50>
		&&
 80033d6:	2c1f      	cmp	r4, #31
 80033d8:	d916      	bls.n	8003408 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
 80033da:	6805      	ldr	r5, [r0, #0]
		&&
 80033dc:	ea1c 0f05 	tst.w	ip, r5
 80033e0:	d112      	bne.n	8003408 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 80033e2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 80033e4:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80033e6:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80033ea:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
 80033ec:	d90f      	bls.n	800340e <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
 80033ee:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80033f2:	d80e      	bhi.n	8003412 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80033f4:	3c01      	subs	r4, #1
 80033f6:	fab4 f484 	clz	r4, r4
 80033fa:	f1c4 041f 	rsb	r4, r4, #31
 80033fe:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8003400:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8003402:	ea4c 0404 	orr.w	r4, ip, r4
 8003406:	d906      	bls.n	8003416 <mpu_configure_regions+0x5e>
			return -EINVAL;
 8003408:	f06f 0215 	mvn.w	r2, #21
 800340c:	e7d9      	b.n	80033c2 <mpu_configure_regions+0xa>
		return REGION_32B;
 800340e:	2408      	movs	r4, #8
 8003410:	e7f6      	b.n	8003400 <mpu_configure_regions+0x48>
		return REGION_4G;
 8003412:	243e      	movs	r4, #62	; 0x3e
 8003414:	e7f4      	b.n	8003400 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8003416:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 800341a:	4315      	orrs	r5, r2
 800341c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8003420:	f044 0401 	orr.w	r4, r4, #1
 8003424:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8003428:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
 800342c:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800342e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 8003432:	3601      	adds	r6, #1
 8003434:	300c      	adds	r0, #12
 8003436:	e7c2      	b.n	80033be <mpu_configure_regions+0x6>
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <arm_core_mpu_enable+0x14>)
 800343e:	2205      	movs	r2, #5
 8003440:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8003444:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003448:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8003454:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8003458:	4b02      	ldr	r3, [pc, #8]	; (8003464 <arm_core_mpu_disable+0x10>)
 800345a:	2200      	movs	r2, #0
 800345c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8003468:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 800346a:	4c03      	ldr	r4, [pc, #12]	; (8003478 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 800346c:	2301      	movs	r3, #1
 800346e:	7822      	ldrb	r2, [r4, #0]
 8003470:	f7ff ffa2 	bl	80033b8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8003474:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8003476:	bd10      	pop	{r4, pc}
 8003478:	20000b78 	.word	0x20000b78

0800347c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 800347c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 800347e:	4a09      	ldr	r2, [pc, #36]	; (80034a4 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 8003480:	2300      	movs	r3, #0
 8003482:	7812      	ldrb	r2, [r2, #0]
 8003484:	f7ff ff98 	bl	80033b8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8003488:	f110 0f16 	cmn.w	r0, #22
 800348c:	d002      	beq.n	8003494 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 800348e:	4a06      	ldr	r2, [pc, #24]	; (80034a8 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8003490:	2807      	cmp	r0, #7
 8003492:	dd00      	ble.n	8003496 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8003494:	bd08      	pop	{r3, pc}
 8003496:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 800349a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800349e:	3001      	adds	r0, #1
 80034a0:	e7f6      	b.n	8003490 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
 80034a2:	bf00      	nop
 80034a4:	20000b78 	.word	0x20000b78
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 80034ac:	4914      	ldr	r1, [pc, #80]	; (8003500 <z_arm_mpu_init+0x54>)
 80034ae:	6808      	ldr	r0, [r1, #0]
 80034b0:	2808      	cmp	r0, #8
{
 80034b2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 80034b4:	d821      	bhi.n	80034fa <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 80034b6:	f7ff ffcd 	bl	8003454 <arm_core_mpu_disable>
 80034ba:	4c12      	ldr	r4, [pc, #72]	; (8003504 <z_arm_mpu_init+0x58>)
 80034bc:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80034be:	2200      	movs	r2, #0
 80034c0:	4290      	cmp	r0, r2
 80034c2:	f101 010c 	add.w	r1, r1, #12
 80034c6:	d105      	bne.n	80034d4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <z_arm_mpu_init+0x5c>)
 80034ca:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 80034cc:	f7ff ffb6 	bl	800343c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 80034d0:	2000      	movs	r0, #0
}
 80034d2:	bd10      	pop	{r4, pc}
 80034d4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80034d8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80034dc:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80034e6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80034ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80034f6:	3201      	adds	r2, #1
 80034f8:	e7e2      	b.n	80034c0 <z_arm_mpu_init+0x14>
		return -1;
 80034fa:	f04f 30ff 	mov.w	r0, #4294967295
 80034fe:	e7e8      	b.n	80034d2 <z_arm_mpu_init+0x26>
 8003500:	0800c5b4 	.word	0x0800c5b4
 8003504:	e000ed00 	.word	0xe000ed00
 8003508:	20000b78 	.word	0x20000b78

0800350c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 800350c:	4b01      	ldr	r3, [pc, #4]	; (8003514 <__stdout_hook_install+0x8>)
 800350e:	6018      	str	r0, [r3, #0]
}
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	20000298 	.word	0x20000298

08003518 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
 800351a:	4f08      	ldr	r7, [pc, #32]	; (800353c <z_impl_zephyr_read_stdin+0x24>)
{
 800351c:	4606      	mov	r6, r0
 800351e:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
 8003520:	2400      	movs	r4, #0
 8003522:	42ac      	cmp	r4, r5
 8003524:	da08      	bge.n	8003538 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 800352a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
 800352c:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
 800352e:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8003532:	d001      	beq.n	8003538 <z_impl_zephyr_read_stdin+0x20>
 8003534:	280d      	cmp	r0, #13
 8003536:	d1f4      	bne.n	8003522 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
 8003538:	4620      	mov	r0, r4
 800353a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800353c:	20000294 	.word	0x20000294

08003540 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	4f0a      	ldr	r7, [pc, #40]	; (800356c <z_impl_zephyr_write_stdout+0x2c>)
 8003544:	460d      	mov	r5, r1
 8003546:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 8003548:	f1c0 0401 	rsb	r4, r0, #1
 800354c:	19a3      	adds	r3, r4, r6
 800354e:	429d      	cmp	r5, r3
 8003550:	dc01      	bgt.n	8003556 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
 8003552:	4628      	mov	r0, r5
 8003554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
 8003556:	7873      	ldrb	r3, [r6, #1]
 8003558:	2b0a      	cmp	r3, #10
 800355a:	d102      	bne.n	8003562 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	200d      	movs	r0, #13
 8003560:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8003568:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 800356a:	e7ef      	b.n	800354c <z_impl_zephyr_write_stdout+0xc>
 800356c:	20000298 	.word	0x20000298

08003570 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 8003570:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 8003572:	4802      	ldr	r0, [pc, #8]	; (800357c <_exit+0xc>)
 8003574:	2105      	movs	r1, #5
 8003576:	f7ff ffe3 	bl	8003540 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
 800357a:	e7fe      	b.n	800357a <_exit+0xa>
 800357c:	0800cbad 	.word	0x0800cbad

08003580 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8003580:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 8003582:	4c07      	ldr	r4, [pc, #28]	; (80035a0 <_sbrk+0x20>)
 8003584:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8003586:	18c2      	adds	r2, r0, r3
 8003588:	4806      	ldr	r0, [pc, #24]	; (80035a4 <_sbrk+0x24>)
 800358a:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
 800358e:	f501 21a0 	add.w	r1, r1, #327680	; 0x50000
 8003592:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
 8003594:	bf3a      	itte	cc
 8003596:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
 8003598:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 800359a:	f04f 30ff 	movcs.w	r0, #4294967295
	}

	return ret;
}
 800359e:	bd10      	pop	{r4, pc}
 80035a0:	200009d4 	.word	0x200009d4
 80035a4:	20001980 	.word	0x20001980

080035a8 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 80035a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80035ac:	4f0d      	ldr	r7, [pc, #52]	; (80035e4 <__stm32_exti_isr.isra.0+0x3c>)
 80035ae:	4604      	mov	r4, r0
 80035b0:	460e      	mov	r6, r1
 80035b2:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80035b4:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 80035b8:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 80035bc:	42b4      	cmp	r4, r6
 80035be:	db01      	blt.n	80035c4 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 80035c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035c4:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80035c6:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 80035ca:	ea33 0202 	bics.w	r2, r3, r2
 80035ce:	d107      	bne.n	80035e0 <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 80035d0:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 80035d2:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 80035d6:	b11b      	cbz	r3, 80035e0 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 80035d8:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 80035dc:	4620      	mov	r0, r4
 80035de:	4798      	blx	r3
	for (line = min; line < max; line++) {
 80035e0:	3401      	adds	r4, #1
 80035e2:	e7eb      	b.n	80035bc <__stm32_exti_isr.isra.0+0x14>
 80035e4:	40010400 	.word	0x40010400

080035e8 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR1, ExtiLine);
 80035e8:	4a04      	ldr	r2, [pc, #16]	; (80035fc <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 80035ea:	2301      	movs	r3, #1
 80035ec:	6811      	ldr	r1, [r2, #0]
 80035ee:	4083      	lsls	r3, r0
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 80035f4:	4b02      	ldr	r3, [pc, #8]	; (8003600 <stm32_exti_enable+0x18>)
 80035f6:	5618      	ldrsb	r0, [r3, r0]
 80035f8:	f7ff bc76 	b.w	8002ee8 <arch_irq_enable>
 80035fc:	40010400 	.word	0x40010400
 8003600:	0800cbe0 	.word	0x0800cbe0

08003604 <stm32_exti_disable>:
	if (line < 32) {
 8003604:	281f      	cmp	r0, #31
 8003606:	dc07      	bgt.n	8003618 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003608:	4904      	ldr	r1, [pc, #16]	; (800361c <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 800360a:	2201      	movs	r2, #1
 800360c:	680b      	ldr	r3, [r1, #0]
 800360e:	fa02 f000 	lsl.w	r0, r2, r0
 8003612:	ea23 0000 	bic.w	r0, r3, r0
 8003616:	6008      	str	r0, [r1, #0]
}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40010400 	.word	0x40010400

08003620 <stm32_exti_trigger>:
	switch (trigger) {
 8003620:	2903      	cmp	r1, #3
 8003622:	d80f      	bhi.n	8003644 <stm32_exti_trigger+0x24>
 8003624:	e8df f001 	tbb	[pc, r1]
 8003628:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800362c:	4b15      	ldr	r3, [pc, #84]	; (8003684 <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 800362e:	2201      	movs	r2, #1
 8003630:	6899      	ldr	r1, [r3, #8]
 8003632:	fa02 f000 	lsl.w	r0, r2, r0
 8003636:	ea21 0100 	bic.w	r1, r1, r0
 800363a:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003642:	60d8      	str	r0, [r3, #12]
}
 8003644:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8003646:	2301      	movs	r3, #1
 8003648:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800364c:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <stm32_exti_trigger+0x64>)
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	4302      	orrs	r2, r0
 8003652:	609a      	str	r2, [r3, #8]
 8003654:	e7f2      	b.n	800363c <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8003656:	2301      	movs	r3, #1
 8003658:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800365c:	4b09      	ldr	r3, [pc, #36]	; (8003684 <stm32_exti_trigger+0x64>)
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	4302      	orrs	r2, r0
 8003662:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	ea22 0000 	bic.w	r0, r2, r0
 800366a:	6098      	str	r0, [r3, #8]
}
 800366c:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800366e:	2301      	movs	r3, #1
 8003670:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <stm32_exti_trigger+0x64>)
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	4302      	orrs	r2, r0
 800367a:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	4310      	orrs	r0, r2
 8003680:	e7df      	b.n	8003642 <stm32_exti_trigger+0x22>
 8003682:	bf00      	nop
 8003684:	40010400 	.word	0x40010400

08003688 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8003688:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <stm32_exti_set_callback+0x20>)
{
 800368a:	b510      	push	{r4, lr}
 800368c:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 800368e:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8003692:	b928      	cbnz	r0, 80036a0 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8003694:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8003698:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800369c:	605a      	str	r2, [r3, #4]

	return 0;
}
 800369e:	bd10      	pop	{r4, pc}
		return -EBUSY;
 80036a0:	f06f 000f 	mvn.w	r0, #15
 80036a4:	e7fb      	b.n	800369e <stm32_exti_set_callback+0x16>
 80036a6:	bf00      	nop
 80036a8:	200009d8 	.word	0x200009d8

080036ac <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <stm32_exti_unset_callback+0x10>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 80036b4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80036b8:	605a      	str	r2, [r3, #4]
}
 80036ba:	4770      	bx	lr
 80036bc:	200009d8 	.word	0x200009d8

080036c0 <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80036c0:	4b02      	ldr	r3, [pc, #8]	; (80036cc <LL_RCC_HSI_IsReady+0xc>)
 80036c2:	6818      	ldr	r0, [r3, #0]
}
 80036c4:	f3c0 2080 	ubfx	r0, r0, #10, #1
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40021000 	.word	0x40021000

080036d0 <stm32_clock_control_configure>:
__unused
static int enabled_clock(uint32_t src_clk)
{
	int r = 0;

	switch (src_clk) {
 80036d0:	680b      	ldr	r3, [r1, #0]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	2b07      	cmp	r3, #7
 80036d6:	d814      	bhi.n	8003702 <stm32_clock_control_configure+0x32>
 80036d8:	4a0b      	ldr	r2, [pc, #44]	; (8003708 <stm32_clock_control_configure+0x38>)
 80036da:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]

	ARG_UNUSED(dev);
	ARG_UNUSED(data);

	err = enabled_clock(pclken->bus);
	if (err < 0) {
 80036de:	2800      	cmp	r0, #0
 80036e0:	db11      	blt.n	8003706 <stm32_clock_control_configure+0x36>
		/* Attempt to configure a src clock not available or not valid */
		return err;
	}

	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 80036e2:	6849      	ldr	r1, [r1, #4]
					STM32_CLOCK_SHIFT_GET(pclken->enr);
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) +
					STM32_CLOCK_REG_GET(pclken->enr));
 80036e4:	b2cb      	uxtb	r3, r1
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) +
 80036e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036ea:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 80036ee:	f3c1 4202 	ubfx	r2, r1, #16, #3
	reg_val = *reg;
 80036f2:	6818      	ldr	r0, [r3, #0]
					STM32_CLOCK_SHIFT_GET(pclken->enr);
 80036f4:	f3c1 2104 	ubfx	r1, r1, #8, #5
	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 80036f8:	408a      	lsls	r2, r1
	reg_val |= dt_val;
 80036fa:	4302      	orrs	r2, r0
	*reg = reg_val;
 80036fc:	601a      	str	r2, [r3, #0]

	return 0;
 80036fe:	2000      	movs	r0, #0
 8003700:	4770      	bx	lr
	err = enabled_clock(pclken->bus);
 8003702:	f06f 0085 	mvn.w	r0, #133	; 0x85
#else
	/* No src clock available: Not supported */
	return -ENOTSUP;
#endif
}
 8003706:	4770      	bx	lr
 8003708:	0800cb22 	.word	0x0800cb22

0800370c <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 800370c:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <stm32_clock_control_get_subsys_rate+0x6c>)
{
 800370e:	b510      	push	{r4, lr}
 8003710:	4614      	mov	r4, r2
	uint32_t ahb_clock = SystemCoreClock;
 8003712:	681a      	ldr	r2, [r3, #0]
	/* AHB3 bus exists, but w/o dedicated prescaler */
	uint32_t ahb3_clock = ahb_clock;
#endif

#if defined(STM32_SRC_PCLK)
	if (pclken->bus == STM32_SRC_PCLK) {
 8003714:	680b      	ldr	r3, [r1, #0]
 8003716:	2b07      	cmp	r3, #7
 8003718:	d014      	beq.n	8003744 <stm32_clock_control_get_subsys_rate+0x38>
	}
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 800371a:	2b08      	cmp	r3, #8
 800371c:	d809      	bhi.n	8003732 <stm32_clock_control_get_subsys_rate+0x26>
 800371e:	b18b      	cbz	r3, 8003744 <stm32_clock_control_get_subsys_rate+0x38>
 8003720:	3b01      	subs	r3, #1
 8003722:	2b07      	cmp	r3, #7
 8003724:	d80e      	bhi.n	8003744 <stm32_clock_control_get_subsys_rate+0x38>
 8003726:	e8df f003 	tbb	[pc, r3]
 800372a:	0d21      	.short	0x0d21
 800372c:	140d1e1e 	.word	0x140d1e1e
 8003730:	170d      	.short	0x170d
 8003732:	2b58      	cmp	r3, #88	; 0x58
 8003734:	d00d      	beq.n	8003752 <stm32_clock_control_get_subsys_rate+0x46>
 8003736:	d808      	bhi.n	800374a <stm32_clock_control_get_subsys_rate+0x3e>
 8003738:	2b4c      	cmp	r3, #76	; 0x4c
 800373a:	d00a      	beq.n	8003752 <stm32_clock_control_get_subsys_rate+0x46>
 800373c:	2b50      	cmp	r3, #80	; 0x50
 800373e:	d008      	beq.n	8003752 <stm32_clock_control_get_subsys_rate+0x46>
 8003740:	2b48      	cmp	r3, #72	; 0x48
 8003742:	d006      	beq.n	8003752 <stm32_clock_control_get_subsys_rate+0x46>
 8003744:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003748:	e00f      	b.n	800376a <stm32_clock_control_get_subsys_rate+0x5e>
 800374a:	2b5c      	cmp	r3, #92	; 0x5c
 800374c:	d001      	beq.n	8003752 <stm32_clock_control_get_subsys_rate+0x46>
 800374e:	2b60      	cmp	r3, #96	; 0x60
 8003750:	e7f7      	b.n	8003742 <stm32_clock_control_get_subsys_rate+0x36>
		*rate = ahb3_clock;
		break;
#endif
#if defined(STM32_SRC_SYSCLK)
	case STM32_SRC_SYSCLK:
		*rate = SystemCoreClock * STM32_CORE_PRESCALER;
 8003752:	6022      	str	r2, [r4, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8003754:	2000      	movs	r0, #0
		break;
 8003756:	e008      	b.n	800376a <stm32_clock_control_get_subsys_rate+0x5e>
		if (get_pllout_frequency() == 0) {
 8003758:	f008 f80c 	bl	800b774 <get_pllout_frequency>
 800375c:	b148      	cbz	r0, 8003772 <stm32_clock_control_get_subsys_rate+0x66>
		*rate = get_pllout_frequency();
 800375e:	f008 f809 	bl	800b774 <get_pllout_frequency>
 8003762:	6020      	str	r0, [r4, #0]
		break;
 8003764:	e7f6      	b.n	8003754 <stm32_clock_control_get_subsys_rate+0x48>
		*rate = STM32_LSE_FREQ;
 8003766:	2000      	movs	r0, #0
 8003768:	6020      	str	r0, [r4, #0]
}
 800376a:	bd10      	pop	{r4, pc}
		*rate = STM32_HSI_FREQ;
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <stm32_clock_control_get_subsys_rate+0x70>)
 800376e:	6023      	str	r3, [r4, #0]
 8003770:	e7f0      	b.n	8003754 <stm32_clock_control_get_subsys_rate+0x48>
			return -EIO;
 8003772:	f06f 0004 	mvn.w	r0, #4
 8003776:	e7f8      	b.n	800376a <stm32_clock_control_get_subsys_rate+0x5e>
 8003778:	200002d0 	.word	0x200002d0
 800377c:	00f42400 	.word	0x00f42400

08003780 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8003780:	b570      	push	{r4, r5, r6, lr}
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003782:	4c38      	ldr	r4, [pc, #224]	; (8003864 <stm32_clock_control_init+0xe4>)

	new_flash_freq = RCC_CALC_FLASH_FREQ(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				      STM32_FLASH_PRESCALER);

	/* If freq increases, set flash latency before any clock setting */
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8003784:	4e38      	ldr	r6, [pc, #224]	; (8003868 <stm32_clock_control_init+0xe8>)
	config_enable_default_clocks();
 8003786:	f000 f889 	bl	800389c <config_enable_default_clocks>
	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 800378a:	f000 fc49 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 800378e:	68a3      	ldr	r3, [r4, #8]
 8003790:	4a36      	ldr	r2, [pc, #216]	; (800386c <stm32_clock_control_init+0xec>)
 8003792:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003796:	5cd3      	ldrb	r3, [r2, r3]
 8003798:	fa20 f503 	lsr.w	r5, r0, r3
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 800379c:	42b5      	cmp	r5, r6
 800379e:	d802      	bhi.n	80037a6 <stm32_clock_control_init+0x26>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 80037a0:	4833      	ldr	r0, [pc, #204]	; (8003870 <stm32_clock_control_init+0xf0>)
 80037a2:	f000 fc8b 	bl	80040bc <LL_SetFlashLatency>
		if (LL_RCC_HSI_IsReady() != 1) {
 80037a6:	f7ff ff8b 	bl	80036c0 <LL_RCC_HSI_IsReady>
 80037aa:	2801      	cmp	r0, #1
 80037ac:	d007      	beq.n	80037be <stm32_clock_control_init+0x3e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b4:	6023      	str	r3, [r4, #0]
			while (LL_RCC_HSI_IsReady() != 1) {
 80037b6:	f7ff ff83 	bl	80036c0 <LL_RCC_HSI_IsReady>
 80037ba:	2801      	cmp	r0, #1
 80037bc:	d1fb      	bne.n	80037b6 <stm32_clock_control_init+0x36>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80037be:	68a3      	ldr	r3, [r4, #8]
 80037c0:	f003 030c 	and.w	r3, r3, #12
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 80037c4:	2b0c      	cmp	r3, #12
 80037c6:	d11a      	bne.n	80037fe <stm32_clock_control_init+0x7e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80037c8:	68a3      	ldr	r3, [r4, #8]
 80037ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ce:	60a3      	str	r3, [r4, #8]
	if (LL_RCC_HSI_IsReady() != 1) {
 80037d0:	f7ff ff76 	bl	80036c0 <LL_RCC_HSI_IsReady>
 80037d4:	2801      	cmp	r0, #1
 80037d6:	d007      	beq.n	80037e8 <stm32_clock_control_init+0x68>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037de:	6023      	str	r3, [r4, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 80037e0:	f7ff ff6e 	bl	80036c0 <LL_RCC_HSI_IsReady>
 80037e4:	2801      	cmp	r0, #1
 80037e6:	d1fb      	bne.n	80037e0 <stm32_clock_control_init+0x60>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80037e8:	68a3      	ldr	r3, [r4, #8]
 80037ea:	f023 0303 	bic.w	r3, r3, #3
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80037f4:	68a3      	ldr	r3, [r4, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d1fa      	bne.n	80037f4 <stm32_clock_control_init+0x74>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003804:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8003806:	68e3      	ldr	r3, [r4, #12]
 8003808:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800380c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003810:	60e3      	str	r3, [r4, #12]
	config_pll_sysclock();
 8003812:	f000 f831 	bl	8003878 <config_pll_sysclock>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800381c:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	019b      	lsls	r3, r3, #6
 8003822:	d5fc      	bpl.n	800381e <stm32_clock_control_init+0x9e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003824:	68a3      	ldr	r3, [r4, #8]
 8003826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800382a:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800382c:	68a3      	ldr	r3, [r4, #8]
 800382e:	f043 0303 	orr.w	r3, r3, #3
 8003832:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003834:	68a3      	ldr	r3, [r4, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
	}

#if STM32_SYSCLK_SRC_PLL
	/* Set PLL as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 800383a:	2b0c      	cmp	r3, #12
 800383c:	d1fa      	bne.n	8003834 <stm32_clock_control_init+0xb4>
		LL_RCC_SetAHBPrescaler(ahb_prescaler(STM32_CORE_PRESCALER));
	}

#if defined(FLASH_ACR_LATENCY)
	/* If freq not increased, set flash latency after all clock setting */
	if (old_flash_freq >= CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 800383e:	42b5      	cmp	r5, r6
 8003840:	d902      	bls.n	8003848 <stm32_clock_control_init+0xc8>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8003842:	480b      	ldr	r0, [pc, #44]	; (8003870 <stm32_clock_control_init+0xf0>)
 8003844:	f000 fc3a 	bl	80040bc <LL_SetFlashLatency>
	}
#endif /* FLASH_ACR_LATENCY */

	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8003848:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <stm32_clock_control_init+0xf4>)
 800384a:	4a09      	ldr	r2, [pc, #36]	; (8003870 <stm32_clock_control_init+0xf0>)
 800384c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800384e:	68a3      	ldr	r3, [r4, #8]
 8003850:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003854:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003856:	68a3      	ldr	r3, [r4, #8]
 8003858:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800385c:	60a3      	str	r3, [r4, #8]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 800385e:	2000      	movs	r0, #0
 8003860:	bd70      	pop	{r4, r5, r6, pc}
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	04c4b3ff 	.word	0x04c4b3ff
 800386c:	0800cc50 	.word	0x0800cc50
 8003870:	04c4b400 	.word	0x04c4b400
 8003874:	200002d0 	.word	0x200002d0

08003878 <config_pll_sysclock>:
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <config_pll_sysclock+0x18>)
 800387a:	4906      	ldr	r1, [pc, #24]	; (8003894 <config_pll_sysclock+0x1c>)
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	4011      	ands	r1, r2
 8003880:	4a05      	ldr	r2, [pc, #20]	; (8003898 <config_pll_sysclock+0x20>)
 8003882:	430a      	orrs	r2, r1
 8003884:	60da      	str	r2, [r3, #12]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800388c:	60da      	str	r2, [r3, #12]
				    pllm(STM32_PLL_M_DIVISOR),
				    STM32_PLL_N_MULTIPLIER,
				    pllr(STM32_PLL_R_DIVISOR));

	LL_RCC_PLL_EnableDomain_SYS();
}
 800388e:	4770      	bx	lr
 8003890:	40021000 	.word	0x40021000
 8003894:	f9ff808c 	.word	0xf9ff808c
 8003898:	02001402 	.word	0x02001402

0800389c <config_enable_default_clocks>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <config_enable_default_clocks+0x1c>)
 800389e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038a4:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 80038a8:	b082      	sub	sp, #8
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ae:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80038b0:	9b01      	ldr	r3, [sp, #4]
#endif
#if defined(CONFIG_SOC_SERIES_STM32WBX)
	/* HW semaphore Clock enable */
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_HSEM);
#endif
}
 80038b2:	b002      	add	sp, #8
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000

080038bc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 80038bc:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 80038be:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <uart_console_init+0x24>)
 80038c0:	4808      	ldr	r0, [pc, #32]	; (80038e4 <uart_console_init+0x28>)
 80038c2:	6018      	str	r0, [r3, #0]
 80038c4:	f008 fa0f 	bl	800bce6 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 80038c8:	b138      	cbz	r0, 80038da <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
 80038ca:	4807      	ldr	r0, [pc, #28]	; (80038e8 <uart_console_init+0x2c>)
 80038cc:	f7ff fe1e 	bl	800350c <__stdout_hook_install>
	__printk_hook_install(console_out);
 80038d0:	4805      	ldr	r0, [pc, #20]	; (80038e8 <uart_console_init+0x2c>)
 80038d2:	f7fe fc0b 	bl	80020ec <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 80038d6:	2000      	movs	r0, #0
}
 80038d8:	bd08      	pop	{r3, pc}
		return -ENODEV;
 80038da:	f06f 0012 	mvn.w	r0, #18
 80038de:	e7fb      	b.n	80038d8 <uart_console_init+0x1c>
 80038e0:	20000a58 	.word	0x20000a58
 80038e4:	0800c100 	.word	0x0800c100
 80038e8:	080038ed 	.word	0x080038ed

080038ec <console_out>:
	if ('\n' == c) {
 80038ec:	280a      	cmp	r0, #10
{
 80038ee:	b538      	push	{r3, r4, r5, lr}
 80038f0:	4d07      	ldr	r5, [pc, #28]	; (8003910 <console_out+0x24>)
 80038f2:	4604      	mov	r4, r0
	if ('\n' == c) {
 80038f4:	d104      	bne.n	8003900 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 80038f6:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 80038f8:	6883      	ldr	r3, [r0, #8]
 80038fa:	210d      	movs	r1, #13
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 8003900:	6828      	ldr	r0, [r5, #0]
 8003902:	6883      	ldr	r3, [r0, #8]
 8003904:	b2e1      	uxtb	r1, r4
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4798      	blx	r3
}
 800390a:	4620      	mov	r0, r4
 800390c:	bd38      	pop	{r3, r4, r5, pc}
 800390e:	bf00      	nop
 8003910:	20000a58 	.word	0x20000a58

08003914 <clock_control_on.constprop.0>:
 *
 * @param dev Device structure whose driver controls the clock.
 * @param sys Opaque data representing the clock.
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	4605      	mov	r5, r0
 8003918:	4c07      	ldr	r4, [pc, #28]	; (8003938 <clock_control_on.constprop.0+0x24>)
 800391a:	4620      	mov	r0, r4
 800391c:	f008 f9e3 	bl	800bce6 <z_device_is_ready>
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 8003920:	b130      	cbz	r0, 8003930 <clock_control_on.constprop.0+0x1c>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8003922:	68a3      	ldr	r3, [r4, #8]
 8003924:	4629      	mov	r1, r5
 8003926:	4620      	mov	r0, r4
 8003928:	681b      	ldr	r3, [r3, #0]
}
 800392a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->on(dev, sys);
 800392e:	4718      	bx	r3
}
 8003930:	f06f 0012 	mvn.w	r0, #18
 8003934:	bd70      	pop	{r4, r5, r6, pc}
 8003936:	bf00      	nop
 8003938:	0800bfe0 	.word	0x0800bfe0

0800393c <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 800393c:	b508      	push	{r3, lr}
  * @rmtoll CR2          IOSV          LL_PWR_EnableVddIO2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800393e:	4a07      	ldr	r2, [pc, #28]	; (800395c <gpio_stm32_init+0x20>)
	struct gpio_stm32_data *data = dev->data;
	int ret;

	data->dev = dev;
 8003940:	6903      	ldr	r3, [r0, #16]
 8003942:	6058      	str	r0, [r3, #4]
 8003944:	6853      	ldr	r3, [r2, #4]
					(clock_control_subsys_t *)&cfg->pclken);
 8003946:	6840      	ldr	r0, [r0, #4]
 8003948:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800394c:	6053      	str	r3, [r2, #4]
		ret = clock_control_on(clk,
 800394e:	300c      	adds	r0, #12
 8003950:	f7ff ffe0 	bl	8003914 <clock_control_on.constprop.0>

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 8003954:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8003958:	bd08      	pop	{r3, pc}
 800395a:	bf00      	nop
 800395c:	40007000 	.word	0x40007000

08003960 <gpio_stm32_pin_interrupt_configure>:
{
 8003960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003962:	460c      	mov	r4, r1
 8003964:	4611      	mov	r1, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 8003966:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 800396a:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 800396c:	6902      	ldr	r2, [r0, #16]
{
 800396e:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 8003970:	d123      	bne.n	80039ba <gpio_stm32_pin_interrupt_configure+0x5a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8003972:	f004 0303 	and.w	r3, r4, #3
 8003976:	3304      	adds	r3, #4
 8003978:	009a      	lsls	r2, r3, #2
 800397a:	230f      	movs	r3, #15
 800397c:	4093      	lsls	r3, r2
 800397e:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 8003982:	b2da      	uxtb	r2, r3
 8003984:	4933      	ldr	r1, [pc, #204]	; (8003a54 <gpio_stm32_pin_interrupt_configure+0xf4>)
 8003986:	3202      	adds	r2, #2
 8003988:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800398c:	0c19      	lsrs	r1, r3, #16
 800398e:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8003996:	fab2 f282 	clz	r2, r2
 800399a:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d109      	bne.n	80039b6 <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 80039a2:	4620      	mov	r0, r4
 80039a4:	f7ff fe2e 	bl	8003604 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80039a8:	4620      	mov	r0, r4
 80039aa:	f7ff fe7f 	bl	80036ac <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 80039ae:	2100      	movs	r1, #0
 80039b0:	4620      	mov	r0, r4
 80039b2:	f7ff fe35 	bl	8003620 <stm32_exti_trigger>
	int err = 0;
 80039b6:	2500      	movs	r5, #0
 80039b8:	e03e      	b.n	8003a38 <gpio_stm32_pin_interrupt_configure+0xd8>
	if (mode == GPIO_INT_MODE_LEVEL) {
 80039ba:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80039be:	d042      	beq.n	8003a46 <gpio_stm32_pin_interrupt_configure+0xe6>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 80039c0:	4925      	ldr	r1, [pc, #148]	; (8003a58 <gpio_stm32_pin_interrupt_configure+0xf8>)
 80039c2:	4620      	mov	r0, r4
 80039c4:	f7ff fe60 	bl	8003688 <stm32_exti_set_callback>
 80039c8:	4605      	mov	r5, r0
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d13e      	bne.n	8003a4c <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 80039ce:	4a23      	ldr	r2, [pc, #140]	; (8003a5c <gpio_stm32_pin_interrupt_configure+0xfc>)
	gpio_stm32_enable_int(cfg->port, pin);
 80039d0:	68bf      	ldr	r7, [r7, #8]
	struct stm32_pclken pclken = {
 80039d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039d6:	466b      	mov	r3, sp
 80039d8:	e883 0003 	stmia.w	r3, {r0, r1}
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff ff99 	bl	8003914 <clock_control_on.constprop.0>
	if (ret != 0) {
 80039e2:	b9c0      	cbnz	r0, 8003a16 <gpio_stm32_pin_interrupt_configure+0xb6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80039e4:	f004 0103 	and.w	r1, r4, #3
 80039e8:	3104      	adds	r1, #4
 80039ea:	008b      	lsls	r3, r1, #2
 80039ec:	210f      	movs	r1, #15
 80039ee:	4099      	lsls	r1, r3
 80039f0:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80039f4:	b2ca      	uxtb	r2, r1
 80039f6:	0092      	lsls	r2, r2, #2
 80039f8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80039fc:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003a00:	0c0b      	lsrs	r3, r1, #16
 8003a02:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8003a08:	fab3 f383 	clz	r3, r3
 8003a0c:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 8003a10:	409f      	lsls	r7, r3
 8003a12:	430f      	orrs	r7, r1
 8003a14:	6097      	str	r7, [r2, #8]
	switch (trig) {
 8003a16:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
 8003a1a:	d010      	beq.n	8003a3e <gpio_stm32_pin_interrupt_configure+0xde>
 8003a1c:	f1b6 6fc0 	cmp.w	r6, #100663296	; 0x6000000
 8003a20:	d00f      	beq.n	8003a42 <gpio_stm32_pin_interrupt_configure+0xe2>
 8003a22:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 8003a26:	bf14      	ite	ne
 8003a28:	2100      	movne	r1, #0
 8003a2a:	2102      	moveq	r1, #2
	stm32_exti_trigger(pin, edge);
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	f7ff fdf7 	bl	8003620 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8003a32:	4620      	mov	r0, r4
 8003a34:	f7ff fdd8 	bl	80035e8 <stm32_exti_enable>
}
 8003a38:	4628      	mov	r0, r5
 8003a3a:	b003      	add	sp, #12
 8003a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 8003a3e:	2101      	movs	r1, #1
 8003a40:	e7f4      	b.n	8003a2c <gpio_stm32_pin_interrupt_configure+0xcc>
		edge = STM32_EXTI_TRIG_BOTH;
 8003a42:	2103      	movs	r1, #3
 8003a44:	e7f2      	b.n	8003a2c <gpio_stm32_pin_interrupt_configure+0xcc>
		err = -ENOTSUP;
 8003a46:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8003a4a:	e7f5      	b.n	8003a38 <gpio_stm32_pin_interrupt_configure+0xd8>
		err = -EBUSY;
 8003a4c:	f06f 050f 	mvn.w	r5, #15
	return err;
 8003a50:	e7f2      	b.n	8003a38 <gpio_stm32_pin_interrupt_configure+0xd8>
 8003a52:	bf00      	nop
 8003a54:	40010000 	.word	0x40010000
 8003a58:	0800b987 	.word	0x0800b987
 8003a5c:	0800c4b0 	.word	0x0800c4b0

08003a60 <dht_channel_get>:
		 * use both integral and decimal data bytes; resulted
		 * 16bit data has a resolution of 0.1 units
		 */
		int16_t raw_val, sign;

		if (chan == SENSOR_CHAN_HUMIDITY) {
 8003a60:	2910      	cmp	r1, #16
{
 8003a62:	b530      	push	{r4, r5, lr}
	struct dht_data *drv_data = dev->data;
 8003a64:	6904      	ldr	r4, [r0, #16]
		if (chan == SENSOR_CHAN_HUMIDITY) {
 8003a66:	d110      	bne.n	8003a8a <dht_channel_get+0x2a>
			raw_val = (drv_data->sample[0] << 8)
 8003a68:	7821      	ldrb	r1, [r4, #0]
				+ drv_data->sample[1];
 8003a6a:	7863      	ldrb	r3, [r4, #1]
 8003a6c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
			raw_val = (drv_data->sample[0] << 8)
 8003a70:	b21b      	sxth	r3, r3
			val->val1 = raw_val / 10;
 8003a72:	200a      	movs	r0, #10
 8003a74:	fb93 f1f0 	sdiv	r1, r3, r0
			val->val2 = (raw_val % 10) * 100000;
 8003a78:	fb00 3311 	mls	r3, r0, r1, r3
			val->val1 = raw_val / 10;
 8003a7c:	6011      	str	r1, [r2, #0]
			val->val2 = (raw_val % 10) * 100000;
 8003a7e:	490e      	ldr	r1, [pc, #56]	; (8003ab8 <dht_channel_get+0x58>)
 8003a80:	b21b      	sxth	r3, r3
 8003a82:	434b      	muls	r3, r1
			val->val2 = (raw_val % 10) * 100000;

			/* handle negative value */
			if (sign) {
				val->val1 = -val->val1;
				val->val2 = -val->val2;
 8003a84:	6053      	str	r3, [r2, #4]
			val->val2 = 0;
		}
	}

	return 0;
}
 8003a86:	2000      	movs	r0, #0
 8003a88:	bd30      	pop	{r4, r5, pc}
			raw_val = (drv_data->sample[2] << 8)
 8003a8a:	78a3      	ldrb	r3, [r4, #2]
				+ drv_data->sample[3];
 8003a8c:	78e0      	ldrb	r0, [r4, #3]
 8003a8e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			raw_val = raw_val & ~0x8000;
 8003a92:	f3c0 030e 	ubfx	r3, r0, #0, #15
			val->val1 = raw_val / 10;
 8003a96:	250a      	movs	r5, #10
 8003a98:	fb93 f4f5 	sdiv	r4, r3, r5
 8003a9c:	b221      	sxth	r1, r4
			val->val2 = (raw_val % 10) * 100000;
 8003a9e:	fb05 3314 	mls	r3, r5, r4, r3
 8003aa2:	4c05      	ldr	r4, [pc, #20]	; (8003ab8 <dht_channel_get+0x58>)
			val->val1 = raw_val / 10;
 8003aa4:	6011      	str	r1, [r2, #0]
			val->val2 = (raw_val % 10) * 100000;
 8003aa6:	b21b      	sxth	r3, r3
 8003aa8:	4363      	muls	r3, r4
			if (sign) {
 8003aaa:	0400      	lsls	r0, r0, #16
			val->val2 = (raw_val % 10) * 100000;
 8003aac:	6053      	str	r3, [r2, #4]
			if (sign) {
 8003aae:	d5ea      	bpl.n	8003a86 <dht_channel_get+0x26>
				val->val1 = -val->val1;
 8003ab0:	4249      	negs	r1, r1
 8003ab2:	6011      	str	r1, [r2, #0]
				val->val2 = -val->val2;
 8003ab4:	425b      	negs	r3, r3
 8003ab6:	e7e5      	b.n	8003a84 <dht_channel_get+0x24>
 8003ab8:	000186a0 	.word	0x000186a0

08003abc <uart_stm32_set_baudrate>:
	}
}
#endif /* CONFIG_PM */

static inline void uart_stm32_set_baudrate(const struct device *dev, uint32_t baud_rate)
{
 8003abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
					   &clock_rate) < 0) {
			LOG_ERR("Failed call clock_control_get_rate(pclken[1])");
			return;
		}
	} else {
		if (clock_control_get_rate(data->clock,
 8003abe:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8003ac0:	6846      	ldr	r6, [r0, #4]
		if (clock_control_get_rate(data->clock,
 8003ac2:	685c      	ldr	r4, [r3, #4]
					   (clock_control_subsys_t)&config->pclken[0],
 8003ac4:	6877      	ldr	r7, [r6, #4]
{
 8003ac6:	460d      	mov	r5, r1
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f008 f90c 	bl	800bce6 <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 8003ace:	b1f8      	cbz	r0, 8003b10 <uart_stm32_set_baudrate+0x54>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8003ad0:	68a3      	ldr	r3, [r4, #8]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	b1e3      	cbz	r3, 8003b10 <uart_stm32_set_baudrate+0x54>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8003ad6:	aa01      	add	r2, sp, #4
 8003ad8:	4639      	mov	r1, r7
 8003ada:	4620      	mov	r0, r4
 8003adc:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	db16      	blt.n	8003b10 <uart_stm32_set_baudrate+0x54>
			return;
		}
	}

#if HAS_LPUART_1
	if (IS_LPUART_INSTANCE(config->usart)) {
 8003ae2:	6836      	ldr	r6, [r6, #0]
 8003ae4:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <uart_stm32_set_baudrate+0x6c>)

		presc_val = presc_idx << USART_PRESC_PRESCALER_Pos;

		LL_LPUART_SetPrescaler(config->usart, presc_val);
#else
		lpuartdiv = lpuartdiv_calc(clock_rate, baud_rate);
 8003ae6:	9c01      	ldr	r4, [sp, #4]
	if (IS_LPUART_INSTANCE(config->usart)) {
 8003ae8:	429e      	cmp	r6, r3
	lpuartdiv += baud_rate / 2;
 8003aea:	ea4f 0055 	mov.w	r0, r5, lsr #1
	if (IS_LPUART_INSTANCE(config->usart)) {
 8003aee:	d111      	bne.n	8003b14 <uart_stm32_set_baudrate+0x58>
	lpuartdiv /= baud_rate;
 8003af0:	2300      	movs	r3, #0
 8003af2:	4619      	mov	r1, r3
	lpuartdiv += baud_rate / 2;
 8003af4:	f44f 7780 	mov.w	r7, #256	; 0x100
	lpuartdiv /= baud_rate;
 8003af8:	462a      	mov	r2, r5
 8003afa:	fbe4 0107 	umlal	r0, r1, r4, r7
 8003afe:	f7fc ffed 	bl	8000adc <__aeabi_uldivmod>
		if (lpuartdiv < LPUART_BRR_MIN_VALUE || lpuartdiv > LPUART_BRR_MASK) {
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <uart_stm32_set_baudrate+0x70>)
 8003b04:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d801      	bhi.n	8003b10 <uart_stm32_set_baudrate+0x54>
  if (BaudRate != 0U)
  {
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
  }
#else
  if (BaudRate != 0U)
 8003b0c:	b105      	cbz	r5, 8003b10 <uart_stm32_set_baudrate+0x54>
  {
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, BaudRate);
 8003b0e:	60f0      	str	r0, [r6, #12]
				     baud_rate);

#if HAS_LPUART_1
	}
#endif /* HAS_LPUART_1 */
}
 8003b10:	b003      	add	sp, #12
 8003b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *         @arg @ref LL_USART_OVERSAMPLING_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8003b14:	6833      	ldr	r3, [r6, #0]
  else
  {
#if defined(USART_PRESC_PRESCALER)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003b16:	4404      	add	r4, r0
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8003b18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003b1c:	fbb4 f4f5 	udiv	r4, r4, r5
 8003b20:	b2a4      	uxth	r4, r4
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8003b22:	6033      	str	r3, [r6, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003b24:	60f4      	str	r4, [r6, #12]
 8003b26:	e7f3      	b.n	8003b10 <uart_stm32_set_baudrate+0x54>
 8003b28:	40008000 	.word	0x40008000
 8003b2c:	000ffcff 	.word	0x000ffcff

08003b30 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8003b30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = dev->config;
 8003b34:	6844      	ldr	r4, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8003b36:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 8003b38:	4d40      	ldr	r5, [pc, #256]	; (8003c3c <uart_stm32_init+0x10c>)
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 8003b3a:	f8d4 8004 	ldr.w	r8, [r4, #4]
	data->clock = clk;
 8003b3e:	607d      	str	r5, [r7, #4]
{
 8003b40:	4606      	mov	r6, r0
 8003b42:	4628      	mov	r0, r5
 8003b44:	f008 f8cf 	bl	800bce6 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d072      	beq.n	8003c32 <uart_stm32_init+0x102>
	return api->on(dev, sys);
 8003b4c:	68ab      	ldr	r3, [r5, #8]
 8003b4e:	4628      	mov	r0, r5
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4641      	mov	r1, r8
 8003b54:	4798      	blx	r3
	if (err != 0) {
 8003b56:	4605      	mov	r5, r0
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	d161      	bne.n	8003c20 <uart_stm32_init+0xf0>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8003b5c:	4601      	mov	r1, r0
 8003b5e:	aa01      	add	r2, sp, #4
 8003b60:	69a0      	ldr	r0, [r4, #24]
 8003b62:	f008 f8a7 	bl	800bcb4 <pinctrl_lookup_state>
	if (ret < 0) {
 8003b66:	2800      	cmp	r0, #0
 8003b68:	db66      	blt.n	8003c38 <uart_stm32_init+0x108>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 8003b6a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8003b6c:	462a      	mov	r2, r5
 8003b6e:	7919      	ldrb	r1, [r3, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	f000 fa0f 	bl	8003f94 <pinctrl_configure_pins>
		}
	}

	/* Configure dt provided device signals when available */
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
 8003b76:	2800      	cmp	r0, #0
 8003b78:	db5e      	blt.n	8003c38 <uart_stm32_init+0x108>
		return err;
	}

	LL_USART_Disable(config->usart);
 8003b7a:	6820      	ldr	r0, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8003b7c:	6821      	ldr	r1, [r4, #0]
 8003b7e:	6803      	ldr	r3, [r0, #0]
 8003b80:	f023 0301 	bic.w	r3, r3, #1
 8003b84:	6003      	str	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b86:	e850 3f00 	ldrex	r3, [r0]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8003b8a:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8e:	e840 3200 	strex	r2, r3, [r0]
 8003b92:	2a00      	cmp	r2, #0
 8003b94:	d1f7      	bne.n	8003b86 <uart_stm32_init+0x56>
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 8003b96:	6923      	ldr	r3, [r4, #16]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d045      	beq.n	8003c28 <uart_stm32_init+0xf8>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	bf0a      	itet	eq
 8003ba0:	f44f 5080 	moveq.w	r0, #4096	; 0x1000
 8003ba4:	2000      	movne	r0, #0
 8003ba6:	f44f 62c0 	moveq.w	r2, #1536	; 0x600
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8003baa:	680b      	ldr	r3, [r1, #0]
 8003bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bb4:	4302      	orrs	r2, r0
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003bba:	684b      	ldr	r3, [r1, #4]
 8003bbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bc0:	604b      	str	r3, [r1, #4]
	LL_USART_ConfigCharacter(config->usart,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8003bc2:	7b23      	ldrb	r3, [r4, #12]
 8003bc4:	b12b      	cbz	r3, 8003bd2 <uart_stm32_init+0xa2>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 8003bc6:	6873      	ldr	r3, [r6, #4]
 8003bc8:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003bca:	6893      	ldr	r3, [r2, #8]
 8003bcc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003bd0:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8003bd2:	6839      	ldr	r1, [r7, #0]
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f7ff ff71 	bl	8003abc <uart_stm32_set_baudrate>

	/* Enable the single wire / half-duplex mode */
	if (config->single_wire) {
 8003bda:	7d22      	ldrb	r2, [r4, #20]
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	b11a      	cbz	r2, 8003be8 <uart_stm32_init+0xb8>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	f042 0208 	orr.w	r2, r2, #8
 8003be6:	609a      	str	r2, [r3, #8]
		LL_USART_EnableHalfDuplex(config->usart);
	}

#ifdef LL_USART_TXRX_SWAPPED
	if (config->tx_rx_swap) {
 8003be8:	7d62      	ldrb	r2, [r4, #21]
 8003bea:	b11a      	cbz	r2, 8003bf4 <uart_stm32_init+0xc4>
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bf2:	605a      	str	r2, [r3, #4]
		LL_USART_SetTXRXSwap(config->usart, LL_USART_TXRX_SWAPPED);
	}
#endif

#ifdef LL_USART_RXPIN_LEVEL_INVERTED
	if (config->rx_invert) {
 8003bf4:	7da2      	ldrb	r2, [r4, #22]
 8003bf6:	b11a      	cbz	r2, 8003c00 <uart_stm32_init+0xd0>
  MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003bfe:	605a      	str	r2, [r3, #4]
		LL_USART_SetRXPinLevel(config->usart, LL_USART_RXPIN_LEVEL_INVERTED);
	}
#endif

#ifdef LL_USART_TXPIN_LEVEL_INVERTED
	if (config->tx_invert) {
 8003c00:	7de2      	ldrb	r2, [r4, #23]
 8003c02:	b11a      	cbz	r2, 8003c0c <uart_stm32_init+0xdc>
  MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003c0a:	605a      	str	r2, [r3, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8003c14:	69da      	ldr	r2, [r3, #28]
 8003c16:	0291      	lsls	r1, r2, #10
 8003c18:	d5fc      	bpl.n	8003c14 <uart_stm32_init+0xe4>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	0252      	lsls	r2, r2, #9
 8003c1e:	d5fc      	bpl.n	8003c1a <uart_stm32_init+0xea>
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8003c20:	4628      	mov	r0, r5
 8003c22:	b002      	add	sp, #8
 8003c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8003c28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8003c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c30:	e7bb      	b.n	8003baa <uart_stm32_init+0x7a>
		return -ENODEV;
 8003c32:	f06f 0512 	mvn.w	r5, #18
 8003c36:	e7f3      	b.n	8003c20 <uart_stm32_init+0xf0>
	if (err < 0) {
 8003c38:	4605      	mov	r5, r0
 8003c3a:	e7f1      	b.n	8003c20 <uart_stm32_init+0xf0>
 8003c3c:	0800bfe0 	.word	0x0800bfe0

08003c40 <uart_stm32_configure>:
{
 8003c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8003c44:	790b      	ldrb	r3, [r1, #4]
	const struct uart_stm32_config *config = dev->config;
 8003c46:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8003c48:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 8003c4a:	2b01      	cmp	r3, #1
{
 8003c4c:	460c      	mov	r4, r1
	switch (parity) {
 8003c4e:	d01c      	beq.n	8003c8a <uart_stm32_configure+0x4a>
		return LL_USART_PARITY_NONE;
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	bf0c      	ite	eq
 8003c54:	f44f 6880 	moveq.w	r8, #1024	; 0x400
 8003c58:	f04f 0800 	movne.w	r8, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8003c5c:	f894 9005 	ldrb.w	r9, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8003c60:	79a7      	ldrb	r7, [r4, #6]
 8003c62:	f1b9 0f02 	cmp.w	r9, #2
 8003c66:	bf96      	itet	ls
 8003c68:	4a49      	ldrls	r2, [pc, #292]	; (8003d90 <uart_stm32_configure+0x150>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8003c6a:	f44f 5100 	movhi.w	r1, #8192	; 0x2000
 8003c6e:	f832 1019 	ldrhls.w	r1, [r2, r9, lsl #1]
	switch (db) {
 8003c72:	2f02      	cmp	r7, #2
 8003c74:	d00c      	beq.n	8003c90 <uart_stm32_configure+0x50>
 8003c76:	2f04      	cmp	r7, #4
 8003c78:	f000 8084 	beq.w	8003d84 <uart_stm32_configure+0x144>
			return LL_USART_DATAWIDTH_8B;
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf14      	ite	ne
 8003c80:	f44f 5e80 	movne.w	lr, #4096	; 0x1000
 8003c84:	f04f 0e00 	moveq.w	lr, #0
 8003c88:	e008      	b.n	8003c9c <uart_stm32_configure+0x5c>
	switch (parity) {
 8003c8a:	f44f 68c0 	mov.w	r8, #1536	; 0x600
 8003c8e:	e7e5      	b.n	8003c5c <uart_stm32_configure+0x1c>
			return LL_USART_DATAWIDTH_8B;
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bf0c      	ite	eq
 8003c94:	f04f 5e80 	moveq.w	lr, #268435456	; 0x10000000
 8003c98:	f04f 0e00 	movne.w	lr, #0
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8003c9c:	79e2      	ldrb	r2, [r4, #7]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8003c9e:	f1a3 0a03 	sub.w	sl, r3, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8003ca2:	2a01      	cmp	r2, #1
 8003ca4:	bf14      	ite	ne
 8003ca6:	f04f 0c00 	movne.w	ip, #0
 8003caa:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8003cae:	f1ba 0f01 	cmp.w	sl, #1
 8003cb2:	d96a      	bls.n	8003d8a <uart_stm32_configure+0x14a>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8003cb4:	b10b      	cbz	r3, 8003cba <uart_stm32_configure+0x7a>
 8003cb6:	2f04      	cmp	r7, #4
 8003cb8:	d067      	beq.n	8003d8a <uart_stm32_configure+0x14a>
	if (IS_LPUART_INSTANCE(config->usart) &&
 8003cba:	682b      	ldr	r3, [r5, #0]
 8003cbc:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003d94 <uart_stm32_configure+0x154>
 8003cc0:	4553      	cmp	r3, sl
 8003cc2:	d102      	bne.n	8003cca <uart_stm32_configure+0x8a>
 8003cc4:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 8003cc8:	d05f      	beq.n	8003d8a <uart_stm32_configure+0x14a>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8003cca:	2f01      	cmp	r7, #1
 8003ccc:	d95d      	bls.n	8003d8a <uart_stm32_configure+0x14a>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8003cce:	2f04      	cmp	r7, #4
 8003cd0:	d05b      	beq.n	8003d8a <uart_stm32_configure+0x14a>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8003cd2:	b1c2      	cbz	r2, 8003d06 <uart_stm32_configure+0xc6>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8003cd4:	4f30      	ldr	r7, [pc, #192]	; (8003d98 <uart_stm32_configure+0x158>)
 8003cd6:	42bb      	cmp	r3, r7
 8003cd8:	d013      	beq.n	8003d02 <uart_stm32_configure+0xc2>
 8003cda:	f5a7 4774 	sub.w	r7, r7, #62464	; 0xf400
 8003cde:	42bb      	cmp	r3, r7
 8003ce0:	d00f      	beq.n	8003d02 <uart_stm32_configure+0xc2>
 8003ce2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003ce6:	42bb      	cmp	r3, r7
 8003ce8:	d00b      	beq.n	8003d02 <uart_stm32_configure+0xc2>
 8003cea:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003cee:	42bb      	cmp	r3, r7
 8003cf0:	d007      	beq.n	8003d02 <uart_stm32_configure+0xc2>
 8003cf2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003cf6:	42bb      	cmp	r3, r7
 8003cf8:	d003      	beq.n	8003d02 <uart_stm32_configure+0xc2>
 8003cfa:	f507 5740 	add.w	r7, r7, #12288	; 0x3000
 8003cfe:	42bb      	cmp	r3, r7
 8003d00:	d143      	bne.n	8003d8a <uart_stm32_configure+0x14a>
 8003d02:	2a01      	cmp	r2, #1
 8003d04:	d141      	bne.n	8003d8a <uart_stm32_configure+0x14a>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	f022 0201 	bic.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8003d14:	4590      	cmp	r8, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8003d16:	bf1f      	itttt	ne
 8003d18:	681a      	ldrne	r2, [r3, #0]
 8003d1a:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8003d1e:	ea42 0208 	orrne.w	r2, r2, r8
 8003d22:	601a      	strne	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8003d2a:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003d2c:	bf1f      	itttt	ne
 8003d2e:	685f      	ldrne	r7, [r3, #4]
 8003d30:	f427 5740 	bicne.w	r7, r7, #12288	; 0x3000
 8003d34:	430f      	orrne	r7, r1
 8003d36:	605f      	strne	r7, [r3, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 8003d3e:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8003d40:	bf1f      	itttt	ne
 8003d42:	6819      	ldrne	r1, [r3, #0]
 8003d44:	f021 2110 	bicne.w	r1, r1, #268439552	; 0x10001000
 8003d48:	ea41 010e 	orrne.w	r1, r1, lr
 8003d4c:	6019      	strne	r1, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8003d4e:	689a      	ldr	r2, [r3, #8]
	if (cfg->baudrate != data->baud_rate) {
 8003d50:	6821      	ldr	r1, [r4, #0]
 8003d52:	f402 7240 	and.w	r2, r2, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8003d56:	4594      	cmp	ip, r2
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003d58:	bf1f      	itttt	ne
 8003d5a:	689a      	ldrne	r2, [r3, #8]
 8003d5c:	f422 7240 	bicne.w	r2, r2, #768	; 0x300
 8003d60:	ea42 020c 	orrne.w	r2, r2, ip
 8003d64:	609a      	strne	r2, [r3, #8]
	if (cfg->baudrate != data->baud_rate) {
 8003d66:	6833      	ldr	r3, [r6, #0]
 8003d68:	4299      	cmp	r1, r3
 8003d6a:	d003      	beq.n	8003d74 <uart_stm32_configure+0x134>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8003d6c:	f7ff fea6 	bl	8003abc <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	6033      	str	r3, [r6, #0]
	LL_USART_Enable(config->usart);
 8003d74:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003d76:	6813      	ldr	r3, [r2, #0]
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	6013      	str	r3, [r2, #0]
	return 0;
 8003d7e:	2000      	movs	r0, #0
};
 8003d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (db) {
 8003d84:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
 8003d88:	e788      	b.n	8003c9c <uart_stm32_configure+0x5c>
		return -ENOTSUP;
 8003d8a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003d8e:	e7f7      	b.n	8003d80 <uart_stm32_configure+0x140>
 8003d90:	0800cb32 	.word	0x0800cb32
 8003d94:	40008000 	.word	0x40008000
 8003d98:	40013800 	.word	0x40013800

08003d9c <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8003d9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8003da0:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8003da2:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8003da4:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8003da6:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <elapsed+0x34>)
 8003daa:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8003dae:	4909      	ldr	r1, [pc, #36]	; (8003dd4 <elapsed+0x38>)
 8003db0:	d101      	bne.n	8003db6 <elapsed+0x1a>
	    || (val1 < val2)) {
 8003db2:	4282      	cmp	r2, r0
 8003db4:	d206      	bcs.n	8003dc4 <elapsed+0x28>
		overflow_cyc += last_load;
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	680c      	ldr	r4, [r1, #0]
 8003dba:	4422      	add	r2, r4
 8003dbc:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8003dbe:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003dc2:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	680a      	ldr	r2, [r1, #0]
 8003dc8:	4413      	add	r3, r2
}
 8003dca:	1a18      	subs	r0, r3, r0
 8003dcc:	bd10      	pop	{r4, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000af8 	.word	0x20000af8
 8003dd4:	20000af4 	.word	0x20000af4

08003dd8 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <sys_clock_driver_init+0x28>)
 8003dda:	2210      	movs	r2, #16
 8003ddc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8003de0:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <sys_clock_driver_init+0x2c>)
 8003de2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8003de6:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8003de8:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <sys_clock_driver_init+0x30>)
 8003dea:	2000      	movs	r0, #0
 8003dec:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8003dee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003df2:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8003df4:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	f042 0207 	orr.w	r2, r2, #7
 8003dfc:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8003dfe:	4770      	bx	lr
 8003e00:	e000ed00 	.word	0xe000ed00
 8003e04:	20000af4 	.word	0x20000af4
 8003e08:	20000af8 	.word	0x20000af8

08003e0c <sys_clock_isr>:
{
 8003e0c:	b508      	push	{r3, lr}
	elapsed();
 8003e0e:	f7ff ffc5 	bl	8003d9c <elapsed>
	cycle_count += overflow_cyc;
 8003e12:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <sys_clock_isr+0x38>)
 8003e14:	4a0c      	ldr	r2, [pc, #48]	; (8003e48 <sys_clock_isr+0x3c>)
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	6811      	ldr	r1, [r2, #0]
 8003e1a:	4408      	add	r0, r1
 8003e1c:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8003e22:	4a0a      	ldr	r2, [pc, #40]	; (8003e4c <sys_clock_isr+0x40>)
 8003e24:	6813      	ldr	r3, [r2, #0]
 8003e26:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8003e2a:	1ac0      	subs	r0, r0, r3
 8003e2c:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8003e30:	fb01 3300 	mla	r3, r1, r0, r3
 8003e34:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8003e36:	f000 ffd5 	bl	8004de4 <sys_clock_announce>
}
 8003e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8003e3e:	f7ff b953 	b.w	80030e8 <z_arm_exc_exit>
 8003e42:	bf00      	nop
 8003e44:	20000af8 	.word	0x20000af8
 8003e48:	20000af0 	.word	0x20000af0
 8003e4c:	20000aec 	.word	0x20000aec

08003e50 <sys_clock_set_timeout>:
{
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	4c31      	ldr	r4, [pc, #196]	; (8003f18 <sys_clock_set_timeout+0xc8>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8003e54:	b159      	cbz	r1, 8003e6e <sys_clock_set_timeout+0x1e>
 8003e56:	1c42      	adds	r2, r0, #1
 8003e58:	d109      	bne.n	8003e6e <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8003e5a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003e5e:	6913      	ldr	r3, [r2, #16]
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8003e66:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003e6a:	6023      	str	r3, [r4, #0]
}
 8003e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8003e6e:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8003e70:	6825      	ldr	r5, [r4, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8003e72:	d022      	beq.n	8003eba <sys_clock_set_timeout+0x6a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8003e74:	2801      	cmp	r0, #1
 8003e76:	dd23      	ble.n	8003ec0 <sys_clock_set_timeout+0x70>
 8003e78:	f5b0 6f03 	cmp.w	r0, #2096	; 0x830
 8003e7c:	dc22      	bgt.n	8003ec4 <sys_clock_set_timeout+0x74>
 8003e7e:	1e47      	subs	r7, r0, #1
	__asm__ volatile(
 8003e80:	f04f 0310 	mov.w	r3, #16
 8003e84:	f3ef 8611 	mrs	r6, BASEPRI
 8003e88:	f383 8812 	msr	BASEPRI_MAX, r3
 8003e8c:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8003e90:	f7ff ff84 	bl	8003d9c <elapsed>
	cycle_count += pending;
 8003e94:	4921      	ldr	r1, [pc, #132]	; (8003f1c <sys_clock_set_timeout+0xcc>)
	val1 = SysTick->VAL;
 8003e96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 8003e9a:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 8003e9c:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8003ea0:	680b      	ldr	r3, [r1, #0]
 8003ea2:	4418      	add	r0, r3
	overflow_cyc = 0U;
 8003ea4:	4b1e      	ldr	r3, [pc, #120]	; (8003f20 <sys_clock_set_timeout+0xd0>)
	cycle_count += pending;
 8003ea6:	6008      	str	r0, [r1, #0]
	overflow_cyc = 0U;
 8003ea8:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8003eaa:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <sys_clock_set_timeout+0xd4>)
 8003eac:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8003eae:	1a83      	subs	r3, r0, r2
 8003eb0:	d50b      	bpl.n	8003eca <sys_clock_set_timeout+0x7a>
		delay = MAX(delay, MIN_DELAY);
 8003eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 8003eb6:	6023      	str	r3, [r4, #0]
 8003eb8:	e01a      	b.n	8003ef0 <sys_clock_set_timeout+0xa0>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8003eba:	f44f 6003 	mov.w	r0, #2096	; 0x830
 8003ebe:	e7de      	b.n	8003e7e <sys_clock_set_timeout+0x2e>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8003ec0:	2700      	movs	r7, #0
 8003ec2:	e7dd      	b.n	8003e80 <sys_clock_set_timeout+0x30>
 8003ec4:	f44f 6703 	mov.w	r7, #2096	; 0x830
 8003ec8:	e7da      	b.n	8003e80 <sys_clock_set_timeout+0x30>
		delay = ticks * CYC_PER_TICK;
 8003eca:	f44f 5efa 	mov.w	lr, #8000	; 0x1f40
		delay += unannounced;
 8003ece:	fb0e 3307 	mla	r3, lr, r7, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8003ed2:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
		delay -= unannounced;
 8003ed6:	1a12      	subs	r2, r2, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8003ed8:	331f      	adds	r3, #31
 8003eda:	fbb3 f3fe 	udiv	r3, r3, lr
		delay -= unannounced;
 8003ede:	fb0e 2303 	mla	r3, lr, r3, r2
		delay = MAX(delay, MIN_DELAY);
 8003ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee6:	d9e4      	bls.n	8003eb2 <sys_clock_set_timeout+0x62>
		if (delay > MAX_CYCLES) {
 8003ee8:	4a0f      	ldr	r2, [pc, #60]	; (8003f28 <sys_clock_set_timeout+0xd8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d9e3      	bls.n	8003eb6 <sys_clock_set_timeout+0x66>
			last_load = MAX_CYCLES;
 8003eee:	6022      	str	r2, [r4, #0]
	val2 = SysTick->VAL;
 8003ef0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 8003ef4:	6824      	ldr	r4, [r4, #0]
	val2 = SysTick->VAL;
 8003ef6:	6993      	ldr	r3, [r2, #24]
	if (val1 < val2) {
 8003ef8:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 8003efa:	bf38      	it	cc
 8003efc:	44ac      	addcc	ip, r5
	SysTick->LOAD = last_load - 1;
 8003efe:	3c01      	subs	r4, #1
		cycle_count += (val1 - val2);
 8003f00:	ebac 0c03 	sub.w	ip, ip, r3
	SysTick->LOAD = last_load - 1;
 8003f04:	6154      	str	r4, [r2, #20]
		cycle_count += (val1 - val2);
 8003f06:	4460      	add	r0, ip
	SysTick->VAL = 0; /* resets timer to last_load */
 8003f08:	2400      	movs	r4, #0
 8003f0a:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 8003f0c:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 8003f0e:	f386 8811 	msr	BASEPRI, r6
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	e7a9      	b.n	8003e6c <sys_clock_set_timeout+0x1c>
 8003f18:	20000af4 	.word	0x20000af4
 8003f1c:	20000af0 	.word	0x20000af0
 8003f20:	20000af8 	.word	0x20000af8
 8003f24:	20000aec 	.word	0x20000aec
 8003f28:	00ffdc00 	.word	0x00ffdc00

08003f2c <sys_clock_elapsed>:
{
 8003f2c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003f2e:	f04f 0310 	mov.w	r3, #16
 8003f32:	f3ef 8411 	mrs	r4, BASEPRI
 8003f36:	f383 8812 	msr	BASEPRI_MAX, r3
 8003f3a:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8003f3e:	f7ff ff2d 	bl	8003d9c <elapsed>
 8003f42:	4b07      	ldr	r3, [pc, #28]	; (8003f60 <sys_clock_elapsed+0x34>)
 8003f44:	4a07      	ldr	r2, [pc, #28]	; (8003f64 <sys_clock_elapsed+0x38>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	4403      	add	r3, r0
	__asm__ volatile(
 8003f4e:	f384 8811 	msr	BASEPRI, r4
 8003f52:	f3bf 8f6f 	isb	sy
}
 8003f56:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8003f5a:	fbb3 f0f0 	udiv	r0, r3, r0
 8003f5e:	bd10      	pop	{r4, pc}
 8003f60:	20000af0 	.word	0x20000af0
 8003f64:	20000aec 	.word	0x20000aec

08003f68 <sys_clock_cycle_get_32>:
{
 8003f68:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003f6a:	f04f 0310 	mov.w	r3, #16
 8003f6e:	f3ef 8411 	mrs	r4, BASEPRI
 8003f72:	f383 8812 	msr	BASEPRI_MAX, r3
 8003f76:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 8003f7a:	f7ff ff0f 	bl	8003d9c <elapsed>
 8003f7e:	4b04      	ldr	r3, [pc, #16]	; (8003f90 <sys_clock_cycle_get_32+0x28>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4418      	add	r0, r3
	__asm__ volatile(
 8003f84:	f384 8811 	msr	BASEPRI, r4
 8003f88:	f3bf 8f6f 	isb	sy
}
 8003f8c:	bd10      	pop	{r4, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000af0 	.word	0x20000af0

08003f94 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8003f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 8003f98:	4f20      	ldr	r7, [pc, #128]	; (800401c <pinctrl_configure_pins+0x88>)
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 8003fa0:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8003fa2:	42b4      	cmp	r4, r6
 8003fa4:	d101      	bne.n	8003faa <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	e014      	b.n	8003fd4 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 8003faa:	6822      	ldr	r2, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8003fac:	06d1      	lsls	r1, r2, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8003fae:	f002 091f 	and.w	r9, r2, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8003fb2:	d411      	bmi.n	8003fd8 <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8003fb4:	6865      	ldr	r5, [r4, #4]
 8003fb6:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8003fba:	f3c2 1a47 	ubfx	sl, r2, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8003fbe:	f3c2 2243 	ubfx	r2, r2, #9, #4
 8003fc2:	2a0a      	cmp	r2, #10
 8003fc4:	d827      	bhi.n	8004016 <pinctrl_configure_pins+0x82>
	port_device = gpio_ports[STM32_PORT(pin)];
 8003fc6:	f857 8022 	ldr.w	r8, [r7, r2, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8003fca:	f1b8 0f00 	cmp.w	r8, #0
 8003fce:	d111      	bne.n	8003ff4 <pinctrl_configure_pins+0x60>
		return -ENODEV;
 8003fd0:	f06f 0012 	mvn.w	r0, #18
}
 8003fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8003fd8:	f1b9 0f10 	cmp.w	r9, #16
 8003fdc:	d008      	beq.n	8003ff0 <pinctrl_configure_pins+0x5c>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 8003fde:	f1b9 0f11 	cmp.w	r9, #17
 8003fe2:	d1ea      	bne.n	8003fba <pinctrl_configure_pins+0x26>
			uint32_t gpio_out = pins[i].pincfg &
 8003fe4:	6865      	ldr	r5, [r4, #4]
			if (gpio_out != 0) {
 8003fe6:	052b      	lsls	r3, r5, #20
 8003fe8:	d5e7      	bpl.n	8003fba <pinctrl_configure_pins+0x26>
				pin_cgf = pins[i].pincfg | STM32_MODER_OUTPUT_MODE;
 8003fea:	f045 0510 	orr.w	r5, r5, #16
 8003fee:	e7e4      	b.n	8003fba <pinctrl_configure_pins+0x26>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 8003ff0:	2530      	movs	r5, #48	; 0x30
 8003ff2:	e7e2      	b.n	8003fba <pinctrl_configure_pins+0x26>
 8003ff4:	4640      	mov	r0, r8
 8003ff6:	f007 fe76 	bl	800bce6 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d0e8      	beq.n	8003fd0 <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 8003ffe:	464b      	mov	r3, r9
 8004000:	462a      	mov	r2, r5
 8004002:	f00a 010f 	and.w	r1, sl, #15
 8004006:	4640      	mov	r0, r8
 8004008:	f007 fcd0 	bl	800b9ac <gpio_stm32_configure>
		if (ret < 0) {
 800400c:	2800      	cmp	r0, #0
 800400e:	f104 0408 	add.w	r4, r4, #8
 8004012:	dac6      	bge.n	8003fa2 <pinctrl_configure_pins+0xe>
 8004014:	e7de      	b.n	8003fd4 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 8004016:	f06f 0015 	mvn.w	r0, #21
 800401a:	e7db      	b.n	8003fd4 <pinctrl_configure_pins+0x40>
 800401c:	0800c7a8 	.word	0x0800c7a8

08004020 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004020:	4b22      	ldr	r3, [pc, #136]	; (80040ac <HAL_RCC_GetSysClockFreq+0x8c>)
 8004022:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004024:	68d9      	ldr	r1, [r3, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004026:	f012 020c 	ands.w	r2, r2, #12
 800402a:	d005      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x18>
 800402c:	2a0c      	cmp	r2, #12
 800402e:	d115      	bne.n	800405c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004030:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004034:	2901      	cmp	r1, #1
 8004036:	d118      	bne.n	800406a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004038:	6819      	ldr	r1, [r3, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800403a:	481d      	ldr	r0, [pc, #116]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800403c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800403e:	bf55      	itete	pl
 8004040:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004044:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004046:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800404a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800404e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004052:	b34a      	cbz	r2, 80040a8 <HAL_RCC_GetSysClockFreq+0x88>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004054:	2a0c      	cmp	r2, #12
 8004056:	d009      	beq.n	800406c <HAL_RCC_GetSysClockFreq+0x4c>
 8004058:	2000      	movs	r0, #0
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco / pllr;
  }

  return sysclockfreq;
 800405a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800405c:	2a04      	cmp	r2, #4
 800405e:	d022      	beq.n	80040a6 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004060:	2a08      	cmp	r2, #8
 8004062:	4814      	ldr	r0, [pc, #80]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004064:	bf18      	it	ne
 8004066:	2000      	movne	r0, #0
 8004068:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800406a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8004072:	2a02      	cmp	r2, #2
 8004074:	d015      	beq.n	80040a2 <HAL_RCC_GetSysClockFreq+0x82>
 8004076:	490f      	ldr	r1, [pc, #60]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004078:	2a03      	cmp	r2, #3
 800407a:	bf08      	it	eq
 800407c:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800407e:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8004086:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004088:	68d8      	ldr	r0, [r3, #12]
 800408a:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800408e:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004092:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004094:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004096:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004098:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 800409c:	fbb2 f0f0 	udiv	r0, r2, r0
 80040a0:	4770      	bx	lr
      pllvco = HSI_VALUE;
 80040a2:	4805      	ldr	r0, [pc, #20]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80040a4:	e7eb      	b.n	800407e <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 80040a6:	4804      	ldr	r0, [pc, #16]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x98>)
}
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000
 80040b0:	0800c7d4 	.word	0x0800c7d4
 80040b4:	007a1200 	.word	0x007a1200
 80040b8:	00f42400 	.word	0x00f42400

080040bc <LL_SetFlashLatency>:
  ErrorStatus status = SUCCESS;

  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */

  /* Frequency cannot be equal to 0 or greater than max clock */
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 80040bc:	4b1e      	ldr	r3, [pc, #120]	; (8004138 <LL_SetFlashLatency+0x7c>)
 80040be:	1e42      	subs	r2, r0, #1
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d833      	bhi.n	800412c <LL_SetFlashLatency+0x70>
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 80040c4:	4b1d      	ldr	r3, [pc, #116]	; (800413c <LL_SetFlashLatency+0x80>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  {
    status = ERROR;
  }
  else
  {
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 80040cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d0:	d10f      	bne.n	80040f2 <LL_SetFlashLatency+0x36>
          latency = LL_FLASH_LATENCY_1;
        }
        /* else HCLKFrequency <= 10MHz default LL_FLASH_LATENCY_0 0WS */
      }
#else
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 80040d2:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <LL_SetFlashLatency+0x84>)
 80040d4:	4298      	cmp	r0, r3
 80040d6:	d81a      	bhi.n	800410e <LL_SetFlashLatency+0x52>
      {
        /* 64 < HCLK <= 80 => 4WS (5 CPU cycles) */
        latency = LL_FLASH_LATENCY_4;
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 80040d8:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <LL_SetFlashLatency+0x88>)
 80040da:	4298      	cmp	r0, r3
 80040dc:	d828      	bhi.n	8004130 <LL_SetFlashLatency+0x74>
      {
        /* 48 < HCLK <= 64 => 3WS (4 CPU cycles) */
        latency = LL_FLASH_LATENCY_3;
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 80040de:	4b1a      	ldr	r3, [pc, #104]	; (8004148 <LL_SetFlashLatency+0x8c>)
 80040e0:	4298      	cmp	r0, r3
 80040e2:	d827      	bhi.n	8004134 <LL_SetFlashLatency+0x78>
        /* 32 < HCLK <= 48 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 80040e4:	4b19      	ldr	r3, [pc, #100]	; (800414c <LL_SetFlashLatency+0x90>)
        /* 12 < HCLK <= 18 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 80040e6:	4298      	cmp	r0, r3
 80040e8:	bf94      	ite	ls
 80040ea:	2300      	movls	r3, #0
 80040ec:	2301      	movhi	r3, #1
  ErrorStatus status = SUCCESS;
 80040ee:	2000      	movs	r0, #0
 80040f0:	e011      	b.n	8004116 <LL_SetFlashLatency+0x5a>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 80040f2:	4b17      	ldr	r3, [pc, #92]	; (8004150 <LL_SetFlashLatency+0x94>)
 80040f4:	4298      	cmp	r0, r3
 80040f6:	d80c      	bhi.n	8004112 <LL_SetFlashLatency+0x56>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 80040f8:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 80040fc:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 8004100:	4298      	cmp	r0, r3
 8004102:	d815      	bhi.n	8004130 <LL_SetFlashLatency+0x74>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 8004104:	4b13      	ldr	r3, [pc, #76]	; (8004154 <LL_SetFlashLatency+0x98>)
 8004106:	4298      	cmp	r0, r3
 8004108:	d814      	bhi.n	8004134 <LL_SetFlashLatency+0x78>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 800410a:	4b13      	ldr	r3, [pc, #76]	; (8004158 <LL_SetFlashLatency+0x9c>)
 800410c:	e7eb      	b.n	80040e6 <LL_SetFlashLatency+0x2a>
        latency = LL_FLASH_LATENCY_4;
 800410e:	2304      	movs	r3, #4
 8004110:	e7ed      	b.n	80040ee <LL_SetFlashLatency+0x32>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8004112:	2300      	movs	r3, #0
        status = ERROR;
 8004114:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004116:	4911      	ldr	r1, [pc, #68]	; (800415c <LL_SetFlashLatency+0xa0>)
 8004118:	680a      	ldr	r2, [r1, #0]
 800411a:	f022 0207 	bic.w	r2, r2, #7
 800411e:	431a      	orrs	r2, r3
 8004120:	600a      	str	r2, [r1, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004122:	680a      	ldr	r2, [r1, #0]
 8004124:	f002 0207 	and.w	r2, r2, #7

    LL_FLASH_SetLatency(latency);

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(LL_FLASH_GetLatency() != latency)
 8004128:	4293      	cmp	r3, r2
 800412a:	d000      	beq.n	800412e <LL_SetFlashLatency+0x72>
    {
      status = ERROR;
 800412c:	2001      	movs	r0, #1
    }
  }
  return status;
}
 800412e:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 8004130:	2303      	movs	r3, #3
 8004132:	e7dc      	b.n	80040ee <LL_SetFlashLatency+0x32>
        latency = LL_FLASH_LATENCY_2;
 8004134:	2302      	movs	r3, #2
 8004136:	e7da      	b.n	80040ee <LL_SetFlashLatency+0x32>
 8004138:	04c4b3ff 	.word	0x04c4b3ff
 800413c:	40007000 	.word	0x40007000
 8004140:	03d09000 	.word	0x03d09000
 8004144:	02dc6c00 	.word	0x02dc6c00
 8004148:	01e84800 	.word	0x01e84800
 800414c:	00f42400 	.word	0x00f42400
 8004150:	018cba80 	.word	0x018cba80
 8004154:	00b71b00 	.word	0x00b71b00
 8004158:	005b8d80 	.word	0x005b8d80
 800415c:	40022000 	.word	0x40022000

08004160 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8004160:	4b0e      	ldr	r3, [pc, #56]	; (800419c <z_sys_init_run_level+0x3c>)
{
 8004162:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8004164:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8004168:	3001      	adds	r0, #1
 800416a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800416e:	42a6      	cmp	r6, r4
 8004170:	d800      	bhi.n	8004174 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8004172:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8004174:	e9d4 3500 	ldrd	r3, r5, [r4]
 8004178:	4628      	mov	r0, r5
 800417a:	4798      	blx	r3
		if (dev != NULL) {
 800417c:	b165      	cbz	r5, 8004198 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 800417e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 8004180:	b130      	cbz	r0, 8004190 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8004182:	2800      	cmp	r0, #0
 8004184:	bfb8      	it	lt
 8004186:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8004188:	28ff      	cmp	r0, #255	; 0xff
 800418a:	bfa8      	it	ge
 800418c:	20ff      	movge	r0, #255	; 0xff
 800418e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8004190:	785a      	ldrb	r2, [r3, #1]
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8004198:	3408      	adds	r4, #8
 800419a:	e7e8      	b.n	800416e <z_sys_init_run_level+0xe>
 800419c:	0800c804 	.word	0x0800c804

080041a0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 80041a0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 80041a2:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <bg_thread_main+0x2c>)
 80041a4:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80041a6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 80041a8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80041aa:	f7ff ffd9 	bl	8004160 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 80041ae:	f000 fea5 	bl	8004efc <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 80041b2:	2003      	movs	r0, #3
 80041b4:	f7ff ffd4 	bl	8004160 <z_sys_init_run_level>

	z_init_static_threads();
 80041b8:	f000 f8ea 	bl	8004390 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
 80041bc:	f7fc ff5c 	bl	8001078 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 80041c0:	4a03      	ldr	r2, [pc, #12]	; (80041d0 <bg_thread_main+0x30>)
 80041c2:	7b13      	ldrb	r3, [r2, #12]
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 80041ca:	bd08      	pop	{r3, pc}
 80041cc:	20000b7d 	.word	0x20000b7d
 80041d0:	20000940 	.word	0x20000940

080041d4 <z_bss_zero>:
{
 80041d4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 80041d6:	4803      	ldr	r0, [pc, #12]	; (80041e4 <z_bss_zero+0x10>)
 80041d8:	4a03      	ldr	r2, [pc, #12]	; (80041e8 <z_bss_zero+0x14>)
 80041da:	2100      	movs	r1, #0
 80041dc:	1a12      	subs	r2, r2, r0
 80041de:	f007 fdb3 	bl	800bd48 <z_early_memset>
}
 80041e2:	bd08      	pop	{r3, pc}
 80041e4:	200008c0 	.word	0x200008c0
 80041e8:	20000b80 	.word	0x20000b80

080041ec <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 80041ec:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 80041ee:	2300      	movs	r3, #0
{
 80041f0:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 80041f2:	2201      	movs	r2, #1
 80041f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
 80041f8:	4e13      	ldr	r6, [pc, #76]	; (8004248 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 80041fa:	4d14      	ldr	r5, [pc, #80]	; (800424c <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	220f      	movs	r2, #15
 8004200:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8004204:	4912      	ldr	r1, [pc, #72]	; (8004250 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8004206:	2318      	movs	r3, #24
 8004208:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
 800420c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 8004210:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 8004212:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8004216:	fb00 1104 	mla	r1, r0, r4, r1
 800421a:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <z_init_cpu+0x68>)
 800421c:	9500      	str	r5, [sp, #0]
 800421e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004222:	4630      	mov	r0, r6
 8004224:	f000 f882 	bl	800432c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004228:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 800422a:	480b      	ldr	r0, [pc, #44]	; (8004258 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
 800422c:	752c      	strb	r4, [r5, #20]
 800422e:	f023 0304 	bic.w	r3, r3, #4
 8004232:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8004234:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8004238:	fb03 0404 	mla	r4, r3, r4, r0
 800423c:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 800423e:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
 8004240:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 8004242:	b006      	add	sp, #24
 8004244:	bd70      	pop	{r4, r5, r6, pc}
 8004246:	bf00      	nop
 8004248:	200008c0 	.word	0x200008c0
 800424c:	20000afc 	.word	0x20000afc
 8004250:	20000fc0 	.word	0x20000fc0
 8004254:	0800bd51 	.word	0x0800bd51
 8004258:	20001140 	.word	0x20001140

0800425c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 800425c:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800425e:	4b2c      	ldr	r3, [pc, #176]	; (8004310 <z_cstart+0xb4>)
 8004260:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004262:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8004266:	4d2b      	ldr	r5, [pc, #172]	; (8004314 <z_cstart+0xb8>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
 8004268:	4e2b      	ldr	r6, [pc, #172]	; (8004318 <z_cstart+0xbc>)
 800426a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800426c:	4f2b      	ldr	r7, [pc, #172]	; (800431c <z_cstart+0xc0>)
 800426e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004272:	2400      	movs	r4, #0
 8004274:	616b      	str	r3, [r5, #20]
 8004276:	23f0      	movs	r3, #240	; 0xf0
 8004278:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 800427c:	77ec      	strb	r4, [r5, #31]
 800427e:	762c      	strb	r4, [r5, #24]
 8004280:	766c      	strb	r4, [r5, #25]
 8004282:	76ac      	strb	r4, [r5, #26]
 8004284:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8004288:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800428a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800428e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8004290:	f7ff f82c 	bl	80032ec <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8004294:	f7fe fe14 	bl	8002ec0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8004298:	f04f 33ff 	mov.w	r3, #4294967295
 800429c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800429e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 80042a0:	f7ff f904 	bl	80034ac <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 80042a4:	f7ff f86c 	bl	8003380 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 80042a8:	f240 1301 	movw	r3, #257	; 0x101
 80042ac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 80042b0:	ab06      	add	r3, sp, #24
 80042b2:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 80042b4:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
 80042b8:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 80042ba:	f007 fd13 	bl	800bce4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 80042be:	4620      	mov	r0, r4
 80042c0:	f7ff ff4e 	bl	8004160 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 80042c4:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 80042c6:	4d16      	ldr	r5, [pc, #88]	; (8004320 <z_cstart+0xc4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 80042c8:	f7ff ff4a 	bl	8004160 <z_sys_init_run_level>
	z_sched_init();
 80042cc:	f000 fb9a 	bl	8004a04 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80042d0:	4b14      	ldr	r3, [pc, #80]	; (8004324 <z_cstart+0xc8>)
	_kernel.ready_q.cache = &z_main_thread;
 80042d2:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80042d4:	9305      	str	r3, [sp, #20]
 80042d6:	2301      	movs	r3, #1
 80042d8:	4913      	ldr	r1, [pc, #76]	; (8004328 <z_cstart+0xcc>)
 80042da:	9400      	str	r4, [sp, #0]
 80042dc:	e9cd 4303 	strd	r4, r3, [sp, #12]
 80042e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042e4:	463b      	mov	r3, r7
 80042e6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80042ea:	4628      	mov	r0, r5
 80042ec:	f000 f81e 	bl	800432c <z_setup_new_thread>
 80042f0:	7b6a      	ldrb	r2, [r5, #13]
 80042f2:	4606      	mov	r6, r0
 80042f4:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 80042f8:	4628      	mov	r0, r5
 80042fa:	736a      	strb	r2, [r5, #13]
 80042fc:	f007 fd71 	bl	800bde2 <z_ready_thread>
	z_init_cpu(0);
 8004300:	4620      	mov	r0, r4
 8004302:	f7ff ff73 	bl	80041ec <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8004306:	463a      	mov	r2, r7
 8004308:	4631      	mov	r1, r6
 800430a:	4628      	mov	r0, r5
 800430c:	f7fe fec2 	bl	8003094 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8004310:	20001980 	.word	0x20001980
 8004314:	e000ed00 	.word	0xe000ed00
 8004318:	20000afc 	.word	0x20000afc
 800431c:	080041a1 	.word	0x080041a1
 8004320:	20000940 	.word	0x20000940
 8004324:	0800cc60 	.word	0x0800cc60
 8004328:	20000b80 	.word	0x20000b80

0800432c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800432c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8004330:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8004332:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8004334:	2604      	movs	r6, #4
 8004336:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 8004338:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800433a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800433c:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 8004340:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8004342:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8004344:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8004348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 800434a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800434c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8004350:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8004352:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 8004356:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 800435a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 800435c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 800435e:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8004360:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8004364:	9202      	str	r2, [sp, #8]
 8004366:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004368:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 800436a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800436c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800436e:	9200      	str	r2, [sp, #0]
 8004370:	4642      	mov	r2, r8
{
 8004372:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8004374:	f7fe fe5c 	bl	8003030 <arch_new_thread>
	if (!_current) {
 8004378:	4b04      	ldr	r3, [pc, #16]	; (800438c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 800437a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	b103      	cbz	r3, 8004382 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 8004382:	6723      	str	r3, [r4, #112]	; 0x70
}
 8004384:	4640      	mov	r0, r8
 8004386:	b004      	add	sp, #16
 8004388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800438c:	20000afc 	.word	0x20000afc

08004390 <z_init_static_threads>:
{
 8004390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004392:	4c22      	ldr	r4, [pc, #136]	; (800441c <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8004394:	4d22      	ldr	r5, [pc, #136]	; (8004420 <z_init_static_threads+0x90>)
{
 8004396:	b087      	sub	sp, #28
 8004398:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 800439a:	42ae      	cmp	r6, r5
 800439c:	f104 0430 	add.w	r4, r4, #48	; 0x30
 80043a0:	d30b      	bcc.n	80043ba <z_init_static_threads+0x2a>
	k_sched_lock();
 80043a2:	f000 f943 	bl	800462c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80043a6:	4c1d      	ldr	r4, [pc, #116]	; (800441c <z_init_static_threads+0x8c>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80043a8:	4f1e      	ldr	r7, [pc, #120]	; (8004424 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 80043aa:	260a      	movs	r6, #10
 80043ac:	42ac      	cmp	r4, r5
 80043ae:	d320      	bcc.n	80043f2 <z_init_static_threads+0x62>
}
 80043b0:	b007      	add	sp, #28
 80043b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80043b6:	f000 bb09 	b.w	80049cc <k_sched_unlock>
		z_setup_new_thread(
 80043ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80043be:	9305      	str	r3, [sp, #20]
 80043c0:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80043c4:	9304      	str	r3, [sp, #16]
 80043c6:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80043ca:	9303      	str	r3, [sp, #12]
 80043cc:	f854 3c18 	ldr.w	r3, [r4, #-24]
 80043d0:	9302      	str	r3, [sp, #8]
 80043d2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80043e2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80043e6:	f7ff ffa1 	bl	800432c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 80043ea:	f854 3c30 	ldr.w	r3, [r4, #-48]
 80043ee:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 80043f0:	e7d2      	b.n	8004398 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 80043f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80043f4:	1c53      	adds	r3, r2, #1
 80043f6:	d009      	beq.n	800440c <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 80043f8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80043fc:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8004400:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8004404:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8004406:	d103      	bne.n	8004410 <z_init_static_threads+0x80>
	z_sched_start(thread);
 8004408:	f000 f9f6 	bl	80047f8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800440c:	3430      	adds	r4, #48	; 0x30
 800440e:	e7cd      	b.n	80043ac <z_init_static_threads+0x1c>
 8004410:	4639      	mov	r1, r7
 8004412:	3018      	adds	r0, #24
 8004414:	f000 fc6c 	bl	8004cf0 <z_add_timeout>
 8004418:	e7f8      	b.n	800440c <z_init_static_threads+0x7c>
 800441a:	bf00      	nop
 800441c:	20000898 	.word	0x20000898
 8004420:	20000898 	.word	0x20000898
 8004424:	0800be03 	.word	0x0800be03

08004428 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 8004428:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800442c:	4604      	mov	r4, r0
 800442e:	4617      	mov	r7, r2
 8004430:	461e      	mov	r6, r3
	__asm__ volatile(
 8004432:	f04f 0310 	mov.w	r3, #16
 8004436:	f3ef 8811 	mrs	r8, BASEPRI
 800443a:	f383 8812 	msr	BASEPRI_MAX, r3
 800443e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8004442:	68c3      	ldr	r3, [r0, #12]
 8004444:	4a32      	ldr	r2, [pc, #200]	; (8004510 <z_impl_k_mutex_lock+0xe8>)
 8004446:	b16b      	cbz	r3, 8004464 <z_impl_k_mutex_lock+0x3c>
 8004448:	6880      	ldr	r0, [r0, #8]
 800444a:	6891      	ldr	r1, [r2, #8]
 800444c:	4288      	cmp	r0, r1
 800444e:	d019      	beq.n	8004484 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 8004450:	ea57 0306 	orrs.w	r3, r7, r6
 8004454:	d118      	bne.n	8004488 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 8004456:	f388 8811 	msr	BASEPRI, r8
 800445a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 800445e:	f06f 000f 	mvn.w	r0, #15
 8004462:	e00c      	b.n	800447e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
 8004464:	6891      	ldr	r1, [r2, #8]
 8004466:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 800446a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
 800446c:	3301      	adds	r3, #1
 800446e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 8004470:	6893      	ldr	r3, [r2, #8]
 8004472:	60a3      	str	r3, [r4, #8]
 8004474:	f388 8811 	msr	BASEPRI, r8
 8004478:	f3bf 8f6f 	isb	sy
		return 0;
 800447c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 800447e:	b002      	add	sp, #8
 8004480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 8004484:	6921      	ldr	r1, [r4, #16]
 8004486:	e7f0      	b.n	800446a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8004488:	f991 100e 	ldrsb.w	r1, [r1, #14]
 800448c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
 8004490:	4299      	cmp	r1, r3
 8004492:	bfa8      	it	ge
 8004494:	4619      	movge	r1, r3
 8004496:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 800449a:	4291      	cmp	r1, r2
 800449c:	bfb8      	it	lt
 800449e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 80044a0:	428b      	cmp	r3, r1
 80044a2:	dd2e      	ble.n	8004502 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
 80044a4:	f007 fc60 	bl	800bd68 <adjust_owner_prio.isra.0>
 80044a8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 80044aa:	e9cd 7600 	strd	r7, r6, [sp]
 80044ae:	4819      	ldr	r0, [pc, #100]	; (8004514 <z_impl_k_mutex_lock+0xec>)
 80044b0:	4622      	mov	r2, r4
 80044b2:	4641      	mov	r1, r8
 80044b4:	f000 f9fc 	bl	80048b0 <z_pend_curr>
	if (got_mutex == 0) {
 80044b8:	2800      	cmp	r0, #0
 80044ba:	d0e0      	beq.n	800447e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
 80044bc:	f04f 0310 	mov.w	r3, #16
 80044c0:	f3ef 8611 	mrs	r6, BASEPRI
 80044c4:	f383 8812 	msr	BASEPRI_MAX, r3
 80044c8:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80044d0:	429c      	cmp	r4, r3
 80044d2:	d00a      	beq.n	80044ea <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 80044d4:	b14b      	cbz	r3, 80044ea <z_impl_k_mutex_lock+0xc2>
 80044d6:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80044da:	4299      	cmp	r1, r3
 80044dc:	bfa8      	it	ge
 80044de:	4619      	movge	r1, r3
 80044e0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80044e4:	4299      	cmp	r1, r3
 80044e6:	bfb8      	it	lt
 80044e8:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 80044ea:	68a0      	ldr	r0, [r4, #8]
 80044ec:	f007 fc3c 	bl	800bd68 <adjust_owner_prio.isra.0>
 80044f0:	b900      	cbnz	r0, 80044f4 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
 80044f2:	b145      	cbz	r5, 8004506 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 80044f4:	4807      	ldr	r0, [pc, #28]	; (8004514 <z_impl_k_mutex_lock+0xec>)
 80044f6:	4631      	mov	r1, r6
 80044f8:	f000 f886 	bl	8004608 <z_reschedule>
	return -EAGAIN;
 80044fc:	f06f 000a 	mvn.w	r0, #10
 8004500:	e7bd      	b.n	800447e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
 8004502:	2500      	movs	r5, #0
 8004504:	e7d1      	b.n	80044aa <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
 8004506:	f386 8811 	msr	BASEPRI, r6
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	e7f5      	b.n	80044fc <z_impl_k_mutex_lock+0xd4>
 8004510:	20000afc 	.word	0x20000afc
 8004514:	20000b7e 	.word	0x20000b7e

08004518 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 8004518:	6883      	ldr	r3, [r0, #8]
{
 800451a:	b570      	push	{r4, r5, r6, lr}
 800451c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 800451e:	b36b      	cbz	r3, 800457c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 8004520:	4a19      	ldr	r2, [pc, #100]	; (8004588 <z_impl_k_mutex_unlock+0x70>)
 8004522:	6892      	ldr	r2, [r2, #8]
 8004524:	4293      	cmp	r3, r2
 8004526:	d12c      	bne.n	8004582 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 8004528:	68c3      	ldr	r3, [r0, #12]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d903      	bls.n	8004536 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
 800452e:	3b01      	subs	r3, #1
 8004530:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
 8004532:	2000      	movs	r0, #0
}
 8004534:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
 8004536:	f04f 0310 	mov.w	r3, #16
 800453a:	f3ef 8511 	mrs	r5, BASEPRI
 800453e:	f383 8812 	msr	BASEPRI_MAX, r3
 8004542:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 8004546:	6901      	ldr	r1, [r0, #16]
 8004548:	6880      	ldr	r0, [r0, #8]
 800454a:	f007 fc0d 	bl	800bd68 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 800454e:	4620      	mov	r0, r4
 8004550:	f007 fca3 	bl	800be9a <z_unpend_first_thread>
	mutex->owner = new_owner;
 8004554:	2600      	movs	r6, #0
 8004556:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8004558:	b150      	cbz	r0, 8004570 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
 800455a:	f990 200e 	ldrsb.w	r2, [r0, #14]
 800455e:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8004560:	6786      	str	r6, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
 8004562:	f007 fc3e 	bl	800bde2 <z_ready_thread>
		z_reschedule(&lock, key);
 8004566:	4809      	ldr	r0, [pc, #36]	; (800458c <z_impl_k_mutex_unlock+0x74>)
 8004568:	4629      	mov	r1, r5
 800456a:	f000 f84d 	bl	8004608 <z_reschedule>
 800456e:	e7e0      	b.n	8004532 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
 8004570:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8004572:	f385 8811 	msr	BASEPRI, r5
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	e7da      	b.n	8004532 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
 800457c:	f06f 0015 	mvn.w	r0, #21
 8004580:	e7d8      	b.n	8004534 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
 8004582:	f04f 30ff 	mov.w	r0, #4294967295
 8004586:	e7d5      	b.n	8004534 <z_impl_k_mutex_unlock+0x1c>
 8004588:	20000afc 	.word	0x20000afc
 800458c:	20000b7e 	.word	0x20000b7e

08004590 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 8004590:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 8004592:	4d07      	ldr	r5, [pc, #28]	; (80045b0 <z_reset_time_slice+0x20>)
 8004594:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 8004596:	b154      	cbz	r4, 80045ae <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 8004598:	f7ff fcc8 	bl	8003f2c <sys_clock_elapsed>
 800459c:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <z_reset_time_slice+0x24>)
 800459e:	4404      	add	r4, r0
 80045a0:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 80045a2:	6828      	ldr	r0, [r5, #0]
 80045a4:	2100      	movs	r1, #0
	}
}
 80045a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 80045aa:	f007 bca4 	b.w	800bef6 <z_set_timeout_expiry>
}
 80045ae:	bd38      	pop	{r3, r4, r5, pc}
 80045b0:	20000b28 	.word	0x20000b28
 80045b4:	20000afc 	.word	0x20000afc

080045b8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 80045b8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80045ba:	f04f 0310 	mov.w	r3, #16
 80045be:	f3ef 8411 	mrs	r4, BASEPRI
 80045c2:	f383 8812 	msr	BASEPRI_MAX, r3
 80045c6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 80045ca:	4a0c      	ldr	r2, [pc, #48]	; (80045fc <k_sched_time_slice_set+0x44>)
 80045cc:	2300      	movs	r3, #0
 80045ce:	6113      	str	r3, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 80045d0:	2800      	cmp	r0, #0
			return ((uint32_t)t) * (to_hz / from_hz);
 80045d2:	f04f 030a 	mov.w	r3, #10
 80045d6:	fb00 f303 	mul.w	r3, r0, r3
 80045da:	4809      	ldr	r0, [pc, #36]	; (8004600 <k_sched_time_slice_set+0x48>)
 80045dc:	dc0a      	bgt.n	80045f4 <k_sched_time_slice_set+0x3c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
 80045de:	6003      	str	r3, [r0, #0]
		}
		slice_max_prio = prio;
 80045e0:	4b08      	ldr	r3, [pc, #32]	; (8004604 <k_sched_time_slice_set+0x4c>)
		z_reset_time_slice(_current);
 80045e2:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
 80045e4:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 80045e6:	f7ff ffd3 	bl	8004590 <z_reset_time_slice>
	__asm__ volatile(
 80045ea:	f384 8811 	msr	BASEPRI, r4
 80045ee:	f3bf 8f6f 	isb	sy
	}
}
 80045f2:	bd10      	pop	{r4, pc}
			slice_ticks = MAX(2, slice_ticks);
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	bfb8      	it	lt
 80045f8:	2302      	movlt	r3, #2
 80045fa:	e7f0      	b.n	80045de <k_sched_time_slice_set+0x26>
 80045fc:	20000afc 	.word	0x20000afc
 8004600:	20000b28 	.word	0x20000b28
 8004604:	20000b24 	.word	0x20000b24

08004608 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8004608:	b949      	cbnz	r1, 800461e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800460a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 800460e:	b930      	cbnz	r0, 800461e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8004610:	4b05      	ldr	r3, [pc, #20]	; (8004628 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 8004612:	699a      	ldr	r2, [r3, #24]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	429a      	cmp	r2, r3
 8004618:	d001      	beq.n	800461e <z_reschedule+0x16>
	ret = arch_swap(key);
 800461a:	f7fe bcb5 	b.w	8002f88 <arch_swap>
 800461e:	f381 8811 	msr	BASEPRI, r1
 8004622:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
 8004626:	4770      	bx	lr
 8004628:	20000afc 	.word	0x20000afc

0800462c <k_sched_lock>:
	__asm__ volatile(
 800462c:	f04f 0310 	mov.w	r3, #16
 8004630:	f3ef 8111 	mrs	r1, BASEPRI
 8004634:	f383 8812 	msr	BASEPRI_MAX, r3
 8004638:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <k_sched_lock+0x24>)
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	7bd3      	ldrb	r3, [r2, #15]
 8004642:	3b01      	subs	r3, #1
 8004644:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8004646:	f381 8811 	msr	BASEPRI, r1
 800464a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 800464e:	4770      	bx	lr
 8004650:	20000afc 	.word	0x20000afc

08004654 <update_cache>:
{
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
 8004658:	480c      	ldr	r0, [pc, #48]	; (800468c <update_cache+0x38>)
 800465a:	4d0d      	ldr	r5, [pc, #52]	; (8004690 <update_cache+0x3c>)
 800465c:	f007 fbbb 	bl	800bdd6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8004660:	4604      	mov	r4, r0
 8004662:	b900      	cbnz	r0, 8004666 <update_cache+0x12>
 8004664:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8004666:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8004668:	b94a      	cbnz	r2, 800467e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 800466a:	7b5a      	ldrb	r2, [r3, #13]
 800466c:	06d2      	lsls	r2, r2, #27
 800466e:	d106      	bne.n	800467e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8004670:	69a2      	ldr	r2, [r4, #24]
 8004672:	b922      	cbnz	r2, 800467e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 8004674:	89da      	ldrh	r2, [r3, #14]
 8004676:	2a7f      	cmp	r2, #127	; 0x7f
 8004678:	d901      	bls.n	800467e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 800467a:	61ab      	str	r3, [r5, #24]
}
 800467c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 800467e:	429c      	cmp	r4, r3
 8004680:	d002      	beq.n	8004688 <update_cache+0x34>
			z_reset_time_slice(thread);
 8004682:	4620      	mov	r0, r4
 8004684:	f7ff ff84 	bl	8004590 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8004688:	61ac      	str	r4, [r5, #24]
}
 800468a:	e7f7      	b.n	800467c <update_cache+0x28>
 800468c:	20000b18 	.word	0x20000b18
 8004690:	20000afc 	.word	0x20000afc

08004694 <move_thread_to_end_of_prio_q>:
{
 8004694:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 8004696:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800469a:	7b43      	ldrb	r3, [r0, #13]
 800469c:	2a00      	cmp	r2, #0
{
 800469e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 80046a0:	da04      	bge.n	80046ac <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80046a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046a6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 80046a8:	f007 fb6d 	bl	800bd86 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 80046ac:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 80046ae:	4a15      	ldr	r2, [pc, #84]	; (8004704 <move_thread_to_end_of_prio_q+0x70>)
 80046b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046b4:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 80046b6:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80046ba:	f102 051c 	add.w	r5, r2, #28
 80046be:	42ab      	cmp	r3, r5
 80046c0:	d01b      	beq.n	80046fa <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80046c2:	b1d3      	cbz	r3, 80046fa <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 80046c4:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 80046c8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 80046cc:	4286      	cmp	r6, r0
 80046ce:	d00f      	beq.n	80046f0 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 80046d0:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 80046d2:	2800      	cmp	r0, #0
 80046d4:	dd0c      	ble.n	80046f0 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 80046d6:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 80046d8:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 80046dc:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 80046de:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 80046e0:	6890      	ldr	r0, [r2, #8]
 80046e2:	1a43      	subs	r3, r0, r1
 80046e4:	4258      	negs	r0, r3
}
 80046e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 80046ea:	4158      	adcs	r0, r3
 80046ec:	f7ff bfb2 	b.w	8004654 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80046f0:	42a3      	cmp	r3, r4
 80046f2:	d002      	beq.n	80046fa <move_thread_to_end_of_prio_q+0x66>
 80046f4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e6      	bne.n	80046c8 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 80046fa:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 80046fe:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8004700:	6211      	str	r1, [r2, #32]
}
 8004702:	e7ed      	b.n	80046e0 <move_thread_to_end_of_prio_q+0x4c>
 8004704:	20000afc 	.word	0x20000afc

08004708 <z_time_slice>:
{
 8004708:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800470a:	f04f 0310 	mov.w	r3, #16
 800470e:	f3ef 8511 	mrs	r5, BASEPRI
 8004712:	f383 8812 	msr	BASEPRI_MAX, r3
 8004716:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800471a:	4b17      	ldr	r3, [pc, #92]	; (8004778 <z_time_slice+0x70>)
 800471c:	4a17      	ldr	r2, [pc, #92]	; (800477c <z_time_slice+0x74>)
 800471e:	689c      	ldr	r4, [r3, #8]
 8004720:	6811      	ldr	r1, [r2, #0]
 8004722:	428c      	cmp	r4, r1
 8004724:	d107      	bne.n	8004736 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 8004726:	4620      	mov	r0, r4
 8004728:	f7ff ff32 	bl	8004590 <z_reset_time_slice>
	__asm__ volatile(
 800472c:	f385 8811 	msr	BASEPRI, r5
 8004730:	f3bf 8f6f 	isb	sy
}
 8004734:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8004736:	2100      	movs	r1, #0
 8004738:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 800473a:	4a11      	ldr	r2, [pc, #68]	; (8004780 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	b1c2      	cbz	r2, 8004772 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8004740:	89e2      	ldrh	r2, [r4, #14]
 8004742:	2a7f      	cmp	r2, #127	; 0x7f
 8004744:	d815      	bhi.n	8004772 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 8004746:	7b62      	ldrb	r2, [r4, #13]
 8004748:	06d2      	lsls	r2, r2, #27
 800474a:	d112      	bne.n	8004772 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800474c:	4a0d      	ldr	r2, [pc, #52]	; (8004784 <z_time_slice+0x7c>)
 800474e:	f994 100e 	ldrsb.w	r1, [r4, #14]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	4291      	cmp	r1, r2
 8004756:	db0c      	blt.n	8004772 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
 8004758:	4a0b      	ldr	r2, [pc, #44]	; (8004788 <z_time_slice+0x80>)
 800475a:	4294      	cmp	r4, r2
 800475c:	d009      	beq.n	8004772 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	4282      	cmp	r2, r0
 8004762:	dc03      	bgt.n	800476c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 8004764:	4620      	mov	r0, r4
 8004766:	f7ff ff95 	bl	8004694 <move_thread_to_end_of_prio_q>
 800476a:	e7dc      	b.n	8004726 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 800476c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 800476e:	611a      	str	r2, [r3, #16]
 8004770:	e7dc      	b.n	800472c <z_time_slice+0x24>
 8004772:	2200      	movs	r2, #0
 8004774:	e7fb      	b.n	800476e <z_time_slice+0x66>
 8004776:	bf00      	nop
 8004778:	20000afc 	.word	0x20000afc
 800477c:	20000b20 	.word	0x20000b20
 8004780:	20000b28 	.word	0x20000b28
 8004784:	20000b24 	.word	0x20000b24
 8004788:	200008c0 	.word	0x200008c0

0800478c <ready_thread>:
{
 800478c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800478e:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8004792:	7b43      	ldrb	r3, [r0, #13]
 8004794:	2a00      	cmp	r2, #0
 8004796:	db2a      	blt.n	80047ee <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8004798:	06da      	lsls	r2, r3, #27
 800479a:	d128      	bne.n	80047ee <ready_thread+0x62>
 800479c:	6982      	ldr	r2, [r0, #24]
 800479e:	bb32      	cbnz	r2, 80047ee <ready_thread+0x62>
	return list->head == list;
 80047a0:	4a14      	ldr	r2, [pc, #80]	; (80047f4 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 80047a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047a6:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
 80047a8:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80047ac:	f102 051c 	add.w	r5, r2, #28
 80047b0:	42ab      	cmp	r3, r5
 80047b2:	d017      	beq.n	80047e4 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80047b4:	b1b3      	cbz	r3, 80047e4 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 80047b6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 80047ba:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 80047be:	428e      	cmp	r6, r1
 80047c0:	d00b      	beq.n	80047da <ready_thread+0x4e>
		return b2 - b1;
 80047c2:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 80047c4:	2900      	cmp	r1, #0
 80047c6:	dd08      	ble.n	80047da <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 80047c8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80047ca:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 80047ce:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80047d0:	6058      	str	r0, [r3, #4]
}
 80047d2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 80047d4:	2000      	movs	r0, #0
 80047d6:	f7ff bf3d 	b.w	8004654 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80047da:	42a3      	cmp	r3, r4
 80047dc:	d002      	beq.n	80047e4 <ready_thread+0x58>
 80047de:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1ea      	bne.n	80047ba <ready_thread+0x2e>
	node->prev = tail;
 80047e4:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 80047e8:	6020      	str	r0, [r4, #0]
	list->tail = node;
 80047ea:	6210      	str	r0, [r2, #32]
}
 80047ec:	e7f1      	b.n	80047d2 <ready_thread+0x46>
}
 80047ee:	bc70      	pop	{r4, r5, r6}
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20000afc 	.word	0x20000afc

080047f8 <z_sched_start>:
{
 80047f8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80047fa:	f04f 0210 	mov.w	r2, #16
 80047fe:	f3ef 8411 	mrs	r4, BASEPRI
 8004802:	f382 8812 	msr	BASEPRI_MAX, r2
 8004806:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800480a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 800480c:	0751      	lsls	r1, r2, #29
 800480e:	d404      	bmi.n	800481a <z_sched_start+0x22>
	__asm__ volatile(
 8004810:	f384 8811 	msr	BASEPRI, r4
 8004814:	f3bf 8f6f 	isb	sy
}
 8004818:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800481a:	f022 0204 	bic.w	r2, r2, #4
 800481e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8004820:	f7ff ffb4 	bl	800478c <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8004824:	4621      	mov	r1, r4
 8004826:	4802      	ldr	r0, [pc, #8]	; (8004830 <z_sched_start+0x38>)
}
 8004828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 800482c:	f7ff beec 	b.w	8004608 <z_reschedule>
 8004830:	20000b7e 	.word	0x20000b7e

08004834 <unready_thread>:
{
 8004834:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 8004836:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800483a:	7b43      	ldrb	r3, [r0, #13]
 800483c:	2a00      	cmp	r2, #0
{
 800483e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8004840:	da04      	bge.n	800484c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8004842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004846:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8004848:	f007 fa9d 	bl	800bd86 <sys_dlist_remove>
	update_cache(thread == _current);
 800484c:	4b04      	ldr	r3, [pc, #16]	; (8004860 <unready_thread+0x2c>)
 800484e:	6898      	ldr	r0, [r3, #8]
 8004850:	1a43      	subs	r3, r0, r1
 8004852:	4258      	negs	r0, r3
 8004854:	4158      	adcs	r0, r3
}
 8004856:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 800485a:	f7ff befb 	b.w	8004654 <update_cache>
 800485e:	bf00      	nop
 8004860:	20000afc 	.word	0x20000afc

08004864 <pend>:
{
 8004864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004868:	4606      	mov	r6, r0
 800486a:	4615      	mov	r5, r2
 800486c:	461c      	mov	r4, r3
	__asm__ volatile(
 800486e:	f04f 0310 	mov.w	r3, #16
 8004872:	f3ef 8711 	mrs	r7, BASEPRI
 8004876:	f383 8812 	msr	BASEPRI_MAX, r3
 800487a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 800487e:	f007 fae2 	bl	800be46 <add_to_waitq_locked>
	__asm__ volatile(
 8004882:	f387 8811 	msr	BASEPRI, r7
 8004886:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800488a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800488e:	bf08      	it	eq
 8004890:	f1b5 3fff 	cmpeq.w	r5, #4294967295
 8004894:	d008      	beq.n	80048a8 <pend+0x44>
 8004896:	462a      	mov	r2, r5
 8004898:	4623      	mov	r3, r4
 800489a:	f106 0018 	add.w	r0, r6, #24
 800489e:	4903      	ldr	r1, [pc, #12]	; (80048ac <pend+0x48>)
}
 80048a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048a4:	f000 ba24 	b.w	8004cf0 <z_add_timeout>
 80048a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048ac:	0800be03 	.word	0x0800be03

080048b0 <z_pend_curr>:
{
 80048b0:	b510      	push	{r4, lr}
	pending_current = _current;
 80048b2:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <z_pend_curr+0x20>)
 80048b4:	6898      	ldr	r0, [r3, #8]
 80048b6:	4b07      	ldr	r3, [pc, #28]	; (80048d4 <z_pend_curr+0x24>)
{
 80048b8:	460c      	mov	r4, r1
	pending_current = _current;
 80048ba:	6018      	str	r0, [r3, #0]
{
 80048bc:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 80048be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048c2:	f7ff ffcf 	bl	8004864 <pend>
 80048c6:	4620      	mov	r0, r4
}
 80048c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048cc:	f7fe bb5c 	b.w	8002f88 <arch_swap>
 80048d0:	20000afc 	.word	0x20000afc
 80048d4:	20000b20 	.word	0x20000b20

080048d8 <z_set_prio>:
{
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	4604      	mov	r4, r0
	__asm__ volatile(
 80048dc:	f04f 0310 	mov.w	r3, #16
 80048e0:	f3ef 8611 	mrs	r6, BASEPRI
 80048e4:	f383 8812 	msr	BASEPRI_MAX, r3
 80048e8:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 80048ec:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80048ee:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
 80048f0:	b249      	sxtb	r1, r1
 80048f2:	d133      	bne.n	800495c <z_set_prio+0x84>
		if (need_sched) {
 80048f4:	6982      	ldr	r2, [r0, #24]
 80048f6:	bb8a      	cbnz	r2, 800495c <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80048f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048fc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80048fe:	f007 fa42 	bl	800bd86 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8004902:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 8004904:	4a17      	ldr	r2, [pc, #92]	; (8004964 <z_set_prio+0x8c>)
				thread->base.prio = prio;
 8004906:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 8004908:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800490c:	7343      	strb	r3, [r0, #13]
 800490e:	4610      	mov	r0, r2
 8004910:	f850 3f1c 	ldr.w	r3, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004914:	4283      	cmp	r3, r0
 8004916:	d01b      	beq.n	8004950 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004918:	b1d3      	cbz	r3, 8004950 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
 800491a:	6a17      	ldr	r7, [r2, #32]
	int32_t b2 = thread_2->base.prio;
 800491c:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
 8004920:	42a9      	cmp	r1, r5
 8004922:	d010      	beq.n	8004946 <z_set_prio+0x6e>
		return b2 - b1;
 8004924:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 8004926:	2d00      	cmp	r5, #0
 8004928:	dd0d      	ble.n	8004946 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
 800492a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800492c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8004930:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8004932:	605c      	str	r4, [r3, #4]
			update_cache(1);
 8004934:	2001      	movs	r0, #1
 8004936:	f7ff fe8d 	bl	8004654 <update_cache>
 800493a:	2001      	movs	r0, #1
	__asm__ volatile(
 800493c:	f386 8811 	msr	BASEPRI, r6
 8004940:	f3bf 8f6f 	isb	sy
}
 8004944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 8004946:	42bb      	cmp	r3, r7
 8004948:	d002      	beq.n	8004950 <z_set_prio+0x78>
 800494a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e5      	bne.n	800491c <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
 8004950:	6a13      	ldr	r3, [r2, #32]
	node->prev = tail;
 8004952:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
 8004956:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8004958:	6214      	str	r4, [r2, #32]
}
 800495a:	e7eb      	b.n	8004934 <z_set_prio+0x5c>
			thread->base.prio = prio;
 800495c:	73a1      	strb	r1, [r4, #14]
 800495e:	2000      	movs	r0, #0
 8004960:	e7ec      	b.n	800493c <z_set_prio+0x64>
 8004962:	bf00      	nop
 8004964:	20000afc 	.word	0x20000afc

08004968 <z_impl_k_thread_suspend>:
{
 8004968:	b570      	push	{r4, r5, r6, lr}
 800496a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800496c:	3018      	adds	r0, #24
 800496e:	f007 faac 	bl	800beca <z_abort_timeout>
	__asm__ volatile(
 8004972:	f04f 0310 	mov.w	r3, #16
 8004976:	f3ef 8611 	mrs	r6, BASEPRI
 800497a:	f383 8812 	msr	BASEPRI_MAX, r3
 800497e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8004982:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 8004986:	7b63      	ldrb	r3, [r4, #13]
 8004988:	2a00      	cmp	r2, #0
 800498a:	da05      	bge.n	8004998 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800498c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004990:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8004992:	4620      	mov	r0, r4
 8004994:	f007 f9f7 	bl	800bd86 <sys_dlist_remove>
		update_cache(thread == _current);
 8004998:	4d0b      	ldr	r5, [pc, #44]	; (80049c8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800499a:	7b63      	ldrb	r3, [r4, #13]
 800499c:	68a8      	ldr	r0, [r5, #8]
 800499e:	f043 0310 	orr.w	r3, r3, #16
 80049a2:	7363      	strb	r3, [r4, #13]
 80049a4:	1b03      	subs	r3, r0, r4
 80049a6:	4258      	negs	r0, r3
 80049a8:	4158      	adcs	r0, r3
 80049aa:	f7ff fe53 	bl	8004654 <update_cache>
	__asm__ volatile(
 80049ae:	f386 8811 	msr	BASEPRI, r6
 80049b2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 80049b6:	68ab      	ldr	r3, [r5, #8]
 80049b8:	42a3      	cmp	r3, r4
 80049ba:	d103      	bne.n	80049c4 <z_impl_k_thread_suspend+0x5c>
}
 80049bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 80049c0:	f007 b9ff 	b.w	800bdc2 <z_reschedule_unlocked>
}
 80049c4:	bd70      	pop	{r4, r5, r6, pc}
 80049c6:	bf00      	nop
 80049c8:	20000afc 	.word	0x20000afc

080049cc <k_sched_unlock>:
{
 80049cc:	b510      	push	{r4, lr}
	__asm__ volatile(
 80049ce:	f04f 0310 	mov.w	r3, #16
 80049d2:	f3ef 8411 	mrs	r4, BASEPRI
 80049d6:	f383 8812 	msr	BASEPRI_MAX, r3
 80049da:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 80049de:	4b08      	ldr	r3, [pc, #32]	; (8004a00 <k_sched_unlock+0x34>)
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	7bd3      	ldrb	r3, [r2, #15]
 80049e4:	3301      	adds	r3, #1
 80049e6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 80049e8:	2000      	movs	r0, #0
 80049ea:	f7ff fe33 	bl	8004654 <update_cache>
	__asm__ volatile(
 80049ee:	f384 8811 	msr	BASEPRI, r4
 80049f2:	f3bf 8f6f 	isb	sy
}
 80049f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 80049fa:	f007 b9e2 	b.w	800bdc2 <z_reschedule_unlocked>
 80049fe:	bf00      	nop
 8004a00:	20000afc 	.word	0x20000afc

08004a04 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8004a04:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8004a06:	2100      	movs	r1, #0
 8004a08:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 8004a0c:	e9c3 2207 	strd	r2, r2, [r3, #28]
 8004a10:	4608      	mov	r0, r1
 8004a12:	f7ff bdd1 	b.w	80045b8 <k_sched_time_slice_set>
 8004a16:	bf00      	nop
 8004a18:	20000afc 	.word	0x20000afc

08004a1c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 8004a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8004a1e:	f04f 0310 	mov.w	r3, #16
 8004a22:	f3ef 8511 	mrs	r5, BASEPRI
 8004a26:	f383 8812 	msr	BASEPRI_MAX, r3
 8004a2a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 8004a2e:	491a      	ldr	r1, [pc, #104]	; (8004a98 <z_impl_k_yield+0x7c>)
 8004a30:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8004a32:	7b43      	ldrb	r3, [r0, #13]
 8004a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a38:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8004a3a:	f007 f9a4 	bl	800bd86 <sys_dlist_remove>
	}
	queue_thread(_current);
 8004a3e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8004a40:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 8004a42:	4608      	mov	r0, r1
 8004a44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a48:	735a      	strb	r2, [r3, #13]
 8004a4a:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004a4e:	4282      	cmp	r2, r0
 8004a50:	d01c      	beq.n	8004a8c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004a52:	b1da      	cbz	r2, 8004a8c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 8004a54:	6a0f      	ldr	r7, [r1, #32]
	int32_t b1 = thread_1->base.prio;
 8004a56:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 8004a5a:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 8004a5e:	42a6      	cmp	r6, r4
 8004a60:	d00f      	beq.n	8004a82 <z_impl_k_yield+0x66>
		return b2 - b1;
 8004a62:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8004a64:	2c00      	cmp	r4, #0
 8004a66:	dd0c      	ble.n	8004a82 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 8004a68:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8004a6a:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 8004a6e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8004a70:	6053      	str	r3, [r2, #4]
	update_cache(1);
 8004a72:	2001      	movs	r0, #1
 8004a74:	f7ff fdee 	bl	8004654 <update_cache>
 8004a78:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 8004a7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a7e:	f7fe ba83 	b.w	8002f88 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 8004a82:	42ba      	cmp	r2, r7
 8004a84:	d002      	beq.n	8004a8c <z_impl_k_yield+0x70>
 8004a86:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004a88:	2a00      	cmp	r2, #0
 8004a8a:	d1e6      	bne.n	8004a5a <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 8004a8c:	6a0a      	ldr	r2, [r1, #32]
	node->prev = tail;
 8004a8e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 8004a92:	6013      	str	r3, [r2, #0]
	list->tail = node;
 8004a94:	620b      	str	r3, [r1, #32]
}
 8004a96:	e7ec      	b.n	8004a72 <z_impl_k_yield+0x56>
 8004a98:	20000afc 	.word	0x20000afc

08004a9c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8004a9c:	ea50 0301 	orrs.w	r3, r0, r1
{
 8004aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	460e      	mov	r6, r1
	if (ticks == 0) {
 8004aa8:	d103      	bne.n	8004ab2 <z_tick_sleep+0x16>
	z_impl_k_yield();
 8004aaa:	f7ff ffb7 	bl	8004a1c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 8004aae:	2000      	movs	r0, #0
 8004ab0:	e033      	b.n	8004b1a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 8004ab2:	f06f 0401 	mvn.w	r4, #1
 8004ab6:	1a24      	subs	r4, r4, r0
 8004ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8004abc:	eb63 0301 	sbc.w	r3, r3, r1
 8004ac0:	2c01      	cmp	r4, #1
 8004ac2:	f173 0300 	sbcs.w	r3, r3, #0
 8004ac6:	da02      	bge.n	8004ace <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8004ac8:	f007 fa2f 	bl	800bf2a <sys_clock_tick_get_32>
 8004acc:	1944      	adds	r4, r0, r5
 8004ace:	f04f 0310 	mov.w	r3, #16
 8004ad2:	f3ef 8811 	mrs	r8, BASEPRI
 8004ad6:	f383 8812 	msr	BASEPRI_MAX, r3
 8004ada:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 8004ade:	4f10      	ldr	r7, [pc, #64]	; (8004b20 <z_tick_sleep+0x84>)
 8004ae0:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <z_tick_sleep+0x88>)
 8004ae2:	68b8      	ldr	r0, [r7, #8]
 8004ae4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 8004ae6:	f7ff fea5 	bl	8004834 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8004aea:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8004aec:	490e      	ldr	r1, [pc, #56]	; (8004b28 <z_tick_sleep+0x8c>)
 8004aee:	462a      	mov	r2, r5
 8004af0:	4633      	mov	r3, r6
 8004af2:	3018      	adds	r0, #24
 8004af4:	f000 f8fc 	bl	8004cf0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	7b53      	ldrb	r3, [r2, #13]
 8004afc:	f043 0310 	orr.w	r3, r3, #16
 8004b00:	7353      	strb	r3, [r2, #13]
 8004b02:	4640      	mov	r0, r8
 8004b04:	f7fe fa40 	bl	8002f88 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8004b08:	f007 fa0f 	bl	800bf2a <sys_clock_tick_get_32>
 8004b0c:	1a20      	subs	r0, r4, r0
 8004b0e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8004b12:	2801      	cmp	r0, #1
 8004b14:	f173 0300 	sbcs.w	r3, r3, #0
 8004b18:	dbc9      	blt.n	8004aae <z_tick_sleep+0x12>
}
 8004b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000afc 	.word	0x20000afc
 8004b24:	20000b20 	.word	0x20000b20
 8004b28:	0800be03 	.word	0x0800be03

08004b2c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8004b2c:	f1b1 3fff 	cmp.w	r1, #4294967295
 8004b30:	bf08      	it	eq
 8004b32:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
 8004b36:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8004b38:	d106      	bne.n	8004b48 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8004b3a:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <z_impl_k_sleep+0x2c>)
 8004b3c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8004b3e:	f7ff ff13 	bl	8004968 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 8004b42:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 8004b46:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8004b48:	f7ff ffa8 	bl	8004a9c <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8004b4c:	220a      	movs	r2, #10
 8004b4e:	2300      	movs	r3, #0
 8004b50:	17c1      	asrs	r1, r0, #31
 8004b52:	f7fb ffc3 	bl	8000adc <__aeabi_uldivmod>
	return ret;
 8004b56:	e7f6      	b.n	8004b46 <z_impl_k_sleep+0x1a>
 8004b58:	20000afc 	.word	0x20000afc

08004b5c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8004b5c:	4b01      	ldr	r3, [pc, #4]	; (8004b64 <z_impl_z_current_get+0x8>)
 8004b5e:	6898      	ldr	r0, [r3, #8]
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20000afc 	.word	0x20000afc

08004b68 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8004b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	f04f 0310 	mov.w	r3, #16
 8004b72:	f3ef 8611 	mrs	r6, BASEPRI
 8004b76:	f383 8812 	msr	BASEPRI_MAX, r3
 8004b7a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 8004b7e:	7b03      	ldrb	r3, [r0, #12]
 8004b80:	07d9      	lsls	r1, r3, #31
 8004b82:	d50b      	bpl.n	8004b9c <z_thread_abort+0x34>
	__asm__ volatile(
 8004b84:	f386 8811 	msr	BASEPRI, r6
 8004b88:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 8004b8c:	4040      	eors	r0, r0
 8004b8e:	f380 8811 	msr	BASEPRI, r0
 8004b92:	f04f 0004 	mov.w	r0, #4
 8004b96:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8004b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8004b9c:	7b43      	ldrb	r3, [r0, #13]
 8004b9e:	071a      	lsls	r2, r3, #28
 8004ba0:	d504      	bpl.n	8004bac <z_thread_abort+0x44>
 8004ba2:	f386 8811 	msr	BASEPRI, r6
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	e7f5      	b.n	8004b98 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8004bac:	f023 0220 	bic.w	r2, r3, #32
 8004bb0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8004bb4:	09d2      	lsrs	r2, r2, #7
 8004bb6:	d120      	bne.n	8004bfa <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8004bb8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 8004bba:	68a3      	ldr	r3, [r4, #8]
 8004bbc:	b113      	cbz	r3, 8004bc4 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f007 f8e9 	bl	800bd96 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 8004bc4:	f104 0018 	add.w	r0, r4, #24
 8004bc8:	f007 f97f 	bl	800beca <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8004bcc:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8004bd0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8004bd4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004bd6:	42bd      	cmp	r5, r7
 8004bd8:	d000      	beq.n	8004bdc <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8004bda:	b9b5      	cbnz	r5, 8004c0a <z_thread_abort+0xa2>
		update_cache(1);
 8004bdc:	2001      	movs	r0, #1
 8004bde:	f7ff fd39 	bl	8004654 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 8004be2:	4b10      	ldr	r3, [pc, #64]	; (8004c24 <z_thread_abort+0xbc>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	42a3      	cmp	r3, r4
 8004be8:	d1db      	bne.n	8004ba2 <z_thread_abort+0x3a>
 8004bea:	f3ef 8305 	mrs	r3, IPSR
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1d7      	bne.n	8004ba2 <z_thread_abort+0x3a>
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	f7fe f9c8 	bl	8002f88 <arch_swap>
	return ret;
 8004bf8:	e7d3      	b.n	8004ba2 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8004bfa:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8004bfe:	f043 0308 	orr.w	r3, r3, #8
 8004c02:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8004c04:	f007 f8bf 	bl	800bd86 <sys_dlist_remove>
}
 8004c08:	e7d7      	b.n	8004bba <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f007 f8c3 	bl	800bd96 <unpend_thread_no_timeout>
 8004c10:	f105 0018 	add.w	r0, r5, #24
 8004c14:	f007 f959 	bl	800beca <z_abort_timeout>
 8004c18:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	f7ff fdb5 	bl	800478c <ready_thread>
 8004c22:	e7d7      	b.n	8004bd4 <z_thread_abort+0x6c>
 8004c24:	20000afc 	.word	0x20000afc

08004c28 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 8004c28:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 8004c2a:	4806      	ldr	r0, [pc, #24]	; (8004c44 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8004c2c:	4a06      	ldr	r2, [pc, #24]	; (8004c48 <z_data_copy+0x20>)
 8004c2e:	4907      	ldr	r1, [pc, #28]	; (8004c4c <z_data_copy+0x24>)
 8004c30:	1a12      	subs	r2, r2, r0
 8004c32:	f007 f88b 	bl	800bd4c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8004c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8004c3a:	4a05      	ldr	r2, [pc, #20]	; (8004c50 <z_data_copy+0x28>)
 8004c3c:	4905      	ldr	r1, [pc, #20]	; (8004c54 <z_data_copy+0x2c>)
 8004c3e:	4806      	ldr	r0, [pc, #24]	; (8004c58 <z_data_copy+0x30>)
 8004c40:	f007 b884 	b.w	800bd4c <z_early_memcpy>
 8004c44:	20000000 	.word	0x20000000
 8004c48:	200008c0 	.word	0x200008c0
 8004c4c:	0800ccac 	.word	0x0800ccac
 8004c50:	00000000 	.word	0x00000000
 8004c54:	0800ccac 	.word	0x0800ccac
 8004c58:	20000000 	.word	0x20000000

08004c5c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8004c5c:	4b03      	ldr	r3, [pc, #12]	; (8004c6c <elapsed+0x10>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	b90b      	cbnz	r3, 8004c66 <elapsed+0xa>
 8004c62:	f7ff b963 	b.w	8003f2c <sys_clock_elapsed>
}
 8004c66:	2000      	movs	r0, #0
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	20000b2c 	.word	0x20000b2c

08004c70 <next_timeout>:
	return list->head == list;
 8004c70:	4b10      	ldr	r3, [pc, #64]	; (8004cb4 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
 8004c72:	b510      	push	{r4, lr}
 8004c74:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004c76:	429c      	cmp	r4, r3
 8004c78:	bf08      	it	eq
 8004c7a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8004c7c:	f7ff ffee 	bl	8004c5c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 8004c80:	b1a4      	cbz	r4, 8004cac <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8004c82:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8004c86:	1a1b      	subs	r3, r3, r0
 8004c88:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 8004c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c90:	f170 0200 	sbcs.w	r2, r0, #0
 8004c94:	da0a      	bge.n	8004cac <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 8004c96:	2800      	cmp	r0, #0
 8004c98:	bfac      	ite	ge
 8004c9a:	4618      	movge	r0, r3
 8004c9c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8004c9e:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <next_timeout+0x48>)
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	b113      	cbz	r3, 8004caa <next_timeout+0x3a>
 8004ca4:	4298      	cmp	r0, r3
 8004ca6:	bfa8      	it	ge
 8004ca8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8004caa:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
 8004cac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8004cb0:	e7f5      	b.n	8004c9e <next_timeout+0x2e>
 8004cb2:	bf00      	nop
 8004cb4:	200002d4 	.word	0x200002d4
 8004cb8:	20000afc 	.word	0x20000afc

08004cbc <remove_timeout>:
{
 8004cbc:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 8004cbe:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8004cc0:	b168      	cbz	r0, 8004cde <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8004cc2:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <remove_timeout+0x30>)
 8004cc4:	6852      	ldr	r2, [r2, #4]
 8004cc6:	4290      	cmp	r0, r2
 8004cc8:	d009      	beq.n	8004cde <remove_timeout+0x22>
	if (next(t) != NULL) {
 8004cca:	b143      	cbz	r3, 8004cde <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8004ccc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8004cd0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8004cd4:	1912      	adds	r2, r2, r4
 8004cd6:	eb41 0105 	adc.w	r1, r1, r5
 8004cda:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 8004cde:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 8004ce0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8004ce2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8004ce4:	2300      	movs	r3, #0
	node->prev = NULL;
 8004ce6:	e9c0 3300 	strd	r3, r3, [r0]
}
 8004cea:	bd30      	pop	{r4, r5, pc}
 8004cec:	200002d4 	.word	0x200002d4

08004cf0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf4:	bf08      	it	eq
 8004cf6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 8004cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	461f      	mov	r7, r3
 8004d00:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8004d02:	d067      	beq.n	8004dd4 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8004d04:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 8004d06:	f04f 0310 	mov.w	r3, #16
 8004d0a:	f3ef 8611 	mrs	r6, BASEPRI
 8004d0e:	f383 8812 	msr	BASEPRI_MAX, r3
 8004d12:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 8004d16:	f06f 0201 	mvn.w	r2, #1
 8004d1a:	1b53      	subs	r3, r2, r5
 8004d1c:	f04f 3cff 	mov.w	ip, #4294967295
 8004d20:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	db1b      	blt.n	8004d60 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8004d28:	4b2b      	ldr	r3, [pc, #172]	; (8004dd8 <z_add_timeout+0xe8>)
 8004d2a:	e9d3 1300 	ldrd	r1, r3, [r3]
 8004d2e:	1a52      	subs	r2, r2, r1
 8004d30:	eb6c 0303 	sbc.w	r3, ip, r3
 8004d34:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 8004d36:	eb63 0307 	sbc.w	r3, r3, r7
 8004d3a:	2d01      	cmp	r5, #1
 8004d3c:	f173 0200 	sbcs.w	r2, r3, #0
 8004d40:	bfbc      	itt	lt
 8004d42:	2501      	movlt	r5, #1
 8004d44:	2300      	movlt	r3, #0
 8004d46:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
 8004d4a:	4824      	ldr	r0, [pc, #144]	; (8004ddc <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
 8004d4c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004d50:	4283      	cmp	r3, r0
 8004d52:	d118      	bne.n	8004d86 <z_add_timeout+0x96>
	node->prev = tail;
 8004d54:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 8004d58:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 8004d5c:	6044      	str	r4, [r0, #4]
}
 8004d5e:	e026      	b.n	8004dae <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8004d60:	f7ff ff7c 	bl	8004c5c <elapsed>
 8004d64:	3501      	adds	r5, #1
 8004d66:	f147 0700 	adc.w	r7, r7, #0
 8004d6a:	182d      	adds	r5, r5, r0
 8004d6c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 8004d70:	e9c4 5704 	strd	r5, r7, [r4, #16]
 8004d74:	e7e9      	b.n	8004d4a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 8004d76:	1a52      	subs	r2, r2, r1
 8004d78:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 8004d7c:	459c      	cmp	ip, r3
 8004d7e:	e9c4 2504 	strd	r2, r5, [r4, #16]
 8004d82:	d0e7      	beq.n	8004d54 <z_add_timeout+0x64>
 8004d84:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0e4      	beq.n	8004d54 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 8004d8a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 8004d8e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 8004d92:	428a      	cmp	r2, r1
 8004d94:	eb75 0e07 	sbcs.w	lr, r5, r7
 8004d98:	daed      	bge.n	8004d76 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
 8004d9a:	1a8a      	subs	r2, r1, r2
 8004d9c:	eb67 0505 	sbc.w	r5, r7, r5
 8004da0:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 8004da4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8004da6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8004daa:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8004dac:	605c      	str	r4, [r3, #4]
	return list->head == list;
 8004dae:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004db0:	4283      	cmp	r3, r0
 8004db2:	d00b      	beq.n	8004dcc <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8004db4:	429c      	cmp	r4, r3
 8004db6:	d109      	bne.n	8004dcc <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8004db8:	f7ff ff5a 	bl	8004c70 <next_timeout>

			if (next_time == 0 ||
 8004dbc:	b118      	cbz	r0, 8004dc6 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
 8004dbe:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	4283      	cmp	r3, r0
 8004dc4:	d002      	beq.n	8004dcc <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	f7ff f842 	bl	8003e50 <sys_clock_set_timeout>
	__asm__ volatile(
 8004dcc:	f386 8811 	msr	BASEPRI, r6
 8004dd0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8004dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	200009c0 	.word	0x200009c0
 8004ddc:	200002d4 	.word	0x200002d4
 8004de0:	20000afc 	.word	0x20000afc

08004de4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8004de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004de8:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8004dea:	f7ff fc8d 	bl	8004708 <z_time_slice>
	__asm__ volatile(
 8004dee:	f04f 0310 	mov.w	r3, #16
 8004df2:	f3ef 8411 	mrs	r4, BASEPRI
 8004df6:	f383 8812 	msr	BASEPRI_MAX, r3
 8004dfa:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 8004dfe:	4e24      	ldr	r6, [pc, #144]	; (8004e90 <sys_clock_announce+0xac>)
	return list->head == list;
 8004e00:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8004e94 <sys_clock_announce+0xb0>
 8004e04:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8004e06:	4d24      	ldr	r5, [pc, #144]	; (8004e98 <sys_clock_announce+0xb4>)
 8004e08:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8004e0c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004e0e:	4540      	cmp	r0, r8
		curr_tick += dt;
 8004e10:	e9d5 1e00 	ldrd	r1, lr, [r5]
 8004e14:	ea4f 77e2 	mov.w	r7, r2, asr #31
 8004e18:	d00b      	beq.n	8004e32 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8004e1a:	b150      	cbz	r0, 8004e32 <sys_clock_announce+0x4e>
 8004e1c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	eb77 090c 	sbcs.w	r9, r7, ip
 8004e26:	da16      	bge.n	8004e56 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8004e2e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 8004e32:	1852      	adds	r2, r2, r1
 8004e34:	eb4e 0707 	adc.w	r7, lr, r7
 8004e38:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
 8004e3c:	2500      	movs	r5, #0
 8004e3e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8004e40:	f7ff ff16 	bl	8004c70 <next_timeout>
 8004e44:	4629      	mov	r1, r5
 8004e46:	f7ff f803 	bl	8003e50 <sys_clock_set_timeout>
	__asm__ volatile(
 8004e4a:	f384 8811 	msr	BASEPRI, r4
 8004e4e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8004e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 8004e56:	1859      	adds	r1, r3, r1
 8004e58:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 8004e60:	2200      	movs	r2, #0
 8004e62:	2300      	movs	r3, #0
 8004e64:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 8004e68:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 8004e6c:	f7ff ff26 	bl	8004cbc <remove_timeout>
 8004e70:	f384 8811 	msr	BASEPRI, r4
 8004e74:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8004e78:	6883      	ldr	r3, [r0, #8]
 8004e7a:	4798      	blx	r3
	__asm__ volatile(
 8004e7c:	f04f 0310 	mov.w	r3, #16
 8004e80:	f3ef 8411 	mrs	r4, BASEPRI
 8004e84:	f383 8812 	msr	BASEPRI_MAX, r3
 8004e88:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8004e8c:	e7bc      	b.n	8004e08 <sys_clock_announce+0x24>
 8004e8e:	bf00      	nop
 8004e90:	20000b2c 	.word	0x20000b2c
 8004e94:	200002d4 	.word	0x200002d4
 8004e98:	200009c0 	.word	0x200009c0

08004e9c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	f04f 0310 	mov.w	r3, #16
 8004ea2:	f3ef 8411 	mrs	r4, BASEPRI
 8004ea6:	f383 8812 	msr	BASEPRI_MAX, r3
 8004eaa:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 8004eae:	f7ff f83d 	bl	8003f2c <sys_clock_elapsed>
 8004eb2:	4a05      	ldr	r2, [pc, #20]	; (8004ec8 <sys_clock_tick_get+0x2c>)
 8004eb4:	e9d2 3100 	ldrd	r3, r1, [r2]
 8004eb8:	18c0      	adds	r0, r0, r3
 8004eba:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 8004ebe:	f384 8811 	msr	BASEPRI, r4
 8004ec2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8004ec6:	bd10      	pop	{r4, pc}
 8004ec8:	200009c0 	.word	0x200009c0

08004ecc <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8004ecc:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8004ece:	4604      	mov	r4, r0
 8004ed0:	b178      	cbz	r0, 8004ef2 <z_impl_k_busy_wait+0x26>
 8004ed2:	f7ff f849 	bl	8003f68 <sys_clock_cycle_get_32>
 8004ed6:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8004ed8:	4806      	ldr	r0, [pc, #24]	; (8004ef4 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8004eda:	4a07      	ldr	r2, [pc, #28]	; (8004ef8 <z_impl_k_busy_wait+0x2c>)
 8004edc:	fba4 0100 	umull	r0, r1, r4, r0
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f7fb fdfb 	bl	8000adc <__aeabi_uldivmod>
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	f7ff f83e 	bl	8003f68 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8004eec:	1b43      	subs	r3, r0, r5
 8004eee:	42a3      	cmp	r3, r4
 8004ef0:	d3fa      	bcc.n	8004ee8 <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	04c4b400 	.word	0x04c4b400
 8004ef8:	000f4240 	.word	0x000f4240

08004efc <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8004efc:	4a02      	ldr	r2, [pc, #8]	; (8004f08 <boot_banner+0xc>)
 8004efe:	4903      	ldr	r1, [pc, #12]	; (8004f0c <boot_banner+0x10>)
 8004f00:	4803      	ldr	r0, [pc, #12]	; (8004f10 <boot_banner+0x14>)
 8004f02:	f006 bb24 	b.w	800b54e <printk>
 8004f06:	bf00      	nop
 8004f08:	0800ccab 	.word	0x0800ccab
 8004f0c:	0800cc65 	.word	0x0800cc65
 8004f10:	0800cc85 	.word	0x0800cc85

08004f14 <malloc>:
 8004f14:	4b02      	ldr	r3, [pc, #8]	; (8004f20 <malloc+0xc>)
 8004f16:	4601      	mov	r1, r0
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	f000 b80b 	b.w	8004f34 <_malloc_r>
 8004f1e:	bf00      	nop
 8004f20:	200006ec 	.word	0x200006ec

08004f24 <free>:
 8004f24:	4b02      	ldr	r3, [pc, #8]	; (8004f30 <free+0xc>)
 8004f26:	4601      	mov	r1, r0
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	f004 b867 	b.w	8008ffc <_free_r>
 8004f2e:	bf00      	nop
 8004f30:	200006ec 	.word	0x200006ec

08004f34 <_malloc_r>:
 8004f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f38:	f101 060b 	add.w	r6, r1, #11
 8004f3c:	2e16      	cmp	r6, #22
 8004f3e:	b083      	sub	sp, #12
 8004f40:	4605      	mov	r5, r0
 8004f42:	d824      	bhi.n	8004f8e <_malloc_r+0x5a>
 8004f44:	2910      	cmp	r1, #16
 8004f46:	f200 80a8 	bhi.w	800509a <_malloc_r+0x166>
 8004f4a:	f000 fb03 	bl	8005554 <__malloc_lock>
 8004f4e:	2610      	movs	r6, #16
 8004f50:	2218      	movs	r2, #24
 8004f52:	f04f 0c02 	mov.w	ip, #2
 8004f56:	4fb3      	ldr	r7, [pc, #716]	; (8005224 <_malloc_r+0x2f0>)
 8004f58:	443a      	add	r2, r7
 8004f5a:	f1a2 0308 	sub.w	r3, r2, #8
 8004f5e:	6854      	ldr	r4, [r2, #4]
 8004f60:	429c      	cmp	r4, r3
 8004f62:	f000 80a7 	beq.w	80050b4 <_malloc_r+0x180>
 8004f66:	6863      	ldr	r3, [r4, #4]
 8004f68:	68e2      	ldr	r2, [r4, #12]
 8004f6a:	68a1      	ldr	r1, [r4, #8]
 8004f6c:	f023 0303 	bic.w	r3, r3, #3
 8004f70:	4423      	add	r3, r4
 8004f72:	60ca      	str	r2, [r1, #12]
 8004f74:	6091      	str	r1, [r2, #8]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	f042 0201 	orr.w	r2, r2, #1
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	605a      	str	r2, [r3, #4]
 8004f80:	3408      	adds	r4, #8
 8004f82:	f000 faed 	bl	8005560 <__malloc_unlock>
 8004f86:	4620      	mov	r0, r4
 8004f88:	b003      	add	sp, #12
 8004f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f8e:	f036 0607 	bics.w	r6, r6, #7
 8004f92:	f100 8082 	bmi.w	800509a <_malloc_r+0x166>
 8004f96:	42b1      	cmp	r1, r6
 8004f98:	d87f      	bhi.n	800509a <_malloc_r+0x166>
 8004f9a:	f000 fadb 	bl	8005554 <__malloc_lock>
 8004f9e:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 8004fa2:	f0c0 819d 	bcc.w	80052e0 <_malloc_r+0x3ac>
 8004fa6:	0a73      	lsrs	r3, r6, #9
 8004fa8:	d07e      	beq.n	80050a8 <_malloc_r+0x174>
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	f200 8169 	bhi.w	8005282 <_malloc_r+0x34e>
 8004fb0:	09b3      	lsrs	r3, r6, #6
 8004fb2:	f103 0c39 	add.w	ip, r3, #57	; 0x39
 8004fb6:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8004fba:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8004fbe:	4f99      	ldr	r7, [pc, #612]	; (8005224 <_malloc_r+0x2f0>)
 8004fc0:	443b      	add	r3, r7
 8004fc2:	f1a3 0008 	sub.w	r0, r3, #8
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	4298      	cmp	r0, r3
 8004fca:	d106      	bne.n	8004fda <_malloc_r+0xa6>
 8004fcc:	e00c      	b.n	8004fe8 <_malloc_r+0xb4>
 8004fce:	2900      	cmp	r1, #0
 8004fd0:	f280 8118 	bge.w	8005204 <_malloc_r+0x2d0>
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	4298      	cmp	r0, r3
 8004fd8:	d006      	beq.n	8004fe8 <_malloc_r+0xb4>
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	f022 0203 	bic.w	r2, r2, #3
 8004fe0:	1b91      	subs	r1, r2, r6
 8004fe2:	290f      	cmp	r1, #15
 8004fe4:	ddf3      	ble.n	8004fce <_malloc_r+0x9a>
 8004fe6:	46a4      	mov	ip, r4
 8004fe8:	693c      	ldr	r4, [r7, #16]
 8004fea:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8005228 <_malloc_r+0x2f4>
 8004fee:	4544      	cmp	r4, r8
 8004ff0:	d06c      	beq.n	80050cc <_malloc_r+0x198>
 8004ff2:	6863      	ldr	r3, [r4, #4]
 8004ff4:	f023 0e03 	bic.w	lr, r3, #3
 8004ff8:	ebae 0306 	sub.w	r3, lr, r6
 8004ffc:	2b0f      	cmp	r3, #15
 8004ffe:	f300 8180 	bgt.w	8005302 <_malloc_r+0x3ce>
 8005002:	2b00      	cmp	r3, #0
 8005004:	e9c7 8804 	strd	r8, r8, [r7, #16]
 8005008:	f280 816f 	bge.w	80052ea <_malloc_r+0x3b6>
 800500c:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 8005010:	f080 8116 	bcs.w	8005240 <_malloc_r+0x30c>
 8005014:	ea4f 03de 	mov.w	r3, lr, lsr #3
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	3301      	adds	r3, #1
 800501c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8005020:	2201      	movs	r2, #1
 8005022:	fa02 f20e 	lsl.w	r2, r2, lr
 8005026:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 800502a:	60a0      	str	r0, [r4, #8]
 800502c:	430a      	orrs	r2, r1
 800502e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8005032:	3908      	subs	r1, #8
 8005034:	60e1      	str	r1, [r4, #12]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
 800503c:	60c4      	str	r4, [r0, #12]
 800503e:	ea4f 03ac 	mov.w	r3, ip, asr #2
 8005042:	2001      	movs	r0, #1
 8005044:	4098      	lsls	r0, r3
 8005046:	4290      	cmp	r0, r2
 8005048:	d847      	bhi.n	80050da <_malloc_r+0x1a6>
 800504a:	4210      	tst	r0, r2
 800504c:	d106      	bne.n	800505c <_malloc_r+0x128>
 800504e:	f02c 0c03 	bic.w	ip, ip, #3
 8005052:	0040      	lsls	r0, r0, #1
 8005054:	4210      	tst	r0, r2
 8005056:	f10c 0c04 	add.w	ip, ip, #4
 800505a:	d0fa      	beq.n	8005052 <_malloc_r+0x11e>
 800505c:	eb07 0acc 	add.w	sl, r7, ip, lsl #3
 8005060:	4653      	mov	r3, sl
 8005062:	46e1      	mov	r9, ip
 8005064:	68d9      	ldr	r1, [r3, #12]
 8005066:	e00e      	b.n	8005086 <_malloc_r+0x152>
 8005068:	684a      	ldr	r2, [r1, #4]
 800506a:	f022 0203 	bic.w	r2, r2, #3
 800506e:	eba2 0e06 	sub.w	lr, r2, r6
 8005072:	f1be 0f0f 	cmp.w	lr, #15
 8005076:	460c      	mov	r4, r1
 8005078:	68c9      	ldr	r1, [r1, #12]
 800507a:	f300 810f 	bgt.w	800529c <_malloc_r+0x368>
 800507e:	f1be 0f00 	cmp.w	lr, #0
 8005082:	f280 8120 	bge.w	80052c6 <_malloc_r+0x392>
 8005086:	428b      	cmp	r3, r1
 8005088:	d1ee      	bne.n	8005068 <_malloc_r+0x134>
 800508a:	f109 0901 	add.w	r9, r9, #1
 800508e:	f019 0f03 	tst.w	r9, #3
 8005092:	f103 0308 	add.w	r3, r3, #8
 8005096:	d1e5      	bne.n	8005064 <_malloc_r+0x130>
 8005098:	e16a      	b.n	8005370 <_malloc_r+0x43c>
 800509a:	2400      	movs	r4, #0
 800509c:	230c      	movs	r3, #12
 800509e:	4620      	mov	r0, r4
 80050a0:	602b      	str	r3, [r5, #0]
 80050a2:	b003      	add	sp, #12
 80050a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050ac:	f04f 0c40 	mov.w	ip, #64	; 0x40
 80050b0:	243f      	movs	r4, #63	; 0x3f
 80050b2:	e784      	b.n	8004fbe <_malloc_r+0x8a>
 80050b4:	68d4      	ldr	r4, [r2, #12]
 80050b6:	42a2      	cmp	r2, r4
 80050b8:	bf08      	it	eq
 80050ba:	f10c 0c02 	addeq.w	ip, ip, #2
 80050be:	f47f af52 	bne.w	8004f66 <_malloc_r+0x32>
 80050c2:	693c      	ldr	r4, [r7, #16]
 80050c4:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8005228 <_malloc_r+0x2f4>
 80050c8:	4544      	cmp	r4, r8
 80050ca:	d192      	bne.n	8004ff2 <_malloc_r+0xbe>
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	ea4f 03ac 	mov.w	r3, ip, asr #2
 80050d2:	2001      	movs	r0, #1
 80050d4:	4098      	lsls	r0, r3
 80050d6:	4290      	cmp	r0, r2
 80050d8:	d9b7      	bls.n	800504a <_malloc_r+0x116>
 80050da:	68bc      	ldr	r4, [r7, #8]
 80050dc:	6863      	ldr	r3, [r4, #4]
 80050de:	f023 0903 	bic.w	r9, r3, #3
 80050e2:	454e      	cmp	r6, r9
 80050e4:	d803      	bhi.n	80050ee <_malloc_r+0x1ba>
 80050e6:	eba9 0306 	sub.w	r3, r9, r6
 80050ea:	2b0f      	cmp	r3, #15
 80050ec:	dc7a      	bgt.n	80051e4 <_malloc_r+0x2b0>
 80050ee:	f8df b13c 	ldr.w	fp, [pc, #316]	; 800522c <_malloc_r+0x2f8>
 80050f2:	4b4f      	ldr	r3, [pc, #316]	; (8005230 <_malloc_r+0x2fc>)
 80050f4:	f8db 2000 	ldr.w	r2, [fp]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3201      	adds	r2, #1
 80050fc:	4433      	add	r3, r6
 80050fe:	eb04 0a09 	add.w	sl, r4, r9
 8005102:	f000 814b 	beq.w	800539c <_malloc_r+0x468>
 8005106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800510a:	330f      	adds	r3, #15
 800510c:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
 8005110:	f028 080f 	bic.w	r8, r8, #15
 8005114:	4641      	mov	r1, r8
 8005116:	4628      	mov	r0, r5
 8005118:	f000 fa3c 	bl	8005594 <_sbrk_r>
 800511c:	1c41      	adds	r1, r0, #1
 800511e:	4602      	mov	r2, r0
 8005120:	f000 810a 	beq.w	8005338 <_malloc_r+0x404>
 8005124:	4582      	cmp	sl, r0
 8005126:	f200 8105 	bhi.w	8005334 <_malloc_r+0x400>
 800512a:	4b42      	ldr	r3, [pc, #264]	; (8005234 <_malloc_r+0x300>)
 800512c:	6819      	ldr	r1, [r3, #0]
 800512e:	4441      	add	r1, r8
 8005130:	6019      	str	r1, [r3, #0]
 8005132:	4608      	mov	r0, r1
 8005134:	f000 8168 	beq.w	8005408 <_malloc_r+0x4d4>
 8005138:	f8db 1000 	ldr.w	r1, [fp]
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	3101      	adds	r1, #1
 8005140:	bf1b      	ittet	ne
 8005142:	eba2 0a0a 	subne.w	sl, r2, sl
 8005146:	4450      	addne	r0, sl
 8005148:	f8cb 2000 	streq.w	r2, [fp]
 800514c:	6018      	strne	r0, [r3, #0]
 800514e:	f012 0b07 	ands.w	fp, r2, #7
 8005152:	f000 812f 	beq.w	80053b4 <_malloc_r+0x480>
 8005156:	f1cb 0108 	rsb	r1, fp, #8
 800515a:	440a      	add	r2, r1
 800515c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
 8005160:	4490      	add	r8, r2
 8005162:	3108      	adds	r1, #8
 8005164:	eba1 0108 	sub.w	r1, r1, r8
 8005168:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 800516c:	4651      	mov	r1, sl
 800516e:	4628      	mov	r0, r5
 8005170:	9200      	str	r2, [sp, #0]
 8005172:	f000 fa0f 	bl	8005594 <_sbrk_r>
 8005176:	1c42      	adds	r2, r0, #1
 8005178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800517c:	f000 816b 	beq.w	8005456 <_malloc_r+0x522>
 8005180:	1a80      	subs	r0, r0, r2
 8005182:	eb00 080a 	add.w	r8, r0, sl
 8005186:	6819      	ldr	r1, [r3, #0]
 8005188:	60ba      	str	r2, [r7, #8]
 800518a:	f048 0001 	orr.w	r0, r8, #1
 800518e:	4451      	add	r1, sl
 8005190:	42bc      	cmp	r4, r7
 8005192:	6050      	str	r0, [r2, #4]
 8005194:	6019      	str	r1, [r3, #0]
 8005196:	f000 8143 	beq.w	8005420 <_malloc_r+0x4ec>
 800519a:	f1b9 0f0f 	cmp.w	r9, #15
 800519e:	f240 8141 	bls.w	8005424 <_malloc_r+0x4f0>
 80051a2:	6860      	ldr	r0, [r4, #4]
 80051a4:	f1a9 0c0c 	sub.w	ip, r9, #12
 80051a8:	f02c 0c07 	bic.w	ip, ip, #7
 80051ac:	f000 0001 	and.w	r0, r0, #1
 80051b0:	ea40 000c 	orr.w	r0, r0, ip
 80051b4:	6060      	str	r0, [r4, #4]
 80051b6:	f04f 0e05 	mov.w	lr, #5
 80051ba:	eb04 000c 	add.w	r0, r4, ip
 80051be:	f1bc 0f0f 	cmp.w	ip, #15
 80051c2:	e9c0 ee01 	strd	lr, lr, [r0, #4]
 80051c6:	f200 814e 	bhi.w	8005466 <_malloc_r+0x532>
 80051ca:	6850      	ldr	r0, [r2, #4]
 80051cc:	4614      	mov	r4, r2
 80051ce:	4b1a      	ldr	r3, [pc, #104]	; (8005238 <_malloc_r+0x304>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	428a      	cmp	r2, r1
 80051d4:	bf38      	it	cc
 80051d6:	6019      	strcc	r1, [r3, #0]
 80051d8:	4b18      	ldr	r3, [pc, #96]	; (800523c <_malloc_r+0x308>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	428a      	cmp	r2, r1
 80051de:	bf38      	it	cc
 80051e0:	6019      	strcc	r1, [r3, #0]
 80051e2:	e0ab      	b.n	800533c <_malloc_r+0x408>
 80051e4:	19a2      	adds	r2, r4, r6
 80051e6:	f043 0301 	orr.w	r3, r3, #1
 80051ea:	f046 0601 	orr.w	r6, r6, #1
 80051ee:	6066      	str	r6, [r4, #4]
 80051f0:	4628      	mov	r0, r5
 80051f2:	60ba      	str	r2, [r7, #8]
 80051f4:	6053      	str	r3, [r2, #4]
 80051f6:	f000 f9b3 	bl	8005560 <__malloc_unlock>
 80051fa:	3408      	adds	r4, #8
 80051fc:	4620      	mov	r0, r4
 80051fe:	b003      	add	sp, #12
 8005200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005204:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
 8005208:	441a      	add	r2, r3
 800520a:	60e1      	str	r1, [r4, #12]
 800520c:	608c      	str	r4, [r1, #8]
 800520e:	6851      	ldr	r1, [r2, #4]
 8005210:	f041 0101 	orr.w	r1, r1, #1
 8005214:	4628      	mov	r0, r5
 8005216:	6051      	str	r1, [r2, #4]
 8005218:	f103 0408 	add.w	r4, r3, #8
 800521c:	f000 f9a0 	bl	8005560 <__malloc_unlock>
 8005220:	e6b1      	b.n	8004f86 <_malloc_r+0x52>
 8005222:	bf00      	nop
 8005224:	200002dc 	.word	0x200002dc
 8005228:	200002e4 	.word	0x200002e4
 800522c:	200006e4 	.word	0x200006e4
 8005230:	20000b60 	.word	0x20000b60
 8005234:	20000b30 	.word	0x20000b30
 8005238:	20000b58 	.word	0x20000b58
 800523c:	20000b5c 	.word	0x20000b5c
 8005240:	f5be 6f20 	cmp.w	lr, #2560	; 0xa00
 8005244:	ea4f 225e 	mov.w	r2, lr, lsr #9
 8005248:	d36d      	bcc.n	8005326 <_malloc_r+0x3f2>
 800524a:	2a14      	cmp	r2, #20
 800524c:	f200 80c3 	bhi.w	80053d6 <_malloc_r+0x4a2>
 8005250:	f102 035c 	add.w	r3, r2, #92	; 0x5c
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	325b      	adds	r2, #91	; 0x5b
 8005258:	18f9      	adds	r1, r7, r3
 800525a:	58fb      	ldr	r3, [r7, r3]
 800525c:	3908      	subs	r1, #8
 800525e:	4299      	cmp	r1, r3
 8005260:	f000 809f 	beq.w	80053a2 <_malloc_r+0x46e>
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	f022 0203 	bic.w	r2, r2, #3
 800526a:	4572      	cmp	r2, lr
 800526c:	d902      	bls.n	8005274 <_malloc_r+0x340>
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	4299      	cmp	r1, r3
 8005272:	d1f7      	bne.n	8005264 <_malloc_r+0x330>
 8005274:	68d9      	ldr	r1, [r3, #12]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	e9c4 3102 	strd	r3, r1, [r4, #8]
 800527c:	608c      	str	r4, [r1, #8]
 800527e:	60dc      	str	r4, [r3, #12]
 8005280:	e6dd      	b.n	800503e <_malloc_r+0x10a>
 8005282:	2b14      	cmp	r3, #20
 8005284:	d968      	bls.n	8005358 <_malloc_r+0x424>
 8005286:	2b54      	cmp	r3, #84	; 0x54
 8005288:	f200 80ae 	bhi.w	80053e8 <_malloc_r+0x4b4>
 800528c:	0b33      	lsrs	r3, r6, #12
 800528e:	f103 0c6f 	add.w	ip, r3, #111	; 0x6f
 8005292:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8005296:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800529a:	e690      	b.n	8004fbe <_malloc_r+0x8a>
 800529c:	4628      	mov	r0, r5
 800529e:	68a5      	ldr	r5, [r4, #8]
 80052a0:	19a3      	adds	r3, r4, r6
 80052a2:	f046 0601 	orr.w	r6, r6, #1
 80052a6:	6066      	str	r6, [r4, #4]
 80052a8:	60e9      	str	r1, [r5, #12]
 80052aa:	608d      	str	r5, [r1, #8]
 80052ac:	f04e 0101 	orr.w	r1, lr, #1
 80052b0:	e9c7 3304 	strd	r3, r3, [r7, #16]
 80052b4:	e9c3 8802 	strd	r8, r8, [r3, #8]
 80052b8:	6059      	str	r1, [r3, #4]
 80052ba:	f844 e002 	str.w	lr, [r4, r2]
 80052be:	f000 f94f 	bl	8005560 <__malloc_unlock>
 80052c2:	3408      	adds	r4, #8
 80052c4:	e65f      	b.n	8004f86 <_malloc_r+0x52>
 80052c6:	4422      	add	r2, r4
 80052c8:	4628      	mov	r0, r5
 80052ca:	6853      	ldr	r3, [r2, #4]
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	6053      	str	r3, [r2, #4]
 80052d2:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80052d6:	60d9      	str	r1, [r3, #12]
 80052d8:	608b      	str	r3, [r1, #8]
 80052da:	f000 f941 	bl	8005560 <__malloc_unlock>
 80052de:	e652      	b.n	8004f86 <_malloc_r+0x52>
 80052e0:	ea4f 0cd6 	mov.w	ip, r6, lsr #3
 80052e4:	f106 0208 	add.w	r2, r6, #8
 80052e8:	e635      	b.n	8004f56 <_malloc_r+0x22>
 80052ea:	44a6      	add	lr, r4
 80052ec:	4628      	mov	r0, r5
 80052ee:	f8de 3004 	ldr.w	r3, [lr, #4]
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	f8ce 3004 	str.w	r3, [lr, #4]
 80052fa:	3408      	adds	r4, #8
 80052fc:	f000 f930 	bl	8005560 <__malloc_unlock>
 8005300:	e641      	b.n	8004f86 <_malloc_r+0x52>
 8005302:	19a2      	adds	r2, r4, r6
 8005304:	f043 0101 	orr.w	r1, r3, #1
 8005308:	f046 0601 	orr.w	r6, r6, #1
 800530c:	6066      	str	r6, [r4, #4]
 800530e:	4628      	mov	r0, r5
 8005310:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8005314:	e9c2 8802 	strd	r8, r8, [r2, #8]
 8005318:	6051      	str	r1, [r2, #4]
 800531a:	f844 300e 	str.w	r3, [r4, lr]
 800531e:	f000 f91f 	bl	8005560 <__malloc_unlock>
 8005322:	3408      	adds	r4, #8
 8005324:	e62f      	b.n	8004f86 <_malloc_r+0x52>
 8005326:	ea4f 129e 	mov.w	r2, lr, lsr #6
 800532a:	f102 0339 	add.w	r3, r2, #57	; 0x39
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	3238      	adds	r2, #56	; 0x38
 8005332:	e791      	b.n	8005258 <_malloc_r+0x324>
 8005334:	42bc      	cmp	r4, r7
 8005336:	d062      	beq.n	80053fe <_malloc_r+0x4ca>
 8005338:	68bc      	ldr	r4, [r7, #8]
 800533a:	6860      	ldr	r0, [r4, #4]
 800533c:	f020 0803 	bic.w	r8, r0, #3
 8005340:	4546      	cmp	r6, r8
 8005342:	eba8 0306 	sub.w	r3, r8, r6
 8005346:	d802      	bhi.n	800534e <_malloc_r+0x41a>
 8005348:	2b0f      	cmp	r3, #15
 800534a:	f73f af4b 	bgt.w	80051e4 <_malloc_r+0x2b0>
 800534e:	4628      	mov	r0, r5
 8005350:	f000 f906 	bl	8005560 <__malloc_unlock>
 8005354:	2400      	movs	r4, #0
 8005356:	e616      	b.n	8004f86 <_malloc_r+0x52>
 8005358:	f103 0c5c 	add.w	ip, r3, #92	; 0x5c
 800535c:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 8005360:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8005364:	e62b      	b.n	8004fbe <_malloc_r+0x8a>
 8005366:	f85a 3908 	ldr.w	r3, [sl], #-8
 800536a:	4553      	cmp	r3, sl
 800536c:	f040 809b 	bne.w	80054a6 <_malloc_r+0x572>
 8005370:	f01c 0f03 	tst.w	ip, #3
 8005374:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005378:	d1f5      	bne.n	8005366 <_malloc_r+0x432>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	ea23 0300 	bic.w	r3, r3, r0
 8005380:	607b      	str	r3, [r7, #4]
 8005382:	0040      	lsls	r0, r0, #1
 8005384:	4298      	cmp	r0, r3
 8005386:	f63f aea8 	bhi.w	80050da <_malloc_r+0x1a6>
 800538a:	b918      	cbnz	r0, 8005394 <_malloc_r+0x460>
 800538c:	e6a5      	b.n	80050da <_malloc_r+0x1a6>
 800538e:	0040      	lsls	r0, r0, #1
 8005390:	f109 0904 	add.w	r9, r9, #4
 8005394:	4218      	tst	r0, r3
 8005396:	d0fa      	beq.n	800538e <_malloc_r+0x45a>
 8005398:	46cc      	mov	ip, r9
 800539a:	e65f      	b.n	800505c <_malloc_r+0x128>
 800539c:	f103 0810 	add.w	r8, r3, #16
 80053a0:	e6b8      	b.n	8005114 <_malloc_r+0x1e0>
 80053a2:	1090      	asrs	r0, r2, #2
 80053a4:	f04f 0e01 	mov.w	lr, #1
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	fa0e f000 	lsl.w	r0, lr, r0
 80053ae:	4302      	orrs	r2, r0
 80053b0:	607a      	str	r2, [r7, #4]
 80053b2:	e761      	b.n	8005278 <_malloc_r+0x344>
 80053b4:	eb02 0108 	add.w	r1, r2, r8
 80053b8:	4249      	negs	r1, r1
 80053ba:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 80053be:	4651      	mov	r1, sl
 80053c0:	4628      	mov	r0, r5
 80053c2:	9200      	str	r2, [sp, #0]
 80053c4:	f000 f8e6 	bl	8005594 <_sbrk_r>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053ce:	f47f aed7 	bne.w	8005180 <_malloc_r+0x24c>
 80053d2:	46da      	mov	sl, fp
 80053d4:	e6d7      	b.n	8005186 <_malloc_r+0x252>
 80053d6:	2a54      	cmp	r2, #84	; 0x54
 80053d8:	d827      	bhi.n	800542a <_malloc_r+0x4f6>
 80053da:	ea4f 321e 	mov.w	r2, lr, lsr #12
 80053de:	f102 036f 	add.w	r3, r2, #111	; 0x6f
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	326e      	adds	r2, #110	; 0x6e
 80053e6:	e737      	b.n	8005258 <_malloc_r+0x324>
 80053e8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80053ec:	d827      	bhi.n	800543e <_malloc_r+0x50a>
 80053ee:	0bf3      	lsrs	r3, r6, #15
 80053f0:	f103 0c78 	add.w	ip, r3, #120	; 0x78
 80053f4:	f103 0477 	add.w	r4, r3, #119	; 0x77
 80053f8:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80053fc:	e5df      	b.n	8004fbe <_malloc_r+0x8a>
 80053fe:	4b2b      	ldr	r3, [pc, #172]	; (80054ac <_malloc_r+0x578>)
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	4440      	add	r0, r8
 8005404:	6018      	str	r0, [r3, #0]
 8005406:	e697      	b.n	8005138 <_malloc_r+0x204>
 8005408:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
 800540c:	f1bc 0f00 	cmp.w	ip, #0
 8005410:	f47f ae92 	bne.w	8005138 <_malloc_r+0x204>
 8005414:	68bc      	ldr	r4, [r7, #8]
 8005416:	44c8      	add	r8, r9
 8005418:	f048 0001 	orr.w	r0, r8, #1
 800541c:	6060      	str	r0, [r4, #4]
 800541e:	e6d6      	b.n	80051ce <_malloc_r+0x29a>
 8005420:	4614      	mov	r4, r2
 8005422:	e6d4      	b.n	80051ce <_malloc_r+0x29a>
 8005424:	2301      	movs	r3, #1
 8005426:	6053      	str	r3, [r2, #4]
 8005428:	e791      	b.n	800534e <_malloc_r+0x41a>
 800542a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800542e:	d825      	bhi.n	800547c <_malloc_r+0x548>
 8005430:	ea4f 32de 	mov.w	r2, lr, lsr #15
 8005434:	f102 0378 	add.w	r3, r2, #120	; 0x78
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	3277      	adds	r2, #119	; 0x77
 800543c:	e70c      	b.n	8005258 <_malloc_r+0x324>
 800543e:	f240 5254 	movw	r2, #1364	; 0x554
 8005442:	4293      	cmp	r3, r2
 8005444:	d825      	bhi.n	8005492 <_malloc_r+0x55e>
 8005446:	0cb3      	lsrs	r3, r6, #18
 8005448:	f103 0c7d 	add.w	ip, r3, #125	; 0x7d
 800544c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8005450:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8005454:	e5b3      	b.n	8004fbe <_malloc_r+0x8a>
 8005456:	f1ab 0b08 	sub.w	fp, fp, #8
 800545a:	44d8      	add	r8, fp
 800545c:	eba8 0802 	sub.w	r8, r8, r2
 8005460:	f04f 0a00 	mov.w	sl, #0
 8005464:	e68f      	b.n	8005186 <_malloc_r+0x252>
 8005466:	f104 0108 	add.w	r1, r4, #8
 800546a:	4628      	mov	r0, r5
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	f003 fdc5 	bl	8008ffc <_free_r>
 8005472:	68bc      	ldr	r4, [r7, #8]
 8005474:	9b00      	ldr	r3, [sp, #0]
 8005476:	6860      	ldr	r0, [r4, #4]
 8005478:	6819      	ldr	r1, [r3, #0]
 800547a:	e6a8      	b.n	80051ce <_malloc_r+0x29a>
 800547c:	f240 5354 	movw	r3, #1364	; 0x554
 8005480:	429a      	cmp	r2, r3
 8005482:	d80c      	bhi.n	800549e <_malloc_r+0x56a>
 8005484:	ea4f 429e 	mov.w	r2, lr, lsr #18
 8005488:	f102 037d 	add.w	r3, r2, #125	; 0x7d
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	327c      	adds	r2, #124	; 0x7c
 8005490:	e6e2      	b.n	8005258 <_malloc_r+0x324>
 8005492:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8005496:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
 800549a:	247e      	movs	r4, #126	; 0x7e
 800549c:	e58f      	b.n	8004fbe <_malloc_r+0x8a>
 800549e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80054a2:	227e      	movs	r2, #126	; 0x7e
 80054a4:	e6d8      	b.n	8005258 <_malloc_r+0x324>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	e76b      	b.n	8005382 <_malloc_r+0x44e>
 80054aa:	bf00      	nop
 80054ac:	20000b30 	.word	0x20000b30

080054b0 <memset>:
 80054b0:	0783      	lsls	r3, r0, #30
 80054b2:	b530      	push	{r4, r5, lr}
 80054b4:	d048      	beq.n	8005548 <memset+0x98>
 80054b6:	1e54      	subs	r4, r2, #1
 80054b8:	2a00      	cmp	r2, #0
 80054ba:	d03f      	beq.n	800553c <memset+0x8c>
 80054bc:	b2ca      	uxtb	r2, r1
 80054be:	4603      	mov	r3, r0
 80054c0:	e001      	b.n	80054c6 <memset+0x16>
 80054c2:	3c01      	subs	r4, #1
 80054c4:	d33a      	bcc.n	800553c <memset+0x8c>
 80054c6:	f803 2b01 	strb.w	r2, [r3], #1
 80054ca:	079d      	lsls	r5, r3, #30
 80054cc:	d1f9      	bne.n	80054c2 <memset+0x12>
 80054ce:	2c03      	cmp	r4, #3
 80054d0:	d92d      	bls.n	800552e <memset+0x7e>
 80054d2:	b2cd      	uxtb	r5, r1
 80054d4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80054d8:	2c0f      	cmp	r4, #15
 80054da:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80054de:	d936      	bls.n	800554e <memset+0x9e>
 80054e0:	f1a4 0210 	sub.w	r2, r4, #16
 80054e4:	f022 0c0f 	bic.w	ip, r2, #15
 80054e8:	f103 0e20 	add.w	lr, r3, #32
 80054ec:	44e6      	add	lr, ip
 80054ee:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80054f2:	f103 0210 	add.w	r2, r3, #16
 80054f6:	e942 5504 	strd	r5, r5, [r2, #-16]
 80054fa:	e942 5502 	strd	r5, r5, [r2, #-8]
 80054fe:	3210      	adds	r2, #16
 8005500:	4572      	cmp	r2, lr
 8005502:	d1f8      	bne.n	80054f6 <memset+0x46>
 8005504:	f10c 0201 	add.w	r2, ip, #1
 8005508:	f014 0f0c 	tst.w	r4, #12
 800550c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8005510:	f004 0c0f 	and.w	ip, r4, #15
 8005514:	d013      	beq.n	800553e <memset+0x8e>
 8005516:	f1ac 0304 	sub.w	r3, ip, #4
 800551a:	f023 0303 	bic.w	r3, r3, #3
 800551e:	3304      	adds	r3, #4
 8005520:	4413      	add	r3, r2
 8005522:	f842 5b04 	str.w	r5, [r2], #4
 8005526:	4293      	cmp	r3, r2
 8005528:	d1fb      	bne.n	8005522 <memset+0x72>
 800552a:	f00c 0403 	and.w	r4, ip, #3
 800552e:	b12c      	cbz	r4, 800553c <memset+0x8c>
 8005530:	b2ca      	uxtb	r2, r1
 8005532:	441c      	add	r4, r3
 8005534:	f803 2b01 	strb.w	r2, [r3], #1
 8005538:	429c      	cmp	r4, r3
 800553a:	d1fb      	bne.n	8005534 <memset+0x84>
 800553c:	bd30      	pop	{r4, r5, pc}
 800553e:	4664      	mov	r4, ip
 8005540:	4613      	mov	r3, r2
 8005542:	2c00      	cmp	r4, #0
 8005544:	d1f4      	bne.n	8005530 <memset+0x80>
 8005546:	e7f9      	b.n	800553c <memset+0x8c>
 8005548:	4603      	mov	r3, r0
 800554a:	4614      	mov	r4, r2
 800554c:	e7bf      	b.n	80054ce <memset+0x1e>
 800554e:	461a      	mov	r2, r3
 8005550:	46a4      	mov	ip, r4
 8005552:	e7e0      	b.n	8005516 <memset+0x66>

08005554 <__malloc_lock>:
 8005554:	4801      	ldr	r0, [pc, #4]	; (800555c <__malloc_lock+0x8>)
 8005556:	f006 b898 	b.w	800b68a <__retarget_lock_acquire_recursive>
 800555a:	bf00      	nop
 800555c:	20000898 	.word	0x20000898

08005560 <__malloc_unlock>:
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <__malloc_unlock+0x8>)
 8005562:	f006 b898 	b.w	800b696 <__retarget_lock_release_recursive>
 8005566:	bf00      	nop
 8005568:	20000898 	.word	0x20000898

0800556c <printf>:
 800556c:	b40f      	push	{r0, r1, r2, r3}
 800556e:	b500      	push	{lr}
 8005570:	4907      	ldr	r1, [pc, #28]	; (8005590 <printf+0x24>)
 8005572:	b083      	sub	sp, #12
 8005574:	ab04      	add	r3, sp, #16
 8005576:	6808      	ldr	r0, [r1, #0]
 8005578:	f853 2b04 	ldr.w	r2, [r3], #4
 800557c:	6881      	ldr	r1, [r0, #8]
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	f001 fd4c 	bl	800701c <_vfprintf_r>
 8005584:	b003      	add	sp, #12
 8005586:	f85d eb04 	ldr.w	lr, [sp], #4
 800558a:	b004      	add	sp, #16
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	200006ec 	.word	0x200006ec

08005594 <_sbrk_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	4d07      	ldr	r5, [pc, #28]	; (80055b4 <_sbrk_r+0x20>)
 8005598:	2200      	movs	r2, #0
 800559a:	4604      	mov	r4, r0
 800559c:	4608      	mov	r0, r1
 800559e:	602a      	str	r2, [r5, #0]
 80055a0:	f7fd ffee 	bl	8003580 <_sbrk>
 80055a4:	1c43      	adds	r3, r0, #1
 80055a6:	d000      	beq.n	80055aa <_sbrk_r+0x16>
 80055a8:	bd38      	pop	{r3, r4, r5, pc}
 80055aa:	682b      	ldr	r3, [r5, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0fb      	beq.n	80055a8 <_sbrk_r+0x14>
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
 80055b4:	20000b64 	.word	0x20000b64

080055b8 <snprintf>:
 80055b8:	b40c      	push	{r2, r3}
 80055ba:	b510      	push	{r4, lr}
 80055bc:	4b1f      	ldr	r3, [pc, #124]	; (800563c <snprintf+0x84>)
 80055be:	2900      	cmp	r1, #0
 80055c0:	681c      	ldr	r4, [r3, #0]
 80055c2:	b09c      	sub	sp, #112	; 0x70
 80055c4:	db35      	blt.n	8005632 <snprintf+0x7a>
 80055c6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80055ca:	f8ad 3014 	strh.w	r3, [sp, #20]
 80055ce:	9002      	str	r0, [sp, #8]
 80055d0:	9006      	str	r0, [sp, #24]
 80055d2:	ab1f      	add	r3, sp, #124	; 0x7c
 80055d4:	d018      	beq.n	8005608 <snprintf+0x50>
 80055d6:	3901      	subs	r1, #1
 80055d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055dc:	9104      	str	r1, [sp, #16]
 80055de:	9107      	str	r1, [sp, #28]
 80055e0:	f8ad 2016 	strh.w	r2, [sp, #22]
 80055e4:	a902      	add	r1, sp, #8
 80055e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80055e8:	9301      	str	r3, [sp, #4]
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 f83a 	bl	8005664 <_svfprintf_r>
 80055f0:	1c42      	adds	r2, r0, #1
 80055f2:	da01      	bge.n	80055f8 <snprintf+0x40>
 80055f4:	238b      	movs	r3, #139	; 0x8b
 80055f6:	6023      	str	r3, [r4, #0]
 80055f8:	9b02      	ldr	r3, [sp, #8]
 80055fa:	2200      	movs	r2, #0
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	b01c      	add	sp, #112	; 0x70
 8005600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005604:	b002      	add	sp, #8
 8005606:	4770      	bx	lr
 8005608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800560c:	9104      	str	r1, [sp, #16]
 800560e:	9107      	str	r1, [sp, #28]
 8005610:	f8ad 2016 	strh.w	r2, [sp, #22]
 8005614:	a902      	add	r1, sp, #8
 8005616:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005618:	9301      	str	r3, [sp, #4]
 800561a:	4620      	mov	r0, r4
 800561c:	f000 f822 	bl	8005664 <_svfprintf_r>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	da01      	bge.n	8005628 <snprintf+0x70>
 8005624:	238b      	movs	r3, #139	; 0x8b
 8005626:	6023      	str	r3, [r4, #0]
 8005628:	b01c      	add	sp, #112	; 0x70
 800562a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800562e:	b002      	add	sp, #8
 8005630:	4770      	bx	lr
 8005632:	238b      	movs	r3, #139	; 0x8b
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	f04f 30ff 	mov.w	r0, #4294967295
 800563a:	e7f5      	b.n	8005628 <snprintf+0x70>
 800563c:	200006ec 	.word	0x200006ec

08005640 <strnlen>:
 8005640:	b171      	cbz	r1, 8005660 <strnlen+0x20>
 8005642:	4603      	mov	r3, r0
 8005644:	eb00 0c01 	add.w	ip, r0, r1
 8005648:	e001      	b.n	800564e <strnlen+0xe>
 800564a:	4563      	cmp	r3, ip
 800564c:	d006      	beq.n	800565c <strnlen+0x1c>
 800564e:	461a      	mov	r2, r3
 8005650:	3301      	adds	r3, #1
 8005652:	7811      	ldrb	r1, [r2, #0]
 8005654:	2900      	cmp	r1, #0
 8005656:	d1f8      	bne.n	800564a <strnlen+0xa>
 8005658:	1a10      	subs	r0, r2, r0
 800565a:	4770      	bx	lr
 800565c:	1a18      	subs	r0, r3, r0
 800565e:	4770      	bx	lr
 8005660:	4608      	mov	r0, r1
 8005662:	4770      	bx	lr

08005664 <_svfprintf_r>:
 8005664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005668:	b0d7      	sub	sp, #348	; 0x15c
 800566a:	460c      	mov	r4, r1
 800566c:	910c      	str	r1, [sp, #48]	; 0x30
 800566e:	4691      	mov	r9, r2
 8005670:	930e      	str	r3, [sp, #56]	; 0x38
 8005672:	9018      	str	r0, [sp, #96]	; 0x60
 8005674:	f003 fde2 	bl	800923c <_localeconv_r>
 8005678:	6803      	ldr	r3, [r0, #0]
 800567a:	931a      	str	r3, [sp, #104]	; 0x68
 800567c:	4618      	mov	r0, r3
 800567e:	f7fa fd9f 	bl	80001c0 <strlen>
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	9019      	str	r0, [sp, #100]	; 0x64
 8005686:	0618      	lsls	r0, r3, #24
 8005688:	d503      	bpl.n	8005692 <_svfprintf_r+0x2e>
 800568a:	6923      	ldr	r3, [r4, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 87b1 	beq.w	80065f4 <_svfprintf_r+0xf90>
 8005692:	2400      	movs	r4, #0
 8005694:	ab2d      	add	r3, sp, #180	; 0xb4
 8005696:	464d      	mov	r5, r9
 8005698:	e9cd 442b 	strd	r4, r4, [sp, #172]	; 0xac
 800569c:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
 80056a0:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
 80056a4:	9414      	str	r4, [sp, #80]	; 0x50
 80056a6:	932a      	str	r3, [sp, #168]	; 0xa8
 80056a8:	4698      	mov	r8, r3
 80056aa:	941d      	str	r4, [sp, #116]	; 0x74
 80056ac:	2300      	movs	r3, #0
 80056ae:	9409      	str	r4, [sp, #36]	; 0x24
 80056b0:	2400      	movs	r4, #0
 80056b2:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 80056b6:	782b      	ldrb	r3, [r5, #0]
 80056b8:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 81e2 	beq.w	8005a86 <_svfprintf_r+0x422>
 80056c2:	46ab      	mov	fp, r5
 80056c4:	e004      	b.n	80056d0 <_svfprintf_r+0x6c>
 80056c6:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 811a 	beq.w	8005904 <_svfprintf_r+0x2a0>
 80056d0:	2b25      	cmp	r3, #37	; 0x25
 80056d2:	d1f8      	bne.n	80056c6 <_svfprintf_r+0x62>
 80056d4:	ebbb 0605 	subs.w	r6, fp, r5
 80056d8:	f040 8118 	bne.w	800590c <_svfprintf_r+0x2a8>
 80056dc:	f89b 3000 	ldrb.w	r3, [fp]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 81d0 	beq.w	8005a86 <_svfprintf_r+0x422>
 80056e6:	2300      	movs	r3, #0
 80056e8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ec:	f89b 7001 	ldrb.w	r7, [fp, #1]
 80056f0:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 80056f4:	930a      	str	r3, [sp, #40]	; 0x28
 80056f6:	f10b 0b01 	add.w	fp, fp, #1
 80056fa:	9208      	str	r2, [sp, #32]
 80056fc:	469a      	mov	sl, r3
 80056fe:	242b      	movs	r4, #43	; 0x2b
 8005700:	2120      	movs	r1, #32
 8005702:	f10b 0b01 	add.w	fp, fp, #1
 8005706:	f1a7 0320 	sub.w	r3, r7, #32
 800570a:	2b5a      	cmp	r3, #90	; 0x5a
 800570c:	f200 8132 	bhi.w	8005974 <_svfprintf_r+0x310>
 8005710:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005714:	013002c3 	.word	0x013002c3
 8005718:	02be0130 	.word	0x02be0130
 800571c:	01300130 	.word	0x01300130
 8005720:	006a0130 	.word	0x006a0130
 8005724:	01300130 	.word	0x01300130
 8005728:	029a028a 	.word	0x029a028a
 800572c:	02950130 	.word	0x02950130
 8005730:	013002a4 	.word	0x013002a4
 8005734:	005b029f 	.word	0x005b029f
 8005738:	005b005b 	.word	0x005b005b
 800573c:	005b005b 	.word	0x005b005b
 8005740:	005b005b 	.word	0x005b005b
 8005744:	005b005b 	.word	0x005b005b
 8005748:	01300130 	.word	0x01300130
 800574c:	01300130 	.word	0x01300130
 8005750:	01300130 	.word	0x01300130
 8005754:	01c50130 	.word	0x01c50130
 8005758:	025b0130 	.word	0x025b0130
 800575c:	01c50085 	.word	0x01c50085
 8005760:	01c501c5 	.word	0x01c501c5
 8005764:	01300130 	.word	0x01300130
 8005768:	01300130 	.word	0x01300130
 800576c:	013002df 	.word	0x013002df
 8005770:	00c60130 	.word	0x00c60130
 8005774:	01300130 	.word	0x01300130
 8005778:	02650130 	.word	0x02650130
 800577c:	02cd0130 	.word	0x02cd0130
 8005780:	01300130 	.word	0x01300130
 8005784:	01300761 	.word	0x01300761
 8005788:	01300130 	.word	0x01300130
 800578c:	01300130 	.word	0x01300130
 8005790:	01300130 	.word	0x01300130
 8005794:	01c50130 	.word	0x01c50130
 8005798:	025b0130 	.word	0x025b0130
 800579c:	01c50087 	.word	0x01c50087
 80057a0:	01c501c5 	.word	0x01c501c5
 80057a4:	0087031b 	.word	0x0087031b
 80057a8:	01300080 	.word	0x01300080
 80057ac:	0130030e 	.word	0x0130030e
 80057b0:	00c802f6 	.word	0x00c802f6
 80057b4:	008002e4 	.word	0x008002e4
 80057b8:	02650130 	.word	0x02650130
 80057bc:	073c007d 	.word	0x073c007d
 80057c0:	01300130 	.word	0x01300130
 80057c4:	01300740 	.word	0x01300740
 80057c8:	007d      	.short	0x007d
 80057ca:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80057ce:	2200      	movs	r2, #0
 80057d0:	f81b 7b01 	ldrb.w	r7, [fp], #1
 80057d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80057d8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80057dc:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80057e0:	2b09      	cmp	r3, #9
 80057e2:	d9f5      	bls.n	80057d0 <_svfprintf_r+0x16c>
 80057e4:	920a      	str	r2, [sp, #40]	; 0x28
 80057e6:	e78e      	b.n	8005706 <_svfprintf_r+0xa2>
 80057e8:	4648      	mov	r0, r9
 80057ea:	f003 fd27 	bl	800923c <_localeconv_r>
 80057ee:	6843      	ldr	r3, [r0, #4]
 80057f0:	931e      	str	r3, [sp, #120]	; 0x78
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fa fce4 	bl	80001c0 <strlen>
 80057f8:	901f      	str	r0, [sp, #124]	; 0x7c
 80057fa:	4606      	mov	r6, r0
 80057fc:	4648      	mov	r0, r9
 80057fe:	f003 fd1d 	bl	800923c <_localeconv_r>
 8005802:	6883      	ldr	r3, [r0, #8]
 8005804:	931d      	str	r3, [sp, #116]	; 0x74
 8005806:	2120      	movs	r1, #32
 8005808:	2e00      	cmp	r6, #0
 800580a:	f040 85dc 	bne.w	80063c6 <_svfprintf_r+0xd62>
 800580e:	f89b 7000 	ldrb.w	r7, [fp]
 8005812:	e776      	b.n	8005702 <_svfprintf_r+0x9e>
 8005814:	f89b 7000 	ldrb.w	r7, [fp]
 8005818:	f04a 0a20 	orr.w	sl, sl, #32
 800581c:	e771      	b.n	8005702 <_svfprintf_r+0x9e>
 800581e:	f04a 0a10 	orr.w	sl, sl, #16
 8005822:	f01a 0f20 	tst.w	sl, #32
 8005826:	f000 81be 	beq.w	8005ba6 <_svfprintf_r+0x542>
 800582a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800582c:	3307      	adds	r3, #7
 800582e:	f023 0307 	bic.w	r3, r3, #7
 8005832:	461a      	mov	r2, r3
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f852 4b08 	ldr.w	r4, [r2], #8
 800583a:	920e      	str	r2, [sp, #56]	; 0x38
 800583c:	461e      	mov	r6, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	f2c0 8580 	blt.w	8006344 <_svfprintf_r+0xce0>
 8005844:	9b08      	ldr	r3, [sp, #32]
 8005846:	3301      	adds	r3, #1
 8005848:	f001 8003 	beq.w	8006852 <_svfprintf_r+0x11ee>
 800584c:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8005850:	ea54 0306 	orrs.w	r3, r4, r6
 8005854:	f8cd a01c 	str.w	sl, [sp, #28]
 8005858:	f000 8501 	beq.w	800625e <_svfprintf_r+0xbfa>
 800585c:	2c0a      	cmp	r4, #10
 800585e:	f176 0300 	sbcs.w	r3, r6, #0
 8005862:	f080 8794 	bcs.w	800678e <_svfprintf_r+0x112a>
 8005866:	3430      	adds	r4, #48	; 0x30
 8005868:	2301      	movs	r3, #1
 800586a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800586e:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
 8005872:	930b      	str	r3, [sp, #44]	; 0x2c
 8005874:	f20d 1557 	addw	r5, sp, #343	; 0x157
 8005878:	9908      	ldr	r1, [sp, #32]
 800587a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800587c:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8005880:	4281      	cmp	r1, r0
 8005882:	f04f 0300 	mov.w	r3, #0
 8005886:	bfb8      	it	lt
 8005888:	4601      	movlt	r1, r0
 800588a:	930d      	str	r3, [sp, #52]	; 0x34
 800588c:	9107      	str	r1, [sp, #28]
 800588e:	9310      	str	r3, [sp, #64]	; 0x40
 8005890:	9315      	str	r3, [sp, #84]	; 0x54
 8005892:	9313      	str	r3, [sp, #76]	; 0x4c
 8005894:	2a00      	cmp	r2, #0
 8005896:	d07e      	beq.n	8005996 <_svfprintf_r+0x332>
 8005898:	9b07      	ldr	r3, [sp, #28]
 800589a:	3301      	adds	r3, #1
 800589c:	9307      	str	r3, [sp, #28]
 800589e:	e07a      	b.n	8005996 <_svfprintf_r+0x332>
 80058a0:	f04a 0a10 	orr.w	sl, sl, #16
 80058a4:	f01a 0620 	ands.w	r6, sl, #32
 80058a8:	f000 816d 	beq.w	8005b86 <_svfprintf_r+0x522>
 80058ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058ae:	3307      	adds	r3, #7
 80058b0:	f023 0307 	bic.w	r3, r3, #7
 80058b4:	685e      	ldr	r6, [r3, #4]
 80058b6:	f853 4b08 	ldr.w	r4, [r3], #8
 80058ba:	930e      	str	r3, [sp, #56]	; 0x38
 80058bc:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 80058c0:	9307      	str	r3, [sp, #28]
 80058c2:	2300      	movs	r3, #0
 80058c4:	2200      	movs	r2, #0
 80058c6:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 80058ca:	9a08      	ldr	r2, [sp, #32]
 80058cc:	1c51      	adds	r1, r2, #1
 80058ce:	f000 824b 	beq.w	8005d68 <_svfprintf_r+0x704>
 80058d2:	9907      	ldr	r1, [sp, #28]
 80058d4:	f021 0a80 	bic.w	sl, r1, #128	; 0x80
 80058d8:	ea54 0106 	orrs.w	r1, r4, r6
 80058dc:	f040 8242 	bne.w	8005d64 <_svfprintf_r+0x700>
 80058e0:	2a00      	cmp	r2, #0
 80058e2:	f040 87ef 	bne.w	80068c4 <_svfprintf_r+0x1260>
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f040 84bd 	bne.w	8006266 <_svfprintf_r+0xc02>
 80058ec:	9b07      	ldr	r3, [sp, #28]
 80058ee:	f013 0301 	ands.w	r3, r3, #1
 80058f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80058f4:	f000 8553 	beq.w	800639e <_svfprintf_r+0xd3a>
 80058f8:	2330      	movs	r3, #48	; 0x30
 80058fa:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
 80058fe:	f20d 1557 	addw	r5, sp, #343	; 0x157
 8005902:	e7b9      	b.n	8005878 <_svfprintf_r+0x214>
 8005904:	ebbb 0605 	subs.w	r6, fp, r5
 8005908:	f000 80bd 	beq.w	8005a86 <_svfprintf_r+0x422>
 800590c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800590e:	4433      	add	r3, r6
 8005910:	932c      	str	r3, [sp, #176]	; 0xb0
 8005912:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8005914:	3301      	adds	r3, #1
 8005916:	2b07      	cmp	r3, #7
 8005918:	e9c8 5600 	strd	r5, r6, [r8]
 800591c:	932b      	str	r3, [sp, #172]	; 0xac
 800591e:	dc05      	bgt.n	800592c <_svfprintf_r+0x2c8>
 8005920:	f108 0808 	add.w	r8, r8, #8
 8005924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005926:	4433      	add	r3, r6
 8005928:	9309      	str	r3, [sp, #36]	; 0x24
 800592a:	e6d7      	b.n	80056dc <_svfprintf_r+0x78>
 800592c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800592e:	aa2a      	add	r2, sp, #168	; 0xa8
 8005930:	4648      	mov	r0, r9
 8005932:	f004 f941 	bl	8009bb8 <__ssprint_r>
 8005936:	b980      	cbnz	r0, 800595a <_svfprintf_r+0x2f6>
 8005938:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 800593c:	e7f2      	b.n	8005924 <_svfprintf_r+0x2c0>
 800593e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005940:	aa2a      	add	r2, sp, #168	; 0xa8
 8005942:	4648      	mov	r0, r9
 8005944:	f004 f938 	bl	8009bb8 <__ssprint_r>
 8005948:	2800      	cmp	r0, #0
 800594a:	f000 808d 	beq.w	8005a68 <_svfprintf_r+0x404>
 800594e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005950:	b11b      	cbz	r3, 800595a <_svfprintf_r+0x2f6>
 8005952:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005954:	9818      	ldr	r0, [sp, #96]	; 0x60
 8005956:	f003 fb51 	bl	8008ffc <_free_r>
 800595a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800595c:	899b      	ldrh	r3, [r3, #12]
 800595e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005964:	bf18      	it	ne
 8005966:	f04f 33ff 	movne.w	r3, #4294967295
 800596a:	9309      	str	r3, [sp, #36]	; 0x24
 800596c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800596e:	b057      	add	sp, #348	; 0x15c
 8005970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005974:	2f00      	cmp	r7, #0
 8005976:	f000 8086 	beq.w	8005a86 <_svfprintf_r+0x422>
 800597a:	2200      	movs	r2, #0
 800597c:	f88d 70f4 	strb.w	r7, [sp, #244]	; 0xf4
 8005980:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 8005984:	2301      	movs	r3, #1
 8005986:	9307      	str	r3, [sp, #28]
 8005988:	920d      	str	r2, [sp, #52]	; 0x34
 800598a:	930b      	str	r3, [sp, #44]	; 0x2c
 800598c:	9208      	str	r2, [sp, #32]
 800598e:	9210      	str	r2, [sp, #64]	; 0x40
 8005990:	9215      	str	r2, [sp, #84]	; 0x54
 8005992:	9213      	str	r2, [sp, #76]	; 0x4c
 8005994:	ad3d      	add	r5, sp, #244	; 0xf4
 8005996:	f01a 0302 	ands.w	r3, sl, #2
 800599a:	930f      	str	r3, [sp, #60]	; 0x3c
 800599c:	d002      	beq.n	80059a4 <_svfprintf_r+0x340>
 800599e:	9b07      	ldr	r3, [sp, #28]
 80059a0:	3302      	adds	r3, #2
 80059a2:	9307      	str	r3, [sp, #28]
 80059a4:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80059a8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80059aa:	9312      	str	r3, [sp, #72]	; 0x48
 80059ac:	d105      	bne.n	80059ba <_svfprintf_r+0x356>
 80059ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b0:	9907      	ldr	r1, [sp, #28]
 80059b2:	1a5e      	subs	r6, r3, r1
 80059b4:	2e00      	cmp	r6, #0
 80059b6:	f300 80ae 	bgt.w	8005b16 <_svfprintf_r+0x4b2>
 80059ba:	b18a      	cbz	r2, 80059e0 <_svfprintf_r+0x37c>
 80059bc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80059be:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
 80059c2:	3201      	adds	r2, #1
 80059c4:	3401      	adds	r4, #1
 80059c6:	f8c8 1000 	str.w	r1, [r8]
 80059ca:	2a07      	cmp	r2, #7
 80059cc:	f04f 0101 	mov.w	r1, #1
 80059d0:	942c      	str	r4, [sp, #176]	; 0xb0
 80059d2:	922b      	str	r2, [sp, #172]	; 0xac
 80059d4:	f8c8 1004 	str.w	r1, [r8, #4]
 80059d8:	f300 836d 	bgt.w	80060b6 <_svfprintf_r+0xa52>
 80059dc:	f108 0808 	add.w	r8, r8, #8
 80059e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059e2:	b183      	cbz	r3, 8005a06 <_svfprintf_r+0x3a2>
 80059e4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80059e6:	aa23      	add	r2, sp, #140	; 0x8c
 80059e8:	3301      	adds	r3, #1
 80059ea:	3402      	adds	r4, #2
 80059ec:	f8c8 2000 	str.w	r2, [r8]
 80059f0:	2b07      	cmp	r3, #7
 80059f2:	f04f 0202 	mov.w	r2, #2
 80059f6:	942c      	str	r4, [sp, #176]	; 0xb0
 80059f8:	932b      	str	r3, [sp, #172]	; 0xac
 80059fa:	f8c8 2004 	str.w	r2, [r8, #4]
 80059fe:	f300 8366 	bgt.w	80060ce <_svfprintf_r+0xa6a>
 8005a02:	f108 0808 	add.w	r8, r8, #8
 8005a06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a08:	2b80      	cmp	r3, #128	; 0x80
 8005a0a:	f000 8249 	beq.w	8005ea0 <_svfprintf_r+0x83c>
 8005a0e:	9b08      	ldr	r3, [sp, #32]
 8005a10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a12:	1a9e      	subs	r6, r3, r2
 8005a14:	2e00      	cmp	r6, #0
 8005a16:	f300 828f 	bgt.w	8005f38 <_svfprintf_r+0x8d4>
 8005a1a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005a1e:	f040 81e6 	bne.w	8005dee <_svfprintf_r+0x78a>
 8005a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a24:	f8c8 3004 	str.w	r3, [r8, #4]
 8005a28:	441c      	add	r4, r3
 8005a2a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8005a2c:	f8c8 5000 	str.w	r5, [r8]
 8005a30:	3301      	adds	r3, #1
 8005a32:	2b07      	cmp	r3, #7
 8005a34:	942c      	str	r4, [sp, #176]	; 0xb0
 8005a36:	932b      	str	r3, [sp, #172]	; 0xac
 8005a38:	f300 82eb 	bgt.w	8006012 <_svfprintf_r+0x9ae>
 8005a3c:	f108 0808 	add.w	r8, r8, #8
 8005a40:	f01a 0f04 	tst.w	sl, #4
 8005a44:	d005      	beq.n	8005a52 <_svfprintf_r+0x3ee>
 8005a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a48:	9a07      	ldr	r2, [sp, #28]
 8005a4a:	1a9d      	subs	r5, r3, r2
 8005a4c:	2d00      	cmp	r5, #0
 8005a4e:	f300 834a 	bgt.w	80060e6 <_svfprintf_r+0xa82>
 8005a52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a56:	9907      	ldr	r1, [sp, #28]
 8005a58:	428a      	cmp	r2, r1
 8005a5a:	bfac      	ite	ge
 8005a5c:	189b      	addge	r3, r3, r2
 8005a5e:	185b      	addlt	r3, r3, r1
 8005a60:	9309      	str	r3, [sp, #36]	; 0x24
 8005a62:	2c00      	cmp	r4, #0
 8005a64:	f47f af6b 	bne.w	800593e <_svfprintf_r+0x2da>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	932b      	str	r3, [sp, #172]	; 0xac
 8005a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a6e:	b11b      	cbz	r3, 8005a78 <_svfprintf_r+0x414>
 8005a70:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005a72:	4648      	mov	r0, r9
 8005a74:	f003 fac2 	bl	8008ffc <_free_r>
 8005a78:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8005a7c:	465d      	mov	r5, fp
 8005a7e:	782b      	ldrb	r3, [r5, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f47f ae1e 	bne.w	80056c2 <_svfprintf_r+0x5e>
 8005a86:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f43f af66 	beq.w	800595a <_svfprintf_r+0x2f6>
 8005a8e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005a90:	9818      	ldr	r0, [sp, #96]	; 0x60
 8005a92:	aa2a      	add	r2, sp, #168	; 0xa8
 8005a94:	4621      	mov	r1, r4
 8005a96:	f004 f88f 	bl	8009bb8 <__ssprint_r>
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	e75f      	b.n	800595e <_svfprintf_r+0x2fa>
 8005a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005aa0:	3307      	adds	r3, #7
 8005aa2:	f023 0207 	bic.w	r2, r3, #7
 8005aa6:	e8f2 3402 	ldrd	r3, r4, [r2], #8
 8005aaa:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 8005aae:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005ab2:	920e      	str	r2, [sp, #56]	; 0x38
 8005ab4:	461e      	mov	r6, r3
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	4621      	mov	r1, r4
 8005aba:	4bb8      	ldr	r3, [pc, #736]	; (8005d9c <_svfprintf_r+0x738>)
 8005abc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac0:	f7fb f948 	bl	8000d54 <__aeabi_dcmpun>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	f040 8491 	bne.w	80063ec <_svfprintf_r+0xd88>
 8005aca:	4bb4      	ldr	r3, [pc, #720]	; (8005d9c <_svfprintf_r+0x738>)
 8005acc:	4630      	mov	r0, r6
 8005ace:	4621      	mov	r1, r4
 8005ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad4:	f7fb f886 	bl	8000be4 <__aeabi_dcmple>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	f040 8487 	bne.w	80063ec <_svfprintf_r+0xd88>
 8005ade:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f7fb f873 	bl	8000bd0 <__aeabi_dcmplt>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	f040 8770 	bne.w	80069d0 <_svfprintf_r+0x136c>
 8005af0:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8005af4:	4daa      	ldr	r5, [pc, #680]	; (8005da0 <_svfprintf_r+0x73c>)
 8005af6:	4bab      	ldr	r3, [pc, #684]	; (8005da4 <_svfprintf_r+0x740>)
 8005af8:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8005afc:	2103      	movs	r1, #3
 8005afe:	2f47      	cmp	r7, #71	; 0x47
 8005b00:	bfc8      	it	gt
 8005b02:	461d      	movgt	r5, r3
 8005b04:	2300      	movs	r3, #0
 8005b06:	930d      	str	r3, [sp, #52]	; 0x34
 8005b08:	9107      	str	r1, [sp, #28]
 8005b0a:	910b      	str	r1, [sp, #44]	; 0x2c
 8005b0c:	9308      	str	r3, [sp, #32]
 8005b0e:	9310      	str	r3, [sp, #64]	; 0x40
 8005b10:	9315      	str	r3, [sp, #84]	; 0x54
 8005b12:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b14:	e6be      	b.n	8005894 <_svfprintf_r+0x230>
 8005b16:	2e10      	cmp	r6, #16
 8005b18:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8005b1a:	dd23      	ble.n	8005b64 <_svfprintf_r+0x500>
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	2310      	movs	r3, #16
 8005b20:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005b22:	e004      	b.n	8005b2e <_svfprintf_r+0x4ca>
 8005b24:	3e10      	subs	r6, #16
 8005b26:	2e10      	cmp	r6, #16
 8005b28:	f108 0808 	add.w	r8, r8, #8
 8005b2c:	dd19      	ble.n	8005b62 <_svfprintf_r+0x4fe>
 8005b2e:	3201      	adds	r2, #1
 8005b30:	489d      	ldr	r0, [pc, #628]	; (8005da8 <_svfprintf_r+0x744>)
 8005b32:	3110      	adds	r1, #16
 8005b34:	2a07      	cmp	r2, #7
 8005b36:	e9c8 0300 	strd	r0, r3, [r8]
 8005b3a:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
 8005b3e:	ddf1      	ble.n	8005b24 <_svfprintf_r+0x4c0>
 8005b40:	aa2a      	add	r2, sp, #168	; 0xa8
 8005b42:	4621      	mov	r1, r4
 8005b44:	4648      	mov	r0, r9
 8005b46:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8005b4a:	f004 f835 	bl	8009bb8 <__ssprint_r>
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	f47f aefd 	bne.w	800594e <_svfprintf_r+0x2ea>
 8005b54:	3e10      	subs	r6, #16
 8005b56:	2e10      	cmp	r6, #16
 8005b58:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
 8005b5c:	f04f 0310 	mov.w	r3, #16
 8005b60:	dce5      	bgt.n	8005b2e <_svfprintf_r+0x4ca>
 8005b62:	460c      	mov	r4, r1
 8005b64:	3201      	adds	r2, #1
 8005b66:	4b90      	ldr	r3, [pc, #576]	; (8005da8 <_svfprintf_r+0x744>)
 8005b68:	f8c8 6004 	str.w	r6, [r8, #4]
 8005b6c:	4434      	add	r4, r6
 8005b6e:	2a07      	cmp	r2, #7
 8005b70:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 8005b74:	f8c8 3000 	str.w	r3, [r8]
 8005b78:	f300 8653 	bgt.w	8006822 <_svfprintf_r+0x11be>
 8005b7c:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8005b80:	f108 0808 	add.w	r8, r8, #8
 8005b84:	e719      	b.n	80059ba <_svfprintf_r+0x356>
 8005b86:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005b88:	f01a 0210 	ands.w	r2, sl, #16
 8005b8c:	f101 0304 	add.w	r3, r1, #4
 8005b90:	f040 84f8 	bne.w	8006584 <_svfprintf_r+0xf20>
 8005b94:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 8005b98:	f000 870c 	beq.w	80069b4 <_svfprintf_r+0x1350>
 8005b9c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005b9e:	930e      	str	r3, [sp, #56]	; 0x38
 8005ba0:	880c      	ldrh	r4, [r1, #0]
 8005ba2:	4616      	mov	r6, r2
 8005ba4:	e68a      	b.n	80058bc <_svfprintf_r+0x258>
 8005ba6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ba8:	f01a 0f10 	tst.w	sl, #16
 8005bac:	f102 0304 	add.w	r3, r2, #4
 8005bb0:	f040 83fc 	bne.w	80063ac <_svfprintf_r+0xd48>
 8005bb4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005bb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bba:	f000 83f3 	beq.w	80063a4 <_svfprintf_r+0xd40>
 8005bbe:	f9b2 4000 	ldrsh.w	r4, [r2]
 8005bc2:	930e      	str	r3, [sp, #56]	; 0x38
 8005bc4:	17e6      	asrs	r6, r4, #31
 8005bc6:	4633      	mov	r3, r6
 8005bc8:	e639      	b.n	800583e <_svfprintf_r+0x1da>
 8005bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f853 1b04 	ldr.w	r1, [r3], #4
 8005bd2:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 8005bd6:	f88d 10f4 	strb.w	r1, [sp, #244]	; 0xf4
 8005bda:	930e      	str	r3, [sp, #56]	; 0x38
 8005bdc:	e6d2      	b.n	8005984 <_svfprintf_r+0x320>
 8005bde:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005be0:	9b08      	ldr	r3, [sp, #32]
 8005be2:	f854 5b04 	ldr.w	r5, [r4], #4
 8005be6:	2600      	movs	r6, #0
 8005be8:	f88d 608b 	strb.w	r6, [sp, #139]	; 0x8b
 8005bec:	2d00      	cmp	r5, #0
 8005bee:	f000 8675 	beq.w	80068dc <_svfprintf_r+0x1278>
 8005bf2:	1c58      	adds	r0, r3, #1
 8005bf4:	f000 8533 	beq.w	800665e <_svfprintf_r+0xffa>
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	f7fa fb4f 	bl	80002a0 <memchr>
 8005c02:	900d      	str	r0, [sp, #52]	; 0x34
 8005c04:	2800      	cmp	r0, #0
 8005c06:	f001 8000 	beq.w	8006c0a <_svfprintf_r+0x15a6>
 8005c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c0c:	9608      	str	r6, [sp, #32]
 8005c0e:	1b5b      	subs	r3, r3, r5
 8005c10:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c12:	940e      	str	r4, [sp, #56]	; 0x38
 8005c14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c18:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8005c1c:	9307      	str	r3, [sp, #28]
 8005c1e:	960d      	str	r6, [sp, #52]	; 0x34
 8005c20:	9610      	str	r6, [sp, #64]	; 0x40
 8005c22:	9615      	str	r6, [sp, #84]	; 0x54
 8005c24:	9613      	str	r6, [sp, #76]	; 0x4c
 8005c26:	e635      	b.n	8005894 <_svfprintf_r+0x230>
 8005c28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c2e:	920a      	str	r2, [sp, #40]	; 0x28
 8005c30:	2a00      	cmp	r2, #0
 8005c32:	f280 83af 	bge.w	8006394 <_svfprintf_r+0xd30>
 8005c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c38:	930e      	str	r3, [sp, #56]	; 0x38
 8005c3a:	4252      	negs	r2, r2
 8005c3c:	920a      	str	r2, [sp, #40]	; 0x28
 8005c3e:	f89b 7000 	ldrb.w	r7, [fp]
 8005c42:	f04a 0a04 	orr.w	sl, sl, #4
 8005c46:	e55c      	b.n	8005702 <_svfprintf_r+0x9e>
 8005c48:	f89b 7000 	ldrb.w	r7, [fp]
 8005c4c:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
 8005c50:	e557      	b.n	8005702 <_svfprintf_r+0x9e>
 8005c52:	f89b 7000 	ldrb.w	r7, [fp]
 8005c56:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8005c5a:	e552      	b.n	8005702 <_svfprintf_r+0x9e>
 8005c5c:	465a      	mov	r2, fp
 8005c5e:	f812 7b01 	ldrb.w	r7, [r2], #1
 8005c62:	2f2a      	cmp	r7, #42	; 0x2a
 8005c64:	f001 81ae 	beq.w	8006fc4 <_svfprintf_r+0x1960>
 8005c68:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005c6c:	2b09      	cmp	r3, #9
 8005c6e:	4693      	mov	fp, r2
 8005c70:	bf98      	it	ls
 8005c72:	2200      	movls	r2, #0
 8005c74:	f201 8086 	bhi.w	8006d84 <_svfprintf_r+0x1720>
 8005c78:	f81b 7b01 	ldrb.w	r7, [fp], #1
 8005c7c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005c80:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005c84:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005c88:	2b09      	cmp	r3, #9
 8005c8a:	d9f5      	bls.n	8005c78 <_svfprintf_r+0x614>
 8005c8c:	9208      	str	r2, [sp, #32]
 8005c8e:	e53a      	b.n	8005706 <_svfprintf_r+0xa2>
 8005c90:	f89b 7000 	ldrb.w	r7, [fp]
 8005c94:	f04a 0a01 	orr.w	sl, sl, #1
 8005c98:	e533      	b.n	8005702 <_svfprintf_r+0x9e>
 8005c9a:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
 8005c9e:	f89b 7000 	ldrb.w	r7, [fp]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f47f ad2d 	bne.w	8005702 <_svfprintf_r+0x9e>
 8005ca8:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
 8005cac:	e529      	b.n	8005702 <_svfprintf_r+0x9e>
 8005cae:	f04a 0310 	orr.w	r3, sl, #16
 8005cb2:	9307      	str	r3, [sp, #28]
 8005cb4:	9b07      	ldr	r3, [sp, #28]
 8005cb6:	f013 0620 	ands.w	r6, r3, #32
 8005cba:	f000 832f 	beq.w	800631c <_svfprintf_r+0xcb8>
 8005cbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cc0:	3307      	adds	r3, #7
 8005cc2:	f023 0307 	bic.w	r3, r3, #7
 8005cc6:	685e      	ldr	r6, [r3, #4]
 8005cc8:	f853 4b08 	ldr.w	r4, [r3], #8
 8005ccc:	930e      	str	r3, [sp, #56]	; 0x38
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e5f8      	b.n	80058c4 <_svfprintf_r+0x260>
 8005cd2:	f89b 7000 	ldrb.w	r7, [fp]
 8005cd6:	f04a 0a08 	orr.w	sl, sl, #8
 8005cda:	e512      	b.n	8005702 <_svfprintf_r+0x9e>
 8005cdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cde:	f853 4b04 	ldr.w	r4, [r3], #4
 8005ce2:	930e      	str	r3, [sp, #56]	; 0x38
 8005ce4:	2330      	movs	r3, #48	; 0x30
 8005ce6:	f04a 0202 	orr.w	r2, sl, #2
 8005cea:	2778      	movs	r7, #120	; 0x78
 8005cec:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8005cf0:	4b2e      	ldr	r3, [pc, #184]	; (8005dac <_svfprintf_r+0x748>)
 8005cf2:	931b      	str	r3, [sp, #108]	; 0x6c
 8005cf4:	9207      	str	r2, [sp, #28]
 8005cf6:	f88d 708d 	strb.w	r7, [sp, #141]	; 0x8d
 8005cfa:	2600      	movs	r6, #0
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e5e1      	b.n	80058c4 <_svfprintf_r+0x260>
 8005d00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d02:	f01a 0f20 	tst.w	sl, #32
 8005d06:	f852 3b04 	ldr.w	r3, [r2], #4
 8005d0a:	920e      	str	r2, [sp, #56]	; 0x38
 8005d0c:	f040 8354 	bne.w	80063b8 <_svfprintf_r+0xd54>
 8005d10:	f01a 0f10 	tst.w	sl, #16
 8005d14:	f040 85dd 	bne.w	80068d2 <_svfprintf_r+0x126e>
 8005d18:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005d1c:	f040 86a2 	bne.w	8006a64 <_svfprintf_r+0x1400>
 8005d20:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8005d24:	f000 85d5 	beq.w	80068d2 <_svfprintf_r+0x126e>
 8005d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	465d      	mov	r5, fp
 8005d2e:	e6a6      	b.n	8005a7e <_svfprintf_r+0x41a>
 8005d30:	f89b 7000 	ldrb.w	r7, [fp]
 8005d34:	2f6c      	cmp	r7, #108	; 0x6c
 8005d36:	bf03      	ittte	eq
 8005d38:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
 8005d3c:	f04a 0a20 	orreq.w	sl, sl, #32
 8005d40:	f10b 0b01 	addeq.w	fp, fp, #1
 8005d44:	f04a 0a10 	orrne.w	sl, sl, #16
 8005d48:	e4db      	b.n	8005702 <_svfprintf_r+0x9e>
 8005d4a:	f89b 7000 	ldrb.w	r7, [fp]
 8005d4e:	2f68      	cmp	r7, #104	; 0x68
 8005d50:	bf03      	ittte	eq
 8005d52:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
 8005d56:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8005d5a:	f10b 0b01 	addeq.w	fp, fp, #1
 8005d5e:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8005d62:	e4ce      	b.n	8005702 <_svfprintf_r+0x9e>
 8005d64:	f8cd a01c 	str.w	sl, [sp, #28]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	f43f ad77 	beq.w	800585c <_svfprintf_r+0x1f8>
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	ad56      	add	r5, sp, #344	; 0x158
 8005d72:	d11d      	bne.n	8005db0 <_svfprintf_r+0x74c>
 8005d74:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005d76:	f004 030f 	and.w	r3, r4, #15
 8005d7a:	0924      	lsrs	r4, r4, #4
 8005d7c:	5cd3      	ldrb	r3, [r2, r3]
 8005d7e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005d82:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
 8005d86:	0936      	lsrs	r6, r6, #4
 8005d88:	ea54 0306 	orrs.w	r3, r4, r6
 8005d8c:	d1f3      	bne.n	8005d76 <_svfprintf_r+0x712>
 8005d8e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005d92:	ab56      	add	r3, sp, #344	; 0x158
 8005d94:	1b5b      	subs	r3, r3, r5
 8005d96:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d98:	e56e      	b.n	8005878 <_svfprintf_r+0x214>
 8005d9a:	bf00      	nop
 8005d9c:	7fefffff 	.word	0x7fefffff
 8005da0:	0800c920 	.word	0x0800c920
 8005da4:	0800c924 	.word	0x0800c924
 8005da8:	0800c964 	.word	0x0800c964
 8005dac:	0800c930 	.word	0x0800c930
 8005db0:	f004 0307 	and.w	r3, r4, #7
 8005db4:	08e4      	lsrs	r4, r4, #3
 8005db6:	ea44 7446 	orr.w	r4, r4, r6, lsl #29
 8005dba:	08f6      	lsrs	r6, r6, #3
 8005dbc:	3330      	adds	r3, #48	; 0x30
 8005dbe:	ea54 0106 	orrs.w	r1, r4, r6
 8005dc2:	462a      	mov	r2, r5
 8005dc4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005dc8:	d1f2      	bne.n	8005db0 <_svfprintf_r+0x74c>
 8005dca:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005dce:	f01a 0f01 	tst.w	sl, #1
 8005dd2:	d0de      	beq.n	8005d92 <_svfprintf_r+0x72e>
 8005dd4:	2b30      	cmp	r3, #48	; 0x30
 8005dd6:	d0da      	beq.n	8005d8e <_svfprintf_r+0x72a>
 8005dd8:	2330      	movs	r3, #48	; 0x30
 8005dda:	3a02      	subs	r2, #2
 8005ddc:	f805 3c01 	strb.w	r3, [r5, #-1]
 8005de0:	ab56      	add	r3, sp, #344	; 0x158
 8005de2:	1a9b      	subs	r3, r3, r2
 8005de4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005de8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dea:	4615      	mov	r5, r2
 8005dec:	e544      	b.n	8005878 <_svfprintf_r+0x214>
 8005dee:	2f65      	cmp	r7, #101	; 0x65
 8005df0:	f340 811b 	ble.w	800602a <_svfprintf_r+0x9c6>
 8005df4:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f7fa fede 	bl	8000bbc <__aeabi_dcmpeq>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	f000 81ae 	beq.w	8006162 <_svfprintf_r+0xafe>
 8005e06:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8005e08:	4aba      	ldr	r2, [pc, #744]	; (80060f4 <_svfprintf_r+0xa90>)
 8005e0a:	f8c8 2000 	str.w	r2, [r8]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	3401      	adds	r4, #1
 8005e12:	2201      	movs	r2, #1
 8005e14:	2b07      	cmp	r3, #7
 8005e16:	942c      	str	r4, [sp, #176]	; 0xb0
 8005e18:	932b      	str	r3, [sp, #172]	; 0xac
 8005e1a:	f8c8 2004 	str.w	r2, [r8, #4]
 8005e1e:	f300 851c 	bgt.w	800685a <_svfprintf_r+0x11f6>
 8005e22:	f108 0808 	add.w	r8, r8, #8
 8005e26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005e28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	f280 82ad 	bge.w	800638a <_svfprintf_r+0xd26>
 8005e30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e32:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005e34:	441c      	add	r4, r3
 8005e36:	e9c8 2300 	strd	r2, r3, [r8]
 8005e3a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8005e3c:	942c      	str	r4, [sp, #176]	; 0xb0
 8005e3e:	3301      	adds	r3, #1
 8005e40:	2b07      	cmp	r3, #7
 8005e42:	932b      	str	r3, [sp, #172]	; 0xac
 8005e44:	f300 83ca 	bgt.w	80065dc <_svfprintf_r+0xf78>
 8005e48:	f108 0808 	add.w	r8, r8, #8
 8005e4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e4e:	1e5d      	subs	r5, r3, #1
 8005e50:	2d00      	cmp	r5, #0
 8005e52:	f77f adf5 	ble.w	8005a40 <_svfprintf_r+0x3dc>
 8005e56:	2d10      	cmp	r5, #16
 8005e58:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8005e5a:	f341 80aa 	ble.w	8006fb2 <_svfprintf_r+0x194e>
 8005e5e:	4fa6      	ldr	r7, [pc, #664]	; (80060f8 <_svfprintf_r+0xa94>)
 8005e60:	970f      	str	r7, [sp, #60]	; 0x3c
 8005e62:	4622      	mov	r2, r4
 8005e64:	2610      	movs	r6, #16
 8005e66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005e68:	e005      	b.n	8005e76 <_svfprintf_r+0x812>
 8005e6a:	f108 0808 	add.w	r8, r8, #8
 8005e6e:	3d10      	subs	r5, #16
 8005e70:	2d10      	cmp	r5, #16
 8005e72:	f340 84ff 	ble.w	8006874 <_svfprintf_r+0x1210>
 8005e76:	3301      	adds	r3, #1
 8005e78:	3210      	adds	r2, #16
 8005e7a:	2b07      	cmp	r3, #7
 8005e7c:	e9c8 7600 	strd	r7, r6, [r8]
 8005e80:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
 8005e84:	ddf1      	ble.n	8005e6a <_svfprintf_r+0x806>
 8005e86:	aa2a      	add	r2, sp, #168	; 0xa8
 8005e88:	4621      	mov	r1, r4
 8005e8a:	4648      	mov	r0, r9
 8005e8c:	f003 fe94 	bl	8009bb8 <__ssprint_r>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	f47f ad5c 	bne.w	800594e <_svfprintf_r+0x2ea>
 8005e96:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
 8005e9a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8005e9e:	e7e6      	b.n	8005e6e <_svfprintf_r+0x80a>
 8005ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea2:	9a07      	ldr	r2, [sp, #28]
 8005ea4:	1a9e      	subs	r6, r3, r2
 8005ea6:	2e00      	cmp	r6, #0
 8005ea8:	f77f adb1 	ble.w	8005a0e <_svfprintf_r+0x3aa>
 8005eac:	2e10      	cmp	r6, #16
 8005eae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8005eb0:	f340 87aa 	ble.w	8006e08 <_svfprintf_r+0x17a4>
 8005eb4:	4890      	ldr	r0, [pc, #576]	; (80060f8 <_svfprintf_r+0xa94>)
 8005eb6:	9712      	str	r7, [sp, #72]	; 0x48
 8005eb8:	4621      	mov	r1, r4
 8005eba:	464f      	mov	r7, r9
 8005ebc:	900f      	str	r0, [sp, #60]	; 0x3c
 8005ebe:	46a9      	mov	r9, r5
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	e004      	b.n	8005ed2 <_svfprintf_r+0x86e>
 8005ec8:	3e10      	subs	r6, #16
 8005eca:	2e10      	cmp	r6, #16
 8005ecc:	f108 0808 	add.w	r8, r8, #8
 8005ed0:	dd19      	ble.n	8005f06 <_svfprintf_r+0x8a2>
 8005ed2:	3201      	adds	r2, #1
 8005ed4:	3110      	adds	r1, #16
 8005ed6:	2310      	movs	r3, #16
 8005ed8:	2a07      	cmp	r2, #7
 8005eda:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
 8005ede:	f8c8 4000 	str.w	r4, [r8]
 8005ee2:	f8c8 3004 	str.w	r3, [r8, #4]
 8005ee6:	ddef      	ble.n	8005ec8 <_svfprintf_r+0x864>
 8005ee8:	aa2a      	add	r2, sp, #168	; 0xa8
 8005eea:	4629      	mov	r1, r5
 8005eec:	4638      	mov	r0, r7
 8005eee:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8005ef2:	f003 fe61 	bl	8009bb8 <__ssprint_r>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	f47f ad29 	bne.w	800594e <_svfprintf_r+0x2ea>
 8005efc:	3e10      	subs	r6, #16
 8005efe:	2e10      	cmp	r6, #16
 8005f00:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
 8005f04:	dce5      	bgt.n	8005ed2 <_svfprintf_r+0x86e>
 8005f06:	464d      	mov	r5, r9
 8005f08:	46b9      	mov	r9, r7
 8005f0a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	460c      	mov	r4, r1
 8005f10:	3301      	adds	r3, #1
 8005f12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f14:	f8c8 2000 	str.w	r2, [r8]
 8005f18:	4434      	add	r4, r6
 8005f1a:	2b07      	cmp	r3, #7
 8005f1c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8005f20:	f8c8 6004 	str.w	r6, [r8, #4]
 8005f24:	f300 84c1 	bgt.w	80068aa <_svfprintf_r+0x1246>
 8005f28:	9b08      	ldr	r3, [sp, #32]
 8005f2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f2c:	1a9e      	subs	r6, r3, r2
 8005f2e:	2e00      	cmp	r6, #0
 8005f30:	f108 0808 	add.w	r8, r8, #8
 8005f34:	f77f ad71 	ble.w	8005a1a <_svfprintf_r+0x3b6>
 8005f38:	2e10      	cmp	r6, #16
 8005f3a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8005f3c:	f340 8544 	ble.w	80069c8 <_svfprintf_r+0x1364>
 8005f40:	486d      	ldr	r0, [pc, #436]	; (80060f8 <_svfprintf_r+0xa94>)
 8005f42:	900f      	str	r0, [sp, #60]	; 0x3c
 8005f44:	4642      	mov	r2, r8
 8005f46:	4621      	mov	r1, r4
 8005f48:	46a8      	mov	r8, r5
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f4e:	e004      	b.n	8005f5a <_svfprintf_r+0x8f6>
 8005f50:	3e10      	subs	r6, #16
 8005f52:	2e10      	cmp	r6, #16
 8005f54:	f102 0208 	add.w	r2, r2, #8
 8005f58:	dd16      	ble.n	8005f88 <_svfprintf_r+0x924>
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	3110      	adds	r1, #16
 8005f5e:	2010      	movs	r0, #16
 8005f60:	2b07      	cmp	r3, #7
 8005f62:	e9cd 312b 	strd	r3, r1, [sp, #172]	; 0xac
 8005f66:	6014      	str	r4, [r2, #0]
 8005f68:	6050      	str	r0, [r2, #4]
 8005f6a:	ddf1      	ble.n	8005f50 <_svfprintf_r+0x8ec>
 8005f6c:	aa2a      	add	r2, sp, #168	; 0xa8
 8005f6e:	4629      	mov	r1, r5
 8005f70:	4648      	mov	r0, r9
 8005f72:	f003 fe21 	bl	8009bb8 <__ssprint_r>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	f47f ace9 	bne.w	800594e <_svfprintf_r+0x2ea>
 8005f7c:	3e10      	subs	r6, #16
 8005f7e:	2e10      	cmp	r6, #16
 8005f80:	e9dd 312b 	ldrd	r3, r1, [sp, #172]	; 0xac
 8005f84:	aa2d      	add	r2, sp, #180	; 0xb4
 8005f86:	dce8      	bgt.n	8005f5a <_svfprintf_r+0x8f6>
 8005f88:	4645      	mov	r5, r8
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	4690      	mov	r8, r2
 8005f8e:	3301      	adds	r3, #1
 8005f90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f92:	f8c8 2000 	str.w	r2, [r8]
 8005f96:	4434      	add	r4, r6
 8005f98:	2b07      	cmp	r3, #7
 8005f9a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8005f9e:	f8c8 6004 	str.w	r6, [r8, #4]
 8005fa2:	f300 81ae 	bgt.w	8006302 <_svfprintf_r+0xc9e>
 8005fa6:	f108 0808 	add.w	r8, r8, #8
 8005faa:	e536      	b.n	8005a1a <_svfprintf_r+0x3b6>
 8005fac:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8005fae:	4951      	ldr	r1, [pc, #324]	; (80060f4 <_svfprintf_r+0xa90>)
 8005fb0:	f8c8 1000 	str.w	r1, [r8]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	3401      	adds	r4, #1
 8005fb8:	2101      	movs	r1, #1
 8005fba:	2b07      	cmp	r3, #7
 8005fbc:	942c      	str	r4, [sp, #176]	; 0xb0
 8005fbe:	932b      	str	r3, [sp, #172]	; 0xac
 8005fc0:	f8c8 1004 	str.w	r1, [r8, #4]
 8005fc4:	f300 852f 	bgt.w	8006a26 <_svfprintf_r+0x13c2>
 8005fc8:	f108 0808 	add.w	r8, r8, #8
 8005fcc:	2a00      	cmp	r2, #0
 8005fce:	f040 84a5 	bne.w	800691c <_svfprintf_r+0x12b8>
 8005fd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005fd4:	f00a 0301 	and.w	r3, sl, #1
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f43f ad31 	beq.w	8005a40 <_svfprintf_r+0x3dc>
 8005fde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fe0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005fe2:	441c      	add	r4, r3
 8005fe4:	e9c8 2300 	strd	r2, r3, [r8]
 8005fe8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8005fea:	942c      	str	r4, [sp, #176]	; 0xb0
 8005fec:	3301      	adds	r3, #1
 8005fee:	2b07      	cmp	r3, #7
 8005ff0:	932b      	str	r3, [sp, #172]	; 0xac
 8005ff2:	f300 853c 	bgt.w	8006a6e <_svfprintf_r+0x140a>
 8005ff6:	f108 0808 	add.w	r8, r8, #8
 8005ffa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005ffc:	f8c8 5000 	str.w	r5, [r8]
 8006000:	3301      	adds	r3, #1
 8006002:	4414      	add	r4, r2
 8006004:	2b07      	cmp	r3, #7
 8006006:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 800600a:	f8c8 2004 	str.w	r2, [r8, #4]
 800600e:	f77f ad15 	ble.w	8005a3c <_svfprintf_r+0x3d8>
 8006012:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006014:	aa2a      	add	r2, sp, #168	; 0xa8
 8006016:	4648      	mov	r0, r9
 8006018:	f003 fdce 	bl	8009bb8 <__ssprint_r>
 800601c:	2800      	cmp	r0, #0
 800601e:	f47f ac96 	bne.w	800594e <_svfprintf_r+0x2ea>
 8006022:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8006024:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8006028:	e50a      	b.n	8005a40 <_svfprintf_r+0x3dc>
 800602a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800602c:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 800602e:	2b01      	cmp	r3, #1
 8006030:	f104 0401 	add.w	r4, r4, #1
 8006034:	f106 0601 	add.w	r6, r6, #1
 8006038:	f108 0708 	add.w	r7, r8, #8
 800603c:	f340 8119 	ble.w	8006272 <_svfprintf_r+0xc0e>
 8006040:	2301      	movs	r3, #1
 8006042:	2e07      	cmp	r6, #7
 8006044:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
 8006048:	f8c8 5000 	str.w	r5, [r8]
 800604c:	f8c8 3004 	str.w	r3, [r8, #4]
 8006050:	f300 8183 	bgt.w	800635a <_svfprintf_r+0xcf6>
 8006054:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006056:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006058:	3601      	adds	r6, #1
 800605a:	441c      	add	r4, r3
 800605c:	2e07      	cmp	r6, #7
 800605e:	e9c7 2300 	strd	r2, r3, [r7]
 8006062:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
 8006066:	f300 8184 	bgt.w	8006372 <_svfprintf_r+0xd0e>
 800606a:	3708      	adds	r7, #8
 800606c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800606e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8006072:	f103 38ff 	add.w	r8, r3, #4294967295
 8006076:	2200      	movs	r2, #0
 8006078:	2300      	movs	r3, #0
 800607a:	f7fa fd9f 	bl	8000bbc <__aeabi_dcmpeq>
 800607e:	2800      	cmp	r0, #0
 8006080:	f040 8111 	bne.w	80062a6 <_svfprintf_r+0xc42>
 8006084:	3601      	adds	r6, #1
 8006086:	3501      	adds	r5, #1
 8006088:	4444      	add	r4, r8
 800608a:	2e07      	cmp	r6, #7
 800608c:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
 8006090:	603d      	str	r5, [r7, #0]
 8006092:	f8c7 8004 	str.w	r8, [r7, #4]
 8006096:	f300 80fa 	bgt.w	800628e <_svfprintf_r+0xc2a>
 800609a:	3708      	adds	r7, #8
 800609c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800609e:	607b      	str	r3, [r7, #4]
 80060a0:	3601      	adds	r6, #1
 80060a2:	441c      	add	r4, r3
 80060a4:	2e07      	cmp	r6, #7
 80060a6:	ab26      	add	r3, sp, #152	; 0x98
 80060a8:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
 80060ac:	603b      	str	r3, [r7, #0]
 80060ae:	dcb0      	bgt.n	8006012 <_svfprintf_r+0x9ae>
 80060b0:	f107 0808 	add.w	r8, r7, #8
 80060b4:	e4c4      	b.n	8005a40 <_svfprintf_r+0x3dc>
 80060b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80060b8:	aa2a      	add	r2, sp, #168	; 0xa8
 80060ba:	4648      	mov	r0, r9
 80060bc:	f003 fd7c 	bl	8009bb8 <__ssprint_r>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	f47f ac44 	bne.w	800594e <_svfprintf_r+0x2ea>
 80060c6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80060c8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 80060cc:	e488      	b.n	80059e0 <_svfprintf_r+0x37c>
 80060ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80060d0:	aa2a      	add	r2, sp, #168	; 0xa8
 80060d2:	4648      	mov	r0, r9
 80060d4:	f003 fd70 	bl	8009bb8 <__ssprint_r>
 80060d8:	2800      	cmp	r0, #0
 80060da:	f47f ac38 	bne.w	800594e <_svfprintf_r+0x2ea>
 80060de:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80060e0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 80060e4:	e48f      	b.n	8005a06 <_svfprintf_r+0x3a2>
 80060e6:	2d10      	cmp	r5, #16
 80060e8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80060ea:	dd24      	ble.n	8006136 <_svfprintf_r+0xad2>
 80060ec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80060ee:	2610      	movs	r6, #16
 80060f0:	e009      	b.n	8006106 <_svfprintf_r+0xaa2>
 80060f2:	bf00      	nop
 80060f4:	0800c960 	.word	0x0800c960
 80060f8:	0800c974 	.word	0x0800c974
 80060fc:	3d10      	subs	r5, #16
 80060fe:	2d10      	cmp	r5, #16
 8006100:	f108 0808 	add.w	r8, r8, #8
 8006104:	dd17      	ble.n	8006136 <_svfprintf_r+0xad2>
 8006106:	3301      	adds	r3, #1
 8006108:	4ab6      	ldr	r2, [pc, #728]	; (80063e4 <_svfprintf_r+0xd80>)
 800610a:	3410      	adds	r4, #16
 800610c:	2b07      	cmp	r3, #7
 800610e:	e9c8 2600 	strd	r2, r6, [r8]
 8006112:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8006116:	ddf1      	ble.n	80060fc <_svfprintf_r+0xa98>
 8006118:	aa2a      	add	r2, sp, #168	; 0xa8
 800611a:	4639      	mov	r1, r7
 800611c:	4648      	mov	r0, r9
 800611e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8006122:	f003 fd49 	bl	8009bb8 <__ssprint_r>
 8006126:	2800      	cmp	r0, #0
 8006128:	f47f ac11 	bne.w	800594e <_svfprintf_r+0x2ea>
 800612c:	3d10      	subs	r5, #16
 800612e:	2d10      	cmp	r5, #16
 8006130:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 8006134:	dce7      	bgt.n	8006106 <_svfprintf_r+0xaa2>
 8006136:	3301      	adds	r3, #1
 8006138:	4aaa      	ldr	r2, [pc, #680]	; (80063e4 <_svfprintf_r+0xd80>)
 800613a:	f8c8 5004 	str.w	r5, [r8, #4]
 800613e:	442c      	add	r4, r5
 8006140:	2b07      	cmp	r3, #7
 8006142:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8006146:	f8c8 2000 	str.w	r2, [r8]
 800614a:	f77f ac82 	ble.w	8005a52 <_svfprintf_r+0x3ee>
 800614e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006150:	aa2a      	add	r2, sp, #168	; 0xa8
 8006152:	4648      	mov	r0, r9
 8006154:	f003 fd30 	bl	8009bb8 <__ssprint_r>
 8006158:	2800      	cmp	r0, #0
 800615a:	f47f abf8 	bne.w	800594e <_svfprintf_r+0x2ea>
 800615e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8006160:	e477      	b.n	8005a52 <_svfprintf_r+0x3ee>
 8006162:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006164:	2a00      	cmp	r2, #0
 8006166:	f77f af21 	ble.w	8005fac <_svfprintf_r+0x948>
 800616a:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
 800616e:	429f      	cmp	r7, r3
 8006170:	bfa8      	it	ge
 8006172:	461f      	movge	r7, r3
 8006174:	2f00      	cmp	r7, #0
 8006176:	dd0b      	ble.n	8006190 <_svfprintf_r+0xb2c>
 8006178:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800617a:	3301      	adds	r3, #1
 800617c:	443c      	add	r4, r7
 800617e:	2b07      	cmp	r3, #7
 8006180:	e9c8 5700 	strd	r5, r7, [r8]
 8006184:	942c      	str	r4, [sp, #176]	; 0xb0
 8006186:	932b      	str	r3, [sp, #172]	; 0xac
 8006188:	f300 84da 	bgt.w	8006b40 <_svfprintf_r+0x14dc>
 800618c:	f108 0808 	add.w	r8, r8, #8
 8006190:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8006192:	2f00      	cmp	r7, #0
 8006194:	bfa8      	it	ge
 8006196:	1bf6      	subge	r6, r6, r7
 8006198:	2e00      	cmp	r6, #0
 800619a:	f300 823a 	bgt.w	8006612 <_svfprintf_r+0xfae>
 800619e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061a0:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 80061a4:	442b      	add	r3, r5
 80061a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061a8:	f040 8262 	bne.w	8006670 <_svfprintf_r+0x100c>
 80061ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80061ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80061b0:	4293      	cmp	r3, r2
 80061b2:	db03      	blt.n	80061bc <_svfprintf_r+0xb58>
 80061b4:	f01a 0f01 	tst.w	sl, #1
 80061b8:	f000 8443 	beq.w	8006a42 <_svfprintf_r+0x13de>
 80061bc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80061be:	991a      	ldr	r1, [sp, #104]	; 0x68
 80061c0:	4414      	add	r4, r2
 80061c2:	e9c8 1200 	strd	r1, r2, [r8]
 80061c6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80061c8:	942c      	str	r4, [sp, #176]	; 0xb0
 80061ca:	3201      	adds	r2, #1
 80061cc:	2a07      	cmp	r2, #7
 80061ce:	922b      	str	r2, [sp, #172]	; 0xac
 80061d0:	f300 84c3 	bgt.w	8006b5a <_svfprintf_r+0x14f6>
 80061d4:	f108 0808 	add.w	r8, r8, #8
 80061d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80061da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061dc:	18ae      	adds	r6, r5, r2
 80061de:	1a76      	subs	r6, r6, r1
 80061e0:	1ad5      	subs	r5, r2, r3
 80061e2:	42ae      	cmp	r6, r5
 80061e4:	bfa8      	it	ge
 80061e6:	462e      	movge	r6, r5
 80061e8:	2e00      	cmp	r6, #0
 80061ea:	dd0d      	ble.n	8006208 <_svfprintf_r+0xba4>
 80061ec:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80061ee:	f8c8 1000 	str.w	r1, [r8]
 80061f2:	3301      	adds	r3, #1
 80061f4:	4434      	add	r4, r6
 80061f6:	2b07      	cmp	r3, #7
 80061f8:	f8c8 6004 	str.w	r6, [r8, #4]
 80061fc:	942c      	str	r4, [sp, #176]	; 0xb0
 80061fe:	932b      	str	r3, [sp, #172]	; 0xac
 8006200:	f300 85c4 	bgt.w	8006d8c <_svfprintf_r+0x1728>
 8006204:	f108 0808 	add.w	r8, r8, #8
 8006208:	2e00      	cmp	r6, #0
 800620a:	bfa8      	it	ge
 800620c:	1bad      	subge	r5, r5, r6
 800620e:	2d00      	cmp	r5, #0
 8006210:	f77f ac16 	ble.w	8005a40 <_svfprintf_r+0x3dc>
 8006214:	2d10      	cmp	r5, #16
 8006216:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8006218:	f340 86cb 	ble.w	8006fb2 <_svfprintf_r+0x194e>
 800621c:	4f72      	ldr	r7, [pc, #456]	; (80063e8 <_svfprintf_r+0xd84>)
 800621e:	970f      	str	r7, [sp, #60]	; 0x3c
 8006220:	4622      	mov	r2, r4
 8006222:	2610      	movs	r6, #16
 8006224:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006226:	e005      	b.n	8006234 <_svfprintf_r+0xbd0>
 8006228:	f108 0808 	add.w	r8, r8, #8
 800622c:	3d10      	subs	r5, #16
 800622e:	2d10      	cmp	r5, #16
 8006230:	f340 8320 	ble.w	8006874 <_svfprintf_r+0x1210>
 8006234:	3301      	adds	r3, #1
 8006236:	3210      	adds	r2, #16
 8006238:	2b07      	cmp	r3, #7
 800623a:	e9c8 7600 	strd	r7, r6, [r8]
 800623e:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
 8006242:	ddf1      	ble.n	8006228 <_svfprintf_r+0xbc4>
 8006244:	aa2a      	add	r2, sp, #168	; 0xa8
 8006246:	4621      	mov	r1, r4
 8006248:	4648      	mov	r0, r9
 800624a:	f003 fcb5 	bl	8009bb8 <__ssprint_r>
 800624e:	2800      	cmp	r0, #0
 8006250:	f47f ab7d 	bne.w	800594e <_svfprintf_r+0x2ea>
 8006254:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
 8006258:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 800625c:	e7e6      	b.n	800622c <_svfprintf_r+0xbc8>
 800625e:	9b08      	ldr	r3, [sp, #32]
 8006260:	2b00      	cmp	r3, #0
 8006262:	f47f ab00 	bne.w	8005866 <_svfprintf_r+0x202>
 8006266:	2300      	movs	r3, #0
 8006268:	9308      	str	r3, [sp, #32]
 800626a:	930b      	str	r3, [sp, #44]	; 0x2c
 800626c:	ad56      	add	r5, sp, #344	; 0x158
 800626e:	f7ff bb03 	b.w	8005878 <_svfprintf_r+0x214>
 8006272:	f01a 0f01 	tst.w	sl, #1
 8006276:	f47f aee3 	bne.w	8006040 <_svfprintf_r+0x9dc>
 800627a:	2301      	movs	r3, #1
 800627c:	2e07      	cmp	r6, #7
 800627e:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
 8006282:	f8c8 5000 	str.w	r5, [r8]
 8006286:	f8c8 3004 	str.w	r3, [r8, #4]
 800628a:	f77f af07 	ble.w	800609c <_svfprintf_r+0xa38>
 800628e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006290:	aa2a      	add	r2, sp, #168	; 0xa8
 8006292:	4648      	mov	r0, r9
 8006294:	f003 fc90 	bl	8009bb8 <__ssprint_r>
 8006298:	2800      	cmp	r0, #0
 800629a:	f47f ab58 	bne.w	800594e <_svfprintf_r+0x2ea>
 800629e:	e9dd 642b 	ldrd	r6, r4, [sp, #172]	; 0xac
 80062a2:	af2d      	add	r7, sp, #180	; 0xb4
 80062a4:	e6fa      	b.n	800609c <_svfprintf_r+0xa38>
 80062a6:	f1b8 0f00 	cmp.w	r8, #0
 80062aa:	f77f aef7 	ble.w	800609c <_svfprintf_r+0xa38>
 80062ae:	4b4e      	ldr	r3, [pc, #312]	; (80063e8 <_svfprintf_r+0xd84>)
 80062b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80062b2:	f1b8 0f10 	cmp.w	r8, #16
 80062b6:	f340 8325 	ble.w	8006904 <_svfprintf_r+0x12a0>
 80062ba:	4622      	mov	r2, r4
 80062bc:	f8cd a020 	str.w	sl, [sp, #32]
 80062c0:	2510      	movs	r5, #16
 80062c2:	46ca      	mov	sl, r9
 80062c4:	461c      	mov	r4, r3
 80062c6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80062ca:	e006      	b.n	80062da <_svfprintf_r+0xc76>
 80062cc:	3708      	adds	r7, #8
 80062ce:	f1a8 0810 	sub.w	r8, r8, #16
 80062d2:	f1b8 0f10 	cmp.w	r8, #16
 80062d6:	f340 8311 	ble.w	80068fc <_svfprintf_r+0x1298>
 80062da:	3601      	adds	r6, #1
 80062dc:	3210      	adds	r2, #16
 80062de:	2e07      	cmp	r6, #7
 80062e0:	e9c7 4500 	strd	r4, r5, [r7]
 80062e4:	e9cd 622b 	strd	r6, r2, [sp, #172]	; 0xac
 80062e8:	ddf0      	ble.n	80062cc <_svfprintf_r+0xc68>
 80062ea:	aa2a      	add	r2, sp, #168	; 0xa8
 80062ec:	4649      	mov	r1, r9
 80062ee:	4650      	mov	r0, sl
 80062f0:	f003 fc62 	bl	8009bb8 <__ssprint_r>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	f47f ab2a 	bne.w	800594e <_svfprintf_r+0x2ea>
 80062fa:	e9dd 622b 	ldrd	r6, r2, [sp, #172]	; 0xac
 80062fe:	af2d      	add	r7, sp, #180	; 0xb4
 8006300:	e7e5      	b.n	80062ce <_svfprintf_r+0xc6a>
 8006302:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006304:	aa2a      	add	r2, sp, #168	; 0xa8
 8006306:	4648      	mov	r0, r9
 8006308:	f003 fc56 	bl	8009bb8 <__ssprint_r>
 800630c:	2800      	cmp	r0, #0
 800630e:	f47f ab1e 	bne.w	800594e <_svfprintf_r+0x2ea>
 8006312:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8006314:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8006318:	f7ff bb7f 	b.w	8005a1a <_svfprintf_r+0x3b6>
 800631c:	9a07      	ldr	r2, [sp, #28]
 800631e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006320:	f012 0210 	ands.w	r2, r2, #16
 8006324:	f101 0304 	add.w	r3, r1, #4
 8006328:	f040 8127 	bne.w	800657a <_svfprintf_r+0xf16>
 800632c:	9907      	ldr	r1, [sp, #28]
 800632e:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 8006332:	f000 8333 	beq.w	800699c <_svfprintf_r+0x1338>
 8006336:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006338:	930e      	str	r3, [sp, #56]	; 0x38
 800633a:	880c      	ldrh	r4, [r1, #0]
 800633c:	4616      	mov	r6, r2
 800633e:	2301      	movs	r3, #1
 8006340:	f7ff bac0 	b.w	80058c4 <_svfprintf_r+0x260>
 8006344:	232d      	movs	r3, #45	; 0x2d
 8006346:	4264      	negs	r4, r4
 8006348:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 800634c:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 8006350:	f8cd a01c 	str.w	sl, [sp, #28]
 8006354:	2301      	movs	r3, #1
 8006356:	f7ff bab8 	b.w	80058ca <_svfprintf_r+0x266>
 800635a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800635c:	aa2a      	add	r2, sp, #168	; 0xa8
 800635e:	4648      	mov	r0, r9
 8006360:	f003 fc2a 	bl	8009bb8 <__ssprint_r>
 8006364:	2800      	cmp	r0, #0
 8006366:	f47f aaf2 	bne.w	800594e <_svfprintf_r+0x2ea>
 800636a:	e9dd 642b 	ldrd	r6, r4, [sp, #172]	; 0xac
 800636e:	af2d      	add	r7, sp, #180	; 0xb4
 8006370:	e670      	b.n	8006054 <_svfprintf_r+0x9f0>
 8006372:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006374:	aa2a      	add	r2, sp, #168	; 0xa8
 8006376:	4648      	mov	r0, r9
 8006378:	f003 fc1e 	bl	8009bb8 <__ssprint_r>
 800637c:	2800      	cmp	r0, #0
 800637e:	f47f aae6 	bne.w	800594e <_svfprintf_r+0x2ea>
 8006382:	e9dd 642b 	ldrd	r6, r4, [sp, #172]	; 0xac
 8006386:	af2d      	add	r7, sp, #180	; 0xb4
 8006388:	e670      	b.n	800606c <_svfprintf_r+0xa08>
 800638a:	f01a 0f01 	tst.w	sl, #1
 800638e:	f43f ab57 	beq.w	8005a40 <_svfprintf_r+0x3dc>
 8006392:	e54d      	b.n	8005e30 <_svfprintf_r+0x7cc>
 8006394:	f89b 7000 	ldrb.w	r7, [fp]
 8006398:	930e      	str	r3, [sp, #56]	; 0x38
 800639a:	f7ff b9b2 	b.w	8005702 <_svfprintf_r+0x9e>
 800639e:	ad56      	add	r5, sp, #344	; 0x158
 80063a0:	f7ff ba6a 	b.w	8005878 <_svfprintf_r+0x214>
 80063a4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80063a8:	f040 8355 	bne.w	8006a56 <_svfprintf_r+0x13f2>
 80063ac:	6814      	ldr	r4, [r2, #0]
 80063ae:	930e      	str	r3, [sp, #56]	; 0x38
 80063b0:	17e6      	asrs	r6, r4, #31
 80063b2:	4633      	mov	r3, r6
 80063b4:	f7ff ba43 	b.w	800583e <_svfprintf_r+0x1da>
 80063b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	17d2      	asrs	r2, r2, #31
 80063be:	605a      	str	r2, [r3, #4]
 80063c0:	465d      	mov	r5, fp
 80063c2:	f7ff bb5c 	b.w	8005a7e <_svfprintf_r+0x41a>
 80063c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063c8:	f89b 7000 	ldrb.w	r7, [fp]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f43f a998 	beq.w	8005702 <_svfprintf_r+0x9e>
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f43f a994 	beq.w	8005702 <_svfprintf_r+0x9e>
 80063da:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80063de:	f7ff b990 	b.w	8005702 <_svfprintf_r+0x9e>
 80063e2:	bf00      	nop
 80063e4:	0800c964 	.word	0x0800c964
 80063e8:	0800c974 	.word	0x0800c974
 80063ec:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	f7fa fcae 	bl	8000d54 <__aeabi_dcmpun>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	f040 855e 	bne.w	8006eba <_svfprintf_r+0x1856>
 80063fe:	2f61      	cmp	r7, #97	; 0x61
 8006400:	f000 84fd 	beq.w	8006dfe <_svfprintf_r+0x179a>
 8006404:	2f41      	cmp	r7, #65	; 0x41
 8006406:	f000 840c 	beq.w	8006c22 <_svfprintf_r+0x15be>
 800640a:	9a08      	ldr	r2, [sp, #32]
 800640c:	f027 0320 	bic.w	r3, r7, #32
 8006410:	1c51      	adds	r1, r2, #1
 8006412:	9307      	str	r3, [sp, #28]
 8006414:	f000 8346 	beq.w	8006aa4 <_svfprintf_r+0x1440>
 8006418:	2b47      	cmp	r3, #71	; 0x47
 800641a:	d104      	bne.n	8006426 <_svfprintf_r+0xdc2>
 800641c:	2a00      	cmp	r2, #0
 800641e:	4613      	mov	r3, r2
 8006420:	bf08      	it	eq
 8006422:	2301      	moveq	r3, #1
 8006424:	9308      	str	r3, [sp, #32]
 8006426:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800642a:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 800642e:	1e0e      	subs	r6, r1, #0
 8006430:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8006434:	469a      	mov	sl, r3
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	f2c0 8490 	blt.w	8006d5e <_svfprintf_r+0x16fa>
 800643e:	9312      	str	r3, [sp, #72]	; 0x48
 8006440:	900b      	str	r0, [sp, #44]	; 0x2c
 8006442:	930d      	str	r3, [sp, #52]	; 0x34
 8006444:	9b07      	ldr	r3, [sp, #28]
 8006446:	2b46      	cmp	r3, #70	; 0x46
 8006448:	f000 8395 	beq.w	8006b76 <_svfprintf_r+0x1512>
 800644c:	2b45      	cmp	r3, #69	; 0x45
 800644e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006450:	9908      	ldr	r1, [sp, #32]
 8006452:	4633      	mov	r3, r6
 8006454:	f000 84dc 	beq.w	8006e10 <_svfprintf_r+0x17ac>
 8006458:	9101      	str	r1, [sp, #4]
 800645a:	a928      	add	r1, sp, #160	; 0xa0
 800645c:	9104      	str	r1, [sp, #16]
 800645e:	a925      	add	r1, sp, #148	; 0x94
 8006460:	9103      	str	r1, [sp, #12]
 8006462:	a924      	add	r1, sp, #144	; 0x90
 8006464:	9102      	str	r1, [sp, #8]
 8006466:	2102      	movs	r1, #2
 8006468:	9100      	str	r1, [sp, #0]
 800646a:	4648      	mov	r0, r9
 800646c:	f7fa fee4 	bl	8001238 <_dtoa_r>
 8006470:	9b07      	ldr	r3, [sp, #28]
 8006472:	2b47      	cmp	r3, #71	; 0x47
 8006474:	4605      	mov	r5, r0
 8006476:	f040 85c5 	bne.w	8007004 <_svfprintf_r+0x19a0>
 800647a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800647c:	07db      	lsls	r3, r3, #31
 800647e:	f100 8495 	bmi.w	8006dac <_svfprintf_r+0x1748>
 8006482:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006484:	1b5b      	subs	r3, r3, r5
 8006486:	9314      	str	r3, [sp, #80]	; 0x50
 8006488:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800648a:	9313      	str	r3, [sp, #76]	; 0x4c
 800648c:	9b07      	ldr	r3, [sp, #28]
 800648e:	2b47      	cmp	r3, #71	; 0x47
 8006490:	f000 831b 	beq.w	8006aca <_svfprintf_r+0x1466>
 8006494:	9b07      	ldr	r3, [sp, #28]
 8006496:	2b46      	cmp	r3, #70	; 0x46
 8006498:	f000 839e 	beq.w	8006bd8 <_svfprintf_r+0x1574>
 800649c:	9907      	ldr	r1, [sp, #28]
 800649e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064a0:	b2fa      	uxtb	r2, r7
 80064a2:	2941      	cmp	r1, #65	; 0x41
 80064a4:	bf08      	it	eq
 80064a6:	320f      	addeq	r2, #15
 80064a8:	f103 33ff 	add.w	r3, r3, #4294967295
 80064ac:	bf06      	itte	eq
 80064ae:	b2d2      	uxtbeq	r2, r2
 80064b0:	2101      	moveq	r1, #1
 80064b2:	2100      	movne	r1, #0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	9324      	str	r3, [sp, #144]	; 0x90
 80064b8:	bfb8      	it	lt
 80064ba:	9b13      	ldrlt	r3, [sp, #76]	; 0x4c
 80064bc:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 80064c0:	bfba      	itte	lt
 80064c2:	f1c3 0301 	rsblt	r3, r3, #1
 80064c6:	222d      	movlt	r2, #45	; 0x2d
 80064c8:	222b      	movge	r2, #43	; 0x2b
 80064ca:	2b09      	cmp	r3, #9
 80064cc:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
 80064d0:	f340 84cb 	ble.w	8006e6a <_svfprintf_r+0x1806>
 80064d4:	f10d 04a7 	add.w	r4, sp, #167	; 0xa7
 80064d8:	4eb5      	ldr	r6, [pc, #724]	; (80067b0 <_svfprintf_r+0x114c>)
 80064da:	4622      	mov	r2, r4
 80064dc:	4610      	mov	r0, r2
 80064de:	fb86 2103 	smull	r2, r1, r6, r3
 80064e2:	17da      	asrs	r2, r3, #31
 80064e4:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80064e8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80064ec:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 80064f0:	3130      	adds	r1, #48	; 0x30
 80064f2:	f800 1c01 	strb.w	r1, [r0, #-1]
 80064f6:	4619      	mov	r1, r3
 80064f8:	2963      	cmp	r1, #99	; 0x63
 80064fa:	4613      	mov	r3, r2
 80064fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8006500:	dcec      	bgt.n	80064dc <_svfprintf_r+0xe78>
 8006502:	3330      	adds	r3, #48	; 0x30
 8006504:	b2d9      	uxtb	r1, r3
 8006506:	1e83      	subs	r3, r0, #2
 8006508:	429c      	cmp	r4, r3
 800650a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800650e:	f240 856d 	bls.w	8006fec <_svfprintf_r+0x1988>
 8006512:	4613      	mov	r3, r2
 8006514:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
 8006518:	e001      	b.n	800651e <_svfprintf_r+0xeba>
 800651a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800651e:	f802 1b01 	strb.w	r1, [r2], #1
 8006522:	429c      	cmp	r4, r3
 8006524:	d1f9      	bne.n	800651a <_svfprintf_r+0xeb6>
 8006526:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
 800652a:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
 800652e:	1a1b      	subs	r3, r3, r0
 8006530:	4413      	add	r3, r2
 8006532:	aa26      	add	r2, sp, #152	; 0x98
 8006534:	1a9b      	subs	r3, r3, r2
 8006536:	931c      	str	r3, [sp, #112]	; 0x70
 8006538:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800653a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800653c:	2b01      	cmp	r3, #1
 800653e:	441a      	add	r2, r3
 8006540:	920b      	str	r2, [sp, #44]	; 0x2c
 8006542:	f340 84fa 	ble.w	8006f3a <_svfprintf_r+0x18d6>
 8006546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006548:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800654a:	4413      	add	r3, r2
 800654c:	930b      	str	r3, [sp, #44]	; 0x2c
 800654e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006550:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006552:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006556:	f443 7a80 	orr.w	sl, r3, #256	; 0x100
 800655a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800655e:	2300      	movs	r3, #0
 8006560:	9310      	str	r3, [sp, #64]	; 0x40
 8006562:	9207      	str	r2, [sp, #28]
 8006564:	9315      	str	r3, [sp, #84]	; 0x54
 8006566:	9313      	str	r3, [sp, #76]	; 0x4c
 8006568:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800656a:	2b00      	cmp	r3, #0
 800656c:	f040 82d4 	bne.w	8006b18 <_svfprintf_r+0x14b4>
 8006570:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8006574:	9308      	str	r3, [sp, #32]
 8006576:	f7ff b98d 	b.w	8005894 <_svfprintf_r+0x230>
 800657a:	930e      	str	r3, [sp, #56]	; 0x38
 800657c:	680c      	ldr	r4, [r1, #0]
 800657e:	2301      	movs	r3, #1
 8006580:	f7ff b9a0 	b.w	80058c4 <_svfprintf_r+0x260>
 8006584:	680c      	ldr	r4, [r1, #0]
 8006586:	930e      	str	r3, [sp, #56]	; 0x38
 8006588:	f7ff b998 	b.w	80058bc <_svfprintf_r+0x258>
 800658c:	f8cd a01c 	str.w	sl, [sp, #28]
 8006590:	f7ff bb90 	b.w	8005cb4 <_svfprintf_r+0x650>
 8006594:	4b87      	ldr	r3, [pc, #540]	; (80067b4 <_svfprintf_r+0x1150>)
 8006596:	931b      	str	r3, [sp, #108]	; 0x6c
 8006598:	f01a 0620 	ands.w	r6, sl, #32
 800659c:	f000 80e3 	beq.w	8006766 <_svfprintf_r+0x1102>
 80065a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065a2:	3307      	adds	r3, #7
 80065a4:	f023 0307 	bic.w	r3, r3, #7
 80065a8:	685e      	ldr	r6, [r3, #4]
 80065aa:	f853 4b08 	ldr.w	r4, [r3], #8
 80065ae:	930e      	str	r3, [sp, #56]	; 0x38
 80065b0:	f01a 0f01 	tst.w	sl, #1
 80065b4:	d009      	beq.n	80065ca <_svfprintf_r+0xf66>
 80065b6:	ea54 0306 	orrs.w	r3, r4, r6
 80065ba:	d006      	beq.n	80065ca <_svfprintf_r+0xf66>
 80065bc:	2330      	movs	r3, #48	; 0x30
 80065be:	f88d 708d 	strb.w	r7, [sp, #141]	; 0x8d
 80065c2:	f04a 0a02 	orr.w	sl, sl, #2
 80065c6:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 80065ca:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 80065ce:	9307      	str	r3, [sp, #28]
 80065d0:	2302      	movs	r3, #2
 80065d2:	f7ff b977 	b.w	80058c4 <_svfprintf_r+0x260>
 80065d6:	4b78      	ldr	r3, [pc, #480]	; (80067b8 <_svfprintf_r+0x1154>)
 80065d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80065da:	e7dd      	b.n	8006598 <_svfprintf_r+0xf34>
 80065dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065de:	aa2a      	add	r2, sp, #168	; 0xa8
 80065e0:	4648      	mov	r0, r9
 80065e2:	f003 fae9 	bl	8009bb8 <__ssprint_r>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	f47f a9b1 	bne.w	800594e <_svfprintf_r+0x2ea>
 80065ec:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80065ee:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 80065f2:	e42b      	b.n	8005e4c <_svfprintf_r+0x7e8>
 80065f4:	9818      	ldr	r0, [sp, #96]	; 0x60
 80065f6:	2140      	movs	r1, #64	; 0x40
 80065f8:	f7fe fc9c 	bl	8004f34 <_malloc_r>
 80065fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065fe:	6018      	str	r0, [r3, #0]
 8006600:	6118      	str	r0, [r3, #16]
 8006602:	2800      	cmp	r0, #0
 8006604:	f000 84ea 	beq.w	8006fdc <_svfprintf_r+0x1978>
 8006608:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800660a:	2340      	movs	r3, #64	; 0x40
 800660c:	6153      	str	r3, [r2, #20]
 800660e:	f7ff b840 	b.w	8005692 <_svfprintf_r+0x2e>
 8006612:	2e10      	cmp	r6, #16
 8006614:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8006616:	f340 84d2 	ble.w	8006fbe <_svfprintf_r+0x195a>
 800661a:	4868      	ldr	r0, [pc, #416]	; (80067bc <_svfprintf_r+0x1158>)
 800661c:	900f      	str	r0, [sp, #60]	; 0x3c
 800661e:	4642      	mov	r2, r8
 8006620:	4621      	mov	r1, r4
 8006622:	46a8      	mov	r8, r5
 8006624:	2710      	movs	r7, #16
 8006626:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006628:	4604      	mov	r4, r0
 800662a:	e004      	b.n	8006636 <_svfprintf_r+0xfd2>
 800662c:	3208      	adds	r2, #8
 800662e:	3e10      	subs	r6, #16
 8006630:	2e10      	cmp	r6, #16
 8006632:	f340 81e6 	ble.w	8006a02 <_svfprintf_r+0x139e>
 8006636:	3301      	adds	r3, #1
 8006638:	3110      	adds	r1, #16
 800663a:	2b07      	cmp	r3, #7
 800663c:	e9c2 4700 	strd	r4, r7, [r2]
 8006640:	e9cd 312b 	strd	r3, r1, [sp, #172]	; 0xac
 8006644:	ddf2      	ble.n	800662c <_svfprintf_r+0xfc8>
 8006646:	aa2a      	add	r2, sp, #168	; 0xa8
 8006648:	4629      	mov	r1, r5
 800664a:	4648      	mov	r0, r9
 800664c:	f003 fab4 	bl	8009bb8 <__ssprint_r>
 8006650:	2800      	cmp	r0, #0
 8006652:	f47f a97c 	bne.w	800594e <_svfprintf_r+0x2ea>
 8006656:	e9dd 312b 	ldrd	r3, r1, [sp, #172]	; 0xac
 800665a:	aa2d      	add	r2, sp, #180	; 0xb4
 800665c:	e7e7      	b.n	800662e <_svfprintf_r+0xfca>
 800665e:	4628      	mov	r0, r5
 8006660:	9608      	str	r6, [sp, #32]
 8006662:	940e      	str	r4, [sp, #56]	; 0x38
 8006664:	f7f9 fdac 	bl	80001c0 <strlen>
 8006668:	4603      	mov	r3, r0
 800666a:	900b      	str	r0, [sp, #44]	; 0x2c
 800666c:	f7ff bad2 	b.w	8005c14 <_svfprintf_r+0x5b0>
 8006670:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006672:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006674:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8006678:	4642      	mov	r2, r8
 800667a:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800667e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8006682:	18eb      	adds	r3, r5, r3
 8006684:	9308      	str	r3, [sp, #32]
 8006686:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8006688:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 800668c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8006690:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006692:	9512      	str	r5, [sp, #72]	; 0x48
 8006694:	4621      	mov	r1, r4
 8006696:	f1b8 0f00 	cmp.w	r8, #0
 800669a:	d02e      	beq.n	80066fa <_svfprintf_r+0x1096>
 800669c:	bb83      	cbnz	r3, 8006700 <_svfprintf_r+0x109c>
 800669e:	3f01      	subs	r7, #1
 80066a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80066a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80066a6:	e9c2 3a00 	strd	r3, sl, [r2]
 80066aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80066ac:	3301      	adds	r3, #1
 80066ae:	4451      	add	r1, sl
 80066b0:	2b07      	cmp	r3, #7
 80066b2:	912c      	str	r1, [sp, #176]	; 0xb0
 80066b4:	932b      	str	r3, [sp, #172]	; 0xac
 80066b6:	dc5f      	bgt.n	8006778 <_svfprintf_r+0x1114>
 80066b8:	3208      	adds	r2, #8
 80066ba:	9b08      	ldr	r3, [sp, #32]
 80066bc:	7838      	ldrb	r0, [r7, #0]
 80066be:	1b9b      	subs	r3, r3, r6
 80066c0:	4283      	cmp	r3, r0
 80066c2:	bfa8      	it	ge
 80066c4:	4603      	movge	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	461c      	mov	r4, r3
 80066ca:	dd0b      	ble.n	80066e4 <_svfprintf_r+0x1080>
 80066cc:	982b      	ldr	r0, [sp, #172]	; 0xac
 80066ce:	3001      	adds	r0, #1
 80066d0:	4419      	add	r1, r3
 80066d2:	2807      	cmp	r0, #7
 80066d4:	e9c2 6300 	strd	r6, r3, [r2]
 80066d8:	912c      	str	r1, [sp, #176]	; 0xb0
 80066da:	902b      	str	r0, [sp, #172]	; 0xac
 80066dc:	f300 80d9 	bgt.w	8006892 <_svfprintf_r+0x122e>
 80066e0:	7838      	ldrb	r0, [r7, #0]
 80066e2:	3208      	adds	r2, #8
 80066e4:	2c00      	cmp	r4, #0
 80066e6:	bfac      	ite	ge
 80066e8:	1b05      	subge	r5, r0, r4
 80066ea:	4605      	movlt	r5, r0
 80066ec:	2d00      	cmp	r5, #0
 80066ee:	dc0b      	bgt.n	8006708 <_svfprintf_r+0x10a4>
 80066f0:	4406      	add	r6, r0
 80066f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066f4:	f1b8 0f00 	cmp.w	r8, #0
 80066f8:	d1d0      	bne.n	800669c <_svfprintf_r+0x1038>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 81d5 	beq.w	8006aaa <_svfprintf_r+0x1446>
 8006700:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006702:	3b01      	subs	r3, #1
 8006704:	9310      	str	r3, [sp, #64]	; 0x40
 8006706:	e7cd      	b.n	80066a4 <_svfprintf_r+0x1040>
 8006708:	2d10      	cmp	r5, #16
 800670a:	982b      	ldr	r0, [sp, #172]	; 0xac
 800670c:	dd1d      	ble.n	800674a <_svfprintf_r+0x10e6>
 800670e:	2410      	movs	r4, #16
 8006710:	e004      	b.n	800671c <_svfprintf_r+0x10b8>
 8006712:	3d10      	subs	r5, #16
 8006714:	2d10      	cmp	r5, #16
 8006716:	f102 0208 	add.w	r2, r2, #8
 800671a:	dd16      	ble.n	800674a <_svfprintf_r+0x10e6>
 800671c:	3001      	adds	r0, #1
 800671e:	4b27      	ldr	r3, [pc, #156]	; (80067bc <_svfprintf_r+0x1158>)
 8006720:	3110      	adds	r1, #16
 8006722:	2807      	cmp	r0, #7
 8006724:	e9c2 3400 	strd	r3, r4, [r2]
 8006728:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
 800672c:	ddf1      	ble.n	8006712 <_svfprintf_r+0x10ae>
 800672e:	aa2a      	add	r2, sp, #168	; 0xa8
 8006730:	4659      	mov	r1, fp
 8006732:	4648      	mov	r0, r9
 8006734:	f003 fa40 	bl	8009bb8 <__ssprint_r>
 8006738:	2800      	cmp	r0, #0
 800673a:	f47f a908 	bne.w	800594e <_svfprintf_r+0x2ea>
 800673e:	3d10      	subs	r5, #16
 8006740:	2d10      	cmp	r5, #16
 8006742:	e9dd 012b 	ldrd	r0, r1, [sp, #172]	; 0xac
 8006746:	aa2d      	add	r2, sp, #180	; 0xb4
 8006748:	dce8      	bgt.n	800671c <_svfprintf_r+0x10b8>
 800674a:	3001      	adds	r0, #1
 800674c:	4b1b      	ldr	r3, [pc, #108]	; (80067bc <_svfprintf_r+0x1158>)
 800674e:	6055      	str	r5, [r2, #4]
 8006750:	4429      	add	r1, r5
 8006752:	2807      	cmp	r0, #7
 8006754:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	f300 81e4 	bgt.w	8006b26 <_svfprintf_r+0x14c2>
 800675e:	7838      	ldrb	r0, [r7, #0]
 8006760:	3208      	adds	r2, #8
 8006762:	4406      	add	r6, r0
 8006764:	e7c5      	b.n	80066f2 <_svfprintf_r+0x108e>
 8006766:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006768:	f01a 0210 	ands.w	r2, sl, #16
 800676c:	f101 0304 	add.w	r3, r1, #4
 8006770:	d066      	beq.n	8006840 <_svfprintf_r+0x11dc>
 8006772:	680c      	ldr	r4, [r1, #0]
 8006774:	930e      	str	r3, [sp, #56]	; 0x38
 8006776:	e71b      	b.n	80065b0 <_svfprintf_r+0xf4c>
 8006778:	aa2a      	add	r2, sp, #168	; 0xa8
 800677a:	4659      	mov	r1, fp
 800677c:	4648      	mov	r0, r9
 800677e:	f003 fa1b 	bl	8009bb8 <__ssprint_r>
 8006782:	2800      	cmp	r0, #0
 8006784:	f47f a8e3 	bne.w	800594e <_svfprintf_r+0x2ea>
 8006788:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800678a:	aa2d      	add	r2, sp, #180	; 0xb4
 800678c:	e795      	b.n	80066ba <_svfprintf_r+0x1056>
 800678e:	9b07      	ldr	r3, [sp, #28]
 8006790:	970b      	str	r7, [sp, #44]	; 0x2c
 8006792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006796:	2200      	movs	r2, #0
 8006798:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800679c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80067a0:	f50d 7aac 	add.w	sl, sp, #344	; 0x158
 80067a4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80067a8:	4617      	mov	r7, r2
 80067aa:	469b      	mov	fp, r3
 80067ac:	e015      	b.n	80067da <_svfprintf_r+0x1176>
 80067ae:	bf00      	nop
 80067b0:	66666667 	.word	0x66666667
 80067b4:	0800c930 	.word	0x0800c930
 80067b8:	0800c944 	.word	0x0800c944
 80067bc:	0800c974 	.word	0x0800c974
 80067c0:	2300      	movs	r3, #0
 80067c2:	4620      	mov	r0, r4
 80067c4:	4631      	mov	r1, r6
 80067c6:	220a      	movs	r2, #10
 80067c8:	f7fa f988 	bl	8000adc <__aeabi_uldivmod>
 80067cc:	2c0a      	cmp	r4, #10
 80067ce:	f176 0300 	sbcs.w	r3, r6, #0
 80067d2:	d31c      	bcc.n	800680e <_svfprintf_r+0x11aa>
 80067d4:	4604      	mov	r4, r0
 80067d6:	460e      	mov	r6, r1
 80067d8:	46aa      	mov	sl, r5
 80067da:	4620      	mov	r0, r4
 80067dc:	220a      	movs	r2, #10
 80067de:	2300      	movs	r3, #0
 80067e0:	4631      	mov	r1, r6
 80067e2:	f7fa f97b 	bl	8000adc <__aeabi_uldivmod>
 80067e6:	3230      	adds	r2, #48	; 0x30
 80067e8:	f10a 35ff 	add.w	r5, sl, #4294967295
 80067ec:	3701      	adds	r7, #1
 80067ee:	f80a 2c01 	strb.w	r2, [sl, #-1]
 80067f2:	f1bb 0f00 	cmp.w	fp, #0
 80067f6:	d0e3      	beq.n	80067c0 <_svfprintf_r+0x115c>
 80067f8:	f898 3000 	ldrb.w	r3, [r8]
 80067fc:	429f      	cmp	r7, r3
 80067fe:	d1df      	bne.n	80067c0 <_svfprintf_r+0x115c>
 8006800:	2fff      	cmp	r7, #255	; 0xff
 8006802:	d0dd      	beq.n	80067c0 <_svfprintf_r+0x115c>
 8006804:	2c0a      	cmp	r4, #10
 8006806:	f176 0300 	sbcs.w	r3, r6, #0
 800680a:	f080 80e6 	bcs.w	80069da <_svfprintf_r+0x1376>
 800680e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006812:	9714      	str	r7, [sp, #80]	; 0x50
 8006814:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8006818:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800681a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800681e:	f7ff bab6 	b.w	8005d8e <_svfprintf_r+0x72a>
 8006822:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006824:	aa2a      	add	r2, sp, #168	; 0xa8
 8006826:	4648      	mov	r0, r9
 8006828:	f003 f9c6 	bl	8009bb8 <__ssprint_r>
 800682c:	2800      	cmp	r0, #0
 800682e:	f47f a88e 	bne.w	800594e <_svfprintf_r+0x2ea>
 8006832:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8006836:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8006838:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 800683c:	f7ff b8bd 	b.w	80059ba <_svfprintf_r+0x356>
 8006840:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 8006844:	f000 80a1 	beq.w	800698a <_svfprintf_r+0x1326>
 8006848:	990e      	ldr	r1, [sp, #56]	; 0x38
 800684a:	930e      	str	r3, [sp, #56]	; 0x38
 800684c:	880c      	ldrh	r4, [r1, #0]
 800684e:	4616      	mov	r6, r2
 8006850:	e6ae      	b.n	80065b0 <_svfprintf_r+0xf4c>
 8006852:	f8cd a01c 	str.w	sl, [sp, #28]
 8006856:	f7ff b801 	b.w	800585c <_svfprintf_r+0x1f8>
 800685a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800685c:	aa2a      	add	r2, sp, #168	; 0xa8
 800685e:	4648      	mov	r0, r9
 8006860:	f003 f9aa 	bl	8009bb8 <__ssprint_r>
 8006864:	2800      	cmp	r0, #0
 8006866:	f47f a872 	bne.w	800594e <_svfprintf_r+0x2ea>
 800686a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800686c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8006870:	f7ff bad9 	b.w	8005e26 <_svfprintf_r+0x7c2>
 8006874:	4614      	mov	r4, r2
 8006876:	3301      	adds	r3, #1
 8006878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800687a:	f8c8 2000 	str.w	r2, [r8]
 800687e:	442c      	add	r4, r5
 8006880:	2b07      	cmp	r3, #7
 8006882:	f8c8 5004 	str.w	r5, [r8, #4]
 8006886:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 800688a:	f77f a8d7 	ble.w	8005a3c <_svfprintf_r+0x3d8>
 800688e:	f7ff bbc0 	b.w	8006012 <_svfprintf_r+0x9ae>
 8006892:	aa2a      	add	r2, sp, #168	; 0xa8
 8006894:	4659      	mov	r1, fp
 8006896:	4648      	mov	r0, r9
 8006898:	f003 f98e 	bl	8009bb8 <__ssprint_r>
 800689c:	2800      	cmp	r0, #0
 800689e:	f47f a856 	bne.w	800594e <_svfprintf_r+0x2ea>
 80068a2:	7838      	ldrb	r0, [r7, #0]
 80068a4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80068a6:	aa2d      	add	r2, sp, #180	; 0xb4
 80068a8:	e71c      	b.n	80066e4 <_svfprintf_r+0x1080>
 80068aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068ac:	aa2a      	add	r2, sp, #168	; 0xa8
 80068ae:	4648      	mov	r0, r9
 80068b0:	f003 f982 	bl	8009bb8 <__ssprint_r>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	f47f a84a 	bne.w	800594e <_svfprintf_r+0x2ea>
 80068ba:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80068bc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 80068c0:	f7ff b8a5 	b.w	8005a0e <_svfprintf_r+0x3aa>
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	f8cd a01c 	str.w	sl, [sp, #28]
 80068ca:	f47f aa50 	bne.w	8005d6e <_svfprintf_r+0x70a>
 80068ce:	f7fe bfca 	b.w	8005866 <_svfprintf_r+0x202>
 80068d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	465d      	mov	r5, fp
 80068d8:	f7ff b8d1 	b.w	8005a7e <_svfprintf_r+0x41a>
 80068dc:	2b06      	cmp	r3, #6
 80068de:	4629      	mov	r1, r5
 80068e0:	bf28      	it	cs
 80068e2:	2306      	movcs	r3, #6
 80068e4:	9508      	str	r5, [sp, #32]
 80068e6:	950d      	str	r5, [sp, #52]	; 0x34
 80068e8:	462a      	mov	r2, r5
 80068ea:	9307      	str	r3, [sp, #28]
 80068ec:	4db2      	ldr	r5, [pc, #712]	; (8006bb8 <_svfprintf_r+0x1554>)
 80068ee:	940e      	str	r4, [sp, #56]	; 0x38
 80068f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80068f2:	9110      	str	r1, [sp, #64]	; 0x40
 80068f4:	9115      	str	r1, [sp, #84]	; 0x54
 80068f6:	9113      	str	r1, [sp, #76]	; 0x4c
 80068f8:	f7fe bfcc 	b.w	8005894 <_svfprintf_r+0x230>
 80068fc:	46d1      	mov	r9, sl
 80068fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006902:	4614      	mov	r4, r2
 8006904:	3601      	adds	r6, #1
 8006906:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006908:	603b      	str	r3, [r7, #0]
 800690a:	4444      	add	r4, r8
 800690c:	2e07      	cmp	r6, #7
 800690e:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
 8006912:	f8c7 8004 	str.w	r8, [r7, #4]
 8006916:	f77f abc0 	ble.w	800609a <_svfprintf_r+0xa36>
 800691a:	e4b8      	b.n	800628e <_svfprintf_r+0xc2a>
 800691c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800691e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006920:	441c      	add	r4, r3
 8006922:	e9c8 1300 	strd	r1, r3, [r8]
 8006926:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8006928:	942c      	str	r4, [sp, #176]	; 0xb0
 800692a:	3301      	adds	r3, #1
 800692c:	2b07      	cmp	r3, #7
 800692e:	932b      	str	r3, [sp, #172]	; 0xac
 8006930:	f300 809d 	bgt.w	8006a6e <_svfprintf_r+0x140a>
 8006934:	f108 0808 	add.w	r8, r8, #8
 8006938:	2a00      	cmp	r2, #0
 800693a:	f6bf ab5e 	bge.w	8005ffa <_svfprintf_r+0x996>
 800693e:	4256      	negs	r6, r2
 8006940:	3210      	adds	r2, #16
 8006942:	f280 8366 	bge.w	8007012 <_svfprintf_r+0x19ae>
 8006946:	489d      	ldr	r0, [pc, #628]	; (8006bbc <_svfprintf_r+0x1558>)
 8006948:	900f      	str	r0, [sp, #60]	; 0x3c
 800694a:	4642      	mov	r2, r8
 800694c:	4621      	mov	r1, r4
 800694e:	46a8      	mov	r8, r5
 8006950:	2710      	movs	r7, #16
 8006952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006954:	4604      	mov	r4, r0
 8006956:	e004      	b.n	8006962 <_svfprintf_r+0x12fe>
 8006958:	3208      	adds	r2, #8
 800695a:	3e10      	subs	r6, #16
 800695c:	2e10      	cmp	r6, #16
 800695e:	f340 8267 	ble.w	8006e30 <_svfprintf_r+0x17cc>
 8006962:	3301      	adds	r3, #1
 8006964:	3110      	adds	r1, #16
 8006966:	2b07      	cmp	r3, #7
 8006968:	e9c2 4700 	strd	r4, r7, [r2]
 800696c:	e9cd 312b 	strd	r3, r1, [sp, #172]	; 0xac
 8006970:	ddf2      	ble.n	8006958 <_svfprintf_r+0x12f4>
 8006972:	aa2a      	add	r2, sp, #168	; 0xa8
 8006974:	4629      	mov	r1, r5
 8006976:	4648      	mov	r0, r9
 8006978:	f003 f91e 	bl	8009bb8 <__ssprint_r>
 800697c:	2800      	cmp	r0, #0
 800697e:	f47e afe6 	bne.w	800594e <_svfprintf_r+0x2ea>
 8006982:	e9dd 312b 	ldrd	r3, r1, [sp, #172]	; 0xac
 8006986:	aa2d      	add	r2, sp, #180	; 0xb4
 8006988:	e7e7      	b.n	800695a <_svfprintf_r+0x12f6>
 800698a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800698c:	930e      	str	r3, [sp, #56]	; 0x38
 800698e:	f41a 7600 	ands.w	r6, sl, #512	; 0x200
 8006992:	bf16      	itet	ne
 8006994:	7814      	ldrbne	r4, [r2, #0]
 8006996:	6814      	ldreq	r4, [r2, #0]
 8006998:	460e      	movne	r6, r1
 800699a:	e609      	b.n	80065b0 <_svfprintf_r+0xf4c>
 800699c:	9a07      	ldr	r2, [sp, #28]
 800699e:	f412 7600 	ands.w	r6, r2, #512	; 0x200
 80069a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069a4:	930e      	str	r3, [sp, #56]	; 0x38
 80069a6:	bf16      	itet	ne
 80069a8:	7814      	ldrbne	r4, [r2, #0]
 80069aa:	6814      	ldreq	r4, [r2, #0]
 80069ac:	460e      	movne	r6, r1
 80069ae:	2301      	movs	r3, #1
 80069b0:	f7fe bf88 	b.w	80058c4 <_svfprintf_r+0x260>
 80069b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069b6:	930e      	str	r3, [sp, #56]	; 0x38
 80069b8:	f41a 7600 	ands.w	r6, sl, #512	; 0x200
 80069bc:	bf16      	itet	ne
 80069be:	7814      	ldrbne	r4, [r2, #0]
 80069c0:	6814      	ldreq	r4, [r2, #0]
 80069c2:	460e      	movne	r6, r1
 80069c4:	f7fe bf7a 	b.w	80058bc <_svfprintf_r+0x258>
 80069c8:	4a7c      	ldr	r2, [pc, #496]	; (8006bbc <_svfprintf_r+0x1558>)
 80069ca:	920f      	str	r2, [sp, #60]	; 0x3c
 80069cc:	f7ff badf 	b.w	8005f8e <_svfprintf_r+0x92a>
 80069d0:	222d      	movs	r2, #45	; 0x2d
 80069d2:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 80069d6:	f7ff b88d 	b.w	8005af4 <_svfprintf_r+0x490>
 80069da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80069dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80069de:	1aed      	subs	r5, r5, r3
 80069e0:	461a      	mov	r2, r3
 80069e2:	4628      	mov	r0, r5
 80069e4:	f003 f8b6 	bl	8009b54 <strncpy>
 80069e8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80069ec:	b10b      	cbz	r3, 80069f2 <_svfprintf_r+0x138e>
 80069ee:	f108 0801 	add.w	r8, r8, #1
 80069f2:	4620      	mov	r0, r4
 80069f4:	4631      	mov	r1, r6
 80069f6:	220a      	movs	r2, #10
 80069f8:	2300      	movs	r3, #0
 80069fa:	2700      	movs	r7, #0
 80069fc:	f7fa f86e 	bl	8000adc <__aeabi_uldivmod>
 8006a00:	e6e8      	b.n	80067d4 <_svfprintf_r+0x1170>
 8006a02:	4645      	mov	r5, r8
 8006a04:	460c      	mov	r4, r1
 8006a06:	4690      	mov	r8, r2
 8006a08:	3301      	adds	r3, #1
 8006a0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a0c:	f8c8 2000 	str.w	r2, [r8]
 8006a10:	4434      	add	r4, r6
 8006a12:	2b07      	cmp	r3, #7
 8006a14:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8006a18:	f8c8 6004 	str.w	r6, [r8, #4]
 8006a1c:	dc35      	bgt.n	8006a8a <_svfprintf_r+0x1426>
 8006a1e:	f108 0808 	add.w	r8, r8, #8
 8006a22:	f7ff bbbc 	b.w	800619e <_svfprintf_r+0xb3a>
 8006a26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a28:	aa2a      	add	r2, sp, #168	; 0xa8
 8006a2a:	4648      	mov	r0, r9
 8006a2c:	f003 f8c4 	bl	8009bb8 <__ssprint_r>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	f47e af8c 	bne.w	800594e <_svfprintf_r+0x2ea>
 8006a36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a38:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8006a3a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8006a3e:	f7ff bac5 	b.w	8005fcc <_svfprintf_r+0x968>
 8006a42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006a44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a46:	18ae      	adds	r6, r5, r2
 8006a48:	1a76      	subs	r6, r6, r1
 8006a4a:	1ad5      	subs	r5, r2, r3
 8006a4c:	42ae      	cmp	r6, r5
 8006a4e:	bfa8      	it	ge
 8006a50:	462e      	movge	r6, r5
 8006a52:	f7ff bbd9 	b.w	8006208 <_svfprintf_r+0xba4>
 8006a56:	f992 4000 	ldrsb.w	r4, [r2]
 8006a5a:	930e      	str	r3, [sp, #56]	; 0x38
 8006a5c:	17e6      	asrs	r6, r4, #31
 8006a5e:	4633      	mov	r3, r6
 8006a60:	f7fe beed 	b.w	800583e <_svfprintf_r+0x1da>
 8006a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a66:	801a      	strh	r2, [r3, #0]
 8006a68:	465d      	mov	r5, fp
 8006a6a:	f7ff b808 	b.w	8005a7e <_svfprintf_r+0x41a>
 8006a6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a70:	aa2a      	add	r2, sp, #168	; 0xa8
 8006a72:	4648      	mov	r0, r9
 8006a74:	f003 f8a0 	bl	8009bb8 <__ssprint_r>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	f47e af68 	bne.w	800594e <_svfprintf_r+0x2ea>
 8006a7e:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 8006a82:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a84:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8006a88:	e756      	b.n	8006938 <_svfprintf_r+0x12d4>
 8006a8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a8c:	aa2a      	add	r2, sp, #168	; 0xa8
 8006a8e:	4648      	mov	r0, r9
 8006a90:	f003 f892 	bl	8009bb8 <__ssprint_r>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	f47e af5a 	bne.w	800594e <_svfprintf_r+0x2ea>
 8006a9a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8006a9c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8006aa0:	f7ff bb7d 	b.w	800619e <_svfprintf_r+0xb3a>
 8006aa4:	2306      	movs	r3, #6
 8006aa6:	9308      	str	r3, [sp, #32]
 8006aa8:	e4bd      	b.n	8006426 <_svfprintf_r+0xdc2>
 8006aaa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006aac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006aae:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8006ab2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8006ab6:	971d      	str	r7, [sp, #116]	; 0x74
 8006ab8:	18eb      	adds	r3, r5, r3
 8006aba:	429e      	cmp	r6, r3
 8006abc:	bf28      	it	cs
 8006abe:	461e      	movcs	r6, r3
 8006ac0:	4690      	mov	r8, r2
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	960b      	str	r6, [sp, #44]	; 0x2c
 8006ac6:	f7ff bb71 	b.w	80061ac <_svfprintf_r+0xb48>
 8006aca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006acc:	1cda      	adds	r2, r3, #3
 8006ace:	db02      	blt.n	8006ad6 <_svfprintf_r+0x1472>
 8006ad0:	9a08      	ldr	r2, [sp, #32]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	da04      	bge.n	8006ae0 <_svfprintf_r+0x147c>
 8006ad6:	3f02      	subs	r7, #2
 8006ad8:	f027 0320 	bic.w	r3, r7, #32
 8006adc:	9307      	str	r3, [sp, #28]
 8006ade:	e4dd      	b.n	800649c <_svfprintf_r+0xe38>
 8006ae0:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	f300 8143 	bgt.w	8006d70 <_svfprintf_r+0x170c>
 8006aea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006aec:	07d6      	lsls	r6, r2, #31
 8006aee:	f140 81f3 	bpl.w	8006ed8 <_svfprintf_r+0x1874>
 8006af2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006af4:	4413      	add	r3, r2
 8006af6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006af8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006afa:	055c      	lsls	r4, r3, #21
 8006afc:	d503      	bpl.n	8006b06 <_svfprintf_r+0x14a2>
 8006afe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f300 81ec 	bgt.w	8006ede <_svfprintf_r+0x187a>
 8006b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006b0c:	9307      	str	r3, [sp, #28]
 8006b0e:	2767      	movs	r7, #103	; 0x67
 8006b10:	2300      	movs	r3, #0
 8006b12:	9310      	str	r3, [sp, #64]	; 0x40
 8006b14:	9315      	str	r3, [sp, #84]	; 0x54
 8006b16:	e527      	b.n	8006568 <_svfprintf_r+0xf04>
 8006b18:	222d      	movs	r2, #45	; 0x2d
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 8006b20:	9308      	str	r3, [sp, #32]
 8006b22:	f7fe beb9 	b.w	8005898 <_svfprintf_r+0x234>
 8006b26:	aa2a      	add	r2, sp, #168	; 0xa8
 8006b28:	4659      	mov	r1, fp
 8006b2a:	4648      	mov	r0, r9
 8006b2c:	f003 f844 	bl	8009bb8 <__ssprint_r>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	f47e af0c 	bne.w	800594e <_svfprintf_r+0x2ea>
 8006b36:	7838      	ldrb	r0, [r7, #0]
 8006b38:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8006b3a:	aa2d      	add	r2, sp, #180	; 0xb4
 8006b3c:	4406      	add	r6, r0
 8006b3e:	e5d8      	b.n	80066f2 <_svfprintf_r+0x108e>
 8006b40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b42:	aa2a      	add	r2, sp, #168	; 0xa8
 8006b44:	4648      	mov	r0, r9
 8006b46:	f003 f837 	bl	8009bb8 <__ssprint_r>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	f47e aeff 	bne.w	800594e <_svfprintf_r+0x2ea>
 8006b50:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8006b52:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8006b56:	f7ff bb1b 	b.w	8006190 <_svfprintf_r+0xb2c>
 8006b5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b5c:	aa2a      	add	r2, sp, #168	; 0xa8
 8006b5e:	4648      	mov	r0, r9
 8006b60:	f003 f82a 	bl	8009bb8 <__ssprint_r>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	f47e aef2 	bne.w	800594e <_svfprintf_r+0x2ea>
 8006b6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006b6c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8006b6e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8006b72:	f7ff bb31 	b.w	80061d8 <_svfprintf_r+0xb74>
 8006b76:	9908      	ldr	r1, [sp, #32]
 8006b78:	9101      	str	r1, [sp, #4]
 8006b7a:	a928      	add	r1, sp, #160	; 0xa0
 8006b7c:	9104      	str	r1, [sp, #16]
 8006b7e:	a925      	add	r1, sp, #148	; 0x94
 8006b80:	9103      	str	r1, [sp, #12]
 8006b82:	a924      	add	r1, sp, #144	; 0x90
 8006b84:	9102      	str	r1, [sp, #8]
 8006b86:	2103      	movs	r1, #3
 8006b88:	4633      	mov	r3, r6
 8006b8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b8c:	9100      	str	r1, [sp, #0]
 8006b8e:	4648      	mov	r0, r9
 8006b90:	f7fa fb52 	bl	8001238 <_dtoa_r>
 8006b94:	7803      	ldrb	r3, [r0, #0]
 8006b96:	2b30      	cmp	r3, #48	; 0x30
 8006b98:	4605      	mov	r5, r0
 8006b9a:	f000 81e3 	beq.w	8006f64 <_svfprintf_r+0x1900>
 8006b9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006ba0:	9a08      	ldr	r2, [sp, #32]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	18ec      	adds	r4, r5, r3
 8006ba6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006ba8:	4631      	mov	r1, r6
 8006baa:	2200      	movs	r2, #0
 8006bac:	2300      	movs	r3, #0
 8006bae:	f7fa f805 	bl	8000bbc <__aeabi_dcmpeq>
 8006bb2:	b128      	cbz	r0, 8006bc0 <_svfprintf_r+0x155c>
 8006bb4:	4623      	mov	r3, r4
 8006bb6:	e465      	b.n	8006484 <_svfprintf_r+0xe20>
 8006bb8:	0800c958 	.word	0x0800c958
 8006bbc:	0800c974 	.word	0x0800c974
 8006bc0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006bc2:	42a3      	cmp	r3, r4
 8006bc4:	f4bf ac5e 	bcs.w	8006484 <_svfprintf_r+0xe20>
 8006bc8:	2130      	movs	r1, #48	; 0x30
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	9228      	str	r2, [sp, #160]	; 0xa0
 8006bce:	7019      	strb	r1, [r3, #0]
 8006bd0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006bd2:	429c      	cmp	r4, r3
 8006bd4:	d8f9      	bhi.n	8006bca <_svfprintf_r+0x1566>
 8006bd6:	e455      	b.n	8006484 <_svfprintf_r+0xe20>
 8006bd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bda:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006bdc:	9a08      	ldr	r2, [sp, #32]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2900      	cmp	r1, #0
 8006be4:	ea43 0302 	orr.w	r3, r3, r2
 8006be8:	f340 81d3 	ble.w	8006f92 <_svfprintf_r+0x192e>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f040 819e 	bne.w	8006f2e <_svfprintf_r+0x18ca>
 8006bf2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006bf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bf6:	2766      	movs	r7, #102	; 0x66
 8006bf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bfa:	055a      	lsls	r2, r3, #21
 8006bfc:	f100 8170 	bmi.w	8006ee0 <_svfprintf_r+0x187c>
 8006c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006c06:	9307      	str	r3, [sp, #28]
 8006c08:	e782      	b.n	8006b10 <_svfprintf_r+0x14ac>
 8006c0a:	9b08      	ldr	r3, [sp, #32]
 8006c0c:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8006c10:	940e      	str	r4, [sp, #56]	; 0x38
 8006c12:	9307      	str	r3, [sp, #28]
 8006c14:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c16:	9008      	str	r0, [sp, #32]
 8006c18:	9010      	str	r0, [sp, #64]	; 0x40
 8006c1a:	9015      	str	r0, [sp, #84]	; 0x54
 8006c1c:	9013      	str	r0, [sp, #76]	; 0x4c
 8006c1e:	f7fe be39 	b.w	8005894 <_svfprintf_r+0x230>
 8006c22:	2330      	movs	r3, #48	; 0x30
 8006c24:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8006c28:	2358      	movs	r3, #88	; 0x58
 8006c2a:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
 8006c2e:	f04a 0302 	orr.w	r3, sl, #2
 8006c32:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c34:	9b08      	ldr	r3, [sp, #32]
 8006c36:	2b63      	cmp	r3, #99	; 0x63
 8006c38:	f300 80d7 	bgt.w	8006dea <_svfprintf_r+0x1786>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	930d      	str	r3, [sp, #52]	; 0x34
 8006c40:	ad3d      	add	r5, sp, #244	; 0xf4
 8006c42:	f027 0320 	bic.w	r3, r7, #32
 8006c46:	9307      	str	r3, [sp, #28]
 8006c48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c4a:	1e1e      	subs	r6, r3, #0
 8006c4c:	f44a 7a81 	orr.w	sl, sl, #258	; 0x102
 8006c50:	f2c0 8086 	blt.w	8006d60 <_svfprintf_r+0x16fc>
 8006c54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c58:	2300      	movs	r3, #0
 8006c5a:	9312      	str	r3, [sp, #72]	; 0x48
 8006c5c:	2f61      	cmp	r7, #97	; 0x61
 8006c5e:	f000 8114 	beq.w	8006e8a <_svfprintf_r+0x1826>
 8006c62:	2f41      	cmp	r7, #65	; 0x41
 8006c64:	f47f abee 	bne.w	8006444 <_svfprintf_r+0xde0>
 8006c68:	aa24      	add	r2, sp, #144	; 0x90
 8006c6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	f002 fef3 	bl	8009a58 <frexp>
 8006c72:	2200      	movs	r2, #0
 8006c74:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006c78:	f7f9 fd1e 	bl	80006b8 <__aeabi_dmul>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	460b      	mov	r3, r1
 8006c80:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006c84:	2200      	movs	r2, #0
 8006c86:	2300      	movs	r3, #0
 8006c88:	f7f9 ff98 	bl	8000bbc <__aeabi_dcmpeq>
 8006c8c:	b108      	cbz	r0, 8006c92 <_svfprintf_r+0x162e>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	9324      	str	r3, [sp, #144]	; 0x90
 8006c92:	4bad      	ldr	r3, [pc, #692]	; (8006f48 <_svfprintf_r+0x18e4>)
 8006c94:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c96:	9b08      	ldr	r3, [sp, #32]
 8006c98:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
 8006c9c:	e9cd b713 	strd	fp, r7, [sp, #76]	; 0x4c
 8006ca0:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 8006ca4:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8006ca8:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 8006cac:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8006cb0:	1e5e      	subs	r6, r3, #1
 8006cb2:	462c      	mov	r4, r5
 8006cb4:	9510      	str	r5, [sp, #64]	; 0x40
 8006cb6:	e005      	b.n	8006cc4 <_svfprintf_r+0x1660>
 8006cb8:	2200      	movs	r2, #0
 8006cba:	2300      	movs	r3, #0
 8006cbc:	3e01      	subs	r6, #1
 8006cbe:	f7f9 ff7d 	bl	8000bbc <__aeabi_dcmpeq>
 8006cc2:	b9e0      	cbnz	r0, 8006cfe <_svfprintf_r+0x169a>
 8006cc4:	4ba1      	ldr	r3, [pc, #644]	; (8006f4c <_svfprintf_r+0x18e8>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	4640      	mov	r0, r8
 8006cca:	4649      	mov	r1, r9
 8006ccc:	f7f9 fcf4 	bl	80006b8 <__aeabi_dmul>
 8006cd0:	4689      	mov	r9, r1
 8006cd2:	4680      	mov	r8, r0
 8006cd4:	f7fa f854 	bl	8000d80 <__aeabi_d2iz>
 8006cd8:	4605      	mov	r5, r0
 8006cda:	f7f9 fc83 	bl	80005e4 <__aeabi_i2d>
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	4649      	mov	r1, r9
 8006ce4:	4640      	mov	r0, r8
 8006ce6:	f7f9 fb2f 	bl	8000348 <__aeabi_dsub>
 8006cea:	f81b 3005 	ldrb.w	r3, [fp, r5]
 8006cee:	46a2      	mov	sl, r4
 8006cf0:	f804 3b01 	strb.w	r3, [r4], #1
 8006cf4:	1c73      	adds	r3, r6, #1
 8006cf6:	4637      	mov	r7, r6
 8006cf8:	4680      	mov	r8, r0
 8006cfa:	4689      	mov	r9, r1
 8006cfc:	d1dc      	bne.n	8006cb8 <_svfprintf_r+0x1654>
 8006cfe:	4640      	mov	r0, r8
 8006d00:	4649      	mov	r1, r9
 8006d02:	4b93      	ldr	r3, [pc, #588]	; (8006f50 <_svfprintf_r+0x18ec>)
 8006d04:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8006d08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006d0c:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8006d10:	2200      	movs	r2, #0
 8006d12:	463e      	mov	r6, r7
 8006d14:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8006d18:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006d1a:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 8006d1e:	9514      	str	r5, [sp, #80]	; 0x50
 8006d20:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006d22:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d26:	f7f9 ff71 	bl	8000c0c <__aeabi_dcmpgt>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d141      	bne.n	8006db2 <_svfprintf_r+0x174e>
 8006d2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d32:	4b87      	ldr	r3, [pc, #540]	; (8006f50 <_svfprintf_r+0x18ec>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	f7f9 ff41 	bl	8000bbc <__aeabi_dcmpeq>
 8006d3a:	b110      	cbz	r0, 8006d42 <_svfprintf_r+0x16de>
 8006d3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d3e:	07d9      	lsls	r1, r3, #31
 8006d40:	d437      	bmi.n	8006db2 <_svfprintf_r+0x174e>
 8006d42:	2e00      	cmp	r6, #0
 8006d44:	4633      	mov	r3, r6
 8006d46:	db06      	blt.n	8006d56 <_svfprintf_r+0x16f2>
 8006d48:	3301      	adds	r3, #1
 8006d4a:	4423      	add	r3, r4
 8006d4c:	2230      	movs	r2, #48	; 0x30
 8006d4e:	f804 2b01 	strb.w	r2, [r4], #1
 8006d52:	42a3      	cmp	r3, r4
 8006d54:	d1fb      	bne.n	8006d4e <_svfprintf_r+0x16ea>
 8006d56:	1b63      	subs	r3, r4, r5
 8006d58:	9314      	str	r3, [sp, #80]	; 0x50
 8006d5a:	f7ff bb95 	b.w	8006488 <_svfprintf_r+0xe24>
 8006d5e:	930d      	str	r3, [sp, #52]	; 0x34
 8006d60:	e9dd 3416 	ldrd	r3, r4, [sp, #88]	; 0x58
 8006d64:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d66:	232d      	movs	r3, #45	; 0x2d
 8006d68:	f104 4600 	add.w	r6, r4, #2147483648	; 0x80000000
 8006d6c:	9312      	str	r3, [sp, #72]	; 0x48
 8006d6e:	e775      	b.n	8006c5c <_svfprintf_r+0x15f8>
 8006d70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d72:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006d74:	189a      	adds	r2, r3, r2
 8006d76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d78:	920b      	str	r2, [sp, #44]	; 0x2c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f340 8100 	ble.w	8006f80 <_svfprintf_r+0x191c>
 8006d80:	2767      	movs	r7, #103	; 0x67
 8006d82:	e739      	b.n	8006bf8 <_svfprintf_r+0x1594>
 8006d84:	2300      	movs	r3, #0
 8006d86:	9308      	str	r3, [sp, #32]
 8006d88:	f7fe bcbd 	b.w	8005706 <_svfprintf_r+0xa2>
 8006d8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d8e:	aa2a      	add	r2, sp, #168	; 0xa8
 8006d90:	4648      	mov	r0, r9
 8006d92:	f002 ff11 	bl	8009bb8 <__ssprint_r>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	f47e add9 	bne.w	800594e <_svfprintf_r+0x2ea>
 8006d9c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8006d9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006da0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8006da2:	1b5d      	subs	r5, r3, r5
 8006da4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8006da8:	f7ff ba2e 	b.w	8006208 <_svfprintf_r+0xba4>
 8006dac:	9b08      	ldr	r3, [sp, #32]
 8006dae:	18ec      	adds	r4, r5, r3
 8006db0:	e6f9      	b.n	8006ba6 <_svfprintf_r+0x1542>
 8006db2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006db4:	9328      	str	r3, [sp, #160]	; 0xa0
 8006db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006db8:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8006dbc:	7bd9      	ldrb	r1, [r3, #15]
 8006dbe:	428a      	cmp	r2, r1
 8006dc0:	4623      	mov	r3, r4
 8006dc2:	d109      	bne.n	8006dd8 <_svfprintf_r+0x1774>
 8006dc4:	2030      	movs	r0, #48	; 0x30
 8006dc6:	f803 0c01 	strb.w	r0, [r3, #-1]
 8006dca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006dcc:	1e5a      	subs	r2, r3, #1
 8006dce:	9228      	str	r2, [sp, #160]	; 0xa0
 8006dd0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8006dd4:	4291      	cmp	r1, r2
 8006dd6:	d0f6      	beq.n	8006dc6 <_svfprintf_r+0x1762>
 8006dd8:	2a39      	cmp	r2, #57	; 0x39
 8006dda:	bf0b      	itete	eq
 8006ddc:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
 8006dde:	3201      	addne	r2, #1
 8006de0:	7a92      	ldrbeq	r2, [r2, #10]
 8006de2:	b2d2      	uxtbne	r2, r2
 8006de4:	f803 2c01 	strb.w	r2, [r3, #-1]
 8006de8:	e7b5      	b.n	8006d56 <_svfprintf_r+0x16f2>
 8006dea:	1c59      	adds	r1, r3, #1
 8006dec:	4648      	mov	r0, r9
 8006dee:	f7fe f8a1 	bl	8004f34 <_malloc_r>
 8006df2:	4605      	mov	r5, r0
 8006df4:	2800      	cmp	r0, #0
 8006df6:	f000 80fd 	beq.w	8006ff4 <_svfprintf_r+0x1990>
 8006dfa:	900d      	str	r0, [sp, #52]	; 0x34
 8006dfc:	e721      	b.n	8006c42 <_svfprintf_r+0x15de>
 8006dfe:	2330      	movs	r3, #48	; 0x30
 8006e00:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8006e04:	2378      	movs	r3, #120	; 0x78
 8006e06:	e710      	b.n	8006c2a <_svfprintf_r+0x15c6>
 8006e08:	4a52      	ldr	r2, [pc, #328]	; (8006f54 <_svfprintf_r+0x18f0>)
 8006e0a:	920f      	str	r2, [sp, #60]	; 0x3c
 8006e0c:	f7ff b880 	b.w	8005f10 <_svfprintf_r+0x8ac>
 8006e10:	1c4c      	adds	r4, r1, #1
 8006e12:	a928      	add	r1, sp, #160	; 0xa0
 8006e14:	9104      	str	r1, [sp, #16]
 8006e16:	a925      	add	r1, sp, #148	; 0x94
 8006e18:	9103      	str	r1, [sp, #12]
 8006e1a:	a924      	add	r1, sp, #144	; 0x90
 8006e1c:	9102      	str	r1, [sp, #8]
 8006e1e:	2102      	movs	r1, #2
 8006e20:	9401      	str	r4, [sp, #4]
 8006e22:	9100      	str	r1, [sp, #0]
 8006e24:	4648      	mov	r0, r9
 8006e26:	f7fa fa07 	bl	8001238 <_dtoa_r>
 8006e2a:	4605      	mov	r5, r0
 8006e2c:	442c      	add	r4, r5
 8006e2e:	e6ba      	b.n	8006ba6 <_svfprintf_r+0x1542>
 8006e30:	4645      	mov	r5, r8
 8006e32:	460c      	mov	r4, r1
 8006e34:	4690      	mov	r8, r2
 8006e36:	3301      	adds	r3, #1
 8006e38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e3a:	f8c8 2000 	str.w	r2, [r8]
 8006e3e:	4434      	add	r4, r6
 8006e40:	2b07      	cmp	r3, #7
 8006e42:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8006e46:	f8c8 6004 	str.w	r6, [r8, #4]
 8006e4a:	f77f a8d4 	ble.w	8005ff6 <_svfprintf_r+0x992>
 8006e4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e50:	aa2a      	add	r2, sp, #168	; 0xa8
 8006e52:	4648      	mov	r0, r9
 8006e54:	f002 feb0 	bl	8009bb8 <__ssprint_r>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	f47e ad78 	bne.w	800594e <_svfprintf_r+0x2ea>
 8006e5e:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 8006e62:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8006e66:	f7ff b8c8 	b.w	8005ffa <_svfprintf_r+0x996>
 8006e6a:	2900      	cmp	r1, #0
 8006e6c:	f040 80a4 	bne.w	8006fb8 <_svfprintf_r+0x1954>
 8006e70:	2230      	movs	r2, #48	; 0x30
 8006e72:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
 8006e76:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
 8006e7a:	3330      	adds	r3, #48	; 0x30
 8006e7c:	f802 3b01 	strb.w	r3, [r2], #1
 8006e80:	ab26      	add	r3, sp, #152	; 0x98
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	931c      	str	r3, [sp, #112]	; 0x70
 8006e86:	f7ff bb57 	b.w	8006538 <_svfprintf_r+0xed4>
 8006e8a:	aa24      	add	r2, sp, #144	; 0x90
 8006e8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006e8e:	4631      	mov	r1, r6
 8006e90:	f002 fde2 	bl	8009a58 <frexp>
 8006e94:	2200      	movs	r2, #0
 8006e96:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006e9a:	f7f9 fc0d 	bl	80006b8 <__aeabi_dmul>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f7f9 fe87 	bl	8000bbc <__aeabi_dcmpeq>
 8006eae:	b108      	cbz	r0, 8006eb4 <_svfprintf_r+0x1850>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	9324      	str	r3, [sp, #144]	; 0x90
 8006eb4:	4b28      	ldr	r3, [pc, #160]	; (8006f58 <_svfprintf_r+0x18f4>)
 8006eb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eb8:	e6ed      	b.n	8006c96 <_svfprintf_r+0x1632>
 8006eba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ebc:	4d27      	ldr	r5, [pc, #156]	; (8006f5c <_svfprintf_r+0x18f8>)
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	bfb4      	ite	lt
 8006ec2:	222d      	movlt	r2, #45	; 0x2d
 8006ec4:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
 8006ec8:	4b25      	ldr	r3, [pc, #148]	; (8006f60 <_svfprintf_r+0x18fc>)
 8006eca:	bfb8      	it	lt
 8006ecc:	f88d 208b 	strblt.w	r2, [sp, #139]	; 0x8b
 8006ed0:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8006ed4:	f7fe be12 	b.w	8005afc <_svfprintf_r+0x498>
 8006ed8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006eda:	930b      	str	r3, [sp, #44]	; 0x2c
 8006edc:	e60c      	b.n	8006af8 <_svfprintf_r+0x1494>
 8006ede:	2767      	movs	r7, #103	; 0x67
 8006ee0:	991d      	ldr	r1, [sp, #116]	; 0x74
 8006ee2:	780b      	ldrb	r3, [r1, #0]
 8006ee4:	2bff      	cmp	r3, #255	; 0xff
 8006ee6:	f000 8090 	beq.w	800700a <_svfprintf_r+0x19a6>
 8006eea:	2400      	movs	r4, #0
 8006eec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006eee:	4620      	mov	r0, r4
 8006ef0:	e003      	b.n	8006efa <_svfprintf_r+0x1896>
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	3101      	adds	r1, #1
 8006ef6:	2bff      	cmp	r3, #255	; 0xff
 8006ef8:	d008      	beq.n	8006f0c <_svfprintf_r+0x18a8>
 8006efa:	4293      	cmp	r3, r2
 8006efc:	da06      	bge.n	8006f0c <_svfprintf_r+0x18a8>
 8006efe:	1ad2      	subs	r2, r2, r3
 8006f00:	784b      	ldrb	r3, [r1, #1]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1f5      	bne.n	8006ef2 <_svfprintf_r+0x188e>
 8006f06:	780b      	ldrb	r3, [r1, #0]
 8006f08:	3401      	adds	r4, #1
 8006f0a:	e7f4      	b.n	8006ef6 <_svfprintf_r+0x1892>
 8006f0c:	911d      	str	r1, [sp, #116]	; 0x74
 8006f0e:	9213      	str	r2, [sp, #76]	; 0x4c
 8006f10:	9015      	str	r0, [sp, #84]	; 0x54
 8006f12:	9410      	str	r4, [sp, #64]	; 0x40
 8006f14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f18:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8006f1a:	4413      	add	r3, r2
 8006f1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f1e:	fb01 2303 	mla	r3, r1, r3, r2
 8006f22:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006f28:	9307      	str	r3, [sp, #28]
 8006f2a:	f7ff bb1d 	b.w	8006568 <_svfprintf_r+0xf04>
 8006f2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f30:	18cb      	adds	r3, r1, r3
 8006f32:	441a      	add	r2, r3
 8006f34:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f36:	2766      	movs	r7, #102	; 0x66
 8006f38:	e65e      	b.n	8006bf8 <_svfprintf_r+0x1594>
 8006f3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f3c:	07db      	lsls	r3, r3, #31
 8006f3e:	f57f ab06 	bpl.w	800654e <_svfprintf_r+0xeea>
 8006f42:	f7ff bb00 	b.w	8006546 <_svfprintf_r+0xee2>
 8006f46:	bf00      	nop
 8006f48:	0800c944 	.word	0x0800c944
 8006f4c:	40300000 	.word	0x40300000
 8006f50:	3fe00000 	.word	0x3fe00000
 8006f54:	0800c974 	.word	0x0800c974
 8006f58:	0800c930 	.word	0x0800c930
 8006f5c:	0800c928 	.word	0x0800c928
 8006f60:	0800c92c 	.word	0x0800c92c
 8006f64:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006f66:	4631      	mov	r1, r6
 8006f68:	2200      	movs	r2, #0
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f7f9 fe26 	bl	8000bbc <__aeabi_dcmpeq>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	f47f ae14 	bne.w	8006b9e <_svfprintf_r+0x153a>
 8006f76:	9b08      	ldr	r3, [sp, #32]
 8006f78:	f1c3 0301 	rsb	r3, r3, #1
 8006f7c:	9324      	str	r3, [sp, #144]	; 0x90
 8006f7e:	e60f      	b.n	8006ba0 <_svfprintf_r+0x153c>
 8006f80:	f1c3 0301 	rsb	r3, r3, #1
 8006f84:	441a      	add	r2, r3
 8006f86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006f8a:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f8c:	9307      	str	r3, [sp, #28]
 8006f8e:	2767      	movs	r7, #103	; 0x67
 8006f90:	e5be      	b.n	8006b10 <_svfprintf_r+0x14ac>
 8006f92:	b923      	cbnz	r3, 8006f9e <_svfprintf_r+0x193a>
 8006f94:	2301      	movs	r3, #1
 8006f96:	9307      	str	r3, [sp, #28]
 8006f98:	2766      	movs	r7, #102	; 0x66
 8006f9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f9c:	e5b8      	b.n	8006b10 <_svfprintf_r+0x14ac>
 8006f9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fa0:	9a08      	ldr	r2, [sp, #32]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	441a      	add	r2, r3
 8006fa6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006faa:	920b      	str	r2, [sp, #44]	; 0x2c
 8006fac:	9307      	str	r3, [sp, #28]
 8006fae:	2766      	movs	r7, #102	; 0x66
 8006fb0:	e5ae      	b.n	8006b10 <_svfprintf_r+0x14ac>
 8006fb2:	4a19      	ldr	r2, [pc, #100]	; (8007018 <_svfprintf_r+0x19b4>)
 8006fb4:	920f      	str	r2, [sp, #60]	; 0x3c
 8006fb6:	e45e      	b.n	8006876 <_svfprintf_r+0x1212>
 8006fb8:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
 8006fbc:	e75d      	b.n	8006e7a <_svfprintf_r+0x1816>
 8006fbe:	4a16      	ldr	r2, [pc, #88]	; (8007018 <_svfprintf_r+0x19b4>)
 8006fc0:	920f      	str	r2, [sp, #60]	; 0x3c
 8006fc2:	e521      	b.n	8006a08 <_svfprintf_r+0x13a4>
 8006fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fc6:	f89b 7001 	ldrb.w	r7, [fp, #1]
 8006fca:	4693      	mov	fp, r2
 8006fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fd0:	930e      	str	r3, [sp, #56]	; 0x38
 8006fd2:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8006fd6:	9208      	str	r2, [sp, #32]
 8006fd8:	f7fe bb93 	b.w	8005702 <_svfprintf_r+0x9e>
 8006fdc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006fde:	230c      	movs	r3, #12
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8006fe8:	f7fe bcc0 	b.w	800596c <_svfprintf_r+0x308>
 8006fec:	2302      	movs	r3, #2
 8006fee:	931c      	str	r3, [sp, #112]	; 0x70
 8006ff0:	f7ff baa2 	b.w	8006538 <_svfprintf_r+0xed4>
 8006ff4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ff6:	898b      	ldrh	r3, [r1, #12]
 8006ff8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	818a      	strh	r2, [r1, #12]
 8007000:	f7fe bcad 	b.w	800595e <_svfprintf_r+0x2fa>
 8007004:	9c08      	ldr	r4, [sp, #32]
 8007006:	442c      	add	r4, r5
 8007008:	e5cd      	b.n	8006ba6 <_svfprintf_r+0x1542>
 800700a:	2300      	movs	r3, #0
 800700c:	9310      	str	r3, [sp, #64]	; 0x40
 800700e:	9315      	str	r3, [sp, #84]	; 0x54
 8007010:	e780      	b.n	8006f14 <_svfprintf_r+0x18b0>
 8007012:	4a01      	ldr	r2, [pc, #4]	; (8007018 <_svfprintf_r+0x19b4>)
 8007014:	920f      	str	r2, [sp, #60]	; 0x3c
 8007016:	e70e      	b.n	8006e36 <_svfprintf_r+0x17d2>
 8007018:	0800c974 	.word	0x0800c974

0800701c <_vfprintf_r>:
 800701c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007020:	b0d7      	sub	sp, #348	; 0x15c
 8007022:	461c      	mov	r4, r3
 8007024:	9109      	str	r1, [sp, #36]	; 0x24
 8007026:	4691      	mov	r9, r2
 8007028:	4605      	mov	r5, r0
 800702a:	9018      	str	r0, [sp, #96]	; 0x60
 800702c:	f002 f906 	bl	800923c <_localeconv_r>
 8007030:	6802      	ldr	r2, [r0, #0]
 8007032:	921a      	str	r2, [sp, #104]	; 0x68
 8007034:	4610      	mov	r0, r2
 8007036:	940d      	str	r4, [sp, #52]	; 0x34
 8007038:	f7f9 f8c2 	bl	80001c0 <strlen>
 800703c:	9019      	str	r0, [sp, #100]	; 0x64
 800703e:	b11d      	cbz	r5, 8007048 <_vfprintf_r+0x2c>
 8007040:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 8244 	beq.w	80074d0 <_vfprintf_r+0x4b4>
 8007048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800704a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800704c:	8992      	ldrh	r2, [r2, #12]
 800704e:	07d8      	lsls	r0, r3, #31
 8007050:	d402      	bmi.n	8007058 <_vfprintf_r+0x3c>
 8007052:	0591      	lsls	r1, r2, #22
 8007054:	f140 8686 	bpl.w	8007d64 <_vfprintf_r+0xd48>
 8007058:	0713      	lsls	r3, r2, #28
 800705a:	f140 80cb 	bpl.w	80071f4 <_vfprintf_r+0x1d8>
 800705e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 80c6 	beq.w	80071f4 <_vfprintf_r+0x1d8>
 8007068:	f002 031a 	and.w	r3, r2, #26
 800706c:	2b0a      	cmp	r3, #10
 800706e:	f000 80cf 	beq.w	8007210 <_vfprintf_r+0x1f4>
 8007072:	2400      	movs	r4, #0
 8007074:	ab2d      	add	r3, sp, #180	; 0xb4
 8007076:	464d      	mov	r5, r9
 8007078:	e9cd 442b 	strd	r4, r4, [sp, #172]	; 0xac
 800707c:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
 8007080:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
 8007084:	9414      	str	r4, [sp, #80]	; 0x50
 8007086:	932a      	str	r3, [sp, #168]	; 0xa8
 8007088:	4698      	mov	r8, r3
 800708a:	941d      	str	r4, [sp, #116]	; 0x74
 800708c:	2300      	movs	r3, #0
 800708e:	940b      	str	r4, [sp, #44]	; 0x2c
 8007090:	2400      	movs	r4, #0
 8007092:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 8007096:	782b      	ldrb	r3, [r5, #0]
 8007098:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 818d 	beq.w	80073bc <_vfprintf_r+0x3a0>
 80070a2:	46ab      	mov	fp, r5
 80070a4:	e004      	b.n	80070b0 <_vfprintf_r+0x94>
 80070a6:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 80c5 	beq.w	800723a <_vfprintf_r+0x21e>
 80070b0:	2b25      	cmp	r3, #37	; 0x25
 80070b2:	d1f8      	bne.n	80070a6 <_vfprintf_r+0x8a>
 80070b4:	ebbb 0605 	subs.w	r6, fp, r5
 80070b8:	f040 80c3 	bne.w	8007242 <_vfprintf_r+0x226>
 80070bc:	f89b 3000 	ldrb.w	r3, [fp]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 817b 	beq.w	80073bc <_vfprintf_r+0x3a0>
 80070c6:	2300      	movs	r3, #0
 80070c8:	f04f 32ff 	mov.w	r2, #4294967295
 80070cc:	f89b 7001 	ldrb.w	r7, [fp, #1]
 80070d0:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 80070d4:	930a      	str	r3, [sp, #40]	; 0x28
 80070d6:	f10b 0b01 	add.w	fp, fp, #1
 80070da:	9208      	str	r2, [sp, #32]
 80070dc:	469a      	mov	sl, r3
 80070de:	242b      	movs	r4, #43	; 0x2b
 80070e0:	2120      	movs	r1, #32
 80070e2:	f10b 0b01 	add.w	fp, fp, #1
 80070e6:	f1a7 0320 	sub.w	r3, r7, #32
 80070ea:	2b5a      	cmp	r3, #90	; 0x5a
 80070ec:	f200 80dd 	bhi.w	80072aa <_vfprintf_r+0x28e>
 80070f0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80070f4:	00db031d 	.word	0x00db031d
 80070f8:	031800db 	.word	0x031800db
 80070fc:	00db00db 	.word	0x00db00db
 8007100:	006a00db 	.word	0x006a00db
 8007104:	00db00db 	.word	0x00db00db
 8007108:	028f027f 	.word	0x028f027f
 800710c:	028a00db 	.word	0x028a00db
 8007110:	00db0299 	.word	0x00db0299
 8007114:	005b0294 	.word	0x005b0294
 8007118:	005b005b 	.word	0x005b005b
 800711c:	005b005b 	.word	0x005b005b
 8007120:	005b005b 	.word	0x005b005b
 8007124:	005b005b 	.word	0x005b005b
 8007128:	00db00db 	.word	0x00db00db
 800712c:	00db00db 	.word	0x00db00db
 8007130:	00db00db 	.word	0x00db00db
 8007134:	016b00db 	.word	0x016b00db
 8007138:	021f00db 	.word	0x021f00db
 800713c:	016b01f7 	.word	0x016b01f7
 8007140:	016b016b 	.word	0x016b016b
 8007144:	00db00db 	.word	0x00db00db
 8007148:	00db00db 	.word	0x00db00db
 800714c:	00db0313 	.word	0x00db0313
 8007150:	024e00db 	.word	0x024e00db
 8007154:	00db00db 	.word	0x00db00db
 8007158:	022900db 	.word	0x022900db
 800715c:	030100db 	.word	0x030100db
 8007160:	00db00db 	.word	0x00db00db
 8007164:	00db0787 	.word	0x00db0787
 8007168:	00db00db 	.word	0x00db00db
 800716c:	00db00db 	.word	0x00db00db
 8007170:	00db00db 	.word	0x00db00db
 8007174:	016b00db 	.word	0x016b00db
 8007178:	021f00db 	.word	0x021f00db
 800717c:	016b01f9 	.word	0x016b01f9
 8007180:	016b016b 	.word	0x016b016b
 8007184:	01f902f4 	.word	0x01f902f4
 8007188:	00db01f2 	.word	0x00db01f2
 800718c:	00db02dd 	.word	0x00db02dd
 8007190:	025002b3 	.word	0x025002b3
 8007194:	01f202cb 	.word	0x01f202cb
 8007198:	022900db 	.word	0x022900db
 800719c:	0783007d 	.word	0x0783007d
 80071a0:	00db00db 	.word	0x00db00db
 80071a4:	00db0763 	.word	0x00db0763
 80071a8:	007d      	.short	0x007d
 80071aa:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80071ae:	2200      	movs	r2, #0
 80071b0:	f81b 7b01 	ldrb.w	r7, [fp], #1
 80071b4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80071b8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80071bc:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80071c0:	2b09      	cmp	r3, #9
 80071c2:	d9f5      	bls.n	80071b0 <_vfprintf_r+0x194>
 80071c4:	920a      	str	r2, [sp, #40]	; 0x28
 80071c6:	e78e      	b.n	80070e6 <_vfprintf_r+0xca>
 80071c8:	4648      	mov	r0, r9
 80071ca:	f002 f837 	bl	800923c <_localeconv_r>
 80071ce:	6843      	ldr	r3, [r0, #4]
 80071d0:	931e      	str	r3, [sp, #120]	; 0x78
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7f8 fff4 	bl	80001c0 <strlen>
 80071d8:	901f      	str	r0, [sp, #124]	; 0x7c
 80071da:	4606      	mov	r6, r0
 80071dc:	4648      	mov	r0, r9
 80071de:	f002 f82d 	bl	800923c <_localeconv_r>
 80071e2:	6883      	ldr	r3, [r0, #8]
 80071e4:	931d      	str	r3, [sp, #116]	; 0x74
 80071e6:	2120      	movs	r1, #32
 80071e8:	2e00      	cmp	r6, #0
 80071ea:	f040 86d8 	bne.w	8007f9e <_vfprintf_r+0xf82>
 80071ee:	f89b 7000 	ldrb.w	r7, [fp]
 80071f2:	e776      	b.n	80070e2 <_vfprintf_r+0xc6>
 80071f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80071f6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80071f8:	4629      	mov	r1, r5
 80071fa:	f001 fc6b 	bl	8008ad4 <__swsetup_r>
 80071fe:	2800      	cmp	r0, #0
 8007200:	f041 82e1 	bne.w	80087c6 <_vfprintf_r+0x17aa>
 8007204:	89aa      	ldrh	r2, [r5, #12]
 8007206:	f002 031a 	and.w	r3, r2, #26
 800720a:	2b0a      	cmp	r3, #10
 800720c:	f47f af31 	bne.w	8007072 <_vfprintf_r+0x56>
 8007210:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007212:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 8007216:	2b00      	cmp	r3, #0
 8007218:	f6ff af2b 	blt.w	8007072 <_vfprintf_r+0x56>
 800721c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800721e:	07dd      	lsls	r5, r3, #31
 8007220:	d402      	bmi.n	8007228 <_vfprintf_r+0x20c>
 8007222:	0590      	lsls	r0, r2, #22
 8007224:	f141 80fd 	bpl.w	8008422 <_vfprintf_r+0x1406>
 8007228:	9909      	ldr	r1, [sp, #36]	; 0x24
 800722a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800722c:	4623      	mov	r3, r4
 800722e:	464a      	mov	r2, r9
 8007230:	b057      	add	sp, #348	; 0x15c
 8007232:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007236:	f001 bc0d 	b.w	8008a54 <__sbprintf>
 800723a:	ebbb 0605 	subs.w	r6, fp, r5
 800723e:	f000 80bd 	beq.w	80073bc <_vfprintf_r+0x3a0>
 8007242:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8007244:	4433      	add	r3, r6
 8007246:	932c      	str	r3, [sp, #176]	; 0xb0
 8007248:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800724a:	3301      	adds	r3, #1
 800724c:	2b07      	cmp	r3, #7
 800724e:	e9c8 5600 	strd	r5, r6, [r8]
 8007252:	932b      	str	r3, [sp, #172]	; 0xac
 8007254:	dc05      	bgt.n	8007262 <_vfprintf_r+0x246>
 8007256:	f108 0808 	add.w	r8, r8, #8
 800725a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800725c:	4433      	add	r3, r6
 800725e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007260:	e72c      	b.n	80070bc <_vfprintf_r+0xa0>
 8007262:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007264:	aa2a      	add	r2, sp, #168	; 0xa8
 8007266:	4648      	mov	r0, r9
 8007268:	f002 fd22 	bl	8009cb0 <__sprint_r>
 800726c:	b980      	cbnz	r0, 8007290 <_vfprintf_r+0x274>
 800726e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8007272:	e7f2      	b.n	800725a <_vfprintf_r+0x23e>
 8007274:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007276:	aa2a      	add	r2, sp, #168	; 0xa8
 8007278:	4648      	mov	r0, r9
 800727a:	f002 fd19 	bl	8009cb0 <__sprint_r>
 800727e:	2800      	cmp	r0, #0
 8007280:	f000 808d 	beq.w	800739e <_vfprintf_r+0x382>
 8007284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007286:	b11b      	cbz	r3, 8007290 <_vfprintf_r+0x274>
 8007288:	9818      	ldr	r0, [sp, #96]	; 0x60
 800728a:	4619      	mov	r1, r3
 800728c:	f001 feb6 	bl	8008ffc <_free_r>
 8007290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007292:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007294:	899b      	ldrh	r3, [r3, #12]
 8007296:	07d4      	lsls	r4, r2, #31
 8007298:	f140 8111 	bpl.w	80074be <_vfprintf_r+0x4a2>
 800729c:	0659      	lsls	r1, r3, #25
 800729e:	f101 829e 	bmi.w	80087de <_vfprintf_r+0x17c2>
 80072a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80072a4:	b057      	add	sp, #348	; 0x15c
 80072a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072aa:	2f00      	cmp	r7, #0
 80072ac:	f000 8086 	beq.w	80073bc <_vfprintf_r+0x3a0>
 80072b0:	2200      	movs	r2, #0
 80072b2:	f88d 70f4 	strb.w	r7, [sp, #244]	; 0xf4
 80072b6:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 80072ba:	2301      	movs	r3, #1
 80072bc:	9307      	str	r3, [sp, #28]
 80072be:	920e      	str	r2, [sp, #56]	; 0x38
 80072c0:	930c      	str	r3, [sp, #48]	; 0x30
 80072c2:	9208      	str	r2, [sp, #32]
 80072c4:	9210      	str	r2, [sp, #64]	; 0x40
 80072c6:	9215      	str	r2, [sp, #84]	; 0x54
 80072c8:	9213      	str	r2, [sp, #76]	; 0x4c
 80072ca:	ad3d      	add	r5, sp, #244	; 0xf4
 80072cc:	f01a 0302 	ands.w	r3, sl, #2
 80072d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80072d2:	d002      	beq.n	80072da <_vfprintf_r+0x2be>
 80072d4:	9b07      	ldr	r3, [sp, #28]
 80072d6:	3302      	adds	r3, #2
 80072d8:	9307      	str	r3, [sp, #28]
 80072da:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80072de:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80072e0:	9312      	str	r3, [sp, #72]	; 0x48
 80072e2:	d105      	bne.n	80072f0 <_vfprintf_r+0x2d4>
 80072e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e6:	9907      	ldr	r1, [sp, #28]
 80072e8:	1a5e      	subs	r6, r3, r1
 80072ea:	2e00      	cmp	r6, #0
 80072ec:	f300 80af 	bgt.w	800744e <_vfprintf_r+0x432>
 80072f0:	b18a      	cbz	r2, 8007316 <_vfprintf_r+0x2fa>
 80072f2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80072f4:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
 80072f8:	3201      	adds	r2, #1
 80072fa:	3401      	adds	r4, #1
 80072fc:	f8c8 1000 	str.w	r1, [r8]
 8007300:	2a07      	cmp	r2, #7
 8007302:	f04f 0101 	mov.w	r1, #1
 8007306:	942c      	str	r4, [sp, #176]	; 0xb0
 8007308:	922b      	str	r2, [sp, #172]	; 0xac
 800730a:	f8c8 1004 	str.w	r1, [r8, #4]
 800730e:	f300 83bf 	bgt.w	8007a90 <_vfprintf_r+0xa74>
 8007312:	f108 0808 	add.w	r8, r8, #8
 8007316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007318:	b183      	cbz	r3, 800733c <_vfprintf_r+0x320>
 800731a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800731c:	aa23      	add	r2, sp, #140	; 0x8c
 800731e:	3301      	adds	r3, #1
 8007320:	3402      	adds	r4, #2
 8007322:	f8c8 2000 	str.w	r2, [r8]
 8007326:	2b07      	cmp	r3, #7
 8007328:	f04f 0202 	mov.w	r2, #2
 800732c:	942c      	str	r4, [sp, #176]	; 0xb0
 800732e:	932b      	str	r3, [sp, #172]	; 0xac
 8007330:	f8c8 2004 	str.w	r2, [r8, #4]
 8007334:	f300 83b8 	bgt.w	8007aa8 <_vfprintf_r+0xa8c>
 8007338:	f108 0808 	add.w	r8, r8, #8
 800733c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800733e:	2b80      	cmp	r3, #128	; 0x80
 8007340:	f000 82a0 	beq.w	8007884 <_vfprintf_r+0x868>
 8007344:	9b08      	ldr	r3, [sp, #32]
 8007346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007348:	1a9e      	subs	r6, r3, r2
 800734a:	2e00      	cmp	r6, #0
 800734c:	f300 82e6 	bgt.w	800791c <_vfprintf_r+0x900>
 8007350:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007354:	f040 823d 	bne.w	80077d2 <_vfprintf_r+0x7b6>
 8007358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800735a:	f8c8 3004 	str.w	r3, [r8, #4]
 800735e:	441c      	add	r4, r3
 8007360:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007362:	f8c8 5000 	str.w	r5, [r8]
 8007366:	3301      	adds	r3, #1
 8007368:	2b07      	cmp	r3, #7
 800736a:	942c      	str	r4, [sp, #176]	; 0xb0
 800736c:	932b      	str	r3, [sp, #172]	; 0xac
 800736e:	f300 832c 	bgt.w	80079ca <_vfprintf_r+0x9ae>
 8007372:	f108 0808 	add.w	r8, r8, #8
 8007376:	f01a 0f04 	tst.w	sl, #4
 800737a:	d005      	beq.n	8007388 <_vfprintf_r+0x36c>
 800737c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800737e:	9a07      	ldr	r2, [sp, #28]
 8007380:	1a9d      	subs	r5, r3, r2
 8007382:	2d00      	cmp	r5, #0
 8007384:	f300 839c 	bgt.w	8007ac0 <_vfprintf_r+0xaa4>
 8007388:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800738c:	9907      	ldr	r1, [sp, #28]
 800738e:	428a      	cmp	r2, r1
 8007390:	bfac      	ite	ge
 8007392:	189b      	addge	r3, r3, r2
 8007394:	185b      	addlt	r3, r3, r1
 8007396:	930b      	str	r3, [sp, #44]	; 0x2c
 8007398:	2c00      	cmp	r4, #0
 800739a:	f47f af6b 	bne.w	8007274 <_vfprintf_r+0x258>
 800739e:	2300      	movs	r3, #0
 80073a0:	932b      	str	r3, [sp, #172]	; 0xac
 80073a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073a4:	b11b      	cbz	r3, 80073ae <_vfprintf_r+0x392>
 80073a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80073a8:	4648      	mov	r0, r9
 80073aa:	f001 fe27 	bl	8008ffc <_free_r>
 80073ae:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 80073b2:	465d      	mov	r5, fp
 80073b4:	782b      	ldrb	r3, [r5, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f47f ae73 	bne.w	80070a2 <_vfprintf_r+0x86>
 80073bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f041 81b1 	bne.w	8008726 <_vfprintf_r+0x170a>
 80073c4:	2300      	movs	r3, #0
 80073c6:	932b      	str	r3, [sp, #172]	; 0xac
 80073c8:	e762      	b.n	8007290 <_vfprintf_r+0x274>
 80073ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073cc:	3307      	adds	r3, #7
 80073ce:	f023 0207 	bic.w	r2, r3, #7
 80073d2:	e8f2 3402 	ldrd	r3, r4, [r2], #8
 80073d6:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 80073da:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80073de:	920d      	str	r2, [sp, #52]	; 0x34
 80073e0:	461e      	mov	r6, r3
 80073e2:	4618      	mov	r0, r3
 80073e4:	4621      	mov	r1, r4
 80073e6:	4bb8      	ldr	r3, [pc, #736]	; (80076c8 <_vfprintf_r+0x6ac>)
 80073e8:	f04f 32ff 	mov.w	r2, #4294967295
 80073ec:	f7f9 fcb2 	bl	8000d54 <__aeabi_dcmpun>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	f040 8506 	bne.w	8007e02 <_vfprintf_r+0xde6>
 80073f6:	4bb4      	ldr	r3, [pc, #720]	; (80076c8 <_vfprintf_r+0x6ac>)
 80073f8:	4630      	mov	r0, r6
 80073fa:	4621      	mov	r1, r4
 80073fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007400:	f7f9 fbf0 	bl	8000be4 <__aeabi_dcmple>
 8007404:	2800      	cmp	r0, #0
 8007406:	f040 84fc 	bne.w	8007e02 <_vfprintf_r+0xde6>
 800740a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800740e:	2200      	movs	r2, #0
 8007410:	2300      	movs	r3, #0
 8007412:	f7f9 fbdd 	bl	8000bd0 <__aeabi_dcmplt>
 8007416:	2800      	cmp	r0, #0
 8007418:	f040 873c 	bne.w	8008294 <_vfprintf_r+0x1278>
 800741c:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8007420:	4daa      	ldr	r5, [pc, #680]	; (80076cc <_vfprintf_r+0x6b0>)
 8007422:	4bab      	ldr	r3, [pc, #684]	; (80076d0 <_vfprintf_r+0x6b4>)
 8007424:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8007428:	2103      	movs	r1, #3
 800742a:	2f47      	cmp	r7, #71	; 0x47
 800742c:	bfc8      	it	gt
 800742e:	461d      	movgt	r5, r3
 8007430:	2300      	movs	r3, #0
 8007432:	930e      	str	r3, [sp, #56]	; 0x38
 8007434:	9107      	str	r1, [sp, #28]
 8007436:	910c      	str	r1, [sp, #48]	; 0x30
 8007438:	9308      	str	r3, [sp, #32]
 800743a:	9310      	str	r3, [sp, #64]	; 0x40
 800743c:	9315      	str	r3, [sp, #84]	; 0x54
 800743e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007440:	2a00      	cmp	r2, #0
 8007442:	f43f af43 	beq.w	80072cc <_vfprintf_r+0x2b0>
 8007446:	9b07      	ldr	r3, [sp, #28]
 8007448:	3301      	adds	r3, #1
 800744a:	9307      	str	r3, [sp, #28]
 800744c:	e73e      	b.n	80072cc <_vfprintf_r+0x2b0>
 800744e:	2e10      	cmp	r6, #16
 8007450:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8007452:	dd23      	ble.n	800749c <_vfprintf_r+0x480>
 8007454:	4621      	mov	r1, r4
 8007456:	2310      	movs	r3, #16
 8007458:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800745a:	e004      	b.n	8007466 <_vfprintf_r+0x44a>
 800745c:	3e10      	subs	r6, #16
 800745e:	2e10      	cmp	r6, #16
 8007460:	f108 0808 	add.w	r8, r8, #8
 8007464:	dd19      	ble.n	800749a <_vfprintf_r+0x47e>
 8007466:	3201      	adds	r2, #1
 8007468:	489a      	ldr	r0, [pc, #616]	; (80076d4 <_vfprintf_r+0x6b8>)
 800746a:	3110      	adds	r1, #16
 800746c:	2a07      	cmp	r2, #7
 800746e:	e9c8 0300 	strd	r0, r3, [r8]
 8007472:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
 8007476:	ddf1      	ble.n	800745c <_vfprintf_r+0x440>
 8007478:	aa2a      	add	r2, sp, #168	; 0xa8
 800747a:	4621      	mov	r1, r4
 800747c:	4648      	mov	r0, r9
 800747e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8007482:	f002 fc15 	bl	8009cb0 <__sprint_r>
 8007486:	2800      	cmp	r0, #0
 8007488:	f47f aefc 	bne.w	8007284 <_vfprintf_r+0x268>
 800748c:	3e10      	subs	r6, #16
 800748e:	2e10      	cmp	r6, #16
 8007490:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
 8007494:	f04f 0310 	mov.w	r3, #16
 8007498:	dce5      	bgt.n	8007466 <_vfprintf_r+0x44a>
 800749a:	460c      	mov	r4, r1
 800749c:	3201      	adds	r2, #1
 800749e:	4b8d      	ldr	r3, [pc, #564]	; (80076d4 <_vfprintf_r+0x6b8>)
 80074a0:	f8c8 6004 	str.w	r6, [r8, #4]
 80074a4:	4434      	add	r4, r6
 80074a6:	2a07      	cmp	r2, #7
 80074a8:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 80074ac:	f8c8 3000 	str.w	r3, [r8]
 80074b0:	f300 8632 	bgt.w	8008118 <_vfprintf_r+0x10fc>
 80074b4:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 80074b8:	f108 0808 	add.w	r8, r8, #8
 80074bc:	e718      	b.n	80072f0 <_vfprintf_r+0x2d4>
 80074be:	0598      	lsls	r0, r3, #22
 80074c0:	f53f aeec 	bmi.w	800729c <_vfprintf_r+0x280>
 80074c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80074c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074c8:	f004 f8e5 	bl	800b696 <__retarget_lock_release_recursive>
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	e6e5      	b.n	800729c <_vfprintf_r+0x280>
 80074d0:	9818      	ldr	r0, [sp, #96]	; 0x60
 80074d2:	f001 fcbd 	bl	8008e50 <__sinit>
 80074d6:	e5b7      	b.n	8007048 <_vfprintf_r+0x2c>
 80074d8:	f89b 7000 	ldrb.w	r7, [fp]
 80074dc:	f04a 0a20 	orr.w	sl, sl, #32
 80074e0:	e5ff      	b.n	80070e2 <_vfprintf_r+0xc6>
 80074e2:	f04a 0a10 	orr.w	sl, sl, #16
 80074e6:	f01a 0f20 	tst.w	sl, #32
 80074ea:	f000 841b 	beq.w	8007d24 <_vfprintf_r+0xd08>
 80074ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074f0:	3307      	adds	r3, #7
 80074f2:	f023 0307 	bic.w	r3, r3, #7
 80074f6:	461a      	mov	r2, r3
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f852 4b08 	ldr.w	r4, [r2], #8
 80074fe:	920d      	str	r2, [sp, #52]	; 0x34
 8007500:	461e      	mov	r6, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	f2c0 841f 	blt.w	8007d46 <_vfprintf_r+0xd2a>
 8007508:	9b08      	ldr	r3, [sp, #32]
 800750a:	3301      	adds	r3, #1
 800750c:	f000 82af 	beq.w	8007a6e <_vfprintf_r+0xa52>
 8007510:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8007514:	ea54 0306 	orrs.w	r3, r4, r6
 8007518:	f8cd a01c 	str.w	sl, [sp, #28]
 800751c:	f040 82a9 	bne.w	8007a72 <_vfprintf_r+0xa56>
 8007520:	9b08      	ldr	r3, [sp, #32]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f040 82aa 	bne.w	8007a7c <_vfprintf_r+0xa60>
 8007528:	2300      	movs	r3, #0
 800752a:	9308      	str	r3, [sp, #32]
 800752c:	930c      	str	r3, [sp, #48]	; 0x30
 800752e:	ad56      	add	r5, sp, #344	; 0x158
 8007530:	e121      	b.n	8007776 <_vfprintf_r+0x75a>
 8007532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007534:	2200      	movs	r2, #0
 8007536:	f853 1b04 	ldr.w	r1, [r3], #4
 800753a:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 800753e:	f88d 10f4 	strb.w	r1, [sp, #244]	; 0xf4
 8007542:	930d      	str	r3, [sp, #52]	; 0x34
 8007544:	e6b9      	b.n	80072ba <_vfprintf_r+0x29e>
 8007546:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007548:	9b08      	ldr	r3, [sp, #32]
 800754a:	f854 5b04 	ldr.w	r5, [r4], #4
 800754e:	2600      	movs	r6, #0
 8007550:	f88d 608b 	strb.w	r6, [sp, #139]	; 0x8b
 8007554:	2d00      	cmp	r5, #0
 8007556:	f000 8571 	beq.w	800803c <_vfprintf_r+0x1020>
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	f000 865a 	beq.w	8008214 <_vfprintf_r+0x11f8>
 8007560:	461a      	mov	r2, r3
 8007562:	4631      	mov	r1, r6
 8007564:	4628      	mov	r0, r5
 8007566:	f7f8 fe9b 	bl	80002a0 <memchr>
 800756a:	900e      	str	r0, [sp, #56]	; 0x38
 800756c:	2800      	cmp	r0, #0
 800756e:	f001 80b5 	beq.w	80086dc <_vfprintf_r+0x16c0>
 8007572:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007574:	9608      	str	r6, [sp, #32]
 8007576:	1b5b      	subs	r3, r3, r5
 8007578:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800757c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007580:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8007584:	9307      	str	r3, [sp, #28]
 8007586:	960e      	str	r6, [sp, #56]	; 0x38
 8007588:	9610      	str	r6, [sp, #64]	; 0x40
 800758a:	9615      	str	r6, [sp, #84]	; 0x54
 800758c:	9613      	str	r6, [sp, #76]	; 0x4c
 800758e:	e757      	b.n	8007440 <_vfprintf_r+0x424>
 8007590:	f04a 0a10 	orr.w	sl, sl, #16
 8007594:	f01a 0620 	ands.w	r6, sl, #32
 8007598:	f000 83b5 	beq.w	8007d06 <_vfprintf_r+0xcea>
 800759c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800759e:	3307      	adds	r3, #7
 80075a0:	f023 0307 	bic.w	r3, r3, #7
 80075a4:	685e      	ldr	r6, [r3, #4]
 80075a6:	f853 4b08 	ldr.w	r4, [r3], #8
 80075aa:	930d      	str	r3, [sp, #52]	; 0x34
 80075ac:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 80075b0:	9307      	str	r3, [sp, #28]
 80075b2:	2300      	movs	r3, #0
 80075b4:	2200      	movs	r2, #0
 80075b6:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 80075ba:	9a08      	ldr	r2, [sp, #32]
 80075bc:	1c55      	adds	r5, r2, #1
 80075be:	f000 80c2 	beq.w	8007746 <_vfprintf_r+0x72a>
 80075c2:	9907      	ldr	r1, [sp, #28]
 80075c4:	f021 0a80 	bic.w	sl, r1, #128	; 0x80
 80075c8:	ea54 0106 	orrs.w	r1, r4, r6
 80075cc:	f040 80b9 	bne.w	8007742 <_vfprintf_r+0x726>
 80075d0:	2a00      	cmp	r2, #0
 80075d2:	f040 85d4 	bne.w	800817e <_vfprintf_r+0x1162>
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1a6      	bne.n	8007528 <_vfprintf_r+0x50c>
 80075da:	9b07      	ldr	r3, [sp, #28]
 80075dc:	f013 0301 	ands.w	r3, r3, #1
 80075e0:	930c      	str	r3, [sp, #48]	; 0x30
 80075e2:	f000 83f3 	beq.w	8007dcc <_vfprintf_r+0xdb0>
 80075e6:	2330      	movs	r3, #48	; 0x30
 80075e8:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
 80075ec:	f20d 1557 	addw	r5, sp, #343	; 0x157
 80075f0:	e0c1      	b.n	8007776 <_vfprintf_r+0x75a>
 80075f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075f8:	920a      	str	r2, [sp, #40]	; 0x28
 80075fa:	2a00      	cmp	r2, #0
 80075fc:	f280 83b9 	bge.w	8007d72 <_vfprintf_r+0xd56>
 8007600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007602:	930d      	str	r3, [sp, #52]	; 0x34
 8007604:	4252      	negs	r2, r2
 8007606:	920a      	str	r2, [sp, #40]	; 0x28
 8007608:	f89b 7000 	ldrb.w	r7, [fp]
 800760c:	f04a 0a04 	orr.w	sl, sl, #4
 8007610:	e567      	b.n	80070e2 <_vfprintf_r+0xc6>
 8007612:	f89b 7000 	ldrb.w	r7, [fp]
 8007616:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
 800761a:	e562      	b.n	80070e2 <_vfprintf_r+0xc6>
 800761c:	f89b 7000 	ldrb.w	r7, [fp]
 8007620:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8007624:	e55d      	b.n	80070e2 <_vfprintf_r+0xc6>
 8007626:	465a      	mov	r2, fp
 8007628:	f812 7b01 	ldrb.w	r7, [r2], #1
 800762c:	2f2a      	cmp	r7, #42	; 0x2a
 800762e:	f001 81e7 	beq.w	8008a00 <_vfprintf_r+0x19e4>
 8007632:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007636:	2b09      	cmp	r3, #9
 8007638:	4693      	mov	fp, r2
 800763a:	bf98      	it	ls
 800763c:	2200      	movls	r2, #0
 800763e:	f201 8086 	bhi.w	800874e <_vfprintf_r+0x1732>
 8007642:	f81b 7b01 	ldrb.w	r7, [fp], #1
 8007646:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800764a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800764e:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007652:	2b09      	cmp	r3, #9
 8007654:	d9f5      	bls.n	8007642 <_vfprintf_r+0x626>
 8007656:	9208      	str	r2, [sp, #32]
 8007658:	e545      	b.n	80070e6 <_vfprintf_r+0xca>
 800765a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800765c:	f01a 0f20 	tst.w	sl, #32
 8007660:	f852 3b04 	ldr.w	r3, [r2], #4
 8007664:	920d      	str	r2, [sp, #52]	; 0x34
 8007666:	f040 8493 	bne.w	8007f90 <_vfprintf_r+0xf74>
 800766a:	f01a 0f10 	tst.w	sl, #16
 800766e:	f040 858c 	bne.w	800818a <_vfprintf_r+0x116e>
 8007672:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007676:	f040 861b 	bne.w	80082b0 <_vfprintf_r+0x1294>
 800767a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800767e:	f000 8584 	beq.w	800818a <_vfprintf_r+0x116e>
 8007682:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007684:	701a      	strb	r2, [r3, #0]
 8007686:	465d      	mov	r5, fp
 8007688:	e694      	b.n	80073b4 <_vfprintf_r+0x398>
 800768a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800768c:	f853 4b04 	ldr.w	r4, [r3], #4
 8007690:	930d      	str	r3, [sp, #52]	; 0x34
 8007692:	2330      	movs	r3, #48	; 0x30
 8007694:	f04a 0202 	orr.w	r2, sl, #2
 8007698:	2778      	movs	r7, #120	; 0x78
 800769a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 800769e:	4b0e      	ldr	r3, [pc, #56]	; (80076d8 <_vfprintf_r+0x6bc>)
 80076a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80076a2:	9207      	str	r2, [sp, #28]
 80076a4:	f88d 708d 	strb.w	r7, [sp, #141]	; 0x8d
 80076a8:	2600      	movs	r6, #0
 80076aa:	2302      	movs	r3, #2
 80076ac:	e782      	b.n	80075b4 <_vfprintf_r+0x598>
 80076ae:	f89b 7000 	ldrb.w	r7, [fp]
 80076b2:	2f6c      	cmp	r7, #108	; 0x6c
 80076b4:	bf03      	ittte	eq
 80076b6:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
 80076ba:	f04a 0a20 	orreq.w	sl, sl, #32
 80076be:	f10b 0b01 	addeq.w	fp, fp, #1
 80076c2:	f04a 0a10 	orrne.w	sl, sl, #16
 80076c6:	e50c      	b.n	80070e2 <_vfprintf_r+0xc6>
 80076c8:	7fefffff 	.word	0x7fefffff
 80076cc:	0800c920 	.word	0x0800c920
 80076d0:	0800c924 	.word	0x0800c924
 80076d4:	0800c984 	.word	0x0800c984
 80076d8:	0800c930 	.word	0x0800c930
 80076dc:	f89b 7000 	ldrb.w	r7, [fp]
 80076e0:	2f68      	cmp	r7, #104	; 0x68
 80076e2:	bf03      	ittte	eq
 80076e4:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
 80076e8:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 80076ec:	f10b 0b01 	addeq.w	fp, fp, #1
 80076f0:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 80076f4:	e4f5      	b.n	80070e2 <_vfprintf_r+0xc6>
 80076f6:	f04a 0310 	orr.w	r3, sl, #16
 80076fa:	9307      	str	r3, [sp, #28]
 80076fc:	9b07      	ldr	r3, [sp, #28]
 80076fe:	f013 0620 	ands.w	r6, r3, #32
 8007702:	f000 82ed 	beq.w	8007ce0 <_vfprintf_r+0xcc4>
 8007706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007708:	3307      	adds	r3, #7
 800770a:	f023 0307 	bic.w	r3, r3, #7
 800770e:	685e      	ldr	r6, [r3, #4]
 8007710:	f853 4b08 	ldr.w	r4, [r3], #8
 8007714:	930d      	str	r3, [sp, #52]	; 0x34
 8007716:	2301      	movs	r3, #1
 8007718:	e74c      	b.n	80075b4 <_vfprintf_r+0x598>
 800771a:	f89b 7000 	ldrb.w	r7, [fp]
 800771e:	f04a 0a08 	orr.w	sl, sl, #8
 8007722:	e4de      	b.n	80070e2 <_vfprintf_r+0xc6>
 8007724:	f89b 7000 	ldrb.w	r7, [fp]
 8007728:	f04a 0a01 	orr.w	sl, sl, #1
 800772c:	e4d9      	b.n	80070e2 <_vfprintf_r+0xc6>
 800772e:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
 8007732:	f89b 7000 	ldrb.w	r7, [fp]
 8007736:	2b00      	cmp	r3, #0
 8007738:	f47f acd3 	bne.w	80070e2 <_vfprintf_r+0xc6>
 800773c:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
 8007740:	e4cf      	b.n	80070e2 <_vfprintf_r+0xc6>
 8007742:	f8cd a01c 	str.w	sl, [sp, #28]
 8007746:	2b01      	cmp	r3, #1
 8007748:	f000 8193 	beq.w	8007a72 <_vfprintf_r+0xa56>
 800774c:	2b02      	cmp	r3, #2
 800774e:	ad56      	add	r5, sp, #344	; 0x158
 8007750:	d120      	bne.n	8007794 <_vfprintf_r+0x778>
 8007752:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007754:	f004 030f 	and.w	r3, r4, #15
 8007758:	0924      	lsrs	r4, r4, #4
 800775a:	5cd3      	ldrb	r3, [r2, r3]
 800775c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007760:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
 8007764:	0936      	lsrs	r6, r6, #4
 8007766:	ea54 0306 	orrs.w	r3, r4, r6
 800776a:	d1f3      	bne.n	8007754 <_vfprintf_r+0x738>
 800776c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007770:	ab56      	add	r3, sp, #344	; 0x158
 8007772:	1b5b      	subs	r3, r3, r5
 8007774:	930c      	str	r3, [sp, #48]	; 0x30
 8007776:	9908      	ldr	r1, [sp, #32]
 8007778:	980c      	ldr	r0, [sp, #48]	; 0x30
 800777a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 800777e:	4281      	cmp	r1, r0
 8007780:	f04f 0300 	mov.w	r3, #0
 8007784:	bfb8      	it	lt
 8007786:	4601      	movlt	r1, r0
 8007788:	930e      	str	r3, [sp, #56]	; 0x38
 800778a:	9107      	str	r1, [sp, #28]
 800778c:	9310      	str	r3, [sp, #64]	; 0x40
 800778e:	9315      	str	r3, [sp, #84]	; 0x54
 8007790:	9313      	str	r3, [sp, #76]	; 0x4c
 8007792:	e655      	b.n	8007440 <_vfprintf_r+0x424>
 8007794:	f004 0307 	and.w	r3, r4, #7
 8007798:	08e4      	lsrs	r4, r4, #3
 800779a:	ea44 7446 	orr.w	r4, r4, r6, lsl #29
 800779e:	08f6      	lsrs	r6, r6, #3
 80077a0:	3330      	adds	r3, #48	; 0x30
 80077a2:	ea54 0106 	orrs.w	r1, r4, r6
 80077a6:	462a      	mov	r2, r5
 80077a8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80077ac:	d1f2      	bne.n	8007794 <_vfprintf_r+0x778>
 80077ae:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80077b2:	f01a 0f01 	tst.w	sl, #1
 80077b6:	d0db      	beq.n	8007770 <_vfprintf_r+0x754>
 80077b8:	2b30      	cmp	r3, #48	; 0x30
 80077ba:	d0d7      	beq.n	800776c <_vfprintf_r+0x750>
 80077bc:	2330      	movs	r3, #48	; 0x30
 80077be:	3a02      	subs	r2, #2
 80077c0:	f805 3c01 	strb.w	r3, [r5, #-1]
 80077c4:	ab56      	add	r3, sp, #344	; 0x158
 80077c6:	1a9b      	subs	r3, r3, r2
 80077c8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80077cc:	930c      	str	r3, [sp, #48]	; 0x30
 80077ce:	4615      	mov	r5, r2
 80077d0:	e7d1      	b.n	8007776 <_vfprintf_r+0x75a>
 80077d2:	2f65      	cmp	r7, #101	; 0x65
 80077d4:	f340 8105 	ble.w	80079e2 <_vfprintf_r+0x9c6>
 80077d8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80077dc:	2200      	movs	r2, #0
 80077de:	2300      	movs	r3, #0
 80077e0:	f7f9 f9ec 	bl	8000bbc <__aeabi_dcmpeq>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	f000 81a8 	beq.w	8007b3a <_vfprintf_r+0xb1e>
 80077ea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80077ec:	4ab7      	ldr	r2, [pc, #732]	; (8007acc <_vfprintf_r+0xab0>)
 80077ee:	f8c8 2000 	str.w	r2, [r8]
 80077f2:	3301      	adds	r3, #1
 80077f4:	3401      	adds	r4, #1
 80077f6:	2201      	movs	r2, #1
 80077f8:	2b07      	cmp	r3, #7
 80077fa:	942c      	str	r4, [sp, #176]	; 0xb0
 80077fc:	932b      	str	r3, [sp, #172]	; 0xac
 80077fe:	f8c8 2004 	str.w	r2, [r8, #4]
 8007802:	f300 84a1 	bgt.w	8008148 <_vfprintf_r+0x112c>
 8007806:	f108 0808 	add.w	r8, r8, #8
 800780a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800780c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800780e:	4293      	cmp	r3, r2
 8007810:	f280 82a3 	bge.w	8007d5a <_vfprintf_r+0xd3e>
 8007814:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007816:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007818:	441c      	add	r4, r3
 800781a:	e9c8 2300 	strd	r2, r3, [r8]
 800781e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007820:	942c      	str	r4, [sp, #176]	; 0xb0
 8007822:	3301      	adds	r3, #1
 8007824:	2b07      	cmp	r3, #7
 8007826:	932b      	str	r3, [sp, #172]	; 0xac
 8007828:	f300 83fb 	bgt.w	8008022 <_vfprintf_r+0x1006>
 800782c:	f108 0808 	add.w	r8, r8, #8
 8007830:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007832:	1e5d      	subs	r5, r3, #1
 8007834:	2d00      	cmp	r5, #0
 8007836:	f77f ad9e 	ble.w	8007376 <_vfprintf_r+0x35a>
 800783a:	2d10      	cmp	r5, #16
 800783c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800783e:	f341 80d5 	ble.w	80089ec <_vfprintf_r+0x19d0>
 8007842:	4fa3      	ldr	r7, [pc, #652]	; (8007ad0 <_vfprintf_r+0xab4>)
 8007844:	970f      	str	r7, [sp, #60]	; 0x3c
 8007846:	4622      	mov	r2, r4
 8007848:	2610      	movs	r6, #16
 800784a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800784c:	e005      	b.n	800785a <_vfprintf_r+0x83e>
 800784e:	f108 0808 	add.w	r8, r8, #8
 8007852:	3d10      	subs	r5, #16
 8007854:	2d10      	cmp	r5, #16
 8007856:	f340 8484 	ble.w	8008162 <_vfprintf_r+0x1146>
 800785a:	3301      	adds	r3, #1
 800785c:	3210      	adds	r2, #16
 800785e:	2b07      	cmp	r3, #7
 8007860:	e9c8 7600 	strd	r7, r6, [r8]
 8007864:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
 8007868:	ddf1      	ble.n	800784e <_vfprintf_r+0x832>
 800786a:	aa2a      	add	r2, sp, #168	; 0xa8
 800786c:	4621      	mov	r1, r4
 800786e:	4648      	mov	r0, r9
 8007870:	f002 fa1e 	bl	8009cb0 <__sprint_r>
 8007874:	2800      	cmp	r0, #0
 8007876:	f47f ad05 	bne.w	8007284 <_vfprintf_r+0x268>
 800787a:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
 800787e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8007882:	e7e6      	b.n	8007852 <_vfprintf_r+0x836>
 8007884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007886:	9a07      	ldr	r2, [sp, #28]
 8007888:	1a9e      	subs	r6, r3, r2
 800788a:	2e00      	cmp	r6, #0
 800788c:	f77f ad5a 	ble.w	8007344 <_vfprintf_r+0x328>
 8007890:	2e10      	cmp	r6, #16
 8007892:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007894:	f340 87e5 	ble.w	8008862 <_vfprintf_r+0x1846>
 8007898:	488d      	ldr	r0, [pc, #564]	; (8007ad0 <_vfprintf_r+0xab4>)
 800789a:	9712      	str	r7, [sp, #72]	; 0x48
 800789c:	4621      	mov	r1, r4
 800789e:	464f      	mov	r7, r9
 80078a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80078a2:	46a9      	mov	r9, r5
 80078a4:	461a      	mov	r2, r3
 80078a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80078a8:	4604      	mov	r4, r0
 80078aa:	e004      	b.n	80078b6 <_vfprintf_r+0x89a>
 80078ac:	3e10      	subs	r6, #16
 80078ae:	2e10      	cmp	r6, #16
 80078b0:	f108 0808 	add.w	r8, r8, #8
 80078b4:	dd19      	ble.n	80078ea <_vfprintf_r+0x8ce>
 80078b6:	3201      	adds	r2, #1
 80078b8:	3110      	adds	r1, #16
 80078ba:	2310      	movs	r3, #16
 80078bc:	2a07      	cmp	r2, #7
 80078be:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
 80078c2:	f8c8 4000 	str.w	r4, [r8]
 80078c6:	f8c8 3004 	str.w	r3, [r8, #4]
 80078ca:	ddef      	ble.n	80078ac <_vfprintf_r+0x890>
 80078cc:	aa2a      	add	r2, sp, #168	; 0xa8
 80078ce:	4629      	mov	r1, r5
 80078d0:	4638      	mov	r0, r7
 80078d2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 80078d6:	f002 f9eb 	bl	8009cb0 <__sprint_r>
 80078da:	2800      	cmp	r0, #0
 80078dc:	f47f acd2 	bne.w	8007284 <_vfprintf_r+0x268>
 80078e0:	3e10      	subs	r6, #16
 80078e2:	2e10      	cmp	r6, #16
 80078e4:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
 80078e8:	dce5      	bgt.n	80078b6 <_vfprintf_r+0x89a>
 80078ea:	464d      	mov	r5, r9
 80078ec:	46b9      	mov	r9, r7
 80078ee:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80078f0:	4613      	mov	r3, r2
 80078f2:	460c      	mov	r4, r1
 80078f4:	3301      	adds	r3, #1
 80078f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078f8:	f8c8 2000 	str.w	r2, [r8]
 80078fc:	4434      	add	r4, r6
 80078fe:	2b07      	cmp	r3, #7
 8007900:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8007904:	f8c8 6004 	str.w	r6, [r8, #4]
 8007908:	f300 837e 	bgt.w	8008008 <_vfprintf_r+0xfec>
 800790c:	9b08      	ldr	r3, [sp, #32]
 800790e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007910:	1a9e      	subs	r6, r3, r2
 8007912:	2e00      	cmp	r6, #0
 8007914:	f108 0808 	add.w	r8, r8, #8
 8007918:	f77f ad1a 	ble.w	8007350 <_vfprintf_r+0x334>
 800791c:	2e10      	cmp	r6, #16
 800791e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007920:	f340 84a0 	ble.w	8008264 <_vfprintf_r+0x1248>
 8007924:	486a      	ldr	r0, [pc, #424]	; (8007ad0 <_vfprintf_r+0xab4>)
 8007926:	900f      	str	r0, [sp, #60]	; 0x3c
 8007928:	4642      	mov	r2, r8
 800792a:	4621      	mov	r1, r4
 800792c:	46a8      	mov	r8, r5
 800792e:	4604      	mov	r4, r0
 8007930:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007932:	e004      	b.n	800793e <_vfprintf_r+0x922>
 8007934:	3e10      	subs	r6, #16
 8007936:	2e10      	cmp	r6, #16
 8007938:	f102 0208 	add.w	r2, r2, #8
 800793c:	dd16      	ble.n	800796c <_vfprintf_r+0x950>
 800793e:	3301      	adds	r3, #1
 8007940:	3110      	adds	r1, #16
 8007942:	2010      	movs	r0, #16
 8007944:	2b07      	cmp	r3, #7
 8007946:	e9cd 312b 	strd	r3, r1, [sp, #172]	; 0xac
 800794a:	6014      	str	r4, [r2, #0]
 800794c:	6050      	str	r0, [r2, #4]
 800794e:	ddf1      	ble.n	8007934 <_vfprintf_r+0x918>
 8007950:	aa2a      	add	r2, sp, #168	; 0xa8
 8007952:	4629      	mov	r1, r5
 8007954:	4648      	mov	r0, r9
 8007956:	f002 f9ab 	bl	8009cb0 <__sprint_r>
 800795a:	2800      	cmp	r0, #0
 800795c:	f47f ac92 	bne.w	8007284 <_vfprintf_r+0x268>
 8007960:	3e10      	subs	r6, #16
 8007962:	2e10      	cmp	r6, #16
 8007964:	e9dd 312b 	ldrd	r3, r1, [sp, #172]	; 0xac
 8007968:	aa2d      	add	r2, sp, #180	; 0xb4
 800796a:	dce8      	bgt.n	800793e <_vfprintf_r+0x922>
 800796c:	4645      	mov	r5, r8
 800796e:	460c      	mov	r4, r1
 8007970:	4690      	mov	r8, r2
 8007972:	3301      	adds	r3, #1
 8007974:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007976:	f8c8 2000 	str.w	r2, [r8]
 800797a:	4434      	add	r4, r6
 800797c:	2b07      	cmp	r3, #7
 800797e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8007982:	f8c8 6004 	str.w	r6, [r8, #4]
 8007986:	f300 819e 	bgt.w	8007cc6 <_vfprintf_r+0xcaa>
 800798a:	f108 0808 	add.w	r8, r8, #8
 800798e:	e4df      	b.n	8007350 <_vfprintf_r+0x334>
 8007990:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007992:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007994:	441c      	add	r4, r3
 8007996:	e9c8 1300 	strd	r1, r3, [r8]
 800799a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800799c:	942c      	str	r4, [sp, #176]	; 0xb0
 800799e:	3301      	adds	r3, #1
 80079a0:	2b07      	cmp	r3, #7
 80079a2:	932b      	str	r3, [sp, #172]	; 0xac
 80079a4:	f300 852e 	bgt.w	8008404 <_vfprintf_r+0x13e8>
 80079a8:	f108 0808 	add.w	r8, r8, #8
 80079ac:	2a00      	cmp	r2, #0
 80079ae:	f2c0 86e5 	blt.w	800877c <_vfprintf_r+0x1760>
 80079b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80079b4:	f8c8 5000 	str.w	r5, [r8]
 80079b8:	3301      	adds	r3, #1
 80079ba:	4414      	add	r4, r2
 80079bc:	2b07      	cmp	r3, #7
 80079be:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 80079c2:	f8c8 2004 	str.w	r2, [r8, #4]
 80079c6:	f77f acd4 	ble.w	8007372 <_vfprintf_r+0x356>
 80079ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079cc:	aa2a      	add	r2, sp, #168	; 0xa8
 80079ce:	4648      	mov	r0, r9
 80079d0:	f002 f96e 	bl	8009cb0 <__sprint_r>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	f47f ac55 	bne.w	8007284 <_vfprintf_r+0x268>
 80079da:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80079dc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 80079e0:	e4c9      	b.n	8007376 <_vfprintf_r+0x35a>
 80079e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079e4:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	f104 0401 	add.w	r4, r4, #1
 80079ec:	f106 0601 	add.w	r6, r6, #1
 80079f0:	f108 0708 	add.w	r7, r8, #8
 80079f4:	f340 811f 	ble.w	8007c36 <_vfprintf_r+0xc1a>
 80079f8:	2301      	movs	r3, #1
 80079fa:	2e07      	cmp	r6, #7
 80079fc:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
 8007a00:	f8c8 5000 	str.w	r5, [r8]
 8007a04:	f8c8 3004 	str.w	r3, [r8, #4]
 8007a08:	f300 8331 	bgt.w	800806e <_vfprintf_r+0x1052>
 8007a0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007a10:	3601      	adds	r6, #1
 8007a12:	441c      	add	r4, r3
 8007a14:	2e07      	cmp	r6, #7
 8007a16:	e9c7 2300 	strd	r2, r3, [r7]
 8007a1a:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
 8007a1e:	f300 8332 	bgt.w	8008086 <_vfprintf_r+0x106a>
 8007a22:	3708      	adds	r7, #8
 8007a24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a26:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8007a2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2300      	movs	r3, #0
 8007a32:	f7f9 f8c3 	bl	8000bbc <__aeabi_dcmpeq>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	f040 8117 	bne.w	8007c6a <_vfprintf_r+0xc4e>
 8007a3c:	3601      	adds	r6, #1
 8007a3e:	3501      	adds	r5, #1
 8007a40:	4444      	add	r4, r8
 8007a42:	2e07      	cmp	r6, #7
 8007a44:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
 8007a48:	603d      	str	r5, [r7, #0]
 8007a4a:	f8c7 8004 	str.w	r8, [r7, #4]
 8007a4e:	f300 8100 	bgt.w	8007c52 <_vfprintf_r+0xc36>
 8007a52:	3708      	adds	r7, #8
 8007a54:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007a56:	607b      	str	r3, [r7, #4]
 8007a58:	3601      	adds	r6, #1
 8007a5a:	441c      	add	r4, r3
 8007a5c:	2e07      	cmp	r6, #7
 8007a5e:	ab26      	add	r3, sp, #152	; 0x98
 8007a60:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
 8007a64:	603b      	str	r3, [r7, #0]
 8007a66:	dcb0      	bgt.n	80079ca <_vfprintf_r+0x9ae>
 8007a68:	f107 0808 	add.w	r8, r7, #8
 8007a6c:	e483      	b.n	8007376 <_vfprintf_r+0x35a>
 8007a6e:	f8cd a01c 	str.w	sl, [sp, #28]
 8007a72:	2c0a      	cmp	r4, #10
 8007a74:	f176 0300 	sbcs.w	r3, r6, #0
 8007a78:	f080 8311 	bcs.w	800809e <_vfprintf_r+0x1082>
 8007a7c:	3430      	adds	r4, #48	; 0x30
 8007a7e:	2301      	movs	r3, #1
 8007a80:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007a84:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
 8007a88:	930c      	str	r3, [sp, #48]	; 0x30
 8007a8a:	f20d 1557 	addw	r5, sp, #343	; 0x157
 8007a8e:	e672      	b.n	8007776 <_vfprintf_r+0x75a>
 8007a90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a92:	aa2a      	add	r2, sp, #168	; 0xa8
 8007a94:	4648      	mov	r0, r9
 8007a96:	f002 f90b 	bl	8009cb0 <__sprint_r>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	f47f abf2 	bne.w	8007284 <_vfprintf_r+0x268>
 8007aa0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8007aa2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8007aa6:	e436      	b.n	8007316 <_vfprintf_r+0x2fa>
 8007aa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007aaa:	aa2a      	add	r2, sp, #168	; 0xa8
 8007aac:	4648      	mov	r0, r9
 8007aae:	f002 f8ff 	bl	8009cb0 <__sprint_r>
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	f47f abe6 	bne.w	8007284 <_vfprintf_r+0x268>
 8007ab8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8007aba:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8007abe:	e43d      	b.n	800733c <_vfprintf_r+0x320>
 8007ac0:	2d10      	cmp	r5, #16
 8007ac2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007ac4:	dd23      	ble.n	8007b0e <_vfprintf_r+0xaf2>
 8007ac6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007ac8:	2610      	movs	r6, #16
 8007aca:	e008      	b.n	8007ade <_vfprintf_r+0xac2>
 8007acc:	0800c960 	.word	0x0800c960
 8007ad0:	0800c994 	.word	0x0800c994
 8007ad4:	3d10      	subs	r5, #16
 8007ad6:	2d10      	cmp	r5, #16
 8007ad8:	f108 0808 	add.w	r8, r8, #8
 8007adc:	dd17      	ble.n	8007b0e <_vfprintf_r+0xaf2>
 8007ade:	3301      	adds	r3, #1
 8007ae0:	4abb      	ldr	r2, [pc, #748]	; (8007dd0 <_vfprintf_r+0xdb4>)
 8007ae2:	3410      	adds	r4, #16
 8007ae4:	2b07      	cmp	r3, #7
 8007ae6:	e9c8 2600 	strd	r2, r6, [r8]
 8007aea:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8007aee:	ddf1      	ble.n	8007ad4 <_vfprintf_r+0xab8>
 8007af0:	aa2a      	add	r2, sp, #168	; 0xa8
 8007af2:	4639      	mov	r1, r7
 8007af4:	4648      	mov	r0, r9
 8007af6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8007afa:	f002 f8d9 	bl	8009cb0 <__sprint_r>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f47f abc0 	bne.w	8007284 <_vfprintf_r+0x268>
 8007b04:	3d10      	subs	r5, #16
 8007b06:	2d10      	cmp	r5, #16
 8007b08:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 8007b0c:	dce7      	bgt.n	8007ade <_vfprintf_r+0xac2>
 8007b0e:	3301      	adds	r3, #1
 8007b10:	4aaf      	ldr	r2, [pc, #700]	; (8007dd0 <_vfprintf_r+0xdb4>)
 8007b12:	f8c8 5004 	str.w	r5, [r8, #4]
 8007b16:	442c      	add	r4, r5
 8007b18:	2b07      	cmp	r3, #7
 8007b1a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8007b1e:	f8c8 2000 	str.w	r2, [r8]
 8007b22:	f77f ac31 	ble.w	8007388 <_vfprintf_r+0x36c>
 8007b26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b28:	aa2a      	add	r2, sp, #168	; 0xa8
 8007b2a:	4648      	mov	r0, r9
 8007b2c:	f002 f8c0 	bl	8009cb0 <__sprint_r>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	f47f aba7 	bne.w	8007284 <_vfprintf_r+0x268>
 8007b36:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8007b38:	e426      	b.n	8007388 <_vfprintf_r+0x36c>
 8007b3a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b3c:	2a00      	cmp	r2, #0
 8007b3e:	f340 811d 	ble.w	8007d7c <_vfprintf_r+0xd60>
 8007b42:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
 8007b46:	429f      	cmp	r7, r3
 8007b48:	bfa8      	it	ge
 8007b4a:	461f      	movge	r7, r3
 8007b4c:	2f00      	cmp	r7, #0
 8007b4e:	dd0b      	ble.n	8007b68 <_vfprintf_r+0xb4c>
 8007b50:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007b52:	3301      	adds	r3, #1
 8007b54:	443c      	add	r4, r7
 8007b56:	2b07      	cmp	r3, #7
 8007b58:	e9c8 5700 	strd	r5, r7, [r8]
 8007b5c:	942c      	str	r4, [sp, #176]	; 0xb0
 8007b5e:	932b      	str	r3, [sp, #172]	; 0xac
 8007b60:	f300 8565 	bgt.w	800862e <_vfprintf_r+0x1612>
 8007b64:	f108 0808 	add.w	r8, r8, #8
 8007b68:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8007b6a:	2f00      	cmp	r7, #0
 8007b6c:	bfa8      	it	ge
 8007b6e:	1bf6      	subge	r6, r6, r7
 8007b70:	2e00      	cmp	r6, #0
 8007b72:	f300 830f 	bgt.w	8008194 <_vfprintf_r+0x1178>
 8007b76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b78:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8007b7c:	442b      	add	r3, r5
 8007b7e:	930c      	str	r3, [sp, #48]	; 0x30
 8007b80:	f040 849e 	bne.w	80084c0 <_vfprintf_r+0x14a4>
 8007b84:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007b86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	db03      	blt.n	8007b94 <_vfprintf_r+0xb78>
 8007b8c:	f01a 0f01 	tst.w	sl, #1
 8007b90:	f000 8385 	beq.w	800829e <_vfprintf_r+0x1282>
 8007b94:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b96:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b98:	4414      	add	r4, r2
 8007b9a:	e9c8 1200 	strd	r1, r2, [r8]
 8007b9e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8007ba0:	942c      	str	r4, [sp, #176]	; 0xb0
 8007ba2:	3201      	adds	r2, #1
 8007ba4:	2a07      	cmp	r2, #7
 8007ba6:	922b      	str	r2, [sp, #172]	; 0xac
 8007ba8:	f300 858a 	bgt.w	80086c0 <_vfprintf_r+0x16a4>
 8007bac:	f108 0808 	add.w	r8, r8, #8
 8007bb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007bb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007bb4:	18ae      	adds	r6, r5, r2
 8007bb6:	1a76      	subs	r6, r6, r1
 8007bb8:	1ad5      	subs	r5, r2, r3
 8007bba:	42ae      	cmp	r6, r5
 8007bbc:	bfa8      	it	ge
 8007bbe:	462e      	movge	r6, r5
 8007bc0:	2e00      	cmp	r6, #0
 8007bc2:	dd0d      	ble.n	8007be0 <_vfprintf_r+0xbc4>
 8007bc4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007bc6:	f8c8 1000 	str.w	r1, [r8]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	4434      	add	r4, r6
 8007bce:	2b07      	cmp	r3, #7
 8007bd0:	f8c8 6004 	str.w	r6, [r8, #4]
 8007bd4:	942c      	str	r4, [sp, #176]	; 0xb0
 8007bd6:	932b      	str	r3, [sp, #172]	; 0xac
 8007bd8:	f300 85bd 	bgt.w	8008756 <_vfprintf_r+0x173a>
 8007bdc:	f108 0808 	add.w	r8, r8, #8
 8007be0:	2e00      	cmp	r6, #0
 8007be2:	bfa8      	it	ge
 8007be4:	1bad      	subge	r5, r5, r6
 8007be6:	2d00      	cmp	r5, #0
 8007be8:	f77f abc5 	ble.w	8007376 <_vfprintf_r+0x35a>
 8007bec:	2d10      	cmp	r5, #16
 8007bee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007bf0:	f340 86fc 	ble.w	80089ec <_vfprintf_r+0x19d0>
 8007bf4:	4f77      	ldr	r7, [pc, #476]	; (8007dd4 <_vfprintf_r+0xdb8>)
 8007bf6:	970f      	str	r7, [sp, #60]	; 0x3c
 8007bf8:	4622      	mov	r2, r4
 8007bfa:	2610      	movs	r6, #16
 8007bfc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007bfe:	e005      	b.n	8007c0c <_vfprintf_r+0xbf0>
 8007c00:	f108 0808 	add.w	r8, r8, #8
 8007c04:	3d10      	subs	r5, #16
 8007c06:	2d10      	cmp	r5, #16
 8007c08:	f340 82ab 	ble.w	8008162 <_vfprintf_r+0x1146>
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	3210      	adds	r2, #16
 8007c10:	2b07      	cmp	r3, #7
 8007c12:	e9c8 7600 	strd	r7, r6, [r8]
 8007c16:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
 8007c1a:	ddf1      	ble.n	8007c00 <_vfprintf_r+0xbe4>
 8007c1c:	aa2a      	add	r2, sp, #168	; 0xa8
 8007c1e:	4621      	mov	r1, r4
 8007c20:	4648      	mov	r0, r9
 8007c22:	f002 f845 	bl	8009cb0 <__sprint_r>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f47f ab2c 	bne.w	8007284 <_vfprintf_r+0x268>
 8007c2c:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
 8007c30:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8007c34:	e7e6      	b.n	8007c04 <_vfprintf_r+0xbe8>
 8007c36:	f01a 0f01 	tst.w	sl, #1
 8007c3a:	f47f aedd 	bne.w	80079f8 <_vfprintf_r+0x9dc>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	2e07      	cmp	r6, #7
 8007c42:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
 8007c46:	f8c8 5000 	str.w	r5, [r8]
 8007c4a:	f8c8 3004 	str.w	r3, [r8, #4]
 8007c4e:	f77f af01 	ble.w	8007a54 <_vfprintf_r+0xa38>
 8007c52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c54:	aa2a      	add	r2, sp, #168	; 0xa8
 8007c56:	4648      	mov	r0, r9
 8007c58:	f002 f82a 	bl	8009cb0 <__sprint_r>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	f47f ab11 	bne.w	8007284 <_vfprintf_r+0x268>
 8007c62:	e9dd 642b 	ldrd	r6, r4, [sp, #172]	; 0xac
 8007c66:	af2d      	add	r7, sp, #180	; 0xb4
 8007c68:	e6f4      	b.n	8007a54 <_vfprintf_r+0xa38>
 8007c6a:	f1b8 0f00 	cmp.w	r8, #0
 8007c6e:	f77f aef1 	ble.w	8007a54 <_vfprintf_r+0xa38>
 8007c72:	4b58      	ldr	r3, [pc, #352]	; (8007dd4 <_vfprintf_r+0xdb8>)
 8007c74:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c76:	f1b8 0f10 	cmp.w	r8, #16
 8007c7a:	f340 82bf 	ble.w	80081fc <_vfprintf_r+0x11e0>
 8007c7e:	4622      	mov	r2, r4
 8007c80:	f8cd a020 	str.w	sl, [sp, #32]
 8007c84:	2510      	movs	r5, #16
 8007c86:	46ca      	mov	sl, r9
 8007c88:	461c      	mov	r4, r3
 8007c8a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007c8e:	e006      	b.n	8007c9e <_vfprintf_r+0xc82>
 8007c90:	3708      	adds	r7, #8
 8007c92:	f1a8 0810 	sub.w	r8, r8, #16
 8007c96:	f1b8 0f10 	cmp.w	r8, #16
 8007c9a:	f340 82ab 	ble.w	80081f4 <_vfprintf_r+0x11d8>
 8007c9e:	3601      	adds	r6, #1
 8007ca0:	3210      	adds	r2, #16
 8007ca2:	2e07      	cmp	r6, #7
 8007ca4:	e9c7 4500 	strd	r4, r5, [r7]
 8007ca8:	e9cd 622b 	strd	r6, r2, [sp, #172]	; 0xac
 8007cac:	ddf0      	ble.n	8007c90 <_vfprintf_r+0xc74>
 8007cae:	aa2a      	add	r2, sp, #168	; 0xa8
 8007cb0:	4649      	mov	r1, r9
 8007cb2:	4650      	mov	r0, sl
 8007cb4:	f001 fffc 	bl	8009cb0 <__sprint_r>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	f47f aae3 	bne.w	8007284 <_vfprintf_r+0x268>
 8007cbe:	e9dd 622b 	ldrd	r6, r2, [sp, #172]	; 0xac
 8007cc2:	af2d      	add	r7, sp, #180	; 0xb4
 8007cc4:	e7e5      	b.n	8007c92 <_vfprintf_r+0xc76>
 8007cc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cc8:	aa2a      	add	r2, sp, #168	; 0xa8
 8007cca:	4648      	mov	r0, r9
 8007ccc:	f001 fff0 	bl	8009cb0 <__sprint_r>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	f47f aad7 	bne.w	8007284 <_vfprintf_r+0x268>
 8007cd6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8007cd8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8007cdc:	f7ff bb38 	b.w	8007350 <_vfprintf_r+0x334>
 8007ce0:	9a07      	ldr	r2, [sp, #28]
 8007ce2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007ce4:	f012 0210 	ands.w	r2, r2, #16
 8007ce8:	f101 0304 	add.w	r3, r1, #4
 8007cec:	f040 8084 	bne.w	8007df8 <_vfprintf_r+0xddc>
 8007cf0:	9907      	ldr	r1, [sp, #28]
 8007cf2:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 8007cf6:	f000 82a0 	beq.w	800823a <_vfprintf_r+0x121e>
 8007cfa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007cfc:	930d      	str	r3, [sp, #52]	; 0x34
 8007cfe:	880c      	ldrh	r4, [r1, #0]
 8007d00:	4616      	mov	r6, r2
 8007d02:	2301      	movs	r3, #1
 8007d04:	e456      	b.n	80075b4 <_vfprintf_r+0x598>
 8007d06:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007d08:	f01a 0210 	ands.w	r2, sl, #16
 8007d0c:	f101 0304 	add.w	r3, r1, #4
 8007d10:	d16e      	bne.n	8007df0 <_vfprintf_r+0xdd4>
 8007d12:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 8007d16:	f000 8286 	beq.w	8008226 <_vfprintf_r+0x120a>
 8007d1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007d1c:	930d      	str	r3, [sp, #52]	; 0x34
 8007d1e:	880c      	ldrh	r4, [r1, #0]
 8007d20:	4616      	mov	r6, r2
 8007d22:	e443      	b.n	80075ac <_vfprintf_r+0x590>
 8007d24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d26:	f01a 0f10 	tst.w	sl, #16
 8007d2a:	f102 0304 	add.w	r3, r2, #4
 8007d2e:	d159      	bne.n	8007de4 <_vfprintf_r+0xdc8>
 8007d30:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007d34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d36:	d051      	beq.n	8007ddc <_vfprintf_r+0xdc0>
 8007d38:	f9b2 4000 	ldrsh.w	r4, [r2]
 8007d3c:	930d      	str	r3, [sp, #52]	; 0x34
 8007d3e:	17e6      	asrs	r6, r4, #31
 8007d40:	4633      	mov	r3, r6
 8007d42:	f7ff bbde 	b.w	8007502 <_vfprintf_r+0x4e6>
 8007d46:	232d      	movs	r3, #45	; 0x2d
 8007d48:	4264      	negs	r4, r4
 8007d4a:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 8007d4e:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 8007d52:	f8cd a01c 	str.w	sl, [sp, #28]
 8007d56:	2301      	movs	r3, #1
 8007d58:	e42f      	b.n	80075ba <_vfprintf_r+0x59e>
 8007d5a:	f01a 0f01 	tst.w	sl, #1
 8007d5e:	f43f ab0a 	beq.w	8007376 <_vfprintf_r+0x35a>
 8007d62:	e557      	b.n	8007814 <_vfprintf_r+0x7f8>
 8007d64:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007d66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d68:	f003 fc8f 	bl	800b68a <__retarget_lock_acquire_recursive>
 8007d6c:	89aa      	ldrh	r2, [r5, #12]
 8007d6e:	f7ff b973 	b.w	8007058 <_vfprintf_r+0x3c>
 8007d72:	f89b 7000 	ldrb.w	r7, [fp]
 8007d76:	930d      	str	r3, [sp, #52]	; 0x34
 8007d78:	f7ff b9b3 	b.w	80070e2 <_vfprintf_r+0xc6>
 8007d7c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007d7e:	4916      	ldr	r1, [pc, #88]	; (8007dd8 <_vfprintf_r+0xdbc>)
 8007d80:	f8c8 1000 	str.w	r1, [r8]
 8007d84:	3301      	adds	r3, #1
 8007d86:	3401      	adds	r4, #1
 8007d88:	2101      	movs	r1, #1
 8007d8a:	2b07      	cmp	r3, #7
 8007d8c:	942c      	str	r4, [sp, #176]	; 0xb0
 8007d8e:	932b      	str	r3, [sp, #172]	; 0xac
 8007d90:	f8c8 1004 	str.w	r1, [r8, #4]
 8007d94:	f300 843d 	bgt.w	8008612 <_vfprintf_r+0x15f6>
 8007d98:	f108 0808 	add.w	r8, r8, #8
 8007d9c:	2a00      	cmp	r2, #0
 8007d9e:	f47f adf7 	bne.w	8007990 <_vfprintf_r+0x974>
 8007da2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007da4:	f00a 0301 	and.w	r3, sl, #1
 8007da8:	4313      	orrs	r3, r2
 8007daa:	f43f aae4 	beq.w	8007376 <_vfprintf_r+0x35a>
 8007dae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007db0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007db2:	441c      	add	r4, r3
 8007db4:	e9c8 2300 	strd	r2, r3, [r8]
 8007db8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007dba:	942c      	str	r4, [sp, #176]	; 0xb0
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	2b07      	cmp	r3, #7
 8007dc0:	932b      	str	r3, [sp, #172]	; 0xac
 8007dc2:	f300 831f 	bgt.w	8008404 <_vfprintf_r+0x13e8>
 8007dc6:	f108 0808 	add.w	r8, r8, #8
 8007dca:	e5f2      	b.n	80079b2 <_vfprintf_r+0x996>
 8007dcc:	ad56      	add	r5, sp, #344	; 0x158
 8007dce:	e4d2      	b.n	8007776 <_vfprintf_r+0x75a>
 8007dd0:	0800c984 	.word	0x0800c984
 8007dd4:	0800c994 	.word	0x0800c994
 8007dd8:	0800c960 	.word	0x0800c960
 8007ddc:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007de0:	f040 826b 	bne.w	80082ba <_vfprintf_r+0x129e>
 8007de4:	6814      	ldr	r4, [r2, #0]
 8007de6:	930d      	str	r3, [sp, #52]	; 0x34
 8007de8:	17e6      	asrs	r6, r4, #31
 8007dea:	4633      	mov	r3, r6
 8007dec:	f7ff bb89 	b.w	8007502 <_vfprintf_r+0x4e6>
 8007df0:	680c      	ldr	r4, [r1, #0]
 8007df2:	930d      	str	r3, [sp, #52]	; 0x34
 8007df4:	f7ff bbda 	b.w	80075ac <_vfprintf_r+0x590>
 8007df8:	930d      	str	r3, [sp, #52]	; 0x34
 8007dfa:	680c      	ldr	r4, [r1, #0]
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	f7ff bbd9 	b.w	80075b4 <_vfprintf_r+0x598>
 8007e02:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	f7f8 ffa3 	bl	8000d54 <__aeabi_dcmpun>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	f040 8559 	bne.w	80088c6 <_vfprintf_r+0x18aa>
 8007e14:	2f61      	cmp	r7, #97	; 0x61
 8007e16:	f000 851f 	beq.w	8008858 <_vfprintf_r+0x183c>
 8007e1a:	2f41      	cmp	r7, #65	; 0x41
 8007e1c:	f000 8254 	beq.w	80082c8 <_vfprintf_r+0x12ac>
 8007e20:	9a08      	ldr	r2, [sp, #32]
 8007e22:	f027 0320 	bic.w	r3, r7, #32
 8007e26:	1c51      	adds	r1, r2, #1
 8007e28:	9307      	str	r3, [sp, #28]
 8007e2a:	f000 851e 	beq.w	800886a <_vfprintf_r+0x184e>
 8007e2e:	2b47      	cmp	r3, #71	; 0x47
 8007e30:	d104      	bne.n	8007e3c <_vfprintf_r+0xe20>
 8007e32:	2a00      	cmp	r2, #0
 8007e34:	4613      	mov	r3, r2
 8007e36:	bf08      	it	eq
 8007e38:	2301      	moveq	r3, #1
 8007e3a:	9308      	str	r3, [sp, #32]
 8007e3c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8007e40:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8007e44:	1e0e      	subs	r6, r1, #0
 8007e46:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8007e4a:	469a      	mov	sl, r3
 8007e4c:	f04f 0300 	mov.w	r3, #0
 8007e50:	f2c0 83d6 	blt.w	8008600 <_vfprintf_r+0x15e4>
 8007e54:	9312      	str	r3, [sp, #72]	; 0x48
 8007e56:	900c      	str	r0, [sp, #48]	; 0x30
 8007e58:	930e      	str	r3, [sp, #56]	; 0x38
 8007e5a:	9b07      	ldr	r3, [sp, #28]
 8007e5c:	2b46      	cmp	r3, #70	; 0x46
 8007e5e:	f000 8400 	beq.w	8008662 <_vfprintf_r+0x1646>
 8007e62:	2b45      	cmp	r3, #69	; 0x45
 8007e64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e66:	9908      	ldr	r1, [sp, #32]
 8007e68:	4633      	mov	r3, r6
 8007e6a:	f000 84c7 	beq.w	80087fc <_vfprintf_r+0x17e0>
 8007e6e:	9101      	str	r1, [sp, #4]
 8007e70:	a928      	add	r1, sp, #160	; 0xa0
 8007e72:	9104      	str	r1, [sp, #16]
 8007e74:	a925      	add	r1, sp, #148	; 0x94
 8007e76:	9103      	str	r1, [sp, #12]
 8007e78:	a924      	add	r1, sp, #144	; 0x90
 8007e7a:	9102      	str	r1, [sp, #8]
 8007e7c:	2102      	movs	r1, #2
 8007e7e:	9100      	str	r1, [sp, #0]
 8007e80:	4648      	mov	r0, r9
 8007e82:	f7f9 f9d9 	bl	8001238 <_dtoa_r>
 8007e86:	9b07      	ldr	r3, [sp, #28]
 8007e88:	2b47      	cmp	r3, #71	; 0x47
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	f040 85c4 	bne.w	8008a18 <_vfprintf_r+0x19fc>
 8007e90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e92:	07db      	lsls	r3, r3, #31
 8007e94:	f100 846f 	bmi.w	8008776 <_vfprintf_r+0x175a>
 8007e98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007e9a:	1b5b      	subs	r3, r3, r5
 8007e9c:	9314      	str	r3, [sp, #80]	; 0x50
 8007e9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007ea0:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ea2:	9b07      	ldr	r3, [sp, #28]
 8007ea4:	2b47      	cmp	r3, #71	; 0x47
 8007ea6:	f000 82c1 	beq.w	800842c <_vfprintf_r+0x1410>
 8007eaa:	9b07      	ldr	r3, [sp, #28]
 8007eac:	2b46      	cmp	r3, #70	; 0x46
 8007eae:	f000 8421 	beq.w	80086f4 <_vfprintf_r+0x16d8>
 8007eb2:	9907      	ldr	r1, [sp, #28]
 8007eb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007eb6:	b2fa      	uxtb	r2, r7
 8007eb8:	2941      	cmp	r1, #65	; 0x41
 8007eba:	bf08      	it	eq
 8007ebc:	320f      	addeq	r2, #15
 8007ebe:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ec2:	bf06      	itte	eq
 8007ec4:	b2d2      	uxtbeq	r2, r2
 8007ec6:	2101      	moveq	r1, #1
 8007ec8:	2100      	movne	r1, #0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	9324      	str	r3, [sp, #144]	; 0x90
 8007ece:	bfb8      	it	lt
 8007ed0:	9b13      	ldrlt	r3, [sp, #76]	; 0x4c
 8007ed2:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 8007ed6:	bfba      	itte	lt
 8007ed8:	f1c3 0301 	rsblt	r3, r3, #1
 8007edc:	222d      	movlt	r2, #45	; 0x2d
 8007ede:	222b      	movge	r2, #43	; 0x2b
 8007ee0:	2b09      	cmp	r3, #9
 8007ee2:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
 8007ee6:	f340 8518 	ble.w	800891a <_vfprintf_r+0x18fe>
 8007eea:	f10d 04a7 	add.w	r4, sp, #167	; 0xa7
 8007eee:	4ebc      	ldr	r6, [pc, #752]	; (80081e0 <_vfprintf_r+0x11c4>)
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	fb86 2103 	smull	r2, r1, r6, r3
 8007ef8:	17da      	asrs	r2, r3, #31
 8007efa:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8007efe:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8007f02:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 8007f06:	3130      	adds	r1, #48	; 0x30
 8007f08:	f800 1c01 	strb.w	r1, [r0, #-1]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	2963      	cmp	r1, #99	; 0x63
 8007f10:	4613      	mov	r3, r2
 8007f12:	f100 32ff 	add.w	r2, r0, #4294967295
 8007f16:	dcec      	bgt.n	8007ef2 <_vfprintf_r+0xed6>
 8007f18:	3330      	adds	r3, #48	; 0x30
 8007f1a:	b2d9      	uxtb	r1, r3
 8007f1c:	1e83      	subs	r3, r0, #2
 8007f1e:	429c      	cmp	r4, r3
 8007f20:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007f24:	f240 857e 	bls.w	8008a24 <_vfprintf_r+0x1a08>
 8007f28:	4613      	mov	r3, r2
 8007f2a:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
 8007f2e:	e001      	b.n	8007f34 <_vfprintf_r+0xf18>
 8007f30:	f813 1b01 	ldrb.w	r1, [r3], #1
 8007f34:	f802 1b01 	strb.w	r1, [r2], #1
 8007f38:	429c      	cmp	r4, r3
 8007f3a:	d1f9      	bne.n	8007f30 <_vfprintf_r+0xf14>
 8007f3c:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
 8007f40:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
 8007f44:	1a1b      	subs	r3, r3, r0
 8007f46:	4413      	add	r3, r2
 8007f48:	aa26      	add	r2, sp, #152	; 0x98
 8007f4a:	1a9b      	subs	r3, r3, r2
 8007f4c:	931c      	str	r3, [sp, #112]	; 0x70
 8007f4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	441a      	add	r2, r3
 8007f56:	920c      	str	r2, [sp, #48]	; 0x30
 8007f58:	f340 8532 	ble.w	80089c0 <_vfprintf_r+0x19a4>
 8007f5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007f60:	4413      	add	r3, r2
 8007f62:	930c      	str	r3, [sp, #48]	; 0x30
 8007f64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f6c:	f443 7a80 	orr.w	sl, r3, #256	; 0x100
 8007f70:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8007f74:	2300      	movs	r3, #0
 8007f76:	9310      	str	r3, [sp, #64]	; 0x40
 8007f78:	9207      	str	r2, [sp, #28]
 8007f7a:	9315      	str	r3, [sp, #84]	; 0x54
 8007f7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f040 827a 	bne.w	800847a <_vfprintf_r+0x145e>
 8007f86:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8007f8a:	9308      	str	r3, [sp, #32]
 8007f8c:	f7ff ba58 	b.w	8007440 <_vfprintf_r+0x424>
 8007f90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	17d2      	asrs	r2, r2, #31
 8007f96:	605a      	str	r2, [r3, #4]
 8007f98:	465d      	mov	r5, fp
 8007f9a:	f7ff ba0b 	b.w	80073b4 <_vfprintf_r+0x398>
 8007f9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007fa0:	f89b 7000 	ldrb.w	r7, [fp]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f43f a89c 	beq.w	80070e2 <_vfprintf_r+0xc6>
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f43f a898 	beq.w	80070e2 <_vfprintf_r+0xc6>
 8007fb2:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8007fb6:	f7ff b894 	b.w	80070e2 <_vfprintf_r+0xc6>
 8007fba:	4b8a      	ldr	r3, [pc, #552]	; (80081e4 <_vfprintf_r+0x11c8>)
 8007fbc:	931b      	str	r3, [sp, #108]	; 0x6c
 8007fbe:	f01a 0620 	ands.w	r6, sl, #32
 8007fc2:	d04b      	beq.n	800805c <_vfprintf_r+0x1040>
 8007fc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fc6:	3307      	adds	r3, #7
 8007fc8:	f023 0307 	bic.w	r3, r3, #7
 8007fcc:	685e      	ldr	r6, [r3, #4]
 8007fce:	f853 4b08 	ldr.w	r4, [r3], #8
 8007fd2:	930d      	str	r3, [sp, #52]	; 0x34
 8007fd4:	f01a 0f01 	tst.w	sl, #1
 8007fd8:	d009      	beq.n	8007fee <_vfprintf_r+0xfd2>
 8007fda:	ea54 0306 	orrs.w	r3, r4, r6
 8007fde:	d006      	beq.n	8007fee <_vfprintf_r+0xfd2>
 8007fe0:	2330      	movs	r3, #48	; 0x30
 8007fe2:	f88d 708d 	strb.w	r7, [sp, #141]	; 0x8d
 8007fe6:	f04a 0a02 	orr.w	sl, sl, #2
 8007fea:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8007fee:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8007ff2:	9307      	str	r3, [sp, #28]
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	f7ff badd 	b.w	80075b4 <_vfprintf_r+0x598>
 8007ffa:	f8cd a01c 	str.w	sl, [sp, #28]
 8007ffe:	f7ff bb7d 	b.w	80076fc <_vfprintf_r+0x6e0>
 8008002:	4b79      	ldr	r3, [pc, #484]	; (80081e8 <_vfprintf_r+0x11cc>)
 8008004:	931b      	str	r3, [sp, #108]	; 0x6c
 8008006:	e7da      	b.n	8007fbe <_vfprintf_r+0xfa2>
 8008008:	9909      	ldr	r1, [sp, #36]	; 0x24
 800800a:	aa2a      	add	r2, sp, #168	; 0xa8
 800800c:	4648      	mov	r0, r9
 800800e:	f001 fe4f 	bl	8009cb0 <__sprint_r>
 8008012:	2800      	cmp	r0, #0
 8008014:	f47f a936 	bne.w	8007284 <_vfprintf_r+0x268>
 8008018:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800801a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 800801e:	f7ff b991 	b.w	8007344 <_vfprintf_r+0x328>
 8008022:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008024:	aa2a      	add	r2, sp, #168	; 0xa8
 8008026:	4648      	mov	r0, r9
 8008028:	f001 fe42 	bl	8009cb0 <__sprint_r>
 800802c:	2800      	cmp	r0, #0
 800802e:	f47f a929 	bne.w	8007284 <_vfprintf_r+0x268>
 8008032:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008034:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8008038:	f7ff bbfa 	b.w	8007830 <_vfprintf_r+0x814>
 800803c:	2b06      	cmp	r3, #6
 800803e:	4629      	mov	r1, r5
 8008040:	bf28      	it	cs
 8008042:	2306      	movcs	r3, #6
 8008044:	9508      	str	r5, [sp, #32]
 8008046:	950e      	str	r5, [sp, #56]	; 0x38
 8008048:	462a      	mov	r2, r5
 800804a:	9307      	str	r3, [sp, #28]
 800804c:	4d67      	ldr	r5, [pc, #412]	; (80081ec <_vfprintf_r+0x11d0>)
 800804e:	940d      	str	r4, [sp, #52]	; 0x34
 8008050:	930c      	str	r3, [sp, #48]	; 0x30
 8008052:	9110      	str	r1, [sp, #64]	; 0x40
 8008054:	9115      	str	r1, [sp, #84]	; 0x54
 8008056:	9113      	str	r1, [sp, #76]	; 0x4c
 8008058:	f7ff b9f2 	b.w	8007440 <_vfprintf_r+0x424>
 800805c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800805e:	f01a 0210 	ands.w	r2, sl, #16
 8008062:	f101 0304 	add.w	r3, r1, #4
 8008066:	d066      	beq.n	8008136 <_vfprintf_r+0x111a>
 8008068:	680c      	ldr	r4, [r1, #0]
 800806a:	930d      	str	r3, [sp, #52]	; 0x34
 800806c:	e7b2      	b.n	8007fd4 <_vfprintf_r+0xfb8>
 800806e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008070:	aa2a      	add	r2, sp, #168	; 0xa8
 8008072:	4648      	mov	r0, r9
 8008074:	f001 fe1c 	bl	8009cb0 <__sprint_r>
 8008078:	2800      	cmp	r0, #0
 800807a:	f47f a903 	bne.w	8007284 <_vfprintf_r+0x268>
 800807e:	e9dd 642b 	ldrd	r6, r4, [sp, #172]	; 0xac
 8008082:	af2d      	add	r7, sp, #180	; 0xb4
 8008084:	e4c2      	b.n	8007a0c <_vfprintf_r+0x9f0>
 8008086:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008088:	aa2a      	add	r2, sp, #168	; 0xa8
 800808a:	4648      	mov	r0, r9
 800808c:	f001 fe10 	bl	8009cb0 <__sprint_r>
 8008090:	2800      	cmp	r0, #0
 8008092:	f47f a8f7 	bne.w	8007284 <_vfprintf_r+0x268>
 8008096:	e9dd 642b 	ldrd	r6, r4, [sp, #172]	; 0xac
 800809a:	af2d      	add	r7, sp, #180	; 0xb4
 800809c:	e4c2      	b.n	8007a24 <_vfprintf_r+0xa08>
 800809e:	9b07      	ldr	r3, [sp, #28]
 80080a0:	970c      	str	r7, [sp, #48]	; 0x30
 80080a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080a6:	2200      	movs	r2, #0
 80080a8:	e9cd b80e 	strd	fp, r8, [sp, #56]	; 0x38
 80080ac:	f50d 7aac 	add.w	sl, sp, #344	; 0x158
 80080b0:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80080b4:	4617      	mov	r7, r2
 80080b6:	469b      	mov	fp, r3
 80080b8:	e00c      	b.n	80080d4 <_vfprintf_r+0x10b8>
 80080ba:	2300      	movs	r3, #0
 80080bc:	4620      	mov	r0, r4
 80080be:	4631      	mov	r1, r6
 80080c0:	220a      	movs	r2, #10
 80080c2:	f7f8 fd0b 	bl	8000adc <__aeabi_uldivmod>
 80080c6:	2c0a      	cmp	r4, #10
 80080c8:	f176 0300 	sbcs.w	r3, r6, #0
 80080cc:	d31c      	bcc.n	8008108 <_vfprintf_r+0x10ec>
 80080ce:	4604      	mov	r4, r0
 80080d0:	460e      	mov	r6, r1
 80080d2:	46aa      	mov	sl, r5
 80080d4:	4620      	mov	r0, r4
 80080d6:	220a      	movs	r2, #10
 80080d8:	2300      	movs	r3, #0
 80080da:	4631      	mov	r1, r6
 80080dc:	f7f8 fcfe 	bl	8000adc <__aeabi_uldivmod>
 80080e0:	3230      	adds	r2, #48	; 0x30
 80080e2:	f10a 35ff 	add.w	r5, sl, #4294967295
 80080e6:	3701      	adds	r7, #1
 80080e8:	f80a 2c01 	strb.w	r2, [sl, #-1]
 80080ec:	f1bb 0f00 	cmp.w	fp, #0
 80080f0:	d0e3      	beq.n	80080ba <_vfprintf_r+0x109e>
 80080f2:	f898 3000 	ldrb.w	r3, [r8]
 80080f6:	429f      	cmp	r7, r3
 80080f8:	d1df      	bne.n	80080ba <_vfprintf_r+0x109e>
 80080fa:	2fff      	cmp	r7, #255	; 0xff
 80080fc:	d0dd      	beq.n	80080ba <_vfprintf_r+0x109e>
 80080fe:	2c0a      	cmp	r4, #10
 8008100:	f176 0300 	sbcs.w	r3, r6, #0
 8008104:	f080 80b2 	bcs.w	800826c <_vfprintf_r+0x1250>
 8008108:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800810c:	9714      	str	r7, [sp, #80]	; 0x50
 800810e:	e9dd b80e 	ldrd	fp, r8, [sp, #56]	; 0x38
 8008112:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8008114:	f7ff bb2a 	b.w	800776c <_vfprintf_r+0x750>
 8008118:	9909      	ldr	r1, [sp, #36]	; 0x24
 800811a:	aa2a      	add	r2, sp, #168	; 0xa8
 800811c:	4648      	mov	r0, r9
 800811e:	f001 fdc7 	bl	8009cb0 <__sprint_r>
 8008122:	2800      	cmp	r0, #0
 8008124:	f47f a8ae 	bne.w	8007284 <_vfprintf_r+0x268>
 8008128:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 800812c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800812e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8008132:	f7ff b8dd 	b.w	80072f0 <_vfprintf_r+0x2d4>
 8008136:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 800813a:	f000 808a 	beq.w	8008252 <_vfprintf_r+0x1236>
 800813e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008140:	930d      	str	r3, [sp, #52]	; 0x34
 8008142:	880c      	ldrh	r4, [r1, #0]
 8008144:	4616      	mov	r6, r2
 8008146:	e745      	b.n	8007fd4 <_vfprintf_r+0xfb8>
 8008148:	9909      	ldr	r1, [sp, #36]	; 0x24
 800814a:	aa2a      	add	r2, sp, #168	; 0xa8
 800814c:	4648      	mov	r0, r9
 800814e:	f001 fdaf 	bl	8009cb0 <__sprint_r>
 8008152:	2800      	cmp	r0, #0
 8008154:	f47f a896 	bne.w	8007284 <_vfprintf_r+0x268>
 8008158:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800815a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 800815e:	f7ff bb54 	b.w	800780a <_vfprintf_r+0x7ee>
 8008162:	4614      	mov	r4, r2
 8008164:	3301      	adds	r3, #1
 8008166:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008168:	f8c8 2000 	str.w	r2, [r8]
 800816c:	442c      	add	r4, r5
 800816e:	2b07      	cmp	r3, #7
 8008170:	f8c8 5004 	str.w	r5, [r8, #4]
 8008174:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8008178:	f77f a8fb 	ble.w	8007372 <_vfprintf_r+0x356>
 800817c:	e425      	b.n	80079ca <_vfprintf_r+0x9ae>
 800817e:	2b01      	cmp	r3, #1
 8008180:	f8cd a01c 	str.w	sl, [sp, #28]
 8008184:	f47f aae2 	bne.w	800774c <_vfprintf_r+0x730>
 8008188:	e478      	b.n	8007a7c <_vfprintf_r+0xa60>
 800818a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	465d      	mov	r5, fp
 8008190:	f7ff b910 	b.w	80073b4 <_vfprintf_r+0x398>
 8008194:	2e10      	cmp	r6, #16
 8008196:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008198:	f340 842f 	ble.w	80089fa <_vfprintf_r+0x19de>
 800819c:	4814      	ldr	r0, [pc, #80]	; (80081f0 <_vfprintf_r+0x11d4>)
 800819e:	900f      	str	r0, [sp, #60]	; 0x3c
 80081a0:	4642      	mov	r2, r8
 80081a2:	4621      	mov	r1, r4
 80081a4:	46a8      	mov	r8, r5
 80081a6:	2710      	movs	r7, #16
 80081a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80081aa:	4604      	mov	r4, r0
 80081ac:	e004      	b.n	80081b8 <_vfprintf_r+0x119c>
 80081ae:	3208      	adds	r2, #8
 80081b0:	3e10      	subs	r6, #16
 80081b2:	2e10      	cmp	r6, #16
 80081b4:	f340 8168 	ble.w	8008488 <_vfprintf_r+0x146c>
 80081b8:	3301      	adds	r3, #1
 80081ba:	3110      	adds	r1, #16
 80081bc:	2b07      	cmp	r3, #7
 80081be:	e9c2 4700 	strd	r4, r7, [r2]
 80081c2:	e9cd 312b 	strd	r3, r1, [sp, #172]	; 0xac
 80081c6:	ddf2      	ble.n	80081ae <_vfprintf_r+0x1192>
 80081c8:	aa2a      	add	r2, sp, #168	; 0xa8
 80081ca:	4629      	mov	r1, r5
 80081cc:	4648      	mov	r0, r9
 80081ce:	f001 fd6f 	bl	8009cb0 <__sprint_r>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	f47f a856 	bne.w	8007284 <_vfprintf_r+0x268>
 80081d8:	e9dd 312b 	ldrd	r3, r1, [sp, #172]	; 0xac
 80081dc:	aa2d      	add	r2, sp, #180	; 0xb4
 80081de:	e7e7      	b.n	80081b0 <_vfprintf_r+0x1194>
 80081e0:	66666667 	.word	0x66666667
 80081e4:	0800c930 	.word	0x0800c930
 80081e8:	0800c944 	.word	0x0800c944
 80081ec:	0800c958 	.word	0x0800c958
 80081f0:	0800c994 	.word	0x0800c994
 80081f4:	46d1      	mov	r9, sl
 80081f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80081fa:	4614      	mov	r4, r2
 80081fc:	3601      	adds	r6, #1
 80081fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008200:	603b      	str	r3, [r7, #0]
 8008202:	4444      	add	r4, r8
 8008204:	2e07      	cmp	r6, #7
 8008206:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
 800820a:	f8c7 8004 	str.w	r8, [r7, #4]
 800820e:	f77f ac20 	ble.w	8007a52 <_vfprintf_r+0xa36>
 8008212:	e51e      	b.n	8007c52 <_vfprintf_r+0xc36>
 8008214:	4628      	mov	r0, r5
 8008216:	9608      	str	r6, [sp, #32]
 8008218:	940d      	str	r4, [sp, #52]	; 0x34
 800821a:	f7f7 ffd1 	bl	80001c0 <strlen>
 800821e:	4603      	mov	r3, r0
 8008220:	900c      	str	r0, [sp, #48]	; 0x30
 8008222:	f7ff b9ab 	b.w	800757c <_vfprintf_r+0x560>
 8008226:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008228:	930d      	str	r3, [sp, #52]	; 0x34
 800822a:	f41a 7600 	ands.w	r6, sl, #512	; 0x200
 800822e:	bf16      	itet	ne
 8008230:	7814      	ldrbne	r4, [r2, #0]
 8008232:	6814      	ldreq	r4, [r2, #0]
 8008234:	460e      	movne	r6, r1
 8008236:	f7ff b9b9 	b.w	80075ac <_vfprintf_r+0x590>
 800823a:	9a07      	ldr	r2, [sp, #28]
 800823c:	f412 7600 	ands.w	r6, r2, #512	; 0x200
 8008240:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008242:	930d      	str	r3, [sp, #52]	; 0x34
 8008244:	bf16      	itet	ne
 8008246:	7814      	ldrbne	r4, [r2, #0]
 8008248:	6814      	ldreq	r4, [r2, #0]
 800824a:	460e      	movne	r6, r1
 800824c:	2301      	movs	r3, #1
 800824e:	f7ff b9b1 	b.w	80075b4 <_vfprintf_r+0x598>
 8008252:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008254:	930d      	str	r3, [sp, #52]	; 0x34
 8008256:	f41a 7600 	ands.w	r6, sl, #512	; 0x200
 800825a:	bf16      	itet	ne
 800825c:	7814      	ldrbne	r4, [r2, #0]
 800825e:	6814      	ldreq	r4, [r2, #0]
 8008260:	460e      	movne	r6, r1
 8008262:	e6b7      	b.n	8007fd4 <_vfprintf_r+0xfb8>
 8008264:	4a92      	ldr	r2, [pc, #584]	; (80084b0 <_vfprintf_r+0x1494>)
 8008266:	920f      	str	r2, [sp, #60]	; 0x3c
 8008268:	f7ff bb83 	b.w	8007972 <_vfprintf_r+0x956>
 800826c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800826e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008270:	1aed      	subs	r5, r5, r3
 8008272:	461a      	mov	r2, r3
 8008274:	4628      	mov	r0, r5
 8008276:	f001 fc6d 	bl	8009b54 <strncpy>
 800827a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800827e:	b10b      	cbz	r3, 8008284 <_vfprintf_r+0x1268>
 8008280:	f108 0801 	add.w	r8, r8, #1
 8008284:	4620      	mov	r0, r4
 8008286:	4631      	mov	r1, r6
 8008288:	220a      	movs	r2, #10
 800828a:	2300      	movs	r3, #0
 800828c:	2700      	movs	r7, #0
 800828e:	f7f8 fc25 	bl	8000adc <__aeabi_uldivmod>
 8008292:	e71c      	b.n	80080ce <_vfprintf_r+0x10b2>
 8008294:	222d      	movs	r2, #45	; 0x2d
 8008296:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 800829a:	f7ff b8c1 	b.w	8007420 <_vfprintf_r+0x404>
 800829e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80082a2:	18ae      	adds	r6, r5, r2
 80082a4:	1a76      	subs	r6, r6, r1
 80082a6:	1ad5      	subs	r5, r2, r3
 80082a8:	42ae      	cmp	r6, r5
 80082aa:	bfa8      	it	ge
 80082ac:	462e      	movge	r6, r5
 80082ae:	e497      	b.n	8007be0 <_vfprintf_r+0xbc4>
 80082b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082b2:	801a      	strh	r2, [r3, #0]
 80082b4:	465d      	mov	r5, fp
 80082b6:	f7ff b87d 	b.w	80073b4 <_vfprintf_r+0x398>
 80082ba:	f992 4000 	ldrsb.w	r4, [r2]
 80082be:	930d      	str	r3, [sp, #52]	; 0x34
 80082c0:	17e6      	asrs	r6, r4, #31
 80082c2:	4633      	mov	r3, r6
 80082c4:	f7ff b91d 	b.w	8007502 <_vfprintf_r+0x4e6>
 80082c8:	2330      	movs	r3, #48	; 0x30
 80082ca:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 80082ce:	2358      	movs	r3, #88	; 0x58
 80082d0:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
 80082d4:	f04a 0302 	orr.w	r3, sl, #2
 80082d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80082da:	9b08      	ldr	r3, [sp, #32]
 80082dc:	2b63      	cmp	r3, #99	; 0x63
 80082de:	f300 8283 	bgt.w	80087e8 <_vfprintf_r+0x17cc>
 80082e2:	2300      	movs	r3, #0
 80082e4:	930e      	str	r3, [sp, #56]	; 0x38
 80082e6:	ad3d      	add	r5, sp, #244	; 0xf4
 80082e8:	f027 0320 	bic.w	r3, r7, #32
 80082ec:	9307      	str	r3, [sp, #28]
 80082ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082f0:	1e1e      	subs	r6, r3, #0
 80082f2:	f44a 7a81 	orr.w	sl, sl, #258	; 0x102
 80082f6:	f2c0 8184 	blt.w	8008602 <_vfprintf_r+0x15e6>
 80082fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80082fc:	930c      	str	r3, [sp, #48]	; 0x30
 80082fe:	2300      	movs	r3, #0
 8008300:	9312      	str	r3, [sp, #72]	; 0x48
 8008302:	2f61      	cmp	r7, #97	; 0x61
 8008304:	f000 82ee 	beq.w	80088e4 <_vfprintf_r+0x18c8>
 8008308:	2f41      	cmp	r7, #65	; 0x41
 800830a:	f47f ada6 	bne.w	8007e5a <_vfprintf_r+0xe3e>
 800830e:	aa24      	add	r2, sp, #144	; 0x90
 8008310:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008312:	4631      	mov	r1, r6
 8008314:	f001 fba0 	bl	8009a58 <frexp>
 8008318:	2200      	movs	r2, #0
 800831a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800831e:	f7f8 f9cb 	bl	80006b8 <__aeabi_dmul>
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800832a:	2200      	movs	r2, #0
 800832c:	2300      	movs	r3, #0
 800832e:	f7f8 fc45 	bl	8000bbc <__aeabi_dcmpeq>
 8008332:	b108      	cbz	r0, 8008338 <_vfprintf_r+0x131c>
 8008334:	2301      	movs	r3, #1
 8008336:	9324      	str	r3, [sp, #144]	; 0x90
 8008338:	4b5e      	ldr	r3, [pc, #376]	; (80084b4 <_vfprintf_r+0x1498>)
 800833a:	930c      	str	r3, [sp, #48]	; 0x30
 800833c:	9b08      	ldr	r3, [sp, #32]
 800833e:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
 8008342:	e9cd 7b13 	strd	r7, fp, [sp, #76]	; 0x4c
 8008346:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 800834a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800834e:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 8008352:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8008356:	1e5e      	subs	r6, r3, #1
 8008358:	462c      	mov	r4, r5
 800835a:	9510      	str	r5, [sp, #64]	; 0x40
 800835c:	e005      	b.n	800836a <_vfprintf_r+0x134e>
 800835e:	2200      	movs	r2, #0
 8008360:	2300      	movs	r3, #0
 8008362:	3e01      	subs	r6, #1
 8008364:	f7f8 fc2a 	bl	8000bbc <__aeabi_dcmpeq>
 8008368:	b9e0      	cbnz	r0, 80083a4 <_vfprintf_r+0x1388>
 800836a:	4b53      	ldr	r3, [pc, #332]	; (80084b8 <_vfprintf_r+0x149c>)
 800836c:	2200      	movs	r2, #0
 800836e:	4640      	mov	r0, r8
 8008370:	4649      	mov	r1, r9
 8008372:	f7f8 f9a1 	bl	80006b8 <__aeabi_dmul>
 8008376:	4689      	mov	r9, r1
 8008378:	4680      	mov	r8, r0
 800837a:	f7f8 fd01 	bl	8000d80 <__aeabi_d2iz>
 800837e:	4605      	mov	r5, r0
 8008380:	f7f8 f930 	bl	80005e4 <__aeabi_i2d>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	4640      	mov	r0, r8
 800838a:	4649      	mov	r1, r9
 800838c:	f7f7 ffdc 	bl	8000348 <__aeabi_dsub>
 8008390:	f81b 3005 	ldrb.w	r3, [fp, r5]
 8008394:	1c72      	adds	r2, r6, #1
 8008396:	46a2      	mov	sl, r4
 8008398:	4637      	mov	r7, r6
 800839a:	f804 3b01 	strb.w	r3, [r4], #1
 800839e:	4680      	mov	r8, r0
 80083a0:	4689      	mov	r9, r1
 80083a2:	d1dc      	bne.n	800835e <_vfprintf_r+0x1342>
 80083a4:	4640      	mov	r0, r8
 80083a6:	4649      	mov	r1, r9
 80083a8:	4b44      	ldr	r3, [pc, #272]	; (80084bc <_vfprintf_r+0x14a0>)
 80083aa:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80083ae:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 80083b2:	2200      	movs	r2, #0
 80083b4:	463e      	mov	r6, r7
 80083b6:	e9dd 7b13 	ldrd	r7, fp, [sp, #76]	; 0x4c
 80083ba:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 80083be:	9514      	str	r5, [sp, #80]	; 0x50
 80083c0:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80083c4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80083c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80083ca:	f7f8 fc1f 	bl	8000c0c <__aeabi_dcmpgt>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	f040 8226 	bne.w	8008820 <_vfprintf_r+0x1804>
 80083d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083d8:	4b38      	ldr	r3, [pc, #224]	; (80084bc <_vfprintf_r+0x14a0>)
 80083da:	2200      	movs	r2, #0
 80083dc:	f7f8 fbee 	bl	8000bbc <__aeabi_dcmpeq>
 80083e0:	b118      	cbz	r0, 80083ea <_vfprintf_r+0x13ce>
 80083e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083e4:	07db      	lsls	r3, r3, #31
 80083e6:	f100 821b 	bmi.w	8008820 <_vfprintf_r+0x1804>
 80083ea:	2e00      	cmp	r6, #0
 80083ec:	4633      	mov	r3, r6
 80083ee:	db06      	blt.n	80083fe <_vfprintf_r+0x13e2>
 80083f0:	3301      	adds	r3, #1
 80083f2:	4423      	add	r3, r4
 80083f4:	2230      	movs	r2, #48	; 0x30
 80083f6:	f804 2b01 	strb.w	r2, [r4], #1
 80083fa:	42a3      	cmp	r3, r4
 80083fc:	d1fb      	bne.n	80083f6 <_vfprintf_r+0x13da>
 80083fe:	1b63      	subs	r3, r4, r5
 8008400:	9314      	str	r3, [sp, #80]	; 0x50
 8008402:	e54c      	b.n	8007e9e <_vfprintf_r+0xe82>
 8008404:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008406:	aa2a      	add	r2, sp, #168	; 0xa8
 8008408:	4648      	mov	r0, r9
 800840a:	f001 fc51 	bl	8009cb0 <__sprint_r>
 800840e:	2800      	cmp	r0, #0
 8008410:	f47e af38 	bne.w	8007284 <_vfprintf_r+0x268>
 8008414:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 8008418:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800841a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 800841e:	f7ff bac5 	b.w	80079ac <_vfprintf_r+0x990>
 8008422:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8008424:	f003 f937 	bl	800b696 <__retarget_lock_release_recursive>
 8008428:	f7fe befe 	b.w	8007228 <_vfprintf_r+0x20c>
 800842c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800842e:	1cde      	adds	r6, r3, #3
 8008430:	db02      	blt.n	8008438 <_vfprintf_r+0x141c>
 8008432:	9a08      	ldr	r2, [sp, #32]
 8008434:	429a      	cmp	r2, r3
 8008436:	da04      	bge.n	8008442 <_vfprintf_r+0x1426>
 8008438:	3f02      	subs	r7, #2
 800843a:	f027 0320 	bic.w	r3, r7, #32
 800843e:	9307      	str	r3, [sp, #28]
 8008440:	e537      	b.n	8007eb2 <_vfprintf_r+0xe96>
 8008442:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8008446:	429a      	cmp	r2, r3
 8008448:	f300 8177 	bgt.w	800873a <_vfprintf_r+0x171e>
 800844c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800844e:	07d0      	lsls	r0, r2, #31
 8008450:	f140 8260 	bpl.w	8008914 <_vfprintf_r+0x18f8>
 8008454:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008456:	4413      	add	r3, r2
 8008458:	930c      	str	r3, [sp, #48]	; 0x30
 800845a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800845c:	0559      	lsls	r1, r3, #21
 800845e:	d503      	bpl.n	8008468 <_vfprintf_r+0x144c>
 8008460:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008462:	2b00      	cmp	r3, #0
 8008464:	f300 8268 	bgt.w	8008938 <_vfprintf_r+0x191c>
 8008468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800846a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800846e:	9307      	str	r3, [sp, #28]
 8008470:	2767      	movs	r7, #103	; 0x67
 8008472:	2300      	movs	r3, #0
 8008474:	9310      	str	r3, [sp, #64]	; 0x40
 8008476:	9315      	str	r3, [sp, #84]	; 0x54
 8008478:	e581      	b.n	8007f7e <_vfprintf_r+0xf62>
 800847a:	222d      	movs	r2, #45	; 0x2d
 800847c:	2300      	movs	r3, #0
 800847e:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 8008482:	9308      	str	r3, [sp, #32]
 8008484:	f7fe bfdf 	b.w	8007446 <_vfprintf_r+0x42a>
 8008488:	4645      	mov	r5, r8
 800848a:	460c      	mov	r4, r1
 800848c:	4690      	mov	r8, r2
 800848e:	3301      	adds	r3, #1
 8008490:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008492:	f8c8 2000 	str.w	r2, [r8]
 8008496:	4434      	add	r4, r6
 8008498:	2b07      	cmp	r3, #7
 800849a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 800849e:	f8c8 6004 	str.w	r6, [r8, #4]
 80084a2:	f300 81e6 	bgt.w	8008872 <_vfprintf_r+0x1856>
 80084a6:	f108 0808 	add.w	r8, r8, #8
 80084aa:	f7ff bb64 	b.w	8007b76 <_vfprintf_r+0xb5a>
 80084ae:	bf00      	nop
 80084b0:	0800c994 	.word	0x0800c994
 80084b4:	0800c944 	.word	0x0800c944
 80084b8:	40300000 	.word	0x40300000
 80084bc:	3fe00000 	.word	0x3fe00000
 80084c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80084c4:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 80084c8:	4642      	mov	r2, r8
 80084ca:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 80084ce:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80084d2:	18eb      	adds	r3, r5, r3
 80084d4:	9308      	str	r3, [sp, #32]
 80084d6:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80084d8:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 80084dc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80084e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084e2:	9512      	str	r5, [sp, #72]	; 0x48
 80084e4:	4621      	mov	r1, r4
 80084e6:	f1b8 0f00 	cmp.w	r8, #0
 80084ea:	d02e      	beq.n	800854a <_vfprintf_r+0x152e>
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d16c      	bne.n	80085ca <_vfprintf_r+0x15ae>
 80084f0:	3f01      	subs	r7, #1
 80084f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80084f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80084f8:	e9c2 3a00 	strd	r3, sl, [r2]
 80084fc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80084fe:	3301      	adds	r3, #1
 8008500:	4451      	add	r1, sl
 8008502:	2b07      	cmp	r3, #7
 8008504:	912c      	str	r1, [sp, #176]	; 0xb0
 8008506:	932b      	str	r3, [sp, #172]	; 0xac
 8008508:	dc63      	bgt.n	80085d2 <_vfprintf_r+0x15b6>
 800850a:	3208      	adds	r2, #8
 800850c:	9b08      	ldr	r3, [sp, #32]
 800850e:	7838      	ldrb	r0, [r7, #0]
 8008510:	1b9b      	subs	r3, r3, r6
 8008512:	4283      	cmp	r3, r0
 8008514:	bfa8      	it	ge
 8008516:	4603      	movge	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	461c      	mov	r4, r3
 800851c:	dd0a      	ble.n	8008534 <_vfprintf_r+0x1518>
 800851e:	982b      	ldr	r0, [sp, #172]	; 0xac
 8008520:	3001      	adds	r0, #1
 8008522:	4419      	add	r1, r3
 8008524:	2807      	cmp	r0, #7
 8008526:	e9c2 6300 	strd	r6, r3, [r2]
 800852a:	912c      	str	r1, [sp, #176]	; 0xb0
 800852c:	902b      	str	r0, [sp, #172]	; 0xac
 800852e:	dc5b      	bgt.n	80085e8 <_vfprintf_r+0x15cc>
 8008530:	7838      	ldrb	r0, [r7, #0]
 8008532:	3208      	adds	r2, #8
 8008534:	2c00      	cmp	r4, #0
 8008536:	bfac      	ite	ge
 8008538:	1b05      	subge	r5, r0, r4
 800853a:	4605      	movlt	r5, r0
 800853c:	2d00      	cmp	r5, #0
 800853e:	dc16      	bgt.n	800856e <_vfprintf_r+0x1552>
 8008540:	4406      	add	r6, r0
 8008542:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008544:	f1b8 0f00 	cmp.w	r8, #0
 8008548:	d1d0      	bne.n	80084ec <_vfprintf_r+0x14d0>
 800854a:	2b00      	cmp	r3, #0
 800854c:	d13d      	bne.n	80085ca <_vfprintf_r+0x15ae>
 800854e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8008550:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008552:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008556:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800855a:	971d      	str	r7, [sp, #116]	; 0x74
 800855c:	18eb      	adds	r3, r5, r3
 800855e:	429e      	cmp	r6, r3
 8008560:	bf28      	it	cs
 8008562:	461e      	movcs	r6, r3
 8008564:	4690      	mov	r8, r2
 8008566:	460c      	mov	r4, r1
 8008568:	960c      	str	r6, [sp, #48]	; 0x30
 800856a:	f7ff bb0b 	b.w	8007b84 <_vfprintf_r+0xb68>
 800856e:	2d10      	cmp	r5, #16
 8008570:	982b      	ldr	r0, [sp, #172]	; 0xac
 8008572:	dd1d      	ble.n	80085b0 <_vfprintf_r+0x1594>
 8008574:	2410      	movs	r4, #16
 8008576:	e004      	b.n	8008582 <_vfprintf_r+0x1566>
 8008578:	3d10      	subs	r5, #16
 800857a:	2d10      	cmp	r5, #16
 800857c:	f102 0208 	add.w	r2, r2, #8
 8008580:	dd16      	ble.n	80085b0 <_vfprintf_r+0x1594>
 8008582:	3001      	adds	r0, #1
 8008584:	4ba5      	ldr	r3, [pc, #660]	; (800881c <_vfprintf_r+0x1800>)
 8008586:	3110      	adds	r1, #16
 8008588:	2807      	cmp	r0, #7
 800858a:	e9c2 3400 	strd	r3, r4, [r2]
 800858e:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
 8008592:	ddf1      	ble.n	8008578 <_vfprintf_r+0x155c>
 8008594:	aa2a      	add	r2, sp, #168	; 0xa8
 8008596:	4659      	mov	r1, fp
 8008598:	4648      	mov	r0, r9
 800859a:	f001 fb89 	bl	8009cb0 <__sprint_r>
 800859e:	2800      	cmp	r0, #0
 80085a0:	f47e ae70 	bne.w	8007284 <_vfprintf_r+0x268>
 80085a4:	3d10      	subs	r5, #16
 80085a6:	2d10      	cmp	r5, #16
 80085a8:	e9dd 012b 	ldrd	r0, r1, [sp, #172]	; 0xac
 80085ac:	aa2d      	add	r2, sp, #180	; 0xb4
 80085ae:	dce8      	bgt.n	8008582 <_vfprintf_r+0x1566>
 80085b0:	3001      	adds	r0, #1
 80085b2:	4b9a      	ldr	r3, [pc, #616]	; (800881c <_vfprintf_r+0x1800>)
 80085b4:	6055      	str	r5, [r2, #4]
 80085b6:	4429      	add	r1, r5
 80085b8:	2807      	cmp	r0, #7
 80085ba:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	dc42      	bgt.n	8008648 <_vfprintf_r+0x162c>
 80085c2:	7838      	ldrb	r0, [r7, #0]
 80085c4:	3208      	adds	r2, #8
 80085c6:	4406      	add	r6, r0
 80085c8:	e7bb      	b.n	8008542 <_vfprintf_r+0x1526>
 80085ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085cc:	3b01      	subs	r3, #1
 80085ce:	9310      	str	r3, [sp, #64]	; 0x40
 80085d0:	e791      	b.n	80084f6 <_vfprintf_r+0x14da>
 80085d2:	aa2a      	add	r2, sp, #168	; 0xa8
 80085d4:	4659      	mov	r1, fp
 80085d6:	4648      	mov	r0, r9
 80085d8:	f001 fb6a 	bl	8009cb0 <__sprint_r>
 80085dc:	2800      	cmp	r0, #0
 80085de:	f47e ae51 	bne.w	8007284 <_vfprintf_r+0x268>
 80085e2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80085e4:	aa2d      	add	r2, sp, #180	; 0xb4
 80085e6:	e791      	b.n	800850c <_vfprintf_r+0x14f0>
 80085e8:	aa2a      	add	r2, sp, #168	; 0xa8
 80085ea:	4659      	mov	r1, fp
 80085ec:	4648      	mov	r0, r9
 80085ee:	f001 fb5f 	bl	8009cb0 <__sprint_r>
 80085f2:	2800      	cmp	r0, #0
 80085f4:	f47e ae46 	bne.w	8007284 <_vfprintf_r+0x268>
 80085f8:	7838      	ldrb	r0, [r7, #0]
 80085fa:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80085fc:	aa2d      	add	r2, sp, #180	; 0xb4
 80085fe:	e799      	b.n	8008534 <_vfprintf_r+0x1518>
 8008600:	930e      	str	r3, [sp, #56]	; 0x38
 8008602:	e9dd 3416 	ldrd	r3, r4, [sp, #88]	; 0x58
 8008606:	930c      	str	r3, [sp, #48]	; 0x30
 8008608:	232d      	movs	r3, #45	; 0x2d
 800860a:	f104 4600 	add.w	r6, r4, #2147483648	; 0x80000000
 800860e:	9312      	str	r3, [sp, #72]	; 0x48
 8008610:	e677      	b.n	8008302 <_vfprintf_r+0x12e6>
 8008612:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008614:	aa2a      	add	r2, sp, #168	; 0xa8
 8008616:	4648      	mov	r0, r9
 8008618:	f001 fb4a 	bl	8009cb0 <__sprint_r>
 800861c:	2800      	cmp	r0, #0
 800861e:	f47e ae31 	bne.w	8007284 <_vfprintf_r+0x268>
 8008622:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008624:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008626:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 800862a:	f7ff bbb7 	b.w	8007d9c <_vfprintf_r+0xd80>
 800862e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008630:	aa2a      	add	r2, sp, #168	; 0xa8
 8008632:	4648      	mov	r0, r9
 8008634:	f001 fb3c 	bl	8009cb0 <__sprint_r>
 8008638:	2800      	cmp	r0, #0
 800863a:	f47e ae23 	bne.w	8007284 <_vfprintf_r+0x268>
 800863e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008640:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8008644:	f7ff ba90 	b.w	8007b68 <_vfprintf_r+0xb4c>
 8008648:	aa2a      	add	r2, sp, #168	; 0xa8
 800864a:	4659      	mov	r1, fp
 800864c:	4648      	mov	r0, r9
 800864e:	f001 fb2f 	bl	8009cb0 <__sprint_r>
 8008652:	2800      	cmp	r0, #0
 8008654:	f47e ae16 	bne.w	8007284 <_vfprintf_r+0x268>
 8008658:	7838      	ldrb	r0, [r7, #0]
 800865a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800865c:	aa2d      	add	r2, sp, #180	; 0xb4
 800865e:	4406      	add	r6, r0
 8008660:	e76f      	b.n	8008542 <_vfprintf_r+0x1526>
 8008662:	9908      	ldr	r1, [sp, #32]
 8008664:	9101      	str	r1, [sp, #4]
 8008666:	a928      	add	r1, sp, #160	; 0xa0
 8008668:	9104      	str	r1, [sp, #16]
 800866a:	a925      	add	r1, sp, #148	; 0x94
 800866c:	9103      	str	r1, [sp, #12]
 800866e:	a924      	add	r1, sp, #144	; 0x90
 8008670:	9102      	str	r1, [sp, #8]
 8008672:	2103      	movs	r1, #3
 8008674:	4633      	mov	r3, r6
 8008676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008678:	9100      	str	r1, [sp, #0]
 800867a:	4648      	mov	r0, r9
 800867c:	f7f8 fddc 	bl	8001238 <_dtoa_r>
 8008680:	7803      	ldrb	r3, [r0, #0]
 8008682:	2b30      	cmp	r3, #48	; 0x30
 8008684:	4605      	mov	r5, r0
 8008686:	f000 818d 	beq.w	80089a4 <_vfprintf_r+0x1988>
 800868a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800868c:	9a08      	ldr	r2, [sp, #32]
 800868e:	4413      	add	r3, r2
 8008690:	18ec      	adds	r4, r5, r3
 8008692:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008694:	4631      	mov	r1, r6
 8008696:	2200      	movs	r2, #0
 8008698:	2300      	movs	r3, #0
 800869a:	f7f8 fa8f 	bl	8000bbc <__aeabi_dcmpeq>
 800869e:	b110      	cbz	r0, 80086a6 <_vfprintf_r+0x168a>
 80086a0:	4623      	mov	r3, r4
 80086a2:	f7ff bbfa 	b.w	8007e9a <_vfprintf_r+0xe7e>
 80086a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80086a8:	42a3      	cmp	r3, r4
 80086aa:	f4bf abf6 	bcs.w	8007e9a <_vfprintf_r+0xe7e>
 80086ae:	2130      	movs	r1, #48	; 0x30
 80086b0:	1c5a      	adds	r2, r3, #1
 80086b2:	9228      	str	r2, [sp, #160]	; 0xa0
 80086b4:	7019      	strb	r1, [r3, #0]
 80086b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80086b8:	429c      	cmp	r4, r3
 80086ba:	d8f9      	bhi.n	80086b0 <_vfprintf_r+0x1694>
 80086bc:	f7ff bbed 	b.w	8007e9a <_vfprintf_r+0xe7e>
 80086c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086c2:	aa2a      	add	r2, sp, #168	; 0xa8
 80086c4:	4648      	mov	r0, r9
 80086c6:	f001 faf3 	bl	8009cb0 <__sprint_r>
 80086ca:	2800      	cmp	r0, #0
 80086cc:	f47e adda 	bne.w	8007284 <_vfprintf_r+0x268>
 80086d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80086d2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80086d4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 80086d8:	f7ff ba6a 	b.w	8007bb0 <_vfprintf_r+0xb94>
 80086dc:	9b08      	ldr	r3, [sp, #32]
 80086de:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 80086e2:	940d      	str	r4, [sp, #52]	; 0x34
 80086e4:	9307      	str	r3, [sp, #28]
 80086e6:	930c      	str	r3, [sp, #48]	; 0x30
 80086e8:	9008      	str	r0, [sp, #32]
 80086ea:	9010      	str	r0, [sp, #64]	; 0x40
 80086ec:	9015      	str	r0, [sp, #84]	; 0x54
 80086ee:	9013      	str	r0, [sp, #76]	; 0x4c
 80086f0:	f7fe bea6 	b.w	8007440 <_vfprintf_r+0x424>
 80086f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80086f8:	9a08      	ldr	r2, [sp, #32]
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2900      	cmp	r1, #0
 8008700:	ea43 0302 	orr.w	r3, r3, r2
 8008704:	f340 8162 	ble.w	80089cc <_vfprintf_r+0x19b0>
 8008708:	2b00      	cmp	r3, #0
 800870a:	f040 813c 	bne.w	8008986 <_vfprintf_r+0x196a>
 800870e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008710:	930c      	str	r3, [sp, #48]	; 0x30
 8008712:	2766      	movs	r7, #102	; 0x66
 8008714:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008716:	055a      	lsls	r2, r3, #21
 8008718:	f100 810f 	bmi.w	800893a <_vfprintf_r+0x191e>
 800871c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800871e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008722:	9307      	str	r3, [sp, #28]
 8008724:	e6a5      	b.n	8008472 <_vfprintf_r+0x1456>
 8008726:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008728:	9818      	ldr	r0, [sp, #96]	; 0x60
 800872a:	aa2a      	add	r2, sp, #168	; 0xa8
 800872c:	f001 fac0 	bl	8009cb0 <__sprint_r>
 8008730:	2800      	cmp	r0, #0
 8008732:	f43e ae47 	beq.w	80073c4 <_vfprintf_r+0x3a8>
 8008736:	f7fe bdab 	b.w	8007290 <_vfprintf_r+0x274>
 800873a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800873c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800873e:	189a      	adds	r2, r3, r2
 8008740:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008742:	920c      	str	r2, [sp, #48]	; 0x30
 8008744:	2b00      	cmp	r3, #0
 8008746:	f340 8124 	ble.w	8008992 <_vfprintf_r+0x1976>
 800874a:	2767      	movs	r7, #103	; 0x67
 800874c:	e7e2      	b.n	8008714 <_vfprintf_r+0x16f8>
 800874e:	2300      	movs	r3, #0
 8008750:	9308      	str	r3, [sp, #32]
 8008752:	f7fe bcc8 	b.w	80070e6 <_vfprintf_r+0xca>
 8008756:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008758:	aa2a      	add	r2, sp, #168	; 0xa8
 800875a:	4648      	mov	r0, r9
 800875c:	f001 faa8 	bl	8009cb0 <__sprint_r>
 8008760:	2800      	cmp	r0, #0
 8008762:	f47e ad8f 	bne.w	8007284 <_vfprintf_r+0x268>
 8008766:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8008768:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800876a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800876c:	1b5d      	subs	r5, r3, r5
 800876e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8008772:	f7ff ba35 	b.w	8007be0 <_vfprintf_r+0xbc4>
 8008776:	9b08      	ldr	r3, [sp, #32]
 8008778:	18ec      	adds	r4, r5, r3
 800877a:	e78a      	b.n	8008692 <_vfprintf_r+0x1676>
 800877c:	4256      	negs	r6, r2
 800877e:	3210      	adds	r2, #16
 8008780:	f280 814d 	bge.w	8008a1e <_vfprintf_r+0x1a02>
 8008784:	4825      	ldr	r0, [pc, #148]	; (800881c <_vfprintf_r+0x1800>)
 8008786:	900f      	str	r0, [sp, #60]	; 0x3c
 8008788:	4642      	mov	r2, r8
 800878a:	4621      	mov	r1, r4
 800878c:	46a8      	mov	r8, r5
 800878e:	2710      	movs	r7, #16
 8008790:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008792:	4604      	mov	r4, r0
 8008794:	e003      	b.n	800879e <_vfprintf_r+0x1782>
 8008796:	3208      	adds	r2, #8
 8008798:	3e10      	subs	r6, #16
 800879a:	2e10      	cmp	r6, #16
 800879c:	dd76      	ble.n	800888c <_vfprintf_r+0x1870>
 800879e:	3301      	adds	r3, #1
 80087a0:	3110      	adds	r1, #16
 80087a2:	2b07      	cmp	r3, #7
 80087a4:	e9c2 4700 	strd	r4, r7, [r2]
 80087a8:	e9cd 312b 	strd	r3, r1, [sp, #172]	; 0xac
 80087ac:	ddf3      	ble.n	8008796 <_vfprintf_r+0x177a>
 80087ae:	aa2a      	add	r2, sp, #168	; 0xa8
 80087b0:	4629      	mov	r1, r5
 80087b2:	4648      	mov	r0, r9
 80087b4:	f001 fa7c 	bl	8009cb0 <__sprint_r>
 80087b8:	2800      	cmp	r0, #0
 80087ba:	f47e ad63 	bne.w	8007284 <_vfprintf_r+0x268>
 80087be:	e9dd 312b 	ldrd	r3, r1, [sp, #172]	; 0xac
 80087c2:	aa2d      	add	r2, sp, #180	; 0xb4
 80087c4:	e7e8      	b.n	8008798 <_vfprintf_r+0x177c>
 80087c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087ca:	07df      	lsls	r7, r3, #31
 80087cc:	d407      	bmi.n	80087de <_vfprintf_r+0x17c2>
 80087ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d0:	899b      	ldrh	r3, [r3, #12]
 80087d2:	059e      	lsls	r6, r3, #22
 80087d4:	d403      	bmi.n	80087de <_vfprintf_r+0x17c2>
 80087d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80087da:	f002 ff5c 	bl	800b696 <__retarget_lock_release_recursive>
 80087de:	f04f 33ff 	mov.w	r3, #4294967295
 80087e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80087e4:	f7fe bd5d 	b.w	80072a2 <_vfprintf_r+0x286>
 80087e8:	1c59      	adds	r1, r3, #1
 80087ea:	4648      	mov	r0, r9
 80087ec:	f7fc fba2 	bl	8004f34 <_malloc_r>
 80087f0:	4605      	mov	r5, r0
 80087f2:	2800      	cmp	r0, #0
 80087f4:	f000 811a 	beq.w	8008a2c <_vfprintf_r+0x1a10>
 80087f8:	900e      	str	r0, [sp, #56]	; 0x38
 80087fa:	e575      	b.n	80082e8 <_vfprintf_r+0x12cc>
 80087fc:	1c4c      	adds	r4, r1, #1
 80087fe:	a928      	add	r1, sp, #160	; 0xa0
 8008800:	9104      	str	r1, [sp, #16]
 8008802:	a925      	add	r1, sp, #148	; 0x94
 8008804:	9103      	str	r1, [sp, #12]
 8008806:	a924      	add	r1, sp, #144	; 0x90
 8008808:	9102      	str	r1, [sp, #8]
 800880a:	2102      	movs	r1, #2
 800880c:	9401      	str	r4, [sp, #4]
 800880e:	9100      	str	r1, [sp, #0]
 8008810:	4648      	mov	r0, r9
 8008812:	f7f8 fd11 	bl	8001238 <_dtoa_r>
 8008816:	4605      	mov	r5, r0
 8008818:	442c      	add	r4, r5
 800881a:	e73a      	b.n	8008692 <_vfprintf_r+0x1676>
 800881c:	0800c994 	.word	0x0800c994
 8008820:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008822:	9328      	str	r3, [sp, #160]	; 0xa0
 8008824:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008826:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800882a:	7bd9      	ldrb	r1, [r3, #15]
 800882c:	428a      	cmp	r2, r1
 800882e:	4623      	mov	r3, r4
 8008830:	d109      	bne.n	8008846 <_vfprintf_r+0x182a>
 8008832:	2030      	movs	r0, #48	; 0x30
 8008834:	f803 0c01 	strb.w	r0, [r3, #-1]
 8008838:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800883a:	1e5a      	subs	r2, r3, #1
 800883c:	9228      	str	r2, [sp, #160]	; 0xa0
 800883e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8008842:	4291      	cmp	r1, r2
 8008844:	d0f6      	beq.n	8008834 <_vfprintf_r+0x1818>
 8008846:	2a39      	cmp	r2, #57	; 0x39
 8008848:	bf0b      	itete	eq
 800884a:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
 800884c:	3201      	addne	r2, #1
 800884e:	7a92      	ldrbeq	r2, [r2, #10]
 8008850:	b2d2      	uxtbne	r2, r2
 8008852:	f803 2c01 	strb.w	r2, [r3, #-1]
 8008856:	e5d2      	b.n	80083fe <_vfprintf_r+0x13e2>
 8008858:	2330      	movs	r3, #48	; 0x30
 800885a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 800885e:	2378      	movs	r3, #120	; 0x78
 8008860:	e536      	b.n	80082d0 <_vfprintf_r+0x12b4>
 8008862:	4a78      	ldr	r2, [pc, #480]	; (8008a44 <_vfprintf_r+0x1a28>)
 8008864:	920f      	str	r2, [sp, #60]	; 0x3c
 8008866:	f7ff b845 	b.w	80078f4 <_vfprintf_r+0x8d8>
 800886a:	2306      	movs	r3, #6
 800886c:	9308      	str	r3, [sp, #32]
 800886e:	f7ff bae5 	b.w	8007e3c <_vfprintf_r+0xe20>
 8008872:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008874:	aa2a      	add	r2, sp, #168	; 0xa8
 8008876:	4648      	mov	r0, r9
 8008878:	f001 fa1a 	bl	8009cb0 <__sprint_r>
 800887c:	2800      	cmp	r0, #0
 800887e:	f47e ad01 	bne.w	8007284 <_vfprintf_r+0x268>
 8008882:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008884:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8008888:	f7ff b975 	b.w	8007b76 <_vfprintf_r+0xb5a>
 800888c:	4645      	mov	r5, r8
 800888e:	460c      	mov	r4, r1
 8008890:	4690      	mov	r8, r2
 8008892:	3301      	adds	r3, #1
 8008894:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008896:	f8c8 2000 	str.w	r2, [r8]
 800889a:	4434      	add	r4, r6
 800889c:	2b07      	cmp	r3, #7
 800889e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 80088a2:	f8c8 6004 	str.w	r6, [r8, #4]
 80088a6:	f77f aa8e 	ble.w	8007dc6 <_vfprintf_r+0xdaa>
 80088aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088ac:	aa2a      	add	r2, sp, #168	; 0xa8
 80088ae:	4648      	mov	r0, r9
 80088b0:	f001 f9fe 	bl	8009cb0 <__sprint_r>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	f47e ace5 	bne.w	8007284 <_vfprintf_r+0x268>
 80088ba:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 80088be:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 80088c2:	f7ff b876 	b.w	80079b2 <_vfprintf_r+0x996>
 80088c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088c8:	4d5f      	ldr	r5, [pc, #380]	; (8008a48 <_vfprintf_r+0x1a2c>)
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bfb4      	ite	lt
 80088ce:	222d      	movlt	r2, #45	; 0x2d
 80088d0:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
 80088d4:	4b5d      	ldr	r3, [pc, #372]	; (8008a4c <_vfprintf_r+0x1a30>)
 80088d6:	bfb8      	it	lt
 80088d8:	f88d 208b 	strblt.w	r2, [sp, #139]	; 0x8b
 80088dc:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 80088e0:	f7fe bda2 	b.w	8007428 <_vfprintf_r+0x40c>
 80088e4:	aa24      	add	r2, sp, #144	; 0x90
 80088e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80088e8:	4631      	mov	r1, r6
 80088ea:	f001 f8b5 	bl	8009a58 <frexp>
 80088ee:	2200      	movs	r2, #0
 80088f0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80088f4:	f7f7 fee0 	bl	80006b8 <__aeabi_dmul>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008900:	2200      	movs	r2, #0
 8008902:	2300      	movs	r3, #0
 8008904:	f7f8 f95a 	bl	8000bbc <__aeabi_dcmpeq>
 8008908:	b108      	cbz	r0, 800890e <_vfprintf_r+0x18f2>
 800890a:	2301      	movs	r3, #1
 800890c:	9324      	str	r3, [sp, #144]	; 0x90
 800890e:	4b50      	ldr	r3, [pc, #320]	; (8008a50 <_vfprintf_r+0x1a34>)
 8008910:	930c      	str	r3, [sp, #48]	; 0x30
 8008912:	e513      	b.n	800833c <_vfprintf_r+0x1320>
 8008914:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008916:	930c      	str	r3, [sp, #48]	; 0x30
 8008918:	e59f      	b.n	800845a <_vfprintf_r+0x143e>
 800891a:	2900      	cmp	r1, #0
 800891c:	d16a      	bne.n	80089f4 <_vfprintf_r+0x19d8>
 800891e:	2230      	movs	r2, #48	; 0x30
 8008920:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
 8008924:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
 8008928:	3330      	adds	r3, #48	; 0x30
 800892a:	f802 3b01 	strb.w	r3, [r2], #1
 800892e:	ab26      	add	r3, sp, #152	; 0x98
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	931c      	str	r3, [sp, #112]	; 0x70
 8008934:	f7ff bb0b 	b.w	8007f4e <_vfprintf_r+0xf32>
 8008938:	2767      	movs	r7, #103	; 0x67
 800893a:	991d      	ldr	r1, [sp, #116]	; 0x74
 800893c:	780b      	ldrb	r3, [r1, #0]
 800893e:	2bff      	cmp	r3, #255	; 0xff
 8008940:	d07b      	beq.n	8008a3a <_vfprintf_r+0x1a1e>
 8008942:	2400      	movs	r4, #0
 8008944:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008946:	4620      	mov	r0, r4
 8008948:	e003      	b.n	8008952 <_vfprintf_r+0x1936>
 800894a:	3001      	adds	r0, #1
 800894c:	3101      	adds	r1, #1
 800894e:	2bff      	cmp	r3, #255	; 0xff
 8008950:	d008      	beq.n	8008964 <_vfprintf_r+0x1948>
 8008952:	4293      	cmp	r3, r2
 8008954:	da06      	bge.n	8008964 <_vfprintf_r+0x1948>
 8008956:	1ad2      	subs	r2, r2, r3
 8008958:	784b      	ldrb	r3, [r1, #1]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1f5      	bne.n	800894a <_vfprintf_r+0x192e>
 800895e:	780b      	ldrb	r3, [r1, #0]
 8008960:	3401      	adds	r4, #1
 8008962:	e7f4      	b.n	800894e <_vfprintf_r+0x1932>
 8008964:	911d      	str	r1, [sp, #116]	; 0x74
 8008966:	9213      	str	r2, [sp, #76]	; 0x4c
 8008968:	9015      	str	r0, [sp, #84]	; 0x54
 800896a:	9410      	str	r4, [sp, #64]	; 0x40
 800896c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800896e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008970:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8008972:	4413      	add	r3, r2
 8008974:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008976:	fb01 2303 	mla	r3, r1, r3, r2
 800897a:	930c      	str	r3, [sp, #48]	; 0x30
 800897c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008980:	9307      	str	r3, [sp, #28]
 8008982:	f7ff bafc 	b.w	8007f7e <_vfprintf_r+0xf62>
 8008986:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008988:	18cb      	adds	r3, r1, r3
 800898a:	441a      	add	r2, r3
 800898c:	920c      	str	r2, [sp, #48]	; 0x30
 800898e:	2766      	movs	r7, #102	; 0x66
 8008990:	e6c0      	b.n	8008714 <_vfprintf_r+0x16f8>
 8008992:	f1c3 0301 	rsb	r3, r3, #1
 8008996:	441a      	add	r2, r3
 8008998:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800899c:	920c      	str	r2, [sp, #48]	; 0x30
 800899e:	9307      	str	r3, [sp, #28]
 80089a0:	2767      	movs	r7, #103	; 0x67
 80089a2:	e566      	b.n	8008472 <_vfprintf_r+0x1456>
 80089a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80089a6:	4631      	mov	r1, r6
 80089a8:	2200      	movs	r2, #0
 80089aa:	2300      	movs	r3, #0
 80089ac:	f7f8 f906 	bl	8000bbc <__aeabi_dcmpeq>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	f47f ae6a 	bne.w	800868a <_vfprintf_r+0x166e>
 80089b6:	9b08      	ldr	r3, [sp, #32]
 80089b8:	f1c3 0301 	rsb	r3, r3, #1
 80089bc:	9324      	str	r3, [sp, #144]	; 0x90
 80089be:	e665      	b.n	800868c <_vfprintf_r+0x1670>
 80089c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089c2:	07dc      	lsls	r4, r3, #31
 80089c4:	f57f aace 	bpl.w	8007f64 <_vfprintf_r+0xf48>
 80089c8:	f7ff bac8 	b.w	8007f5c <_vfprintf_r+0xf40>
 80089cc:	b923      	cbnz	r3, 80089d8 <_vfprintf_r+0x19bc>
 80089ce:	2301      	movs	r3, #1
 80089d0:	9307      	str	r3, [sp, #28]
 80089d2:	2766      	movs	r7, #102	; 0x66
 80089d4:	930c      	str	r3, [sp, #48]	; 0x30
 80089d6:	e54c      	b.n	8008472 <_vfprintf_r+0x1456>
 80089d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089da:	9a08      	ldr	r2, [sp, #32]
 80089dc:	3301      	adds	r3, #1
 80089de:	441a      	add	r2, r3
 80089e0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80089e4:	920c      	str	r2, [sp, #48]	; 0x30
 80089e6:	9307      	str	r3, [sp, #28]
 80089e8:	2766      	movs	r7, #102	; 0x66
 80089ea:	e542      	b.n	8008472 <_vfprintf_r+0x1456>
 80089ec:	4a15      	ldr	r2, [pc, #84]	; (8008a44 <_vfprintf_r+0x1a28>)
 80089ee:	920f      	str	r2, [sp, #60]	; 0x3c
 80089f0:	f7ff bbb8 	b.w	8008164 <_vfprintf_r+0x1148>
 80089f4:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
 80089f8:	e796      	b.n	8008928 <_vfprintf_r+0x190c>
 80089fa:	4a12      	ldr	r2, [pc, #72]	; (8008a44 <_vfprintf_r+0x1a28>)
 80089fc:	920f      	str	r2, [sp, #60]	; 0x3c
 80089fe:	e546      	b.n	800848e <_vfprintf_r+0x1472>
 8008a00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a02:	f89b 7001 	ldrb.w	r7, [fp, #1]
 8008a06:	4693      	mov	fp, r2
 8008a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a0c:	930d      	str	r3, [sp, #52]	; 0x34
 8008a0e:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8008a12:	9208      	str	r2, [sp, #32]
 8008a14:	f7fe bb65 	b.w	80070e2 <_vfprintf_r+0xc6>
 8008a18:	9c08      	ldr	r4, [sp, #32]
 8008a1a:	442c      	add	r4, r5
 8008a1c:	e639      	b.n	8008692 <_vfprintf_r+0x1676>
 8008a1e:	4a09      	ldr	r2, [pc, #36]	; (8008a44 <_vfprintf_r+0x1a28>)
 8008a20:	920f      	str	r2, [sp, #60]	; 0x3c
 8008a22:	e736      	b.n	8008892 <_vfprintf_r+0x1876>
 8008a24:	2302      	movs	r3, #2
 8008a26:	931c      	str	r3, [sp, #112]	; 0x70
 8008a28:	f7ff ba91 	b.w	8007f4e <_vfprintf_r+0xf32>
 8008a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a2e:	8993      	ldrh	r3, [r2, #12]
 8008a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a34:	8193      	strh	r3, [r2, #12]
 8008a36:	f7fe bc2b 	b.w	8007290 <_vfprintf_r+0x274>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	9310      	str	r3, [sp, #64]	; 0x40
 8008a3e:	9315      	str	r3, [sp, #84]	; 0x54
 8008a40:	e794      	b.n	800896c <_vfprintf_r+0x1950>
 8008a42:	bf00      	nop
 8008a44:	0800c994 	.word	0x0800c994
 8008a48:	0800c928 	.word	0x0800c928
 8008a4c:	0800c92c 	.word	0x0800c92c
 8008a50:	0800c930 	.word	0x0800c930

08008a54 <__sbprintf>:
 8008a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a56:	461f      	mov	r7, r3
 8008a58:	898b      	ldrh	r3, [r1, #12]
 8008a5a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8008a5e:	f023 0302 	bic.w	r3, r3, #2
 8008a62:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008a66:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008a68:	9319      	str	r3, [sp, #100]	; 0x64
 8008a6a:	89cb      	ldrh	r3, [r1, #14]
 8008a6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008a70:	69cb      	ldr	r3, [r1, #28]
 8008a72:	9307      	str	r3, [sp, #28]
 8008a74:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8008a76:	9309      	str	r3, [sp, #36]	; 0x24
 8008a78:	ab1a      	add	r3, sp, #104	; 0x68
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	9304      	str	r3, [sp, #16]
 8008a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a82:	4615      	mov	r5, r2
 8008a84:	4606      	mov	r6, r0
 8008a86:	9302      	str	r3, [sp, #8]
 8008a88:	9305      	str	r3, [sp, #20]
 8008a8a:	a816      	add	r0, sp, #88	; 0x58
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	460c      	mov	r4, r1
 8008a90:	9306      	str	r3, [sp, #24]
 8008a92:	f002 fdee 	bl	800b672 <__retarget_lock_init_recursive>
 8008a96:	462a      	mov	r2, r5
 8008a98:	463b      	mov	r3, r7
 8008a9a:	4669      	mov	r1, sp
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f7fe fabd 	bl	800701c <_vfprintf_r>
 8008aa2:	1e05      	subs	r5, r0, #0
 8008aa4:	db07      	blt.n	8008ab6 <__sbprintf+0x62>
 8008aa6:	4669      	mov	r1, sp
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f000 f99d 	bl	8008de8 <_fflush_r>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	bf18      	it	ne
 8008ab2:	f04f 35ff 	movne.w	r5, #4294967295
 8008ab6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008aba:	065b      	lsls	r3, r3, #25
 8008abc:	d503      	bpl.n	8008ac6 <__sbprintf+0x72>
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ac4:	81a3      	strh	r3, [r4, #12]
 8008ac6:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008ac8:	f002 fddd 	bl	800b686 <__retarget_lock_close_recursive>
 8008acc:	4628      	mov	r0, r5
 8008ace:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8008ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ad4 <__swsetup_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4b33      	ldr	r3, [pc, #204]	; (8008ba4 <__swsetup_r+0xd0>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4605      	mov	r5, r0
 8008adc:	460c      	mov	r4, r1
 8008ade:	b10b      	cbz	r3, 8008ae4 <__swsetup_r+0x10>
 8008ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ae2:	b312      	cbz	r2, 8008b2a <__swsetup_r+0x56>
 8008ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ae8:	0718      	lsls	r0, r3, #28
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	d525      	bpl.n	8008b3a <__swsetup_r+0x66>
 8008aee:	6921      	ldr	r1, [r4, #16]
 8008af0:	2900      	cmp	r1, #0
 8008af2:	d02d      	beq.n	8008b50 <__swsetup_r+0x7c>
 8008af4:	f012 0001 	ands.w	r0, r2, #1
 8008af8:	d007      	beq.n	8008b0a <__swsetup_r+0x36>
 8008afa:	2000      	movs	r0, #0
 8008afc:	60a0      	str	r0, [r4, #8]
 8008afe:	6960      	ldr	r0, [r4, #20]
 8008b00:	4240      	negs	r0, r0
 8008b02:	61a0      	str	r0, [r4, #24]
 8008b04:	b139      	cbz	r1, 8008b16 <__swsetup_r+0x42>
 8008b06:	2000      	movs	r0, #0
 8008b08:	bd38      	pop	{r3, r4, r5, pc}
 8008b0a:	0795      	lsls	r5, r2, #30
 8008b0c:	bf58      	it	pl
 8008b0e:	6960      	ldrpl	r0, [r4, #20]
 8008b10:	60a0      	str	r0, [r4, #8]
 8008b12:	2900      	cmp	r1, #0
 8008b14:	d1f7      	bne.n	8008b06 <__swsetup_r+0x32>
 8008b16:	0612      	lsls	r2, r2, #24
 8008b18:	bf58      	it	pl
 8008b1a:	4608      	movpl	r0, r1
 8008b1c:	d5f4      	bpl.n	8008b08 <__swsetup_r+0x34>
 8008b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b22:	81a3      	strh	r3, [r4, #12]
 8008b24:	f04f 30ff 	mov.w	r0, #4294967295
 8008b28:	bd38      	pop	{r3, r4, r5, pc}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 f990 	bl	8008e50 <__sinit>
 8008b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b34:	0718      	lsls	r0, r3, #28
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	d4d9      	bmi.n	8008aee <__swsetup_r+0x1a>
 8008b3a:	06d1      	lsls	r1, r2, #27
 8008b3c:	d52a      	bpl.n	8008b94 <__swsetup_r+0xc0>
 8008b3e:	0752      	lsls	r2, r2, #29
 8008b40:	d414      	bmi.n	8008b6c <__swsetup_r+0x98>
 8008b42:	6921      	ldr	r1, [r4, #16]
 8008b44:	f043 0308 	orr.w	r3, r3, #8
 8008b48:	81a3      	strh	r3, [r4, #12]
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	2900      	cmp	r1, #0
 8008b4e:	d1d1      	bne.n	8008af4 <__swsetup_r+0x20>
 8008b50:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8008b54:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008b58:	d0cc      	beq.n	8008af4 <__swsetup_r+0x20>
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f000 fb71 	bl	8009244 <__smakebuf_r>
 8008b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b66:	6921      	ldr	r1, [r4, #16]
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	e7c3      	b.n	8008af4 <__swsetup_r+0x20>
 8008b6c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008b6e:	b151      	cbz	r1, 8008b86 <__swsetup_r+0xb2>
 8008b70:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8008b74:	4291      	cmp	r1, r2
 8008b76:	d004      	beq.n	8008b82 <__swsetup_r+0xae>
 8008b78:	4628      	mov	r0, r5
 8008b7a:	f000 fa3f 	bl	8008ffc <_free_r>
 8008b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	6322      	str	r2, [r4, #48]	; 0x30
 8008b86:	6921      	ldr	r1, [r4, #16]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	e9c4 1200 	strd	r1, r2, [r4]
 8008b8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b92:	e7d7      	b.n	8008b44 <__swsetup_r+0x70>
 8008b94:	2209      	movs	r2, #9
 8008b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b9a:	602a      	str	r2, [r5, #0]
 8008b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba0:	81a3      	strh	r3, [r4, #12]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	200006ec 	.word	0x200006ec

08008ba8 <quorem>:
 8008ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bac:	6903      	ldr	r3, [r0, #16]
 8008bae:	690c      	ldr	r4, [r1, #16]
 8008bb0:	42a3      	cmp	r3, r4
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	f2c0 8086 	blt.w	8008cc4 <quorem+0x11c>
 8008bb8:	3c01      	subs	r4, #1
 8008bba:	f101 0514 	add.w	r5, r1, #20
 8008bbe:	00a3      	lsls	r3, r4, #2
 8008bc0:	f100 0814 	add.w	r8, r0, #20
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008bca:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	468a      	mov	sl, r1
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	eb08 0184 	add.w	r1, r8, r4, lsl #2
 8008bd8:	4681      	mov	r9, r0
 8008bda:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 8008bde:	9101      	str	r1, [sp, #4]
 8008be0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008be4:	d338      	bcc.n	8008c58 <quorem+0xb0>
 8008be6:	2300      	movs	r3, #0
 8008be8:	46ae      	mov	lr, r5
 8008bea:	4640      	mov	r0, r8
 8008bec:	469b      	mov	fp, r3
 8008bee:	f85e 1b04 	ldr.w	r1, [lr], #4
 8008bf2:	6802      	ldr	r2, [r0, #0]
 8008bf4:	fa1f fc81 	uxth.w	ip, r1
 8008bf8:	fb06 330c 	mla	r3, r6, ip, r3
 8008bfc:	0c09      	lsrs	r1, r1, #16
 8008bfe:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8008c02:	fb06 cc01 	mla	ip, r6, r1, ip
 8008c06:	b299      	uxth	r1, r3
 8008c08:	ebab 0101 	sub.w	r1, fp, r1
 8008c0c:	fa1f f38c 	uxth.w	r3, ip
 8008c10:	fa11 f182 	uxtah	r1, r1, r2
 8008c14:	ebc3 4212 	rsb	r2, r3, r2, lsr #16
 8008c18:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8008c1c:	b289      	uxth	r1, r1
 8008c1e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c22:	4577      	cmp	r7, lr
 8008c24:	f840 1b04 	str.w	r1, [r0], #4
 8008c28:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8008c2c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008c30:	d2dd      	bcs.n	8008bee <quorem+0x46>
 8008c32:	9b00      	ldr	r3, [sp, #0]
 8008c34:	f858 3003 	ldr.w	r3, [r8, r3]
 8008c38:	b973      	cbnz	r3, 8008c58 <quorem+0xb0>
 8008c3a:	9b01      	ldr	r3, [sp, #4]
 8008c3c:	3b04      	subs	r3, #4
 8008c3e:	4598      	cmp	r8, r3
 8008c40:	d304      	bcc.n	8008c4c <quorem+0xa4>
 8008c42:	e007      	b.n	8008c54 <quorem+0xac>
 8008c44:	4598      	cmp	r8, r3
 8008c46:	f104 34ff 	add.w	r4, r4, #4294967295
 8008c4a:	d203      	bcs.n	8008c54 <quorem+0xac>
 8008c4c:	f853 2904 	ldr.w	r2, [r3], #-4
 8008c50:	2a00      	cmp	r2, #0
 8008c52:	d0f7      	beq.n	8008c44 <quorem+0x9c>
 8008c54:	f8c9 4010 	str.w	r4, [r9, #16]
 8008c58:	4651      	mov	r1, sl
 8008c5a:	4648      	mov	r0, r9
 8008c5c:	f000 fdd4 	bl	8009808 <__mcmp>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	db2b      	blt.n	8008cbc <quorem+0x114>
 8008c64:	3601      	adds	r6, #1
 8008c66:	4640      	mov	r0, r8
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f855 1b04 	ldr.w	r1, [r5], #4
 8008c6e:	f8d0 c000 	ldr.w	ip, [r0]
 8008c72:	b28a      	uxth	r2, r1
 8008c74:	1a9a      	subs	r2, r3, r2
 8008c76:	0c0b      	lsrs	r3, r1, #16
 8008c78:	fa12 f28c 	uxtah	r2, r2, ip
 8008c7c:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
 8008c80:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8008c84:	b292      	uxth	r2, r2
 8008c86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008c8a:	42af      	cmp	r7, r5
 8008c8c:	f840 2b04 	str.w	r2, [r0], #4
 8008c90:	ea4f 4323 	mov.w	r3, r3, asr #16
 8008c94:	d2e9      	bcs.n	8008c6a <quorem+0xc2>
 8008c96:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8008c9a:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8008c9e:	b96a      	cbnz	r2, 8008cbc <quorem+0x114>
 8008ca0:	3b04      	subs	r3, #4
 8008ca2:	4598      	cmp	r8, r3
 8008ca4:	d304      	bcc.n	8008cb0 <quorem+0x108>
 8008ca6:	e007      	b.n	8008cb8 <quorem+0x110>
 8008ca8:	4598      	cmp	r8, r3
 8008caa:	f104 34ff 	add.w	r4, r4, #4294967295
 8008cae:	d203      	bcs.n	8008cb8 <quorem+0x110>
 8008cb0:	f853 2904 	ldr.w	r2, [r3], #-4
 8008cb4:	2a00      	cmp	r2, #0
 8008cb6:	d0f7      	beq.n	8008ca8 <quorem+0x100>
 8008cb8:	f8c9 4010 	str.w	r4, [r9, #16]
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	b003      	add	sp, #12
 8008cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	b003      	add	sp, #12
 8008cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ccc <__sflush_r>:
 8008ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cce:	898b      	ldrh	r3, [r1, #12]
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	0719      	lsls	r1, r3, #28
 8008cd4:	4607      	mov	r7, r0
 8008cd6:	d43c      	bmi.n	8008d52 <__sflush_r+0x86>
 8008cd8:	6862      	ldr	r2, [r4, #4]
 8008cda:	2a00      	cmp	r2, #0
 8008cdc:	dd55      	ble.n	8008d8a <__sflush_r+0xbe>
 8008cde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ce0:	2e00      	cmp	r6, #0
 8008ce2:	d050      	beq.n	8008d86 <__sflush_r+0xba>
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	683d      	ldr	r5, [r7, #0]
 8008ce8:	603a      	str	r2, [r7, #0]
 8008cea:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 8008cee:	d150      	bne.n	8008d92 <__sflush_r+0xc6>
 8008cf0:	69e1      	ldr	r1, [r4, #28]
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	4638      	mov	r0, r7
 8008cf6:	47b0      	blx	r6
 8008cf8:	1c42      	adds	r2, r0, #1
 8008cfa:	d05c      	beq.n	8008db6 <__sflush_r+0xea>
 8008cfc:	89a3      	ldrh	r3, [r4, #12]
 8008cfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d00:	075b      	lsls	r3, r3, #29
 8008d02:	d505      	bpl.n	8008d10 <__sflush_r+0x44>
 8008d04:	6863      	ldr	r3, [r4, #4]
 8008d06:	1ac0      	subs	r0, r0, r3
 8008d08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008d0a:	b10b      	cbz	r3, 8008d10 <__sflush_r+0x44>
 8008d0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008d0e:	1ac0      	subs	r0, r0, r3
 8008d10:	4602      	mov	r2, r0
 8008d12:	69e1      	ldr	r1, [r4, #28]
 8008d14:	2300      	movs	r3, #0
 8008d16:	4638      	mov	r0, r7
 8008d18:	47b0      	blx	r6
 8008d1a:	1c46      	adds	r6, r0, #1
 8008d1c:	d142      	bne.n	8008da4 <__sflush_r+0xd8>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d052      	beq.n	8008dce <__sflush_r+0x102>
 8008d28:	2b1d      	cmp	r3, #29
 8008d2a:	d001      	beq.n	8008d30 <__sflush_r+0x64>
 8008d2c:	2b16      	cmp	r3, #22
 8008d2e:	d156      	bne.n	8008dde <__sflush_r+0x112>
 8008d30:	6923      	ldr	r3, [r4, #16]
 8008d32:	2200      	movs	r2, #0
 8008d34:	e9c4 3200 	strd	r3, r2, [r4]
 8008d38:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008d3a:	603d      	str	r5, [r7, #0]
 8008d3c:	b319      	cbz	r1, 8008d86 <__sflush_r+0xba>
 8008d3e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008d42:	4299      	cmp	r1, r3
 8008d44:	d002      	beq.n	8008d4c <__sflush_r+0x80>
 8008d46:	4638      	mov	r0, r7
 8008d48:	f000 f958 	bl	8008ffc <_free_r>
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	6320      	str	r0, [r4, #48]	; 0x30
 8008d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d52:	6926      	ldr	r6, [r4, #16]
 8008d54:	b1be      	cbz	r6, 8008d86 <__sflush_r+0xba>
 8008d56:	6825      	ldr	r5, [r4, #0]
 8008d58:	6026      	str	r6, [r4, #0]
 8008d5a:	0799      	lsls	r1, r3, #30
 8008d5c:	bf0c      	ite	eq
 8008d5e:	6963      	ldreq	r3, [r4, #20]
 8008d60:	2300      	movne	r3, #0
 8008d62:	1bad      	subs	r5, r5, r6
 8008d64:	60a3      	str	r3, [r4, #8]
 8008d66:	e00c      	b.n	8008d82 <__sflush_r+0xb6>
 8008d68:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8008d6c:	69e1      	ldr	r1, [r4, #28]
 8008d6e:	462b      	mov	r3, r5
 8008d70:	4632      	mov	r2, r6
 8008d72:	4638      	mov	r0, r7
 8008d74:	47e0      	blx	ip
 8008d76:	f1b0 0c00 	subs.w	ip, r0, #0
 8008d7a:	eba5 050c 	sub.w	r5, r5, ip
 8008d7e:	4466      	add	r6, ip
 8008d80:	dd09      	ble.n	8008d96 <__sflush_r+0xca>
 8008d82:	2d00      	cmp	r5, #0
 8008d84:	dcf0      	bgt.n	8008d68 <__sflush_r+0x9c>
 8008d86:	2000      	movs	r0, #0
 8008d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d8a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008d8c:	2a00      	cmp	r2, #0
 8008d8e:	dca6      	bgt.n	8008cde <__sflush_r+0x12>
 8008d90:	e7f9      	b.n	8008d86 <__sflush_r+0xba>
 8008d92:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008d94:	e7b4      	b.n	8008d00 <__sflush_r+0x34>
 8008d96:	89a3      	ldrh	r3, [r4, #12]
 8008d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008da0:	81a3      	strh	r3, [r4, #12]
 8008da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da4:	2300      	movs	r3, #0
 8008da6:	6063      	str	r3, [r4, #4]
 8008da8:	6923      	ldr	r3, [r4, #16]
 8008daa:	6023      	str	r3, [r4, #0]
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	04da      	lsls	r2, r3, #19
 8008db0:	d5c2      	bpl.n	8008d38 <__sflush_r+0x6c>
 8008db2:	6520      	str	r0, [r4, #80]	; 0x50
 8008db4:	e7c0      	b.n	8008d38 <__sflush_r+0x6c>
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d09f      	beq.n	8008cfc <__sflush_r+0x30>
 8008dbc:	2b1d      	cmp	r3, #29
 8008dbe:	d00c      	beq.n	8008dda <__sflush_r+0x10e>
 8008dc0:	2b16      	cmp	r3, #22
 8008dc2:	d00a      	beq.n	8008dda <__sflush_r+0x10e>
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dca:	81a3      	strh	r3, [r4, #12]
 8008dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dce:	6063      	str	r3, [r4, #4]
 8008dd0:	6923      	ldr	r3, [r4, #16]
 8008dd2:	6023      	str	r3, [r4, #0]
 8008dd4:	04d3      	lsls	r3, r2, #19
 8008dd6:	d5af      	bpl.n	8008d38 <__sflush_r+0x6c>
 8008dd8:	e7eb      	b.n	8008db2 <__sflush_r+0xe6>
 8008dda:	603d      	str	r5, [r7, #0]
 8008ddc:	e7d3      	b.n	8008d86 <__sflush_r+0xba>
 8008dde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008de2:	81a2      	strh	r2, [r4, #12]
 8008de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de6:	bf00      	nop

08008de8 <_fflush_r>:
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	460c      	mov	r4, r1
 8008dec:	4605      	mov	r5, r0
 8008dee:	b108      	cbz	r0, 8008df4 <_fflush_r+0xc>
 8008df0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008df2:	b1a3      	cbz	r3, 8008e1e <_fflush_r+0x36>
 8008df4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8008df8:	b1b8      	cbz	r0, 8008e2a <_fflush_r+0x42>
 8008dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dfc:	07db      	lsls	r3, r3, #31
 8008dfe:	d401      	bmi.n	8008e04 <_fflush_r+0x1c>
 8008e00:	0581      	lsls	r1, r0, #22
 8008e02:	d515      	bpl.n	8008e30 <_fflush_r+0x48>
 8008e04:	4628      	mov	r0, r5
 8008e06:	4621      	mov	r1, r4
 8008e08:	f7ff ff60 	bl	8008ccc <__sflush_r>
 8008e0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e0e:	07da      	lsls	r2, r3, #31
 8008e10:	4605      	mov	r5, r0
 8008e12:	d402      	bmi.n	8008e1a <_fflush_r+0x32>
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	059b      	lsls	r3, r3, #22
 8008e18:	d50e      	bpl.n	8008e38 <_fflush_r+0x50>
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	bd38      	pop	{r3, r4, r5, pc}
 8008e1e:	f000 f817 	bl	8008e50 <__sinit>
 8008e22:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d1e7      	bne.n	8008dfa <_fflush_r+0x12>
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	bd38      	pop	{r3, r4, r5, pc}
 8008e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e32:	f002 fc2a 	bl	800b68a <__retarget_lock_acquire_recursive>
 8008e36:	e7e5      	b.n	8008e04 <_fflush_r+0x1c>
 8008e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e3a:	f002 fc2c 	bl	800b696 <__retarget_lock_release_recursive>
 8008e3e:	4628      	mov	r0, r5
 8008e40:	bd38      	pop	{r3, r4, r5, pc}
 8008e42:	bf00      	nop

08008e44 <_cleanup_r>:
 8008e44:	4901      	ldr	r1, [pc, #4]	; (8008e4c <_cleanup_r+0x8>)
 8008e46:	f000 b9d5 	b.w	80091f4 <_fwalk_reent>
 8008e4a:	bf00      	nop
 8008e4c:	08008de9 	.word	0x08008de9

08008e50 <__sinit>:
 8008e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e54:	4682      	mov	sl, r0
 8008e56:	4839      	ldr	r0, [pc, #228]	; (8008f3c <__sinit+0xec>)
 8008e58:	f002 fc17 	bl	800b68a <__retarget_lock_acquire_recursive>
 8008e5c:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 8008e60:	2c00      	cmp	r4, #0
 8008e62:	d166      	bne.n	8008f32 <__sinit+0xe2>
 8008e64:	f8da 5004 	ldr.w	r5, [sl, #4]
 8008e68:	4a35      	ldr	r2, [pc, #212]	; (8008f40 <__sinit+0xf0>)
 8008e6a:	f8ca 203c 	str.w	r2, [sl, #60]	; 0x3c
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e9ca 4353 	strd	r4, r3, [sl, #332]	; 0x14c
 8008e74:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8008f44 <__sinit+0xf4>
 8008e78:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8008f48 <__sinit+0xf8>
 8008e7c:	4f33      	ldr	r7, [pc, #204]	; (8008f4c <__sinit+0xfc>)
 8008e7e:	4e34      	ldr	r6, [pc, #208]	; (8008f50 <__sinit+0x100>)
 8008e80:	2304      	movs	r3, #4
 8008e82:	f50a 72ac 	add.w	r2, sl, #344	; 0x158
 8008e86:	f8ca 2154 	str.w	r2, [sl, #340]	; 0x154
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	e9c5 4302 	strd	r4, r3, [r5, #8]
 8008e90:	e9c5 4400 	strd	r4, r4, [r5]
 8008e94:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8008e98:	666c      	str	r4, [r5, #100]	; 0x64
 8008e9a:	2208      	movs	r2, #8
 8008e9c:	61ac      	str	r4, [r5, #24]
 8008e9e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8008ea2:	f7fc fb05 	bl	80054b0 <memset>
 8008ea6:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8008eaa:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
 8008eae:	62ee      	str	r6, [r5, #44]	; 0x2c
 8008eb0:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8008eb4:	f002 fbdd 	bl	800b672 <__retarget_lock_init_recursive>
 8008eb8:	f8da 5008 	ldr.w	r5, [sl, #8]
 8008ebc:	4b25      	ldr	r3, [pc, #148]	; (8008f54 <__sinit+0x104>)
 8008ebe:	60eb      	str	r3, [r5, #12]
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	e9c5 4400 	strd	r4, r4, [r5]
 8008ec6:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8008eca:	666c      	str	r4, [r5, #100]	; 0x64
 8008ecc:	60ac      	str	r4, [r5, #8]
 8008ece:	61ac      	str	r4, [r5, #24]
 8008ed0:	2208      	movs	r2, #8
 8008ed2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8008ed6:	f7fc faeb 	bl	80054b0 <memset>
 8008eda:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8008ede:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
 8008ee2:	62ee      	str	r6, [r5, #44]	; 0x2c
 8008ee4:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8008ee8:	f002 fbc3 	bl	800b672 <__retarget_lock_init_recursive>
 8008eec:	f8da 500c 	ldr.w	r5, [sl, #12]
 8008ef0:	4b19      	ldr	r3, [pc, #100]	; (8008f58 <__sinit+0x108>)
 8008ef2:	60eb      	str	r3, [r5, #12]
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	e9c5 4400 	strd	r4, r4, [r5]
 8008efa:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8008efe:	666c      	str	r4, [r5, #100]	; 0x64
 8008f00:	60ac      	str	r4, [r5, #8]
 8008f02:	61ac      	str	r4, [r5, #24]
 8008f04:	2208      	movs	r2, #8
 8008f06:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8008f0a:	f7fc fad1 	bl	80054b0 <memset>
 8008f0e:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8008f12:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8008f16:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
 8008f1a:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
 8008f1e:	f002 fba8 	bl	800b672 <__retarget_lock_init_recursive>
 8008f22:	2301      	movs	r3, #1
 8008f24:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
 8008f28:	4804      	ldr	r0, [pc, #16]	; (8008f3c <__sinit+0xec>)
 8008f2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f2e:	f002 bbb2 	b.w	800b696 <__retarget_lock_release_recursive>
 8008f32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f36:	4801      	ldr	r0, [pc, #4]	; (8008f3c <__sinit+0xec>)
 8008f38:	f002 bbad 	b.w	800b696 <__retarget_lock_release_recursive>
 8008f3c:	200008ac 	.word	0x200008ac
 8008f40:	08008e45 	.word	0x08008e45
 8008f44:	08009ac9 	.word	0x08009ac9
 8008f48:	08009aed 	.word	0x08009aed
 8008f4c:	08009b2d 	.word	0x08009b2d
 8008f50:	08009b4d 	.word	0x08009b4d
 8008f54:	00010009 	.word	0x00010009
 8008f58:	00020012 	.word	0x00020012

08008f5c <_malloc_trim_r>:
 8008f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5e:	4f24      	ldr	r7, [pc, #144]	; (8008ff0 <_malloc_trim_r+0x94>)
 8008f60:	460c      	mov	r4, r1
 8008f62:	4606      	mov	r6, r0
 8008f64:	f7fc faf6 	bl	8005554 <__malloc_lock>
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	6855      	ldr	r5, [r2, #4]
 8008f6c:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
 8008f70:	330f      	adds	r3, #15
 8008f72:	f025 0503 	bic.w	r5, r5, #3
 8008f76:	442b      	add	r3, r5
 8008f78:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008f7c:	f023 030f 	bic.w	r3, r3, #15
 8008f80:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
 8008f84:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8008f88:	db07      	blt.n	8008f9a <_malloc_trim_r+0x3e>
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	f7fc fb01 	bl	8005594 <_sbrk_r>
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	442b      	add	r3, r5
 8008f96:	4298      	cmp	r0, r3
 8008f98:	d004      	beq.n	8008fa4 <_malloc_trim_r+0x48>
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	f7fc fae0 	bl	8005560 <__malloc_unlock>
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fa4:	4261      	negs	r1, r4
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	f7fc faf4 	bl	8005594 <_sbrk_r>
 8008fac:	3001      	adds	r0, #1
 8008fae:	d00d      	beq.n	8008fcc <_malloc_trim_r+0x70>
 8008fb0:	4a10      	ldr	r2, [pc, #64]	; (8008ff4 <_malloc_trim_r+0x98>)
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	1b2d      	subs	r5, r5, r4
 8008fb6:	f045 0501 	orr.w	r5, r5, #1
 8008fba:	605d      	str	r5, [r3, #4]
 8008fbc:	6813      	ldr	r3, [r2, #0]
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	1b1b      	subs	r3, r3, r4
 8008fc2:	6013      	str	r3, [r2, #0]
 8008fc4:	f7fc facc 	bl	8005560 <__malloc_unlock>
 8008fc8:	2001      	movs	r0, #1
 8008fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fcc:	2100      	movs	r1, #0
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f7fc fae0 	bl	8005594 <_sbrk_r>
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	1a83      	subs	r3, r0, r2
 8008fd8:	2b0f      	cmp	r3, #15
 8008fda:	ddde      	ble.n	8008f9a <_malloc_trim_r+0x3e>
 8008fdc:	f043 0301 	orr.w	r3, r3, #1
 8008fe0:	6053      	str	r3, [r2, #4]
 8008fe2:	4b05      	ldr	r3, [pc, #20]	; (8008ff8 <_malloc_trim_r+0x9c>)
 8008fe4:	4903      	ldr	r1, [pc, #12]	; (8008ff4 <_malloc_trim_r+0x98>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	1ac0      	subs	r0, r0, r3
 8008fea:	6008      	str	r0, [r1, #0]
 8008fec:	e7d5      	b.n	8008f9a <_malloc_trim_r+0x3e>
 8008fee:	bf00      	nop
 8008ff0:	200002dc 	.word	0x200002dc
 8008ff4:	20000b30 	.word	0x20000b30
 8008ff8:	200006e4 	.word	0x200006e4

08008ffc <_free_r>:
 8008ffc:	2900      	cmp	r1, #0
 8008ffe:	d05f      	beq.n	80090c0 <_free_r+0xc4>
 8009000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009002:	460c      	mov	r4, r1
 8009004:	4606      	mov	r6, r0
 8009006:	f7fc faa5 	bl	8005554 <__malloc_lock>
 800900a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800900e:	4f76      	ldr	r7, [pc, #472]	; (80091e8 <_free_r+0x1ec>)
 8009010:	f1a4 0508 	sub.w	r5, r4, #8
 8009014:	f023 0101 	bic.w	r1, r3, #1
 8009018:	186a      	adds	r2, r5, r1
 800901a:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800901e:	6850      	ldr	r0, [r2, #4]
 8009020:	4594      	cmp	ip, r2
 8009022:	f020 0003 	bic.w	r0, r0, #3
 8009026:	f000 8086 	beq.w	8009136 <_free_r+0x13a>
 800902a:	07db      	lsls	r3, r3, #31
 800902c:	6050      	str	r0, [r2, #4]
 800902e:	eb02 0c00 	add.w	ip, r2, r0
 8009032:	d433      	bmi.n	800909c <_free_r+0xa0>
 8009034:	f854 4c08 	ldr.w	r4, [r4, #-8]
 8009038:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800903c:	1b2d      	subs	r5, r5, r4
 800903e:	4421      	add	r1, r4
 8009040:	68ac      	ldr	r4, [r5, #8]
 8009042:	f107 0c08 	add.w	ip, r7, #8
 8009046:	4564      	cmp	r4, ip
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	d063      	beq.n	8009116 <_free_r+0x11a>
 800904e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8009052:	f8c4 e00c 	str.w	lr, [r4, #12]
 8009056:	f8ce 4008 	str.w	r4, [lr, #8]
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 808f 	beq.w	800917e <_free_r+0x182>
 8009060:	f041 0301 	orr.w	r3, r1, #1
 8009064:	606b      	str	r3, [r5, #4]
 8009066:	6011      	str	r1, [r2, #0]
 8009068:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800906c:	d231      	bcs.n	80090d2 <_free_r+0xd6>
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	08cb      	lsrs	r3, r1, #3
 8009072:	0948      	lsrs	r0, r1, #5
 8009074:	2101      	movs	r1, #1
 8009076:	3301      	adds	r3, #1
 8009078:	4081      	lsls	r1, r0
 800907a:	4311      	orrs	r1, r2
 800907c:	6079      	str	r1, [r7, #4]
 800907e:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8009082:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 8009086:	3a08      	subs	r2, #8
 8009088:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800908c:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8009090:	60cd      	str	r5, [r1, #12]
 8009092:	4630      	mov	r0, r6
 8009094:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009098:	f7fc ba62 	b.w	8005560 <__malloc_unlock>
 800909c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80090a0:	07db      	lsls	r3, r3, #31
 80090a2:	d40e      	bmi.n	80090c2 <_free_r+0xc6>
 80090a4:	4401      	add	r1, r0
 80090a6:	f107 0c08 	add.w	ip, r7, #8
 80090aa:	6893      	ldr	r3, [r2, #8]
 80090ac:	4563      	cmp	r3, ip
 80090ae:	f041 0001 	orr.w	r0, r1, #1
 80090b2:	d06c      	beq.n	800918e <_free_r+0x192>
 80090b4:	68d2      	ldr	r2, [r2, #12]
 80090b6:	60da      	str	r2, [r3, #12]
 80090b8:	6093      	str	r3, [r2, #8]
 80090ba:	6068      	str	r0, [r5, #4]
 80090bc:	5069      	str	r1, [r5, r1]
 80090be:	e7d3      	b.n	8009068 <_free_r+0x6c>
 80090c0:	4770      	bx	lr
 80090c2:	f041 0301 	orr.w	r3, r1, #1
 80090c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80090ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80090ce:	6011      	str	r1, [r2, #0]
 80090d0:	d3cd      	bcc.n	800906e <_free_r+0x72>
 80090d2:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 80090d6:	ea4f 2351 	mov.w	r3, r1, lsr #9
 80090da:	d245      	bcs.n	8009168 <_free_r+0x16c>
 80090dc:	098b      	lsrs	r3, r1, #6
 80090de:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80090e2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80090e6:	00c3      	lsls	r3, r0, #3
 80090e8:	18f8      	adds	r0, r7, r3
 80090ea:	58fb      	ldr	r3, [r7, r3]
 80090ec:	3808      	subs	r0, #8
 80090ee:	4298      	cmp	r0, r3
 80090f0:	d054      	beq.n	800919c <_free_r+0x1a0>
 80090f2:	685a      	ldr	r2, [r3, #4]
 80090f4:	f022 0203 	bic.w	r2, r2, #3
 80090f8:	428a      	cmp	r2, r1
 80090fa:	d902      	bls.n	8009102 <_free_r+0x106>
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	4298      	cmp	r0, r3
 8009100:	d1f7      	bne.n	80090f2 <_free_r+0xf6>
 8009102:	68d8      	ldr	r0, [r3, #12]
 8009104:	e9c5 3002 	strd	r3, r0, [r5, #8]
 8009108:	6085      	str	r5, [r0, #8]
 800910a:	60dd      	str	r5, [r3, #12]
 800910c:	4630      	mov	r0, r6
 800910e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009112:	f7fc ba25 	b.w	8005560 <__malloc_unlock>
 8009116:	2b00      	cmp	r3, #0
 8009118:	d161      	bne.n	80091de <_free_r+0x1e2>
 800911a:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 800911e:	4401      	add	r1, r0
 8009120:	60d3      	str	r3, [r2, #12]
 8009122:	609a      	str	r2, [r3, #8]
 8009124:	f041 0301 	orr.w	r3, r1, #1
 8009128:	606b      	str	r3, [r5, #4]
 800912a:	4630      	mov	r0, r6
 800912c:	5069      	str	r1, [r5, r1]
 800912e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009132:	f7fc ba15 	b.w	8005560 <__malloc_unlock>
 8009136:	07da      	lsls	r2, r3, #31
 8009138:	4401      	add	r1, r0
 800913a:	d407      	bmi.n	800914c <_free_r+0x150>
 800913c:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8009140:	1aed      	subs	r5, r5, r3
 8009142:	4419      	add	r1, r3
 8009144:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8009148:	60d3      	str	r3, [r2, #12]
 800914a:	609a      	str	r2, [r3, #8]
 800914c:	f041 0301 	orr.w	r3, r1, #1
 8009150:	606b      	str	r3, [r5, #4]
 8009152:	4b26      	ldr	r3, [pc, #152]	; (80091ec <_free_r+0x1f0>)
 8009154:	60bd      	str	r5, [r7, #8]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	428b      	cmp	r3, r1
 800915a:	d89a      	bhi.n	8009092 <_free_r+0x96>
 800915c:	4b24      	ldr	r3, [pc, #144]	; (80091f0 <_free_r+0x1f4>)
 800915e:	4630      	mov	r0, r6
 8009160:	6819      	ldr	r1, [r3, #0]
 8009162:	f7ff fefb 	bl	8008f5c <_malloc_trim_r>
 8009166:	e794      	b.n	8009092 <_free_r+0x96>
 8009168:	2b14      	cmp	r3, #20
 800916a:	d90a      	bls.n	8009182 <_free_r+0x186>
 800916c:	2b54      	cmp	r3, #84	; 0x54
 800916e:	d81d      	bhi.n	80091ac <_free_r+0x1b0>
 8009170:	0b0b      	lsrs	r3, r1, #12
 8009172:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8009176:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 800917a:	00c3      	lsls	r3, r0, #3
 800917c:	e7b4      	b.n	80090e8 <_free_r+0xec>
 800917e:	4401      	add	r1, r0
 8009180:	e793      	b.n	80090aa <_free_r+0xae>
 8009182:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8009186:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 800918a:	00c3      	lsls	r3, r0, #3
 800918c:	e7ac      	b.n	80090e8 <_free_r+0xec>
 800918e:	e9c7 5504 	strd	r5, r5, [r7, #16]
 8009192:	e9c5 cc02 	strd	ip, ip, [r5, #8]
 8009196:	6068      	str	r0, [r5, #4]
 8009198:	5069      	str	r1, [r5, r1]
 800919a:	e77a      	b.n	8009092 <_free_r+0x96>
 800919c:	6879      	ldr	r1, [r7, #4]
 800919e:	1092      	asrs	r2, r2, #2
 80091a0:	2401      	movs	r4, #1
 80091a2:	fa04 f202 	lsl.w	r2, r4, r2
 80091a6:	430a      	orrs	r2, r1
 80091a8:	607a      	str	r2, [r7, #4]
 80091aa:	e7ab      	b.n	8009104 <_free_r+0x108>
 80091ac:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80091b0:	d806      	bhi.n	80091c0 <_free_r+0x1c4>
 80091b2:	0bcb      	lsrs	r3, r1, #15
 80091b4:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80091b8:	f103 0277 	add.w	r2, r3, #119	; 0x77
 80091bc:	00c3      	lsls	r3, r0, #3
 80091be:	e793      	b.n	80090e8 <_free_r+0xec>
 80091c0:	f240 5254 	movw	r2, #1364	; 0x554
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d806      	bhi.n	80091d6 <_free_r+0x1da>
 80091c8:	0c8b      	lsrs	r3, r1, #18
 80091ca:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 80091ce:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80091d2:	00c3      	lsls	r3, r0, #3
 80091d4:	e788      	b.n	80090e8 <_free_r+0xec>
 80091d6:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80091da:	227e      	movs	r2, #126	; 0x7e
 80091dc:	e784      	b.n	80090e8 <_free_r+0xec>
 80091de:	f041 0301 	orr.w	r3, r1, #1
 80091e2:	606b      	str	r3, [r5, #4]
 80091e4:	6011      	str	r1, [r2, #0]
 80091e6:	e754      	b.n	8009092 <_free_r+0x96>
 80091e8:	200002dc 	.word	0x200002dc
 80091ec:	200006e8 	.word	0x200006e8
 80091f0:	20000b60 	.word	0x20000b60

080091f4 <_fwalk_reent>:
 80091f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091f8:	4607      	mov	r7, r0
 80091fa:	4688      	mov	r8, r1
 80091fc:	f500 76a6 	add.w	r6, r0, #332	; 0x14c
 8009200:	f04f 0900 	mov.w	r9, #0
 8009204:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 8009208:	3d01      	subs	r5, #1
 800920a:	d411      	bmi.n	8009230 <_fwalk_reent+0x3c>
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	2b01      	cmp	r3, #1
 8009210:	f105 35ff 	add.w	r5, r5, #4294967295
 8009214:	d908      	bls.n	8009228 <_fwalk_reent+0x34>
 8009216:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800921a:	3301      	adds	r3, #1
 800921c:	4621      	mov	r1, r4
 800921e:	d003      	beq.n	8009228 <_fwalk_reent+0x34>
 8009220:	4638      	mov	r0, r7
 8009222:	47c0      	blx	r8
 8009224:	ea49 0900 	orr.w	r9, r9, r0
 8009228:	1c6b      	adds	r3, r5, #1
 800922a:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800922e:	d1ed      	bne.n	800920c <_fwalk_reent+0x18>
 8009230:	6836      	ldr	r6, [r6, #0]
 8009232:	2e00      	cmp	r6, #0
 8009234:	d1e6      	bne.n	8009204 <_fwalk_reent+0x10>
 8009236:	4648      	mov	r0, r9
 8009238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800923c <_localeconv_r>:
 800923c:	4800      	ldr	r0, [pc, #0]	; (8009240 <_localeconv_r+0x4>)
 800923e:	4770      	bx	lr
 8009240:	200007e0 	.word	0x200007e0

08009244 <__smakebuf_r>:
 8009244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009246:	898b      	ldrh	r3, [r1, #12]
 8009248:	460c      	mov	r4, r1
 800924a:	0799      	lsls	r1, r3, #30
 800924c:	b097      	sub	sp, #92	; 0x5c
 800924e:	d507      	bpl.n	8009260 <__smakebuf_r+0x1c>
 8009250:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8009254:	2201      	movs	r2, #1
 8009256:	e9c4 3204 	strd	r3, r2, [r4, #16]
 800925a:	6023      	str	r3, [r4, #0]
 800925c:	b017      	add	sp, #92	; 0x5c
 800925e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009260:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009264:	2900      	cmp	r1, #0
 8009266:	4605      	mov	r5, r0
 8009268:	db2d      	blt.n	80092c6 <__smakebuf_r+0x82>
 800926a:	466a      	mov	r2, sp
 800926c:	f001 fcc6 	bl	800abfc <_fstat_r>
 8009270:	2800      	cmp	r0, #0
 8009272:	db27      	blt.n	80092c4 <__smakebuf_r+0x80>
 8009274:	9e01      	ldr	r6, [sp, #4]
 8009276:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
 800927a:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800927e:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
 8009282:	fab6 f686 	clz	r6, r6
 8009286:	4639      	mov	r1, r7
 8009288:	4628      	mov	r0, r5
 800928a:	0976      	lsrs	r6, r6, #5
 800928c:	f7fb fe52 	bl	8004f34 <_malloc_r>
 8009290:	b330      	cbz	r0, 80092e0 <__smakebuf_r+0x9c>
 8009292:	89a3      	ldrh	r3, [r4, #12]
 8009294:	4a1a      	ldr	r2, [pc, #104]	; (8009300 <__smakebuf_r+0xbc>)
 8009296:	63ea      	str	r2, [r5, #60]	; 0x3c
 8009298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800929c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092a0:	81a3      	strh	r3, [r4, #12]
 80092a2:	6020      	str	r0, [r4, #0]
 80092a4:	2e00      	cmp	r6, #0
 80092a6:	d0d9      	beq.n	800925c <__smakebuf_r+0x18>
 80092a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092ac:	4628      	mov	r0, r5
 80092ae:	f001 fe31 	bl	800af14 <_isatty_r>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d0d2      	beq.n	800925c <__smakebuf_r+0x18>
 80092b6:	89a3      	ldrh	r3, [r4, #12]
 80092b8:	f023 0303 	bic.w	r3, r3, #3
 80092bc:	f043 0301 	orr.w	r3, r3, #1
 80092c0:	81a3      	strh	r3, [r4, #12]
 80092c2:	e7cb      	b.n	800925c <__smakebuf_r+0x18>
 80092c4:	89a3      	ldrh	r3, [r4, #12]
 80092c6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80092ca:	bf14      	ite	ne
 80092cc:	2740      	movne	r7, #64	; 0x40
 80092ce:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 80092d2:	4639      	mov	r1, r7
 80092d4:	4628      	mov	r0, r5
 80092d6:	2600      	movs	r6, #0
 80092d8:	f7fb fe2c 	bl	8004f34 <_malloc_r>
 80092dc:	2800      	cmp	r0, #0
 80092de:	d1d8      	bne.n	8009292 <__smakebuf_r+0x4e>
 80092e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092e4:	059a      	lsls	r2, r3, #22
 80092e6:	d4b9      	bmi.n	800925c <__smakebuf_r+0x18>
 80092e8:	f023 0303 	bic.w	r3, r3, #3
 80092ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092f0:	f043 0302 	orr.w	r3, r3, #2
 80092f4:	2101      	movs	r1, #1
 80092f6:	e9c4 2104 	strd	r2, r1, [r4, #16]
 80092fa:	81a3      	strh	r3, [r4, #12]
 80092fc:	6022      	str	r2, [r4, #0]
 80092fe:	e7ad      	b.n	800925c <__smakebuf_r+0x18>
 8009300:	08008e45 	.word	0x08008e45

08009304 <_Balloc>:
 8009304:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009306:	b570      	push	{r4, r5, r6, lr}
 8009308:	4605      	mov	r5, r0
 800930a:	460c      	mov	r4, r1
 800930c:	b14b      	cbz	r3, 8009322 <_Balloc+0x1e>
 800930e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009312:	b180      	cbz	r0, 8009336 <_Balloc+0x32>
 8009314:	6802      	ldr	r2, [r0, #0]
 8009316:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800931a:	2300      	movs	r3, #0
 800931c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009320:	bd70      	pop	{r4, r5, r6, pc}
 8009322:	2221      	movs	r2, #33	; 0x21
 8009324:	2104      	movs	r1, #4
 8009326:	f001 fc13 	bl	800ab50 <_calloc_r>
 800932a:	4603      	mov	r3, r0
 800932c:	64e8      	str	r0, [r5, #76]	; 0x4c
 800932e:	2800      	cmp	r0, #0
 8009330:	d1ed      	bne.n	800930e <_Balloc+0xa>
 8009332:	2000      	movs	r0, #0
 8009334:	bd70      	pop	{r4, r5, r6, pc}
 8009336:	2101      	movs	r1, #1
 8009338:	fa01 f604 	lsl.w	r6, r1, r4
 800933c:	1d72      	adds	r2, r6, #5
 800933e:	0092      	lsls	r2, r2, #2
 8009340:	4628      	mov	r0, r5
 8009342:	f001 fc05 	bl	800ab50 <_calloc_r>
 8009346:	2800      	cmp	r0, #0
 8009348:	d0f3      	beq.n	8009332 <_Balloc+0x2e>
 800934a:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800934e:	e7e4      	b.n	800931a <_Balloc+0x16>

08009350 <_Bfree>:
 8009350:	b131      	cbz	r1, 8009360 <_Bfree+0x10>
 8009352:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009354:	684a      	ldr	r2, [r1, #4]
 8009356:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800935a:	6008      	str	r0, [r1, #0]
 800935c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop

08009364 <__multadd>:
 8009364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009368:	690d      	ldr	r5, [r1, #16]
 800936a:	4607      	mov	r7, r0
 800936c:	460e      	mov	r6, r1
 800936e:	461c      	mov	r4, r3
 8009370:	f101 0e14 	add.w	lr, r1, #20
 8009374:	2000      	movs	r0, #0
 8009376:	f8de 1000 	ldr.w	r1, [lr]
 800937a:	b28b      	uxth	r3, r1
 800937c:	fb02 4303 	mla	r3, r2, r3, r4
 8009380:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8009384:	0c09      	lsrs	r1, r1, #16
 8009386:	fb02 cc01 	mla	ip, r2, r1, ip
 800938a:	3001      	adds	r0, #1
 800938c:	b29b      	uxth	r3, r3
 800938e:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8009392:	4285      	cmp	r5, r0
 8009394:	f84e 3b04 	str.w	r3, [lr], #4
 8009398:	ea4f 441c 	mov.w	r4, ip, lsr #16
 800939c:	dceb      	bgt.n	8009376 <__multadd+0x12>
 800939e:	b13c      	cbz	r4, 80093b0 <__multadd+0x4c>
 80093a0:	68b3      	ldr	r3, [r6, #8]
 80093a2:	42ab      	cmp	r3, r5
 80093a4:	dd07      	ble.n	80093b6 <__multadd+0x52>
 80093a6:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 80093aa:	3501      	adds	r5, #1
 80093ac:	615c      	str	r4, [r3, #20]
 80093ae:	6135      	str	r5, [r6, #16]
 80093b0:	4630      	mov	r0, r6
 80093b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b6:	6871      	ldr	r1, [r6, #4]
 80093b8:	4638      	mov	r0, r7
 80093ba:	3101      	adds	r1, #1
 80093bc:	f7ff ffa2 	bl	8009304 <_Balloc>
 80093c0:	4680      	mov	r8, r0
 80093c2:	b1a8      	cbz	r0, 80093f0 <__multadd+0x8c>
 80093c4:	6932      	ldr	r2, [r6, #16]
 80093c6:	3202      	adds	r2, #2
 80093c8:	f106 010c 	add.w	r1, r6, #12
 80093cc:	0092      	lsls	r2, r2, #2
 80093ce:	300c      	adds	r0, #12
 80093d0:	f7f7 fc26 	bl	8000c20 <memcpy>
 80093d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093d6:	6872      	ldr	r2, [r6, #4]
 80093d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093dc:	6031      	str	r1, [r6, #0]
 80093de:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80093e2:	4646      	mov	r6, r8
 80093e4:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 80093e8:	3501      	adds	r5, #1
 80093ea:	615c      	str	r4, [r3, #20]
 80093ec:	6135      	str	r5, [r6, #16]
 80093ee:	e7df      	b.n	80093b0 <__multadd+0x4c>
 80093f0:	4b02      	ldr	r3, [pc, #8]	; (80093fc <__multadd+0x98>)
 80093f2:	4803      	ldr	r0, [pc, #12]	; (8009400 <__multadd+0x9c>)
 80093f4:	4642      	mov	r2, r8
 80093f6:	21b5      	movs	r1, #181	; 0xb5
 80093f8:	f001 fb8a 	bl	800ab10 <__assert_func>
 80093fc:	0800c9b4 	.word	0x0800c9b4
 8009400:	0800ca38 	.word	0x0800ca38

08009404 <__hi0bits>:
 8009404:	0c02      	lsrs	r2, r0, #16
 8009406:	0412      	lsls	r2, r2, #16
 8009408:	4603      	mov	r3, r0
 800940a:	b9ca      	cbnz	r2, 8009440 <__hi0bits+0x3c>
 800940c:	0403      	lsls	r3, r0, #16
 800940e:	2010      	movs	r0, #16
 8009410:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009414:	bf04      	itt	eq
 8009416:	021b      	lsleq	r3, r3, #8
 8009418:	3008      	addeq	r0, #8
 800941a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800941e:	bf04      	itt	eq
 8009420:	011b      	lsleq	r3, r3, #4
 8009422:	3004      	addeq	r0, #4
 8009424:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009428:	bf04      	itt	eq
 800942a:	009b      	lsleq	r3, r3, #2
 800942c:	3002      	addeq	r0, #2
 800942e:	2b00      	cmp	r3, #0
 8009430:	db05      	blt.n	800943e <__hi0bits+0x3a>
 8009432:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009436:	f100 0001 	add.w	r0, r0, #1
 800943a:	bf08      	it	eq
 800943c:	2020      	moveq	r0, #32
 800943e:	4770      	bx	lr
 8009440:	2000      	movs	r0, #0
 8009442:	e7e5      	b.n	8009410 <__hi0bits+0xc>

08009444 <__lo0bits>:
 8009444:	6803      	ldr	r3, [r0, #0]
 8009446:	4602      	mov	r2, r0
 8009448:	f013 0007 	ands.w	r0, r3, #7
 800944c:	d007      	beq.n	800945e <__lo0bits+0x1a>
 800944e:	07d9      	lsls	r1, r3, #31
 8009450:	d41d      	bmi.n	800948e <__lo0bits+0x4a>
 8009452:	0798      	lsls	r0, r3, #30
 8009454:	d51f      	bpl.n	8009496 <__lo0bits+0x52>
 8009456:	085b      	lsrs	r3, r3, #1
 8009458:	6013      	str	r3, [r2, #0]
 800945a:	2001      	movs	r0, #1
 800945c:	4770      	bx	lr
 800945e:	b299      	uxth	r1, r3
 8009460:	b909      	cbnz	r1, 8009466 <__lo0bits+0x22>
 8009462:	0c1b      	lsrs	r3, r3, #16
 8009464:	2010      	movs	r0, #16
 8009466:	b2d9      	uxtb	r1, r3
 8009468:	b909      	cbnz	r1, 800946e <__lo0bits+0x2a>
 800946a:	3008      	adds	r0, #8
 800946c:	0a1b      	lsrs	r3, r3, #8
 800946e:	0719      	lsls	r1, r3, #28
 8009470:	bf04      	itt	eq
 8009472:	091b      	lsreq	r3, r3, #4
 8009474:	3004      	addeq	r0, #4
 8009476:	0799      	lsls	r1, r3, #30
 8009478:	bf04      	itt	eq
 800947a:	089b      	lsreq	r3, r3, #2
 800947c:	3002      	addeq	r0, #2
 800947e:	07d9      	lsls	r1, r3, #31
 8009480:	d403      	bmi.n	800948a <__lo0bits+0x46>
 8009482:	085b      	lsrs	r3, r3, #1
 8009484:	f100 0001 	add.w	r0, r0, #1
 8009488:	d003      	beq.n	8009492 <__lo0bits+0x4e>
 800948a:	6013      	str	r3, [r2, #0]
 800948c:	4770      	bx	lr
 800948e:	2000      	movs	r0, #0
 8009490:	4770      	bx	lr
 8009492:	2020      	movs	r0, #32
 8009494:	4770      	bx	lr
 8009496:	089b      	lsrs	r3, r3, #2
 8009498:	6013      	str	r3, [r2, #0]
 800949a:	2002      	movs	r0, #2
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop

080094a0 <__i2b>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80094a4:	4604      	mov	r4, r0
 80094a6:	460d      	mov	r5, r1
 80094a8:	b14b      	cbz	r3, 80094be <__i2b+0x1e>
 80094aa:	6858      	ldr	r0, [r3, #4]
 80094ac:	b1b0      	cbz	r0, 80094dc <__i2b+0x3c>
 80094ae:	6802      	ldr	r2, [r0, #0]
 80094b0:	605a      	str	r2, [r3, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	2301      	movs	r3, #1
 80094b6:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094ba:	60c2      	str	r2, [r0, #12]
 80094bc:	bd38      	pop	{r3, r4, r5, pc}
 80094be:	2221      	movs	r2, #33	; 0x21
 80094c0:	2104      	movs	r1, #4
 80094c2:	f001 fb45 	bl	800ab50 <_calloc_r>
 80094c6:	4603      	mov	r3, r0
 80094c8:	64e0      	str	r0, [r4, #76]	; 0x4c
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d1ed      	bne.n	80094aa <__i2b+0xa>
 80094ce:	4b09      	ldr	r3, [pc, #36]	; (80094f4 <__i2b+0x54>)
 80094d0:	4809      	ldr	r0, [pc, #36]	; (80094f8 <__i2b+0x58>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80094d8:	f001 fb1a 	bl	800ab10 <__assert_func>
 80094dc:	221c      	movs	r2, #28
 80094de:	2101      	movs	r1, #1
 80094e0:	4620      	mov	r0, r4
 80094e2:	f001 fb35 	bl	800ab50 <_calloc_r>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d0f1      	beq.n	80094ce <__i2b+0x2e>
 80094ea:	2201      	movs	r2, #1
 80094ec:	2302      	movs	r3, #2
 80094ee:	e9c0 2301 	strd	r2, r3, [r0, #4]
 80094f2:	e7de      	b.n	80094b2 <__i2b+0x12>
 80094f4:	0800c9b4 	.word	0x0800c9b4
 80094f8:	0800ca38 	.word	0x0800ca38

080094fc <__multiply>:
 80094fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009500:	690e      	ldr	r6, [r1, #16]
 8009502:	6915      	ldr	r5, [r2, #16]
 8009504:	42ae      	cmp	r6, r5
 8009506:	b085      	sub	sp, #20
 8009508:	4688      	mov	r8, r1
 800950a:	4614      	mov	r4, r2
 800950c:	db05      	blt.n	800951a <__multiply+0x1e>
 800950e:	462a      	mov	r2, r5
 8009510:	4623      	mov	r3, r4
 8009512:	4635      	mov	r5, r6
 8009514:	460c      	mov	r4, r1
 8009516:	4616      	mov	r6, r2
 8009518:	4698      	mov	r8, r3
 800951a:	68a3      	ldr	r3, [r4, #8]
 800951c:	6861      	ldr	r1, [r4, #4]
 800951e:	19af      	adds	r7, r5, r6
 8009520:	42bb      	cmp	r3, r7
 8009522:	bfb8      	it	lt
 8009524:	3101      	addlt	r1, #1
 8009526:	f7ff feed 	bl	8009304 <_Balloc>
 800952a:	9001      	str	r0, [sp, #4]
 800952c:	2800      	cmp	r0, #0
 800952e:	f000 8087 	beq.w	8009640 <__multiply+0x144>
 8009532:	9b01      	ldr	r3, [sp, #4]
 8009534:	f103 0914 	add.w	r9, r3, #20
 8009538:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
 800953c:	45d1      	cmp	r9, sl
 800953e:	d205      	bcs.n	800954c <__multiply+0x50>
 8009540:	464b      	mov	r3, r9
 8009542:	2200      	movs	r2, #0
 8009544:	f843 2b04 	str.w	r2, [r3], #4
 8009548:	459a      	cmp	sl, r3
 800954a:	d8fb      	bhi.n	8009544 <__multiply+0x48>
 800954c:	f108 0814 	add.w	r8, r8, #20
 8009550:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
 8009554:	f104 0314 	add.w	r3, r4, #20
 8009558:	45d8      	cmp	r8, fp
 800955a:	461a      	mov	r2, r3
 800955c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009560:	d25f      	bcs.n	8009622 <__multiply+0x126>
 8009562:	1b2b      	subs	r3, r5, r4
 8009564:	3b15      	subs	r3, #21
 8009566:	f023 0303 	bic.w	r3, r3, #3
 800956a:	3304      	adds	r3, #4
 800956c:	3415      	adds	r4, #21
 800956e:	42a5      	cmp	r5, r4
 8009570:	bf38      	it	cc
 8009572:	2304      	movcc	r3, #4
 8009574:	e9cd a702 	strd	sl, r7, [sp, #8]
 8009578:	46ac      	mov	ip, r5
 800957a:	461f      	mov	r7, r3
 800957c:	4692      	mov	sl, r2
 800957e:	e005      	b.n	800958c <__multiply+0x90>
 8009580:	0c00      	lsrs	r0, r0, #16
 8009582:	d129      	bne.n	80095d8 <__multiply+0xdc>
 8009584:	45c3      	cmp	fp, r8
 8009586:	f109 0904 	add.w	r9, r9, #4
 800958a:	d948      	bls.n	800961e <__multiply+0x122>
 800958c:	f858 0b04 	ldr.w	r0, [r8], #4
 8009590:	b285      	uxth	r5, r0
 8009592:	2d00      	cmp	r5, #0
 8009594:	d0f4      	beq.n	8009580 <__multiply+0x84>
 8009596:	4656      	mov	r6, sl
 8009598:	464c      	mov	r4, r9
 800959a:	2300      	movs	r3, #0
 800959c:	f856 0b04 	ldr.w	r0, [r6], #4
 80095a0:	6821      	ldr	r1, [r4, #0]
 80095a2:	b282      	uxth	r2, r0
 80095a4:	fa1f fe81 	uxth.w	lr, r1
 80095a8:	fb05 ee02 	mla	lr, r5, r2, lr
 80095ac:	0c00      	lsrs	r0, r0, #16
 80095ae:	0c0a      	lsrs	r2, r1, #16
 80095b0:	4473      	add	r3, lr
 80095b2:	fb05 2200 	mla	r2, r5, r0, r2
 80095b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095c0:	45b4      	cmp	ip, r6
 80095c2:	f844 3b04 	str.w	r3, [r4], #4
 80095c6:	ea4f 4312 	mov.w	r3, r2, lsr #16
 80095ca:	d8e7      	bhi.n	800959c <__multiply+0xa0>
 80095cc:	f849 3007 	str.w	r3, [r9, r7]
 80095d0:	f858 0c04 	ldr.w	r0, [r8, #-4]
 80095d4:	0c00      	lsrs	r0, r0, #16
 80095d6:	d0d5      	beq.n	8009584 <__multiply+0x88>
 80095d8:	f8d9 3000 	ldr.w	r3, [r9]
 80095dc:	4654      	mov	r4, sl
 80095de:	4619      	mov	r1, r3
 80095e0:	464d      	mov	r5, r9
 80095e2:	2200      	movs	r2, #0
 80095e4:	8826      	ldrh	r6, [r4, #0]
 80095e6:	0c09      	lsrs	r1, r1, #16
 80095e8:	fb00 1106 	mla	r1, r0, r6, r1
 80095ec:	440a      	add	r2, r1
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095f4:	f845 3b04 	str.w	r3, [r5], #4
 80095f8:	f854 6b04 	ldr.w	r6, [r4], #4
 80095fc:	6829      	ldr	r1, [r5, #0]
 80095fe:	0c36      	lsrs	r6, r6, #16
 8009600:	b28b      	uxth	r3, r1
 8009602:	fb00 3306 	mla	r3, r0, r6, r3
 8009606:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800960a:	45a4      	cmp	ip, r4
 800960c:	ea4f 4213 	mov.w	r2, r3, lsr #16
 8009610:	d8e8      	bhi.n	80095e4 <__multiply+0xe8>
 8009612:	45c3      	cmp	fp, r8
 8009614:	f849 3007 	str.w	r3, [r9, r7]
 8009618:	f109 0904 	add.w	r9, r9, #4
 800961c:	d8b6      	bhi.n	800958c <__multiply+0x90>
 800961e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
 8009622:	2f00      	cmp	r7, #0
 8009624:	dc02      	bgt.n	800962c <__multiply+0x130>
 8009626:	e005      	b.n	8009634 <__multiply+0x138>
 8009628:	3f01      	subs	r7, #1
 800962a:	d003      	beq.n	8009634 <__multiply+0x138>
 800962c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 8009630:	2b00      	cmp	r3, #0
 8009632:	d0f9      	beq.n	8009628 <__multiply+0x12c>
 8009634:	9b01      	ldr	r3, [sp, #4]
 8009636:	4618      	mov	r0, r3
 8009638:	611f      	str	r7, [r3, #16]
 800963a:	b005      	add	sp, #20
 800963c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009640:	4b03      	ldr	r3, [pc, #12]	; (8009650 <__multiply+0x154>)
 8009642:	4804      	ldr	r0, [pc, #16]	; (8009654 <__multiply+0x158>)
 8009644:	9a01      	ldr	r2, [sp, #4]
 8009646:	f240 115d 	movw	r1, #349	; 0x15d
 800964a:	f001 fa61 	bl	800ab10 <__assert_func>
 800964e:	bf00      	nop
 8009650:	0800c9b4 	.word	0x0800c9b4
 8009654:	0800ca38 	.word	0x0800ca38

08009658 <__pow5mult>:
 8009658:	f012 0303 	ands.w	r3, r2, #3
 800965c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009660:	4614      	mov	r4, r2
 8009662:	4606      	mov	r6, r0
 8009664:	d132      	bne.n	80096cc <__pow5mult+0x74>
 8009666:	460d      	mov	r5, r1
 8009668:	10a4      	asrs	r4, r4, #2
 800966a:	d020      	beq.n	80096ae <__pow5mult+0x56>
 800966c:	f8d6 8048 	ldr.w	r8, [r6, #72]	; 0x48
 8009670:	f1b8 0f00 	cmp.w	r8, #0
 8009674:	d033      	beq.n	80096de <__pow5mult+0x86>
 8009676:	07e3      	lsls	r3, r4, #31
 8009678:	f04f 0700 	mov.w	r7, #0
 800967c:	d407      	bmi.n	800968e <__pow5mult+0x36>
 800967e:	1064      	asrs	r4, r4, #1
 8009680:	d015      	beq.n	80096ae <__pow5mult+0x56>
 8009682:	f8d8 0000 	ldr.w	r0, [r8]
 8009686:	b1a8      	cbz	r0, 80096b4 <__pow5mult+0x5c>
 8009688:	4680      	mov	r8, r0
 800968a:	07e3      	lsls	r3, r4, #31
 800968c:	d5f7      	bpl.n	800967e <__pow5mult+0x26>
 800968e:	4642      	mov	r2, r8
 8009690:	4629      	mov	r1, r5
 8009692:	4630      	mov	r0, r6
 8009694:	f7ff ff32 	bl	80094fc <__multiply>
 8009698:	b1b5      	cbz	r5, 80096c8 <__pow5mult+0x70>
 800969a:	6869      	ldr	r1, [r5, #4]
 800969c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800969e:	1064      	asrs	r4, r4, #1
 80096a0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80096a4:	602a      	str	r2, [r5, #0]
 80096a6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 80096aa:	4605      	mov	r5, r0
 80096ac:	d1e9      	bne.n	8009682 <__pow5mult+0x2a>
 80096ae:	4628      	mov	r0, r5
 80096b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b4:	4642      	mov	r2, r8
 80096b6:	4641      	mov	r1, r8
 80096b8:	4630      	mov	r0, r6
 80096ba:	f7ff ff1f 	bl	80094fc <__multiply>
 80096be:	f8c8 0000 	str.w	r0, [r8]
 80096c2:	6007      	str	r7, [r0, #0]
 80096c4:	4680      	mov	r8, r0
 80096c6:	e7e0      	b.n	800968a <__pow5mult+0x32>
 80096c8:	4605      	mov	r5, r0
 80096ca:	e7d8      	b.n	800967e <__pow5mult+0x26>
 80096cc:	3b01      	subs	r3, #1
 80096ce:	4a0f      	ldr	r2, [pc, #60]	; (800970c <__pow5mult+0xb4>)
 80096d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80096d4:	2300      	movs	r3, #0
 80096d6:	f7ff fe45 	bl	8009364 <__multadd>
 80096da:	4605      	mov	r5, r0
 80096dc:	e7c4      	b.n	8009668 <__pow5mult+0x10>
 80096de:	2101      	movs	r1, #1
 80096e0:	4630      	mov	r0, r6
 80096e2:	f7ff fe0f 	bl	8009304 <_Balloc>
 80096e6:	4680      	mov	r8, r0
 80096e8:	b140      	cbz	r0, 80096fc <__pow5mult+0xa4>
 80096ea:	2301      	movs	r3, #1
 80096ec:	f240 2271 	movw	r2, #625	; 0x271
 80096f0:	e9c0 3204 	strd	r3, r2, [r0, #16]
 80096f4:	2300      	movs	r3, #0
 80096f6:	64b0      	str	r0, [r6, #72]	; 0x48
 80096f8:	6003      	str	r3, [r0, #0]
 80096fa:	e7bc      	b.n	8009676 <__pow5mult+0x1e>
 80096fc:	4b04      	ldr	r3, [pc, #16]	; (8009710 <__pow5mult+0xb8>)
 80096fe:	4805      	ldr	r0, [pc, #20]	; (8009714 <__pow5mult+0xbc>)
 8009700:	4642      	mov	r2, r8
 8009702:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009706:	f001 fa03 	bl	800ab10 <__assert_func>
 800970a:	bf00      	nop
 800970c:	0800caa8 	.word	0x0800caa8
 8009710:	0800c9b4 	.word	0x0800c9b4
 8009714:	0800ca38 	.word	0x0800ca38

08009718 <__lshift>:
 8009718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800971c:	460c      	mov	r4, r1
 800971e:	4690      	mov	r8, r2
 8009720:	6926      	ldr	r6, [r4, #16]
 8009722:	68a3      	ldr	r3, [r4, #8]
 8009724:	6849      	ldr	r1, [r1, #4]
 8009726:	eb06 1662 	add.w	r6, r6, r2, asr #5
 800972a:	1c75      	adds	r5, r6, #1
 800972c:	429d      	cmp	r5, r3
 800972e:	4607      	mov	r7, r0
 8009730:	ea4f 1962 	mov.w	r9, r2, asr #5
 8009734:	dd04      	ble.n	8009740 <__lshift+0x28>
 8009736:	005b      	lsls	r3, r3, #1
 8009738:	429d      	cmp	r5, r3
 800973a:	f101 0101 	add.w	r1, r1, #1
 800973e:	dcfa      	bgt.n	8009736 <__lshift+0x1e>
 8009740:	4638      	mov	r0, r7
 8009742:	f7ff fddf 	bl	8009304 <_Balloc>
 8009746:	4684      	mov	ip, r0
 8009748:	2800      	cmp	r0, #0
 800974a:	d051      	beq.n	80097f0 <__lshift+0xd8>
 800974c:	f1b9 0f00 	cmp.w	r9, #0
 8009750:	f100 0014 	add.w	r0, r0, #20
 8009754:	dd0e      	ble.n	8009774 <__lshift+0x5c>
 8009756:	f109 0205 	add.w	r2, r9, #5
 800975a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 800975e:	4603      	mov	r3, r0
 8009760:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8009764:	2100      	movs	r1, #0
 8009766:	f843 1b04 	str.w	r1, [r3], #4
 800976a:	4293      	cmp	r3, r2
 800976c:	d1fb      	bne.n	8009766 <__lshift+0x4e>
 800976e:	f1ae 0314 	sub.w	r3, lr, #20
 8009772:	4418      	add	r0, r3
 8009774:	6921      	ldr	r1, [r4, #16]
 8009776:	f104 0314 	add.w	r3, r4, #20
 800977a:	f018 081f 	ands.w	r8, r8, #31
 800977e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8009782:	d02d      	beq.n	80097e0 <__lshift+0xc8>
 8009784:	f1c8 0920 	rsb	r9, r8, #32
 8009788:	4686      	mov	lr, r0
 800978a:	f04f 0a00 	mov.w	sl, #0
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	fa02 f208 	lsl.w	r2, r2, r8
 8009794:	ea42 020a 	orr.w	r2, r2, sl
 8009798:	f84e 2b04 	str.w	r2, [lr], #4
 800979c:	f853 2b04 	ldr.w	r2, [r3], #4
 80097a0:	4299      	cmp	r1, r3
 80097a2:	fa22 fa09 	lsr.w	sl, r2, r9
 80097a6:	d8f2      	bhi.n	800978e <__lshift+0x76>
 80097a8:	1b0b      	subs	r3, r1, r4
 80097aa:	3b15      	subs	r3, #21
 80097ac:	f023 0303 	bic.w	r3, r3, #3
 80097b0:	3304      	adds	r3, #4
 80097b2:	f104 0215 	add.w	r2, r4, #21
 80097b6:	4291      	cmp	r1, r2
 80097b8:	bf38      	it	cc
 80097ba:	2304      	movcc	r3, #4
 80097bc:	f1ba 0f00 	cmp.w	sl, #0
 80097c0:	bf18      	it	ne
 80097c2:	462e      	movne	r6, r5
 80097c4:	f840 a003 	str.w	sl, [r0, r3]
 80097c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ca:	6862      	ldr	r2, [r4, #4]
 80097cc:	f8cc 6010 	str.w	r6, [ip, #16]
 80097d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097d4:	6021      	str	r1, [r4, #0]
 80097d6:	4660      	mov	r0, ip
 80097d8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e0:	3804      	subs	r0, #4
 80097e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097e6:	f840 2f04 	str.w	r2, [r0, #4]!
 80097ea:	4299      	cmp	r1, r3
 80097ec:	d8f9      	bhi.n	80097e2 <__lshift+0xca>
 80097ee:	e7eb      	b.n	80097c8 <__lshift+0xb0>
 80097f0:	4b03      	ldr	r3, [pc, #12]	; (8009800 <__lshift+0xe8>)
 80097f2:	4804      	ldr	r0, [pc, #16]	; (8009804 <__lshift+0xec>)
 80097f4:	4662      	mov	r2, ip
 80097f6:	f240 11d9 	movw	r1, #473	; 0x1d9
 80097fa:	f001 f989 	bl	800ab10 <__assert_func>
 80097fe:	bf00      	nop
 8009800:	0800c9b4 	.word	0x0800c9b4
 8009804:	0800ca38 	.word	0x0800ca38

08009808 <__mcmp>:
 8009808:	690b      	ldr	r3, [r1, #16]
 800980a:	4684      	mov	ip, r0
 800980c:	6900      	ldr	r0, [r0, #16]
 800980e:	1ac0      	subs	r0, r0, r3
 8009810:	d115      	bne.n	800983e <__mcmp+0x36>
 8009812:	f10c 0c14 	add.w	ip, ip, #20
 8009816:	3114      	adds	r1, #20
 8009818:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 800981c:	b410      	push	{r4}
 800981e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009822:	e001      	b.n	8009828 <__mcmp+0x20>
 8009824:	4594      	cmp	ip, r2
 8009826:	d208      	bcs.n	800983a <__mcmp+0x32>
 8009828:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 800982c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009830:	428c      	cmp	r4, r1
 8009832:	d0f7      	beq.n	8009824 <__mcmp+0x1c>
 8009834:	d204      	bcs.n	8009840 <__mcmp+0x38>
 8009836:	f04f 30ff 	mov.w	r0, #4294967295
 800983a:	bc10      	pop	{r4}
 800983c:	4770      	bx	lr
 800983e:	4770      	bx	lr
 8009840:	2001      	movs	r0, #1
 8009842:	bc10      	pop	{r4}
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop

08009848 <__mdiff>:
 8009848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	690f      	ldr	r7, [r1, #16]
 800984e:	6913      	ldr	r3, [r2, #16]
 8009850:	1aff      	subs	r7, r7, r3
 8009852:	2f00      	cmp	r7, #0
 8009854:	460e      	mov	r6, r1
 8009856:	4690      	mov	r8, r2
 8009858:	d17a      	bne.n	8009950 <__mdiff+0x108>
 800985a:	f101 0514 	add.w	r5, r1, #20
 800985e:	3214      	adds	r2, #20
 8009860:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009864:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009868:	e001      	b.n	800986e <__mdiff+0x26>
 800986a:	429d      	cmp	r5, r3
 800986c:	d273      	bcs.n	8009956 <__mdiff+0x10e>
 800986e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009872:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8009876:	42a1      	cmp	r1, r4
 8009878:	d0f7      	beq.n	800986a <__mdiff+0x22>
 800987a:	d364      	bcc.n	8009946 <__mdiff+0xfe>
 800987c:	6871      	ldr	r1, [r6, #4]
 800987e:	f7ff fd41 	bl	8009304 <_Balloc>
 8009882:	4681      	mov	r9, r0
 8009884:	2800      	cmp	r0, #0
 8009886:	d072      	beq.n	800996e <__mdiff+0x126>
 8009888:	6935      	ldr	r5, [r6, #16]
 800988a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800988e:	60c7      	str	r7, [r0, #12]
 8009890:	f108 0e14 	add.w	lr, r8, #20
 8009894:	f106 0014 	add.w	r0, r6, #20
 8009898:	f109 0a14 	add.w	sl, r9, #20
 800989c:	f106 0c10 	add.w	ip, r6, #16
 80098a0:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 80098a4:	eb00 0785 	add.w	r7, r0, r5, lsl #2
 80098a8:	4656      	mov	r6, sl
 80098aa:	2100      	movs	r1, #0
 80098ac:	f85e 4b04 	ldr.w	r4, [lr], #4
 80098b0:	f85c bf04 	ldr.w	fp, [ip, #4]!
 80098b4:	b2a3      	uxth	r3, r4
 80098b6:	fa11 f18b 	uxtah	r1, r1, fp
 80098ba:	1acb      	subs	r3, r1, r3
 80098bc:	0c21      	lsrs	r1, r4, #16
 80098be:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
 80098c2:	eb01 4123 	add.w	r1, r1, r3, asr #16
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80098cc:	4572      	cmp	r2, lr
 80098ce:	f846 3b04 	str.w	r3, [r6], #4
 80098d2:	ea4f 4121 	mov.w	r1, r1, asr #16
 80098d6:	d8e9      	bhi.n	80098ac <__mdiff+0x64>
 80098d8:	eba2 0408 	sub.w	r4, r2, r8
 80098dc:	3c15      	subs	r4, #21
 80098de:	f108 0815 	add.w	r8, r8, #21
 80098e2:	4542      	cmp	r2, r8
 80098e4:	f024 0603 	bic.w	r6, r4, #3
 80098e8:	f106 0604 	add.w	r6, r6, #4
 80098ec:	bf38      	it	cc
 80098ee:	2604      	movcc	r6, #4
 80098f0:	4430      	add	r0, r6
 80098f2:	f024 0203 	bic.w	r2, r4, #3
 80098f6:	bf38      	it	cc
 80098f8:	2200      	movcc	r2, #0
 80098fa:	4287      	cmp	r7, r0
 80098fc:	4452      	add	r2, sl
 80098fe:	44b2      	add	sl, r6
 8009900:	d916      	bls.n	8009930 <__mdiff+0xe8>
 8009902:	4656      	mov	r6, sl
 8009904:	4604      	mov	r4, r0
 8009906:	f854 3b04 	ldr.w	r3, [r4], #4
 800990a:	fa11 f183 	uxtah	r1, r1, r3
 800990e:	140a      	asrs	r2, r1, #16
 8009910:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009914:	b289      	uxth	r1, r1
 8009916:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
 800991a:	42a7      	cmp	r7, r4
 800991c:	f846 3b04 	str.w	r3, [r6], #4
 8009920:	ea4f 4122 	mov.w	r1, r2, asr #16
 8009924:	d8ef      	bhi.n	8009906 <__mdiff+0xbe>
 8009926:	1e7a      	subs	r2, r7, #1
 8009928:	1a10      	subs	r0, r2, r0
 800992a:	f020 0203 	bic.w	r2, r0, #3
 800992e:	4452      	add	r2, sl
 8009930:	b923      	cbnz	r3, 800993c <__mdiff+0xf4>
 8009932:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009936:	3d01      	subs	r5, #1
 8009938:	2b00      	cmp	r3, #0
 800993a:	d0fa      	beq.n	8009932 <__mdiff+0xea>
 800993c:	f8c9 5010 	str.w	r5, [r9, #16]
 8009940:	4648      	mov	r0, r9
 8009942:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009946:	4633      	mov	r3, r6
 8009948:	2701      	movs	r7, #1
 800994a:	4646      	mov	r6, r8
 800994c:	4698      	mov	r8, r3
 800994e:	e795      	b.n	800987c <__mdiff+0x34>
 8009950:	dbf9      	blt.n	8009946 <__mdiff+0xfe>
 8009952:	2700      	movs	r7, #0
 8009954:	e792      	b.n	800987c <__mdiff+0x34>
 8009956:	2100      	movs	r1, #0
 8009958:	f7ff fcd4 	bl	8009304 <_Balloc>
 800995c:	4681      	mov	r9, r0
 800995e:	b168      	cbz	r0, 800997c <__mdiff+0x134>
 8009960:	2201      	movs	r2, #1
 8009962:	2300      	movs	r3, #0
 8009964:	e9c9 2304 	strd	r2, r3, [r9, #16]
 8009968:	4648      	mov	r0, r9
 800996a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996e:	4b07      	ldr	r3, [pc, #28]	; (800998c <__mdiff+0x144>)
 8009970:	4807      	ldr	r0, [pc, #28]	; (8009990 <__mdiff+0x148>)
 8009972:	464a      	mov	r2, r9
 8009974:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009978:	f001 f8ca 	bl	800ab10 <__assert_func>
 800997c:	4b03      	ldr	r3, [pc, #12]	; (800998c <__mdiff+0x144>)
 800997e:	4804      	ldr	r0, [pc, #16]	; (8009990 <__mdiff+0x148>)
 8009980:	464a      	mov	r2, r9
 8009982:	f240 2132 	movw	r1, #562	; 0x232
 8009986:	f001 f8c3 	bl	800ab10 <__assert_func>
 800998a:	bf00      	nop
 800998c:	0800c9b4 	.word	0x0800c9b4
 8009990:	0800ca38 	.word	0x0800ca38

08009994 <__d2b>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	2101      	movs	r1, #1
 8009998:	b082      	sub	sp, #8
 800999a:	4616      	mov	r6, r2
 800999c:	461d      	mov	r5, r3
 800999e:	f7ff fcb1 	bl	8009304 <_Balloc>
 80099a2:	4604      	mov	r4, r0
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d04b      	beq.n	8009a40 <__d2b+0xac>
 80099a8:	462b      	mov	r3, r5
 80099aa:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80099ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099b2:	b10d      	cbz	r5, 80099b8 <__d2b+0x24>
 80099b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099b8:	2e00      	cmp	r6, #0
 80099ba:	9301      	str	r3, [sp, #4]
 80099bc:	d022      	beq.n	8009a04 <__d2b+0x70>
 80099be:	4668      	mov	r0, sp
 80099c0:	9600      	str	r6, [sp, #0]
 80099c2:	f7ff fd3f 	bl	8009444 <__lo0bits>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d036      	beq.n	8009a38 <__d2b+0xa4>
 80099ca:	9b01      	ldr	r3, [sp, #4]
 80099cc:	9900      	ldr	r1, [sp, #0]
 80099ce:	f1c0 0220 	rsb	r2, r0, #32
 80099d2:	fa03 f202 	lsl.w	r2, r3, r2
 80099d6:	430a      	orrs	r2, r1
 80099d8:	40c3      	lsrs	r3, r0
 80099da:	9301      	str	r3, [sp, #4]
 80099dc:	6162      	str	r2, [r4, #20]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	bf14      	ite	ne
 80099e2:	2102      	movne	r1, #2
 80099e4:	2101      	moveq	r1, #1
 80099e6:	61a3      	str	r3, [r4, #24]
 80099e8:	6121      	str	r1, [r4, #16]
 80099ea:	b1ad      	cbz	r5, 8009a18 <__d2b+0x84>
 80099ec:	9a06      	ldr	r2, [sp, #24]
 80099ee:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
 80099f2:	4403      	add	r3, r0
 80099f4:	6013      	str	r3, [r2, #0]
 80099f6:	9b07      	ldr	r3, [sp, #28]
 80099f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099fc:	6018      	str	r0, [r3, #0]
 80099fe:	4620      	mov	r0, r4
 8009a00:	b002      	add	sp, #8
 8009a02:	bd70      	pop	{r4, r5, r6, pc}
 8009a04:	a801      	add	r0, sp, #4
 8009a06:	f7ff fd1d 	bl	8009444 <__lo0bits>
 8009a0a:	9b01      	ldr	r3, [sp, #4]
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	e9c4 1304 	strd	r1, r3, [r4, #16]
 8009a12:	3020      	adds	r0, #32
 8009a14:	2d00      	cmp	r5, #0
 8009a16:	d1e9      	bne.n	80099ec <__d2b+0x58>
 8009a18:	eb04 0281 	add.w	r2, r4, r1, lsl #2
 8009a1c:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 8009a20:	6910      	ldr	r0, [r2, #16]
 8009a22:	9a06      	ldr	r2, [sp, #24]
 8009a24:	6013      	str	r3, [r2, #0]
 8009a26:	f7ff fced 	bl	8009404 <__hi0bits>
 8009a2a:	9b07      	ldr	r3, [sp, #28]
 8009a2c:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009a30:	4620      	mov	r0, r4
 8009a32:	6019      	str	r1, [r3, #0]
 8009a34:	b002      	add	sp, #8
 8009a36:	bd70      	pop	{r4, r5, r6, pc}
 8009a38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a3c:	6162      	str	r2, [r4, #20]
 8009a3e:	e7ce      	b.n	80099de <__d2b+0x4a>
 8009a40:	4b03      	ldr	r3, [pc, #12]	; (8009a50 <__d2b+0xbc>)
 8009a42:	4804      	ldr	r0, [pc, #16]	; (8009a54 <__d2b+0xc0>)
 8009a44:	4622      	mov	r2, r4
 8009a46:	f240 310a 	movw	r1, #778	; 0x30a
 8009a4a:	f001 f861 	bl	800ab10 <__assert_func>
 8009a4e:	bf00      	nop
 8009a50:	0800c9b4 	.word	0x0800c9b4
 8009a54:	0800ca38 	.word	0x0800ca38

08009a58 <frexp>:
 8009a58:	f8df c060 	ldr.w	ip, [pc, #96]	; 8009abc <frexp+0x64>
 8009a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a62:	2700      	movs	r7, #0
 8009a64:	4563      	cmp	r3, ip
 8009a66:	4604      	mov	r4, r0
 8009a68:	460d      	mov	r5, r1
 8009a6a:	4616      	mov	r6, r2
 8009a6c:	6017      	str	r7, [r2, #0]
 8009a6e:	dc22      	bgt.n	8009ab6 <frexp+0x5e>
 8009a70:	4684      	mov	ip, r0
 8009a72:	ea53 0c0c 	orrs.w	ip, r3, ip
 8009a76:	d01e      	beq.n	8009ab6 <frexp+0x5e>
 8009a78:	f8df c044 	ldr.w	ip, [pc, #68]	; 8009ac0 <frexp+0x68>
 8009a7c:	ea01 0c0c 	and.w	ip, r1, ip
 8009a80:	460a      	mov	r2, r1
 8009a82:	f1bc 0f00 	cmp.w	ip, #0
 8009a86:	d109      	bne.n	8009a9c <frexp+0x44>
 8009a88:	4b0e      	ldr	r3, [pc, #56]	; (8009ac4 <frexp+0x6c>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f7f6 fe14 	bl	80006b8 <__aeabi_dmul>
 8009a90:	f06f 0735 	mvn.w	r7, #53	; 0x35
 8009a94:	4604      	mov	r4, r0
 8009a96:	460a      	mov	r2, r1
 8009a98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a9c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009aa0:	151b      	asrs	r3, r3, #20
 8009aa2:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8009aa6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009aaa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009aae:	443b      	add	r3, r7
 8009ab0:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8009ab4:	6033      	str	r3, [r6, #0]
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	4629      	mov	r1, r5
 8009aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009abc:	7fefffff 	.word	0x7fefffff
 8009ac0:	7ff00000 	.word	0x7ff00000
 8009ac4:	43500000 	.word	0x43500000

08009ac8 <__sread>:
 8009ac8:	b510      	push	{r4, lr}
 8009aca:	460c      	mov	r4, r1
 8009acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad0:	f001 fada 	bl	800b088 <_read_r>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	db03      	blt.n	8009ae0 <__sread+0x18>
 8009ad8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009ada:	4403      	add	r3, r0
 8009adc:	6523      	str	r3, [r4, #80]	; 0x50
 8009ade:	bd10      	pop	{r4, pc}
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ae6:	81a3      	strh	r3, [r4, #12]
 8009ae8:	bd10      	pop	{r4, pc}
 8009aea:	bf00      	nop

08009aec <__swrite>:
 8009aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af0:	460c      	mov	r4, r1
 8009af2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8009af6:	461f      	mov	r7, r3
 8009af8:	05cb      	lsls	r3, r1, #23
 8009afa:	4605      	mov	r5, r0
 8009afc:	4616      	mov	r6, r2
 8009afe:	d40b      	bmi.n	8009b18 <__swrite+0x2c>
 8009b00:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8009b04:	81a1      	strh	r1, [r4, #12]
 8009b06:	463b      	mov	r3, r7
 8009b08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b0c:	4632      	mov	r2, r6
 8009b0e:	4628      	mov	r0, r5
 8009b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b14:	f000 bfe6 	b.w	800aae4 <_write_r>
 8009b18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f001 fa0a 	bl	800af38 <_lseek_r>
 8009b24:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8009b28:	e7ea      	b.n	8009b00 <__swrite+0x14>
 8009b2a:	bf00      	nop

08009b2c <__sseek>:
 8009b2c:	b510      	push	{r4, lr}
 8009b2e:	460c      	mov	r4, r1
 8009b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b34:	f001 fa00 	bl	800af38 <_lseek_r>
 8009b38:	89a3      	ldrh	r3, [r4, #12]
 8009b3a:	1c42      	adds	r2, r0, #1
 8009b3c:	bf0e      	itee	eq
 8009b3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b46:	6520      	strne	r0, [r4, #80]	; 0x50
 8009b48:	81a3      	strh	r3, [r4, #12]
 8009b4a:	bd10      	pop	{r4, pc}

08009b4c <__sclose>:
 8009b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b50:	f001 b82e 	b.w	800abb0 <_close_r>

08009b54 <strncpy>:
 8009b54:	b530      	push	{r4, r5, lr}
 8009b56:	ea40 0401 	orr.w	r4, r0, r1
 8009b5a:	07a3      	lsls	r3, r4, #30
 8009b5c:	d101      	bne.n	8009b62 <strncpy+0xe>
 8009b5e:	2a03      	cmp	r2, #3
 8009b60:	d80f      	bhi.n	8009b82 <strncpy+0x2e>
 8009b62:	4684      	mov	ip, r0
 8009b64:	f101 3eff 	add.w	lr, r1, #4294967295
 8009b68:	e007      	b.n	8009b7a <strncpy+0x26>
 8009b6a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 8009b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b72:	1e54      	subs	r4, r2, #1
 8009b74:	b1c1      	cbz	r1, 8009ba8 <strncpy+0x54>
 8009b76:	469c      	mov	ip, r3
 8009b78:	4622      	mov	r2, r4
 8009b7a:	4663      	mov	r3, ip
 8009b7c:	2a00      	cmp	r2, #0
 8009b7e:	d1f4      	bne.n	8009b6a <strncpy+0x16>
 8009b80:	bd30      	pop	{r4, r5, pc}
 8009b82:	460b      	mov	r3, r1
 8009b84:	4684      	mov	ip, r0
 8009b86:	4619      	mov	r1, r3
 8009b88:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b8c:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
 8009b90:	ea24 0405 	bic.w	r4, r4, r5
 8009b94:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8009b98:	d1e4      	bne.n	8009b64 <strncpy+0x10>
 8009b9a:	3a04      	subs	r2, #4
 8009b9c:	2a03      	cmp	r2, #3
 8009b9e:	f84c 5b04 	str.w	r5, [ip], #4
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	d8ef      	bhi.n	8009b86 <strncpy+0x32>
 8009ba6:	e7dd      	b.n	8009b64 <strncpy+0x10>
 8009ba8:	4462      	add	r2, ip
 8009baa:	2c00      	cmp	r4, #0
 8009bac:	d0e8      	beq.n	8009b80 <strncpy+0x2c>
 8009bae:	f803 1b01 	strb.w	r1, [r3], #1
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d1fb      	bne.n	8009bae <strncpy+0x5a>
 8009bb6:	bd30      	pop	{r4, r5, pc}

08009bb8 <__ssprint_r>:
 8009bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	6893      	ldr	r3, [r2, #8]
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	4691      	mov	r9, r2
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d06d      	beq.n	8009ca2 <__ssprint_r+0xea>
 8009bc6:	6817      	ldr	r7, [r2, #0]
 8009bc8:	688d      	ldr	r5, [r1, #8]
 8009bca:	4680      	mov	r8, r0
 8009bcc:	460c      	mov	r4, r1
 8009bce:	6808      	ldr	r0, [r1, #0]
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	e043      	b.n	8009c5c <__ssprint_r+0xa4>
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8009bda:	d02e      	beq.n	8009c3a <__ssprint_r+0x82>
 8009bdc:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 8009be0:	eba0 0a01 	sub.w	sl, r0, r1
 8009be4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009be8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bec:	eb0a 0006 	add.w	r0, sl, r6
 8009bf0:	106d      	asrs	r5, r5, #1
 8009bf2:	3001      	adds	r0, #1
 8009bf4:	42a8      	cmp	r0, r5
 8009bf6:	462a      	mov	r2, r5
 8009bf8:	bf84      	itt	hi
 8009bfa:	4605      	movhi	r5, r0
 8009bfc:	462a      	movhi	r2, r5
 8009bfe:	055b      	lsls	r3, r3, #21
 8009c00:	d536      	bpl.n	8009c70 <__ssprint_r+0xb8>
 8009c02:	4611      	mov	r1, r2
 8009c04:	4640      	mov	r0, r8
 8009c06:	f7fb f995 	bl	8004f34 <_malloc_r>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d03a      	beq.n	8009c84 <__ssprint_r+0xcc>
 8009c0e:	4652      	mov	r2, sl
 8009c10:	6921      	ldr	r1, [r4, #16]
 8009c12:	9001      	str	r0, [sp, #4]
 8009c14:	f7f7 f804 	bl	8000c20 <memcpy>
 8009c18:	89a2      	ldrh	r2, [r4, #12]
 8009c1a:	9b01      	ldr	r3, [sp, #4]
 8009c1c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009c20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c24:	81a2      	strh	r2, [r4, #12]
 8009c26:	eba5 020a 	sub.w	r2, r5, sl
 8009c2a:	eb03 000a 	add.w	r0, r3, sl
 8009c2e:	6165      	str	r5, [r4, #20]
 8009c30:	60a2      	str	r2, [r4, #8]
 8009c32:	6123      	str	r3, [r4, #16]
 8009c34:	6020      	str	r0, [r4, #0]
 8009c36:	4635      	mov	r5, r6
 8009c38:	46b2      	mov	sl, r6
 8009c3a:	4659      	mov	r1, fp
 8009c3c:	4652      	mov	r2, sl
 8009c3e:	f001 f9a7 	bl	800af90 <memmove>
 8009c42:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009c46:	68a1      	ldr	r1, [r4, #8]
 8009c48:	6820      	ldr	r0, [r4, #0]
 8009c4a:	1b4d      	subs	r5, r1, r5
 8009c4c:	4450      	add	r0, sl
 8009c4e:	1b9e      	subs	r6, r3, r6
 8009c50:	60a5      	str	r5, [r4, #8]
 8009c52:	6020      	str	r0, [r4, #0]
 8009c54:	f8c9 6008 	str.w	r6, [r9, #8]
 8009c58:	b31e      	cbz	r6, 8009ca2 <__ssprint_r+0xea>
 8009c5a:	3708      	adds	r7, #8
 8009c5c:	e957 b602 	ldrd	fp, r6, [r7, #-8]
 8009c60:	46aa      	mov	sl, r5
 8009c62:	2e00      	cmp	r6, #0
 8009c64:	d0f9      	beq.n	8009c5a <__ssprint_r+0xa2>
 8009c66:	42b5      	cmp	r5, r6
 8009c68:	d9b4      	bls.n	8009bd4 <__ssprint_r+0x1c>
 8009c6a:	4635      	mov	r5, r6
 8009c6c:	46b2      	mov	sl, r6
 8009c6e:	e7e4      	b.n	8009c3a <__ssprint_r+0x82>
 8009c70:	4640      	mov	r0, r8
 8009c72:	f001 fa1f 	bl	800b0b4 <_realloc_r>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d1d4      	bne.n	8009c26 <__ssprint_r+0x6e>
 8009c7c:	6921      	ldr	r1, [r4, #16]
 8009c7e:	4640      	mov	r0, r8
 8009c80:	f7ff f9bc 	bl	8008ffc <_free_r>
 8009c84:	230c      	movs	r3, #12
 8009c86:	f8c8 3000 	str.w	r3, [r8]
 8009c8a:	89a3      	ldrh	r3, [r4, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c92:	f04f 30ff 	mov.w	r0, #4294967295
 8009c96:	81a3      	strh	r3, [r4, #12]
 8009c98:	e9c9 2201 	strd	r2, r2, [r9, #4]
 8009c9c:	b003      	add	sp, #12
 8009c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	f8c9 0004 	str.w	r0, [r9, #4]
 8009ca8:	b003      	add	sp, #12
 8009caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cae:	bf00      	nop

08009cb0 <__sprint_r>:
 8009cb0:	6893      	ldr	r3, [r2, #8]
 8009cb2:	b510      	push	{r4, lr}
 8009cb4:	4614      	mov	r4, r2
 8009cb6:	b913      	cbnz	r3, 8009cbe <__sprint_r+0xe>
 8009cb8:	6053      	str	r3, [r2, #4]
 8009cba:	4618      	mov	r0, r3
 8009cbc:	bd10      	pop	{r4, pc}
 8009cbe:	f000 ffb3 	bl	800ac28 <__sfvwrite_r>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8009cc8:	bd10      	pop	{r4, pc}
 8009cca:	bf00      	nop

08009ccc <_vfiprintf_r>:
 8009ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd0:	b0bb      	sub	sp, #236	; 0xec
 8009cd2:	e9cd 3004 	strd	r3, r0, [sp, #16]
 8009cd6:	461c      	mov	r4, r3
 8009cd8:	468b      	mov	fp, r1
 8009cda:	4616      	mov	r6, r2
 8009cdc:	b118      	cbz	r0, 8009ce6 <_vfiprintf_r+0x1a>
 8009cde:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 828a 	beq.w	800a1fa <_vfiprintf_r+0x52e>
 8009ce6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 8009cea:	f8bb 200c 	ldrh.w	r2, [fp, #12]
 8009cee:	07db      	lsls	r3, r3, #31
 8009cf0:	d402      	bmi.n	8009cf8 <_vfiprintf_r+0x2c>
 8009cf2:	0597      	lsls	r7, r2, #22
 8009cf4:	f140 8596 	bpl.w	800a824 <_vfiprintf_r+0xb58>
 8009cf8:	0715      	lsls	r5, r2, #28
 8009cfa:	f140 80eb 	bpl.w	8009ed4 <_vfiprintf_r+0x208>
 8009cfe:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 80e6 	beq.w	8009ed4 <_vfiprintf_r+0x208>
 8009d08:	f002 031a 	and.w	r3, r2, #26
 8009d0c:	2b0a      	cmp	r3, #10
 8009d0e:	f000 80ef 	beq.w	8009ef0 <_vfiprintf_r+0x224>
 8009d12:	ab11      	add	r3, sp, #68	; 0x44
 8009d14:	930e      	str	r3, [sp, #56]	; 0x38
 8009d16:	2300      	movs	r3, #0
 8009d18:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 8009d1c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8009d20:	9307      	str	r3, [sp, #28]
 8009d22:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8009d26:	9308      	str	r3, [sp, #32]
 8009d28:	9303      	str	r3, [sp, #12]
 8009d2a:	7833      	ldrb	r3, [r6, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f000 8209 	beq.w	800a144 <_vfiprintf_r+0x478>
 8009d32:	4634      	mov	r4, r6
 8009d34:	e004      	b.n	8009d40 <_vfiprintf_r+0x74>
 8009d36:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 8131 	beq.w	8009fa2 <_vfiprintf_r+0x2d6>
 8009d40:	2b25      	cmp	r3, #37	; 0x25
 8009d42:	d1f8      	bne.n	8009d36 <_vfiprintf_r+0x6a>
 8009d44:	1ba5      	subs	r5, r4, r6
 8009d46:	f040 812f 	bne.w	8009fa8 <_vfiprintf_r+0x2dc>
 8009d4a:	7823      	ldrb	r3, [r4, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 81f9 	beq.w	800a144 <_vfiprintf_r+0x478>
 8009d52:	2300      	movs	r3, #0
 8009d54:	f04f 32ff 	mov.w	r2, #4294967295
 8009d58:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8009d5c:	461d      	mov	r5, r3
 8009d5e:	9302      	str	r3, [sp, #8]
 8009d60:	1c66      	adds	r6, r4, #1
 8009d62:	7863      	ldrb	r3, [r4, #1]
 8009d64:	9200      	str	r2, [sp, #0]
 8009d66:	242b      	movs	r4, #43	; 0x2b
 8009d68:	3601      	adds	r6, #1
 8009d6a:	f1a3 0220 	sub.w	r2, r3, #32
 8009d6e:	2a5a      	cmp	r2, #90	; 0x5a
 8009d70:	f200 8159 	bhi.w	800a026 <_vfiprintf_r+0x35a>
 8009d74:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009d78:	015702d4 	.word	0x015702d4
 8009d7c:	02d00157 	.word	0x02d00157
 8009d80:	01570157 	.word	0x01570157
 8009d84:	006a0157 	.word	0x006a0157
 8009d88:	01570157 	.word	0x01570157
 8009d8c:	02f802c6 	.word	0x02f802c6
 8009d90:	01110157 	.word	0x01110157
 8009d94:	015702de 	.word	0x015702de
 8009d98:	005b02b0 	.word	0x005b02b0
 8009d9c:	005b005b 	.word	0x005b005b
 8009da0:	005b005b 	.word	0x005b005b
 8009da4:	005b005b 	.word	0x005b005b
 8009da8:	005b005b 	.word	0x005b005b
 8009dac:	01570157 	.word	0x01570157
 8009db0:	01570157 	.word	0x01570157
 8009db4:	01570157 	.word	0x01570157
 8009db8:	01570157 	.word	0x01570157
 8009dbc:	02320157 	.word	0x02320157
 8009dc0:	01570084 	.word	0x01570084
 8009dc4:	01570157 	.word	0x01570157
 8009dc8:	01570157 	.word	0x01570157
 8009dcc:	01570157 	.word	0x01570157
 8009dd0:	01570157 	.word	0x01570157
 8009dd4:	00d10157 	.word	0x00d10157
 8009dd8:	01570157 	.word	0x01570157
 8009ddc:	02160157 	.word	0x02160157
 8009de0:	029e0157 	.word	0x029e0157
 8009de4:	01570157 	.word	0x01570157
 8009de8:	0157055e 	.word	0x0157055e
 8009dec:	01570157 	.word	0x01570157
 8009df0:	01570157 	.word	0x01570157
 8009df4:	01570157 	.word	0x01570157
 8009df8:	01570157 	.word	0x01570157
 8009dfc:	02320157 	.word	0x02320157
 8009e00:	01570086 	.word	0x01570086
 8009e04:	01570157 	.word	0x01570157
 8009e08:	00860294 	.word	0x00860294
 8009e0c:	01570080 	.word	0x01570080
 8009e10:	0157028a 	.word	0x0157028a
 8009e14:	00d30277 	.word	0x00d30277
 8009e18:	008002b4 	.word	0x008002b4
 8009e1c:	02160157 	.word	0x02160157
 8009e20:	057e007e 	.word	0x057e007e
 8009e24:	01570157 	.word	0x01570157
 8009e28:	01570580 	.word	0x01570580
 8009e2c:	007e      	.short	0x007e
 8009e2e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009e32:	2100      	movs	r1, #0
 8009e34:	f816 3b01 	ldrb.w	r3, [r6], #1
 8009e38:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009e3c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009e40:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009e44:	2a09      	cmp	r2, #9
 8009e46:	d9f5      	bls.n	8009e34 <_vfiprintf_r+0x168>
 8009e48:	9102      	str	r1, [sp, #8]
 8009e4a:	e78e      	b.n	8009d6a <_vfiprintf_r+0x9e>
 8009e4c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009e50:	4640      	mov	r0, r8
 8009e52:	f7ff f9f3 	bl	800923c <_localeconv_r>
 8009e56:	6843      	ldr	r3, [r0, #4]
 8009e58:	9309      	str	r3, [sp, #36]	; 0x24
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7f6 f9b0 	bl	80001c0 <strlen>
 8009e60:	900a      	str	r0, [sp, #40]	; 0x28
 8009e62:	4607      	mov	r7, r0
 8009e64:	4640      	mov	r0, r8
 8009e66:	f7ff f9e9 	bl	800923c <_localeconv_r>
 8009e6a:	6883      	ldr	r3, [r0, #8]
 8009e6c:	9308      	str	r3, [sp, #32]
 8009e6e:	2f00      	cmp	r7, #0
 8009e70:	f040 84c1 	bne.w	800a7f6 <_vfiprintf_r+0xb2a>
 8009e74:	7833      	ldrb	r3, [r6, #0]
 8009e76:	e777      	b.n	8009d68 <_vfiprintf_r+0x9c>
 8009e78:	7833      	ldrb	r3, [r6, #0]
 8009e7a:	f045 0520 	orr.w	r5, r5, #32
 8009e7e:	e773      	b.n	8009d68 <_vfiprintf_r+0x9c>
 8009e80:	f045 0510 	orr.w	r5, r5, #16
 8009e84:	06af      	lsls	r7, r5, #26
 8009e86:	f140 817e 	bpl.w	800a186 <_vfiprintf_r+0x4ba>
 8009e8a:	9f04      	ldr	r7, [sp, #16]
 8009e8c:	3707      	adds	r7, #7
 8009e8e:	f027 0707 	bic.w	r7, r7, #7
 8009e92:	463a      	mov	r2, r7
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f852 7b08 	ldr.w	r7, [r2], #8
 8009e9a:	9204      	str	r2, [sp, #16]
 8009e9c:	4698      	mov	r8, r3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f2c0 81b9 	blt.w	800a216 <_vfiprintf_r+0x54a>
 8009ea4:	9b00      	ldr	r3, [sp, #0]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	f000 8553 	beq.w	800a952 <_vfiprintf_r+0xc86>
 8009eac:	ea57 0308 	orrs.w	r3, r7, r8
 8009eb0:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
 8009eb4:	f000 842e 	beq.w	800a714 <_vfiprintf_r+0xa48>
 8009eb8:	2f0a      	cmp	r7, #10
 8009eba:	f178 0300 	sbcs.w	r3, r8, #0
 8009ebe:	f080 8444 	bcs.w	800a74a <_vfiprintf_r+0xa7e>
 8009ec2:	3730      	adds	r7, #48	; 0x30
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	f88d 70e7 	strb.w	r7, [sp, #231]	; 0xe7
 8009eca:	4655      	mov	r5, sl
 8009ecc:	9301      	str	r3, [sp, #4]
 8009ece:	f10d 04e7 	add.w	r4, sp, #231	; 0xe7
 8009ed2:	e052      	b.n	8009f7a <_vfiprintf_r+0x2ae>
 8009ed4:	9805      	ldr	r0, [sp, #20]
 8009ed6:	4659      	mov	r1, fp
 8009ed8:	f7fe fdfc 	bl	8008ad4 <__swsetup_r>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	f040 85a4 	bne.w	800aa2a <_vfiprintf_r+0xd5e>
 8009ee2:	f8bb 200c 	ldrh.w	r2, [fp, #12]
 8009ee6:	f002 031a 	and.w	r3, r2, #26
 8009eea:	2b0a      	cmp	r3, #10
 8009eec:	f47f af11 	bne.w	8009d12 <_vfiprintf_r+0x46>
 8009ef0:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f6ff af0c 	blt.w	8009d12 <_vfiprintf_r+0x46>
 8009efa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 8009efe:	07d9      	lsls	r1, r3, #31
 8009f00:	d402      	bmi.n	8009f08 <_vfiprintf_r+0x23c>
 8009f02:	0593      	lsls	r3, r2, #22
 8009f04:	f140 856e 	bpl.w	800a9e4 <_vfiprintf_r+0xd18>
 8009f08:	9805      	ldr	r0, [sp, #20]
 8009f0a:	4623      	mov	r3, r4
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	4659      	mov	r1, fp
 8009f10:	b03b      	add	sp, #236	; 0xec
 8009f12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f16:	f000 bda5 	b.w	800aa64 <__sbprintf>
 8009f1a:	f045 0510 	orr.w	r5, r5, #16
 8009f1e:	f015 0820 	ands.w	r8, r5, #32
 8009f22:	f000 8120 	beq.w	800a166 <_vfiprintf_r+0x49a>
 8009f26:	9f04      	ldr	r7, [sp, #16]
 8009f28:	3707      	adds	r7, #7
 8009f2a:	f027 0707 	bic.w	r7, r7, #7
 8009f2e:	463b      	mov	r3, r7
 8009f30:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8009f34:	f853 7b08 	ldr.w	r7, [r3], #8
 8009f38:	9304      	str	r3, [sp, #16]
 8009f3a:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
 8009f3e:	2300      	movs	r3, #0
 8009f40:	2200      	movs	r2, #0
 8009f42:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8009f46:	9a00      	ldr	r2, [sp, #0]
 8009f48:	1c55      	adds	r5, r2, #1
 8009f4a:	f000 8172 	beq.w	800a232 <_vfiprintf_r+0x566>
 8009f4e:	ea57 0108 	orrs.w	r1, r7, r8
 8009f52:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
 8009f56:	f040 8378 	bne.w	800a64a <_vfiprintf_r+0x97e>
 8009f5a:	2a00      	cmp	r2, #0
 8009f5c:	f040 84fc 	bne.w	800a958 <_vfiprintf_r+0xc8c>
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f040 83dc 	bne.w	800a71e <_vfiprintf_r+0xa52>
 8009f66:	f01a 0301 	ands.w	r3, sl, #1
 8009f6a:	9301      	str	r3, [sp, #4]
 8009f6c:	f000 842c 	beq.w	800a7c8 <_vfiprintf_r+0xafc>
 8009f70:	2330      	movs	r3, #48	; 0x30
 8009f72:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 8009f76:	f10d 04e7 	add.w	r4, sp, #231	; 0xe7
 8009f7a:	e9dd 8200 	ldrd	r8, r2, [sp]
 8009f7e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009f82:	4590      	cmp	r8, r2
 8009f84:	bfb8      	it	lt
 8009f86:	4690      	movlt	r8, r2
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d05b      	beq.n	800a044 <_vfiprintf_r+0x378>
 8009f8c:	f108 0801 	add.w	r8, r8, #1
 8009f90:	e058      	b.n	800a044 <_vfiprintf_r+0x378>
 8009f92:	9a02      	ldr	r2, [sp, #8]
 8009f94:	9304      	str	r3, [sp, #16]
 8009f96:	4252      	negs	r2, r2
 8009f98:	9202      	str	r2, [sp, #8]
 8009f9a:	7833      	ldrb	r3, [r6, #0]
 8009f9c:	f045 0504 	orr.w	r5, r5, #4
 8009fa0:	e6e2      	b.n	8009d68 <_vfiprintf_r+0x9c>
 8009fa2:	1ba5      	subs	r5, r4, r6
 8009fa4:	f000 80ce 	beq.w	800a144 <_vfiprintf_r+0x478>
 8009fa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009faa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009fac:	3301      	adds	r3, #1
 8009fae:	442a      	add	r2, r5
 8009fb0:	2b07      	cmp	r3, #7
 8009fb2:	e9c9 6500 	strd	r6, r5, [r9]
 8009fb6:	9210      	str	r2, [sp, #64]	; 0x40
 8009fb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fba:	dc05      	bgt.n	8009fc8 <_vfiprintf_r+0x2fc>
 8009fbc:	f109 0908 	add.w	r9, r9, #8
 8009fc0:	9b03      	ldr	r3, [sp, #12]
 8009fc2:	442b      	add	r3, r5
 8009fc4:	9303      	str	r3, [sp, #12]
 8009fc6:	e6c0      	b.n	8009d4a <_vfiprintf_r+0x7e>
 8009fc8:	b91a      	cbnz	r2, 8009fd2 <_vfiprintf_r+0x306>
 8009fca:	920f      	str	r2, [sp, #60]	; 0x3c
 8009fcc:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8009fd0:	e7f6      	b.n	8009fc0 <_vfiprintf_r+0x2f4>
 8009fd2:	9805      	ldr	r0, [sp, #20]
 8009fd4:	aa0e      	add	r2, sp, #56	; 0x38
 8009fd6:	4659      	mov	r1, fp
 8009fd8:	f000 fe26 	bl	800ac28 <__sfvwrite_r>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 8009fe2:	b990      	cbnz	r0, 800a00a <_vfiprintf_r+0x33e>
 8009fe4:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8009fe8:	e7ea      	b.n	8009fc0 <_vfiprintf_r+0x2f4>
 8009fea:	4629      	mov	r1, r5
 8009fec:	4620      	mov	r0, r4
 8009fee:	f000 fe1b 	bl	800ac28 <__sfvwrite_r>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 8009ff8:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8009ffc:	f04f 0c01 	mov.w	ip, #1
 800a000:	4602      	mov	r2, r0
 800a002:	2800      	cmp	r0, #0
 800a004:	f000 8244 	beq.w	800a490 <_vfiprintf_r+0x7c4>
 800a008:	46ab      	mov	fp, r5
 800a00a:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 800a00e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800a012:	07d0      	lsls	r0, r2, #31
 800a014:	f140 809d 	bpl.w	800a152 <_vfiprintf_r+0x486>
 800a018:	065a      	lsls	r2, r3, #25
 800a01a:	f100 8512 	bmi.w	800aa42 <_vfiprintf_r+0xd76>
 800a01e:	9803      	ldr	r0, [sp, #12]
 800a020:	b03b      	add	sp, #236	; 0xec
 800a022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a026:	2b00      	cmp	r3, #0
 800a028:	f000 808c 	beq.w	800a144 <_vfiprintf_r+0x478>
 800a02c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800a030:	f04f 0801 	mov.w	r8, #1
 800a034:	2300      	movs	r3, #0
 800a036:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800a03a:	f8cd 8004 	str.w	r8, [sp, #4]
 800a03e:	ac21      	add	r4, sp, #132	; 0x84
 800a040:	2300      	movs	r3, #0
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	e9dd 200f 	ldrd	r2, r0, [sp, #60]	; 0x3c
 800a048:	f015 0302 	ands.w	r3, r5, #2
 800a04c:	bf18      	it	ne
 800a04e:	f108 0802 	addne.w	r8, r8, #2
 800a052:	f102 0c01 	add.w	ip, r2, #1
 800a056:	f015 0a84 	ands.w	sl, r5, #132	; 0x84
 800a05a:	9306      	str	r3, [sp, #24]
 800a05c:	4661      	mov	r1, ip
 800a05e:	d105      	bne.n	800a06c <_vfiprintf_r+0x3a0>
 800a060:	9b02      	ldr	r3, [sp, #8]
 800a062:	eba3 0708 	sub.w	r7, r3, r8
 800a066:	2f00      	cmp	r7, #0
 800a068:	f300 82f1 	bgt.w	800a64e <_vfiprintf_r+0x982>
 800a06c:	f89d 7033 	ldrb.w	r7, [sp, #51]	; 0x33
 800a070:	2f00      	cmp	r7, #0
 800a072:	f000 8191 	beq.w	800a398 <_vfiprintf_r+0x6cc>
 800a076:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a07a:	3001      	adds	r0, #1
 800a07c:	f8c9 2000 	str.w	r2, [r9]
 800a080:	2907      	cmp	r1, #7
 800a082:	f04f 0201 	mov.w	r2, #1
 800a086:	e9cd 100f 	strd	r1, r0, [sp, #60]	; 0x3c
 800a08a:	f8c9 2004 	str.w	r2, [r9, #4]
 800a08e:	f340 817f 	ble.w	800a390 <_vfiprintf_r+0x6c4>
 800a092:	b148      	cbz	r0, 800a0a8 <_vfiprintf_r+0x3dc>
 800a094:	aa0e      	add	r2, sp, #56	; 0x38
 800a096:	9805      	ldr	r0, [sp, #20]
 800a098:	4659      	mov	r1, fp
 800a09a:	f000 fdc5 	bl	800ac28 <__sfvwrite_r>
 800a09e:	2200      	movs	r2, #0
 800a0a0:	e9cd 220f 	strd	r2, r2, [sp, #60]	; 0x3c
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d1b0      	bne.n	800a00a <_vfiprintf_r+0x33e>
 800a0a8:	9a06      	ldr	r2, [sp, #24]
 800a0aa:	2a00      	cmp	r2, #0
 800a0ac:	f000 82bc 	beq.w	800a628 <_vfiprintf_r+0x95c>
 800a0b0:	2002      	movs	r0, #2
 800a0b2:	ab0d      	add	r3, sp, #52	; 0x34
 800a0b4:	9012      	str	r0, [sp, #72]	; 0x48
 800a0b6:	9311      	str	r3, [sp, #68]	; 0x44
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a0be:	f109 0908 	add.w	r9, r9, #8
 800a0c2:	1c51      	adds	r1, r2, #1
 800a0c4:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
 800a0c8:	f000 8183 	beq.w	800a3d2 <_vfiprintf_r+0x706>
 800a0cc:	e9dd 3700 	ldrd	r3, r7, [sp]
 800a0d0:	1bdf      	subs	r7, r3, r7
 800a0d2:	2f00      	cmp	r7, #0
 800a0d4:	f300 81cb 	bgt.w	800a46e <_vfiprintf_r+0x7a2>
 800a0d8:	9a01      	ldr	r2, [sp, #4]
 800a0da:	f8c9 4000 	str.w	r4, [r9]
 800a0de:	1813      	adds	r3, r2, r0
 800a0e0:	2907      	cmp	r1, #7
 800a0e2:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
 800a0e6:	f8c9 2004 	str.w	r2, [r9, #4]
 800a0ea:	f340 8235 	ble.w	800a558 <_vfiprintf_r+0x88c>
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f040 829f 	bne.w	800a632 <_vfiprintf_r+0x966>
 800a0f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0f6:	076b      	lsls	r3, r5, #29
 800a0f8:	f140 826d 	bpl.w	800a5d6 <_vfiprintf_r+0x90a>
 800a0fc:	9a02      	ldr	r2, [sp, #8]
 800a0fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a100:	eba2 0408 	sub.w	r4, r2, r8
 800a104:	2c00      	cmp	r4, #0
 800a106:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a10a:	f300 8230 	bgt.w	800a56e <_vfiprintf_r+0x8a2>
 800a10e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a112:	4541      	cmp	r1, r8
 800a114:	bfac      	ite	ge
 800a116:	1852      	addge	r2, r2, r1
 800a118:	4442      	addlt	r2, r8
 800a11a:	9203      	str	r2, [sp, #12]
 800a11c:	b153      	cbz	r3, 800a134 <_vfiprintf_r+0x468>
 800a11e:	9805      	ldr	r0, [sp, #20]
 800a120:	aa0e      	add	r2, sp, #56	; 0x38
 800a122:	4659      	mov	r1, fp
 800a124:	f000 fd80 	bl	800ac28 <__sfvwrite_r>
 800a128:	2300      	movs	r3, #0
 800a12a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800a12e:	2800      	cmp	r0, #0
 800a130:	f47f af6b 	bne.w	800a00a <_vfiprintf_r+0x33e>
 800a134:	2300      	movs	r3, #0
 800a136:	930f      	str	r3, [sp, #60]	; 0x3c
 800a138:	7833      	ldrb	r3, [r6, #0]
 800a13a:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f47f adf7 	bne.w	8009d32 <_vfiprintf_r+0x66>
 800a144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a146:	2b00      	cmp	r3, #0
 800a148:	f040 8460 	bne.w	800aa0c <_vfiprintf_r+0xd40>
 800a14c:	2300      	movs	r3, #0
 800a14e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a150:	e75b      	b.n	800a00a <_vfiprintf_r+0x33e>
 800a152:	0599      	lsls	r1, r3, #22
 800a154:	f53f af60 	bmi.w	800a018 <_vfiprintf_r+0x34c>
 800a158:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 800a15c:	f001 fa9b 	bl	800b696 <__retarget_lock_release_recursive>
 800a160:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800a164:	e758      	b.n	800a018 <_vfiprintf_r+0x34c>
 800a166:	9904      	ldr	r1, [sp, #16]
 800a168:	f015 0210 	ands.w	r2, r5, #16
 800a16c:	f101 0304 	add.w	r3, r1, #4
 800a170:	f040 8354 	bne.w	800a81c <_vfiprintf_r+0xb50>
 800a174:	f015 0140 	ands.w	r1, r5, #64	; 0x40
 800a178:	f000 841e 	beq.w	800a9b8 <_vfiprintf_r+0xcec>
 800a17c:	9904      	ldr	r1, [sp, #16]
 800a17e:	9304      	str	r3, [sp, #16]
 800a180:	880f      	ldrh	r7, [r1, #0]
 800a182:	4690      	mov	r8, r2
 800a184:	e6d9      	b.n	8009f3a <_vfiprintf_r+0x26e>
 800a186:	9a04      	ldr	r2, [sp, #16]
 800a188:	06ec      	lsls	r4, r5, #27
 800a18a:	f102 0304 	add.w	r3, r2, #4
 800a18e:	d43a      	bmi.n	800a206 <_vfiprintf_r+0x53a>
 800a190:	0668      	lsls	r0, r5, #25
 800a192:	9a04      	ldr	r2, [sp, #16]
 800a194:	d534      	bpl.n	800a200 <_vfiprintf_r+0x534>
 800a196:	f9b2 7000 	ldrsh.w	r7, [r2]
 800a19a:	9304      	str	r3, [sp, #16]
 800a19c:	ea4f 78e7 	mov.w	r8, r7, asr #31
 800a1a0:	4643      	mov	r3, r8
 800a1a2:	e67c      	b.n	8009e9e <_vfiprintf_r+0x1d2>
 800a1a4:	9f04      	ldr	r7, [sp, #16]
 800a1a6:	9b00      	ldr	r3, [sp, #0]
 800a1a8:	f857 4b04 	ldr.w	r4, [r7], #4
 800a1ac:	f04f 0800 	mov.w	r8, #0
 800a1b0:	f88d 8033 	strb.w	r8, [sp, #51]	; 0x33
 800a1b4:	2c00      	cmp	r4, #0
 800a1b6:	f000 83d9 	beq.w	800a96c <_vfiprintf_r+0xca0>
 800a1ba:	1c59      	adds	r1, r3, #1
 800a1bc:	f000 8392 	beq.w	800a8e4 <_vfiprintf_r+0xc18>
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	4641      	mov	r1, r8
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f7f6 f86b 	bl	80002a0 <memchr>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	f000 8410 	beq.w	800a9f0 <_vfiprintf_r+0xd24>
 800a1d0:	1b03      	subs	r3, r0, r4
 800a1d2:	9301      	str	r3, [sp, #4]
 800a1d4:	9704      	str	r7, [sp, #16]
 800a1d6:	f8cd 8000 	str.w	r8, [sp]
 800a1da:	e6ce      	b.n	8009f7a <_vfiprintf_r+0x2ae>
 800a1dc:	9f04      	ldr	r7, [sp, #16]
 800a1de:	2300      	movs	r3, #0
 800a1e0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800a1e4:	f04f 0801 	mov.w	r8, #1
 800a1e8:	f857 3b04 	ldr.w	r3, [r7], #4
 800a1ec:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800a1f0:	9704      	str	r7, [sp, #16]
 800a1f2:	f8cd 8004 	str.w	r8, [sp, #4]
 800a1f6:	ac21      	add	r4, sp, #132	; 0x84
 800a1f8:	e722      	b.n	800a040 <_vfiprintf_r+0x374>
 800a1fa:	f7fe fe29 	bl	8008e50 <__sinit>
 800a1fe:	e572      	b.n	8009ce6 <_vfiprintf_r+0x1a>
 800a200:	05a9      	lsls	r1, r5, #22
 800a202:	f100 83e3 	bmi.w	800a9cc <_vfiprintf_r+0xd00>
 800a206:	6817      	ldr	r7, [r2, #0]
 800a208:	9304      	str	r3, [sp, #16]
 800a20a:	ea4f 78e7 	mov.w	r8, r7, asr #31
 800a20e:	4643      	mov	r3, r8
 800a210:	2b00      	cmp	r3, #0
 800a212:	f6bf ae47 	bge.w	8009ea4 <_vfiprintf_r+0x1d8>
 800a216:	9a00      	ldr	r2, [sp, #0]
 800a218:	427f      	negs	r7, r7
 800a21a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800a21e:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
 800a222:	46aa      	mov	sl, r5
 800a224:	1c55      	adds	r5, r2, #1
 800a226:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800a22a:	f04f 0301 	mov.w	r3, #1
 800a22e:	f47f ae8e 	bne.w	8009f4e <_vfiprintf_r+0x282>
 800a232:	2b01      	cmp	r3, #1
 800a234:	f43f ae40 	beq.w	8009eb8 <_vfiprintf_r+0x1ec>
 800a238:	2b02      	cmp	r3, #2
 800a23a:	ac3a      	add	r4, sp, #232	; 0xe8
 800a23c:	f040 8159 	bne.w	800a4f2 <_vfiprintf_r+0x826>
 800a240:	9a07      	ldr	r2, [sp, #28]
 800a242:	f007 030f 	and.w	r3, r7, #15
 800a246:	093f      	lsrs	r7, r7, #4
 800a248:	5cd3      	ldrb	r3, [r2, r3]
 800a24a:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800a24e:	ea47 7708 	orr.w	r7, r7, r8, lsl #28
 800a252:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800a256:	ea57 0308 	orrs.w	r3, r7, r8
 800a25a:	d1f2      	bne.n	800a242 <_vfiprintf_r+0x576>
 800a25c:	ab3a      	add	r3, sp, #232	; 0xe8
 800a25e:	1b1b      	subs	r3, r3, r4
 800a260:	4655      	mov	r5, sl
 800a262:	9301      	str	r3, [sp, #4]
 800a264:	e689      	b.n	8009f7a <_vfiprintf_r+0x2ae>
 800a266:	9a04      	ldr	r2, [sp, #16]
 800a268:	f852 3b04 	ldr.w	r3, [r2], #4
 800a26c:	9204      	str	r2, [sp, #16]
 800a26e:	06aa      	lsls	r2, r5, #26
 800a270:	f100 82ce 	bmi.w	800a810 <_vfiprintf_r+0xb44>
 800a274:	06ef      	lsls	r7, r5, #27
 800a276:	f100 8375 	bmi.w	800a964 <_vfiprintf_r+0xc98>
 800a27a:	066c      	lsls	r4, r5, #25
 800a27c:	f100 83ae 	bmi.w	800a9dc <_vfiprintf_r+0xd10>
 800a280:	05a8      	lsls	r0, r5, #22
 800a282:	f140 836f 	bpl.w	800a964 <_vfiprintf_r+0xc98>
 800a286:	9a03      	ldr	r2, [sp, #12]
 800a288:	701a      	strb	r2, [r3, #0]
 800a28a:	e54e      	b.n	8009d2a <_vfiprintf_r+0x5e>
 800a28c:	7833      	ldrb	r3, [r6, #0]
 800a28e:	2b6c      	cmp	r3, #108	; 0x6c
 800a290:	bf03      	ittte	eq
 800a292:	7873      	ldrbeq	r3, [r6, #1]
 800a294:	f045 0520 	orreq.w	r5, r5, #32
 800a298:	3601      	addeq	r6, #1
 800a29a:	f045 0510 	orrne.w	r5, r5, #16
 800a29e:	e563      	b.n	8009d68 <_vfiprintf_r+0x9c>
 800a2a0:	7833      	ldrb	r3, [r6, #0]
 800a2a2:	2b68      	cmp	r3, #104	; 0x68
 800a2a4:	bf03      	ittte	eq
 800a2a6:	7873      	ldrbeq	r3, [r6, #1]
 800a2a8:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
 800a2ac:	3601      	addeq	r6, #1
 800a2ae:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
 800a2b2:	e559      	b.n	8009d68 <_vfiprintf_r+0x9c>
 800a2b4:	f045 0a10 	orr.w	sl, r5, #16
 800a2b8:	f01a 0820 	ands.w	r8, sl, #32
 800a2bc:	f000 8234 	beq.w	800a728 <_vfiprintf_r+0xa5c>
 800a2c0:	9f04      	ldr	r7, [sp, #16]
 800a2c2:	3707      	adds	r7, #7
 800a2c4:	f027 0707 	bic.w	r7, r7, #7
 800a2c8:	463b      	mov	r3, r7
 800a2ca:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800a2ce:	f853 7b08 	ldr.w	r7, [r3], #8
 800a2d2:	9304      	str	r3, [sp, #16]
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e633      	b.n	8009f40 <_vfiprintf_r+0x274>
 800a2d8:	7833      	ldrb	r3, [r6, #0]
 800a2da:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800a2de:	e543      	b.n	8009d68 <_vfiprintf_r+0x9c>
 800a2e0:	9b04      	ldr	r3, [sp, #16]
 800a2e2:	f853 7b04 	ldr.w	r7, [r3], #4
 800a2e6:	9304      	str	r3, [sp, #16]
 800a2e8:	2330      	movs	r3, #48	; 0x30
 800a2ea:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800a2ee:	2378      	movs	r3, #120	; 0x78
 800a2f0:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800a2f4:	4bc3      	ldr	r3, [pc, #780]	; (800a604 <_vfiprintf_r+0x938>)
 800a2f6:	9307      	str	r3, [sp, #28]
 800a2f8:	f045 0a02 	orr.w	sl, r5, #2
 800a2fc:	f04f 0800 	mov.w	r8, #0
 800a300:	2302      	movs	r3, #2
 800a302:	e61d      	b.n	8009f40 <_vfiprintf_r+0x274>
 800a304:	9b04      	ldr	r3, [sp, #16]
 800a306:	f853 2b04 	ldr.w	r2, [r3], #4
 800a30a:	9202      	str	r2, [sp, #8]
 800a30c:	2a00      	cmp	r2, #0
 800a30e:	f6ff ae40 	blt.w	8009f92 <_vfiprintf_r+0x2c6>
 800a312:	9304      	str	r3, [sp, #16]
 800a314:	7833      	ldrb	r3, [r6, #0]
 800a316:	e527      	b.n	8009d68 <_vfiprintf_r+0x9c>
 800a318:	7833      	ldrb	r3, [r6, #0]
 800a31a:	f045 0501 	orr.w	r5, r5, #1
 800a31e:	e523      	b.n	8009d68 <_vfiprintf_r+0x9c>
 800a320:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800a324:	7833      	ldrb	r3, [r6, #0]
 800a326:	2a00      	cmp	r2, #0
 800a328:	f47f ad1e 	bne.w	8009d68 <_vfiprintf_r+0x9c>
 800a32c:	2220      	movs	r2, #32
 800a32e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800a332:	e519      	b.n	8009d68 <_vfiprintf_r+0x9c>
 800a334:	4631      	mov	r1, r6
 800a336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a33a:	2b2a      	cmp	r3, #42	; 0x2a
 800a33c:	f000 8386 	beq.w	800aa4c <_vfiprintf_r+0xd80>
 800a340:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a344:	2a09      	cmp	r2, #9
 800a346:	460e      	mov	r6, r1
 800a348:	bf98      	it	ls
 800a34a:	2100      	movls	r1, #0
 800a34c:	f200 8358 	bhi.w	800aa00 <_vfiprintf_r+0xd34>
 800a350:	f816 3b01 	ldrb.w	r3, [r6], #1
 800a354:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a358:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a35c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a360:	2a09      	cmp	r2, #9
 800a362:	d9f5      	bls.n	800a350 <_vfiprintf_r+0x684>
 800a364:	9100      	str	r1, [sp, #0]
 800a366:	e500      	b.n	8009d6a <_vfiprintf_r+0x9e>
 800a368:	7833      	ldrb	r3, [r6, #0]
 800a36a:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
 800a36e:	e4fb      	b.n	8009d68 <_vfiprintf_r+0x9c>
 800a370:	2800      	cmp	r0, #0
 800a372:	f040 8299 	bne.w	800a8a8 <_vfiprintf_r+0xbdc>
 800a376:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800a37a:	2a00      	cmp	r2, #0
 800a37c:	f000 828a 	beq.w	800a894 <_vfiprintf_r+0xbc8>
 800a380:	2101      	movs	r1, #1
 800a382:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a386:	9112      	str	r1, [sp, #72]	; 0x48
 800a388:	9211      	str	r2, [sp, #68]	; 0x44
 800a38a:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a38e:	4608      	mov	r0, r1
 800a390:	460a      	mov	r2, r1
 800a392:	f109 0908 	add.w	r9, r9, #8
 800a396:	3101      	adds	r1, #1
 800a398:	9b06      	ldr	r3, [sp, #24]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f43f ae92 	beq.w	800a0c4 <_vfiprintf_r+0x3f8>
 800a3a0:	ab0d      	add	r3, sp, #52	; 0x34
 800a3a2:	3002      	adds	r0, #2
 800a3a4:	f8c9 3000 	str.w	r3, [r9]
 800a3a8:	2907      	cmp	r1, #7
 800a3aa:	f04f 0302 	mov.w	r3, #2
 800a3ae:	e9cd 100f 	strd	r1, r0, [sp, #60]	; 0x3c
 800a3b2:	f8c9 3004 	str.w	r3, [r9, #4]
 800a3b6:	f340 81ab 	ble.w	800a710 <_vfiprintf_r+0xa44>
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	f040 8128 	bne.w	800a610 <_vfiprintf_r+0x944>
 800a3c0:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
 800a3c4:	f04f 0101 	mov.w	r1, #1
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a3ce:	f47f ae7d 	bne.w	800a0cc <_vfiprintf_r+0x400>
 800a3d2:	9b02      	ldr	r3, [sp, #8]
 800a3d4:	eba3 0708 	sub.w	r7, r3, r8
 800a3d8:	2f00      	cmp	r7, #0
 800a3da:	f77f ae77 	ble.w	800a0cc <_vfiprintf_r+0x400>
 800a3de:	2f10      	cmp	r7, #16
 800a3e0:	f340 8321 	ble.w	800aa26 <_vfiprintf_r+0xd5a>
 800a3e4:	4649      	mov	r1, r9
 800a3e6:	f04f 0a10 	mov.w	sl, #16
 800a3ea:	46b9      	mov	r9, r7
 800a3ec:	4637      	mov	r7, r6
 800a3ee:	462e      	mov	r6, r5
 800a3f0:	4625      	mov	r5, r4
 800a3f2:	9c05      	ldr	r4, [sp, #20]
 800a3f4:	e008      	b.n	800a408 <_vfiprintf_r+0x73c>
 800a3f6:	f102 0c02 	add.w	ip, r2, #2
 800a3fa:	3108      	adds	r1, #8
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	f1a9 0910 	sub.w	r9, r9, #16
 800a402:	f1b9 0f10 	cmp.w	r9, #16
 800a406:	dd16      	ble.n	800a436 <_vfiprintf_r+0x76a>
 800a408:	1c53      	adds	r3, r2, #1
 800a40a:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 800a608 <_vfiprintf_r+0x93c>
 800a40e:	3010      	adds	r0, #16
 800a410:	2b07      	cmp	r3, #7
 800a412:	e9c1 ca00 	strd	ip, sl, [r1]
 800a416:	e9cd 300f 	strd	r3, r0, [sp, #60]	; 0x3c
 800a41a:	ddec      	ble.n	800a3f6 <_vfiprintf_r+0x72a>
 800a41c:	aa0e      	add	r2, sp, #56	; 0x38
 800a41e:	2800      	cmp	r0, #0
 800a420:	f040 80e1 	bne.w	800a5e6 <_vfiprintf_r+0x91a>
 800a424:	f1a9 0910 	sub.w	r9, r9, #16
 800a428:	f1b9 0f10 	cmp.w	r9, #16
 800a42c:	f04f 0c01 	mov.w	ip, #1
 800a430:	4602      	mov	r2, r0
 800a432:	a911      	add	r1, sp, #68	; 0x44
 800a434:	dce8      	bgt.n	800a408 <_vfiprintf_r+0x73c>
 800a436:	462c      	mov	r4, r5
 800a438:	4635      	mov	r5, r6
 800a43a:	463e      	mov	r6, r7
 800a43c:	464f      	mov	r7, r9
 800a43e:	4689      	mov	r9, r1
 800a440:	4b71      	ldr	r3, [pc, #452]	; (800a608 <_vfiprintf_r+0x93c>)
 800a442:	f8c9 7004 	str.w	r7, [r9, #4]
 800a446:	4438      	add	r0, r7
 800a448:	f1bc 0f07 	cmp.w	ip, #7
 800a44c:	e9cd c00f 	strd	ip, r0, [sp, #60]	; 0x3c
 800a450:	f8c9 3000 	str.w	r3, [r9]
 800a454:	f300 81bb 	bgt.w	800a7ce <_vfiprintf_r+0xb02>
 800a458:	e9dd 3700 	ldrd	r3, r7, [sp]
 800a45c:	1bdf      	subs	r7, r3, r7
 800a45e:	2f00      	cmp	r7, #0
 800a460:	f109 0908 	add.w	r9, r9, #8
 800a464:	f10c 0101 	add.w	r1, ip, #1
 800a468:	4662      	mov	r2, ip
 800a46a:	f77f ae35 	ble.w	800a0d8 <_vfiprintf_r+0x40c>
 800a46e:	2f10      	cmp	r7, #16
 800a470:	dd31      	ble.n	800a4d6 <_vfiprintf_r+0x80a>
 800a472:	4633      	mov	r3, r6
 800a474:	9400      	str	r4, [sp, #0]
 800a476:	462e      	mov	r6, r5
 800a478:	9c05      	ldr	r4, [sp, #20]
 800a47a:	465d      	mov	r5, fp
 800a47c:	f04f 0a10 	mov.w	sl, #16
 800a480:	46bb      	mov	fp, r7
 800a482:	461f      	mov	r7, r3
 800a484:	e009      	b.n	800a49a <_vfiprintf_r+0x7ce>
 800a486:	f102 0c02 	add.w	ip, r2, #2
 800a48a:	f109 0908 	add.w	r9, r9, #8
 800a48e:	461a      	mov	r2, r3
 800a490:	f1ab 0b10 	sub.w	fp, fp, #16
 800a494:	f1bb 0f10 	cmp.w	fp, #16
 800a498:	dd16      	ble.n	800a4c8 <_vfiprintf_r+0x7fc>
 800a49a:	1c53      	adds	r3, r2, #1
 800a49c:	495a      	ldr	r1, [pc, #360]	; (800a608 <_vfiprintf_r+0x93c>)
 800a49e:	3010      	adds	r0, #16
 800a4a0:	2b07      	cmp	r3, #7
 800a4a2:	e9c9 1a00 	strd	r1, sl, [r9]
 800a4a6:	e9cd 300f 	strd	r3, r0, [sp, #60]	; 0x3c
 800a4aa:	ddec      	ble.n	800a486 <_vfiprintf_r+0x7ba>
 800a4ac:	aa0e      	add	r2, sp, #56	; 0x38
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	f47f ad9b 	bne.w	8009fea <_vfiprintf_r+0x31e>
 800a4b4:	f1ab 0b10 	sub.w	fp, fp, #16
 800a4b8:	f1bb 0f10 	cmp.w	fp, #16
 800a4bc:	f04f 0c01 	mov.w	ip, #1
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a4c6:	dce8      	bgt.n	800a49a <_vfiprintf_r+0x7ce>
 800a4c8:	463b      	mov	r3, r7
 800a4ca:	9c00      	ldr	r4, [sp, #0]
 800a4cc:	465f      	mov	r7, fp
 800a4ce:	4661      	mov	r1, ip
 800a4d0:	46ab      	mov	fp, r5
 800a4d2:	4635      	mov	r5, r6
 800a4d4:	461e      	mov	r6, r3
 800a4d6:	4b4c      	ldr	r3, [pc, #304]	; (800a608 <_vfiprintf_r+0x93c>)
 800a4d8:	f8c9 7004 	str.w	r7, [r9, #4]
 800a4dc:	4438      	add	r0, r7
 800a4de:	2907      	cmp	r1, #7
 800a4e0:	e9cd 100f 	strd	r1, r0, [sp, #60]	; 0x3c
 800a4e4:	f8c9 3000 	str.w	r3, [r9]
 800a4e8:	dc22      	bgt.n	800a530 <_vfiprintf_r+0x864>
 800a4ea:	f109 0908 	add.w	r9, r9, #8
 800a4ee:	3101      	adds	r1, #1
 800a4f0:	e5f2      	b.n	800a0d8 <_vfiprintf_r+0x40c>
 800a4f2:	f007 0307 	and.w	r3, r7, #7
 800a4f6:	08ff      	lsrs	r7, r7, #3
 800a4f8:	ea47 7748 	orr.w	r7, r7, r8, lsl #29
 800a4fc:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 800a500:	3330      	adds	r3, #48	; 0x30
 800a502:	ea57 0108 	orrs.w	r1, r7, r8
 800a506:	4622      	mov	r2, r4
 800a508:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800a50c:	d1f1      	bne.n	800a4f2 <_vfiprintf_r+0x826>
 800a50e:	f01a 0f01 	tst.w	sl, #1
 800a512:	f43f aea3 	beq.w	800a25c <_vfiprintf_r+0x590>
 800a516:	2b30      	cmp	r3, #48	; 0x30
 800a518:	f43f aea0 	beq.w	800a25c <_vfiprintf_r+0x590>
 800a51c:	2330      	movs	r3, #48	; 0x30
 800a51e:	3a02      	subs	r2, #2
 800a520:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a524:	ab3a      	add	r3, sp, #232	; 0xe8
 800a526:	1a9b      	subs	r3, r3, r2
 800a528:	4655      	mov	r5, sl
 800a52a:	9301      	str	r3, [sp, #4]
 800a52c:	4614      	mov	r4, r2
 800a52e:	e524      	b.n	8009f7a <_vfiprintf_r+0x2ae>
 800a530:	b150      	cbz	r0, 800a548 <_vfiprintf_r+0x87c>
 800a532:	9805      	ldr	r0, [sp, #20]
 800a534:	aa0e      	add	r2, sp, #56	; 0x38
 800a536:	4659      	mov	r1, fp
 800a538:	f000 fb76 	bl	800ac28 <__sfvwrite_r>
 800a53c:	2300      	movs	r3, #0
 800a53e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800a542:	2800      	cmp	r0, #0
 800a544:	f47f ad61 	bne.w	800a00a <_vfiprintf_r+0x33e>
 800a548:	9b01      	ldr	r3, [sp, #4]
 800a54a:	9411      	str	r4, [sp, #68]	; 0x44
 800a54c:	2201      	movs	r2, #1
 800a54e:	9312      	str	r3, [sp, #72]	; 0x48
 800a550:	9310      	str	r3, [sp, #64]	; 0x40
 800a552:	920f      	str	r2, [sp, #60]	; 0x3c
 800a554:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a558:	076c      	lsls	r4, r5, #29
 800a55a:	f57f add8 	bpl.w	800a10e <_vfiprintf_r+0x442>
 800a55e:	9a02      	ldr	r2, [sp, #8]
 800a560:	eba2 0408 	sub.w	r4, r2, r8
 800a564:	2c00      	cmp	r4, #0
 800a566:	f109 0908 	add.w	r9, r9, #8
 800a56a:	f77f add0 	ble.w	800a10e <_vfiprintf_r+0x442>
 800a56e:	2c10      	cmp	r4, #16
 800a570:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a572:	f340 8249 	ble.w	800aa08 <_vfiprintf_r+0xd3c>
 800a576:	f8dd a014 	ldr.w	sl, [sp, #20]
 800a57a:	2510      	movs	r5, #16
 800a57c:	2700      	movs	r7, #0
 800a57e:	e006      	b.n	800a58e <_vfiprintf_r+0x8c2>
 800a580:	1c81      	adds	r1, r0, #2
 800a582:	f109 0908 	add.w	r9, r9, #8
 800a586:	4610      	mov	r0, r2
 800a588:	3c10      	subs	r4, #16
 800a58a:	2c10      	cmp	r4, #16
 800a58c:	dd14      	ble.n	800a5b8 <_vfiprintf_r+0x8ec>
 800a58e:	1c42      	adds	r2, r0, #1
 800a590:	491e      	ldr	r1, [pc, #120]	; (800a60c <_vfiprintf_r+0x940>)
 800a592:	3310      	adds	r3, #16
 800a594:	2a07      	cmp	r2, #7
 800a596:	e9c9 1500 	strd	r1, r5, [r9]
 800a59a:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
 800a59e:	ddef      	ble.n	800a580 <_vfiprintf_r+0x8b4>
 800a5a0:	aa0e      	add	r2, sp, #56	; 0x38
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f040 809f 	bne.w	800a6e6 <_vfiprintf_r+0xa1a>
 800a5a8:	3c10      	subs	r4, #16
 800a5aa:	2c10      	cmp	r4, #16
 800a5ac:	f04f 0101 	mov.w	r1, #1
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a5b6:	dcea      	bgt.n	800a58e <_vfiprintf_r+0x8c2>
 800a5b8:	460a      	mov	r2, r1
 800a5ba:	4914      	ldr	r1, [pc, #80]	; (800a60c <_vfiprintf_r+0x940>)
 800a5bc:	f8c9 4004 	str.w	r4, [r9, #4]
 800a5c0:	4423      	add	r3, r4
 800a5c2:	2a07      	cmp	r2, #7
 800a5c4:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
 800a5c8:	f8c9 1000 	str.w	r1, [r9]
 800a5cc:	f77f ad9f 	ble.w	800a10e <_vfiprintf_r+0x442>
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f040 817a 	bne.w	800a8ca <_vfiprintf_r+0xbfe>
 800a5d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5da:	4542      	cmp	r2, r8
 800a5dc:	bfac      	ite	ge
 800a5de:	189b      	addge	r3, r3, r2
 800a5e0:	4443      	addlt	r3, r8
 800a5e2:	9303      	str	r3, [sp, #12]
 800a5e4:	e5a6      	b.n	800a134 <_vfiprintf_r+0x468>
 800a5e6:	4659      	mov	r1, fp
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	f000 fb1d 	bl	800ac28 <__sfvwrite_r>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800a5f4:	f04f 0c01 	mov.w	ip, #1
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	f47f ad05 	bne.w	800a00a <_vfiprintf_r+0x33e>
 800a600:	a911      	add	r1, sp, #68	; 0x44
 800a602:	e6fc      	b.n	800a3fe <_vfiprintf_r+0x732>
 800a604:	0800c930 	.word	0x0800c930
 800a608:	0800cac4 	.word	0x0800cac4
 800a60c:	0800cab4 	.word	0x0800cab4
 800a610:	aa0e      	add	r2, sp, #56	; 0x38
 800a612:	9805      	ldr	r0, [sp, #20]
 800a614:	4659      	mov	r1, fp
 800a616:	f000 fb07 	bl	800ac28 <__sfvwrite_r>
 800a61a:	2300      	movs	r3, #0
 800a61c:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800a620:	4602      	mov	r2, r0
 800a622:	2800      	cmp	r0, #0
 800a624:	f47f acf1 	bne.w	800a00a <_vfiprintf_r+0x33e>
 800a628:	2101      	movs	r1, #1
 800a62a:	4610      	mov	r0, r2
 800a62c:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a630:	e548      	b.n	800a0c4 <_vfiprintf_r+0x3f8>
 800a632:	9805      	ldr	r0, [sp, #20]
 800a634:	aa0e      	add	r2, sp, #56	; 0x38
 800a636:	4659      	mov	r1, fp
 800a638:	f000 faf6 	bl	800ac28 <__sfvwrite_r>
 800a63c:	2300      	movs	r3, #0
 800a63e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800a642:	2800      	cmp	r0, #0
 800a644:	f43f ad57 	beq.w	800a0f6 <_vfiprintf_r+0x42a>
 800a648:	e4df      	b.n	800a00a <_vfiprintf_r+0x33e>
 800a64a:	46aa      	mov	sl, r5
 800a64c:	e5f1      	b.n	800a232 <_vfiprintf_r+0x566>
 800a64e:	2f10      	cmp	r7, #16
 800a650:	f340 81d4 	ble.w	800a9fc <_vfiprintf_r+0xd30>
 800a654:	46a6      	mov	lr, r4
 800a656:	950b      	str	r5, [sp, #44]	; 0x2c
 800a658:	4654      	mov	r4, sl
 800a65a:	9d05      	ldr	r5, [sp, #20]
 800a65c:	2310      	movs	r3, #16
 800a65e:	46f2      	mov	sl, lr
 800a660:	e008      	b.n	800a674 <_vfiprintf_r+0x9a8>
 800a662:	f102 0e02 	add.w	lr, r2, #2
 800a666:	f109 0908 	add.w	r9, r9, #8
 800a66a:	460a      	mov	r2, r1
 800a66c:	3f10      	subs	r7, #16
 800a66e:	2f10      	cmp	r7, #16
 800a670:	dd14      	ble.n	800a69c <_vfiprintf_r+0x9d0>
 800a672:	1c51      	adds	r1, r2, #1
 800a674:	f8df c308 	ldr.w	ip, [pc, #776]	; 800a980 <_vfiprintf_r+0xcb4>
 800a678:	3010      	adds	r0, #16
 800a67a:	2907      	cmp	r1, #7
 800a67c:	e9c9 c300 	strd	ip, r3, [r9]
 800a680:	e9cd 100f 	strd	r1, r0, [sp, #60]	; 0x3c
 800a684:	dded      	ble.n	800a662 <_vfiprintf_r+0x996>
 800a686:	aa0e      	add	r2, sp, #56	; 0x38
 800a688:	4659      	mov	r1, fp
 800a68a:	b9e8      	cbnz	r0, 800a6c8 <_vfiprintf_r+0x9fc>
 800a68c:	3f10      	subs	r7, #16
 800a68e:	2f10      	cmp	r7, #16
 800a690:	4602      	mov	r2, r0
 800a692:	f04f 0e01 	mov.w	lr, #1
 800a696:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a69a:	dcea      	bgt.n	800a672 <_vfiprintf_r+0x9a6>
 800a69c:	4653      	mov	r3, sl
 800a69e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a6a0:	46a2      	mov	sl, r4
 800a6a2:	461c      	mov	r4, r3
 800a6a4:	4bb6      	ldr	r3, [pc, #728]	; (800a980 <_vfiprintf_r+0xcb4>)
 800a6a6:	f8c9 7004 	str.w	r7, [r9, #4]
 800a6aa:	4438      	add	r0, r7
 800a6ac:	f1be 0f07 	cmp.w	lr, #7
 800a6b0:	e9cd e00f 	strd	lr, r0, [sp, #60]	; 0x3c
 800a6b4:	f8c9 3000 	str.w	r3, [r9]
 800a6b8:	f73f ae5a 	bgt.w	800a370 <_vfiprintf_r+0x6a4>
 800a6bc:	f109 0908 	add.w	r9, r9, #8
 800a6c0:	f10e 0101 	add.w	r1, lr, #1
 800a6c4:	4672      	mov	r2, lr
 800a6c6:	e4d1      	b.n	800a06c <_vfiprintf_r+0x3a0>
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	f000 faad 	bl	800ac28 <__sfvwrite_r>
 800a6ce:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a6d2:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800a6d6:	f04f 0e01 	mov.w	lr, #1
 800a6da:	4602      	mov	r2, r0
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	f47f ac94 	bne.w	800a00a <_vfiprintf_r+0x33e>
 800a6e2:	2310      	movs	r3, #16
 800a6e4:	e7c2      	b.n	800a66c <_vfiprintf_r+0x9a0>
 800a6e6:	4659      	mov	r1, fp
 800a6e8:	4650      	mov	r0, sl
 800a6ea:	f000 fa9d 	bl	800ac28 <__sfvwrite_r>
 800a6ee:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a6f2:	e9cd 770f 	strd	r7, r7, [sp, #60]	; 0x3c
 800a6f6:	2101      	movs	r1, #1
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	f47f ac86 	bne.w	800a00a <_vfiprintf_r+0x33e>
 800a6fe:	4603      	mov	r3, r0
 800a700:	e742      	b.n	800a588 <_vfiprintf_r+0x8bc>
 800a702:	2002      	movs	r0, #2
 800a704:	ab0d      	add	r3, sp, #52	; 0x34
 800a706:	9012      	str	r0, [sp, #72]	; 0x48
 800a708:	9311      	str	r3, [sp, #68]	; 0x44
 800a70a:	2101      	movs	r1, #1
 800a70c:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a710:	460a      	mov	r2, r1
 800a712:	e4d4      	b.n	800a0be <_vfiprintf_r+0x3f2>
 800a714:	9b00      	ldr	r3, [sp, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	f47f abd3 	bne.w	8009ec2 <_vfiprintf_r+0x1f6>
 800a71c:	4655      	mov	r5, sl
 800a71e:	2300      	movs	r3, #0
 800a720:	e9cd 3300 	strd	r3, r3, [sp]
 800a724:	ac3a      	add	r4, sp, #232	; 0xe8
 800a726:	e428      	b.n	8009f7a <_vfiprintf_r+0x2ae>
 800a728:	9904      	ldr	r1, [sp, #16]
 800a72a:	f01a 0210 	ands.w	r2, sl, #16
 800a72e:	f101 0304 	add.w	r3, r1, #4
 800a732:	d15b      	bne.n	800a7ec <_vfiprintf_r+0xb20>
 800a734:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 800a738:	f000 8133 	beq.w	800a9a2 <_vfiprintf_r+0xcd6>
 800a73c:	9904      	ldr	r1, [sp, #16]
 800a73e:	9304      	str	r3, [sp, #16]
 800a740:	880f      	ldrh	r7, [r1, #0]
 800a742:	4690      	mov	r8, r2
 800a744:	2301      	movs	r3, #1
 800a746:	f7ff bbfb 	b.w	8009f40 <_vfiprintf_r+0x274>
 800a74a:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 800a74e:	f8cd a004 	str.w	sl, [sp, #4]
 800a752:	f8cd 9018 	str.w	r9, [sp, #24]
 800a756:	46b2      	mov	sl, r6
 800a758:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a75c:	2500      	movs	r5, #0
 800a75e:	ac3a      	add	r4, sp, #232	; 0xe8
 800a760:	461e      	mov	r6, r3
 800a762:	e008      	b.n	800a776 <_vfiprintf_r+0xaaa>
 800a764:	4641      	mov	r1, r8
 800a766:	f7f6 f9b9 	bl	8000adc <__aeabi_uldivmod>
 800a76a:	2f0a      	cmp	r7, #10
 800a76c:	f178 0300 	sbcs.w	r3, r8, #0
 800a770:	d31d      	bcc.n	800a7ae <_vfiprintf_r+0xae2>
 800a772:	4607      	mov	r7, r0
 800a774:	4688      	mov	r8, r1
 800a776:	4638      	mov	r0, r7
 800a778:	4641      	mov	r1, r8
 800a77a:	220a      	movs	r2, #10
 800a77c:	2300      	movs	r3, #0
 800a77e:	f7f6 f9ad 	bl	8000adc <__aeabi_uldivmod>
 800a782:	4611      	mov	r1, r2
 800a784:	3130      	adds	r1, #48	; 0x30
 800a786:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a78a:	4638      	mov	r0, r7
 800a78c:	220a      	movs	r2, #10
 800a78e:	2300      	movs	r3, #0
 800a790:	3c01      	subs	r4, #1
 800a792:	3501      	adds	r5, #1
 800a794:	2e00      	cmp	r6, #0
 800a796:	d0e5      	beq.n	800a764 <_vfiprintf_r+0xa98>
 800a798:	f899 1000 	ldrb.w	r1, [r9]
 800a79c:	42a9      	cmp	r1, r5
 800a79e:	d1e1      	bne.n	800a764 <_vfiprintf_r+0xa98>
 800a7a0:	2dff      	cmp	r5, #255	; 0xff
 800a7a2:	d0df      	beq.n	800a764 <_vfiprintf_r+0xa98>
 800a7a4:	2f0a      	cmp	r7, #10
 800a7a6:	f178 0300 	sbcs.w	r3, r8, #0
 800a7aa:	f080 80b6 	bcs.w	800a91a <_vfiprintf_r+0xc4e>
 800a7ae:	4656      	mov	r6, sl
 800a7b0:	ab3a      	add	r3, sp, #232	; 0xe8
 800a7b2:	f8dd a004 	ldr.w	sl, [sp, #4]
 800a7b6:	f8cd 9020 	str.w	r9, [sp, #32]
 800a7ba:	1b1b      	subs	r3, r3, r4
 800a7bc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800a7c0:	9301      	str	r3, [sp, #4]
 800a7c2:	4655      	mov	r5, sl
 800a7c4:	f7ff bbd9 	b.w	8009f7a <_vfiprintf_r+0x2ae>
 800a7c8:	ac3a      	add	r4, sp, #232	; 0xe8
 800a7ca:	f7ff bbd6 	b.w	8009f7a <_vfiprintf_r+0x2ae>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	f040 8091 	bne.w	800a8f6 <_vfiprintf_r+0xc2a>
 800a7d4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a7d8:	1a9f      	subs	r7, r3, r2
 800a7da:	2f00      	cmp	r7, #0
 800a7dc:	f77f aeb4 	ble.w	800a548 <_vfiprintf_r+0x87c>
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	2101      	movs	r1, #1
 800a7e6:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a7ea:	e640      	b.n	800a46e <_vfiprintf_r+0x7a2>
 800a7ec:	9304      	str	r3, [sp, #16]
 800a7ee:	680f      	ldr	r7, [r1, #0]
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	f7ff bba5 	b.w	8009f40 <_vfiprintf_r+0x274>
 800a7f6:	9a08      	ldr	r2, [sp, #32]
 800a7f8:	7833      	ldrb	r3, [r6, #0]
 800a7fa:	2a00      	cmp	r2, #0
 800a7fc:	f43f aab4 	beq.w	8009d68 <_vfiprintf_r+0x9c>
 800a800:	7812      	ldrb	r2, [r2, #0]
 800a802:	2a00      	cmp	r2, #0
 800a804:	f43f aab0 	beq.w	8009d68 <_vfiprintf_r+0x9c>
 800a808:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 800a80c:	f7ff baac 	b.w	8009d68 <_vfiprintf_r+0x9c>
 800a810:	9a03      	ldr	r2, [sp, #12]
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	17d2      	asrs	r2, r2, #31
 800a816:	605a      	str	r2, [r3, #4]
 800a818:	f7ff ba87 	b.w	8009d2a <_vfiprintf_r+0x5e>
 800a81c:	680f      	ldr	r7, [r1, #0]
 800a81e:	9304      	str	r3, [sp, #16]
 800a820:	f7ff bb8b 	b.w	8009f3a <_vfiprintf_r+0x26e>
 800a824:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 800a828:	f000 ff2f 	bl	800b68a <__retarget_lock_acquire_recursive>
 800a82c:	f8bb 200c 	ldrh.w	r2, [fp, #12]
 800a830:	f7ff ba62 	b.w	8009cf8 <_vfiprintf_r+0x2c>
 800a834:	4a53      	ldr	r2, [pc, #332]	; (800a984 <_vfiprintf_r+0xcb8>)
 800a836:	9207      	str	r2, [sp, #28]
 800a838:	f015 0820 	ands.w	r8, r5, #32
 800a83c:	d021      	beq.n	800a882 <_vfiprintf_r+0xbb6>
 800a83e:	9f04      	ldr	r7, [sp, #16]
 800a840:	3707      	adds	r7, #7
 800a842:	f027 0707 	bic.w	r7, r7, #7
 800a846:	463a      	mov	r2, r7
 800a848:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800a84c:	f852 7b08 	ldr.w	r7, [r2], #8
 800a850:	9204      	str	r2, [sp, #16]
 800a852:	07ea      	lsls	r2, r5, #31
 800a854:	d509      	bpl.n	800a86a <_vfiprintf_r+0xb9e>
 800a856:	ea57 0208 	orrs.w	r2, r7, r8
 800a85a:	d006      	beq.n	800a86a <_vfiprintf_r+0xb9e>
 800a85c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800a860:	2330      	movs	r3, #48	; 0x30
 800a862:	f045 0502 	orr.w	r5, r5, #2
 800a866:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800a86a:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
 800a86e:	2302      	movs	r3, #2
 800a870:	f7ff bb66 	b.w	8009f40 <_vfiprintf_r+0x274>
 800a874:	46aa      	mov	sl, r5
 800a876:	e51f      	b.n	800a2b8 <_vfiprintf_r+0x5ec>
 800a878:	4a43      	ldr	r2, [pc, #268]	; (800a988 <_vfiprintf_r+0xcbc>)
 800a87a:	9207      	str	r2, [sp, #28]
 800a87c:	f015 0820 	ands.w	r8, r5, #32
 800a880:	d1dd      	bne.n	800a83e <_vfiprintf_r+0xb72>
 800a882:	9804      	ldr	r0, [sp, #16]
 800a884:	f015 0110 	ands.w	r1, r5, #16
 800a888:	f100 0204 	add.w	r2, r0, #4
 800a88c:	d059      	beq.n	800a942 <_vfiprintf_r+0xc76>
 800a88e:	6807      	ldr	r7, [r0, #0]
 800a890:	9204      	str	r2, [sp, #16]
 800a892:	e7de      	b.n	800a852 <_vfiprintf_r+0xb86>
 800a894:	9b06      	ldr	r3, [sp, #24]
 800a896:	2b00      	cmp	r3, #0
 800a898:	f47f af33 	bne.w	800a702 <_vfiprintf_r+0xa36>
 800a89c:	461a      	mov	r2, r3
 800a89e:	4618      	mov	r0, r3
 800a8a0:	2101      	movs	r1, #1
 800a8a2:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a8a6:	e411      	b.n	800a0cc <_vfiprintf_r+0x400>
 800a8a8:	aa0e      	add	r2, sp, #56	; 0x38
 800a8aa:	9805      	ldr	r0, [sp, #20]
 800a8ac:	4659      	mov	r1, fp
 800a8ae:	f000 f9bb 	bl	800ac28 <__sfvwrite_r>
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	e9cd 220f 	strd	r2, r2, [sp, #60]	; 0x3c
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	f47f aba6 	bne.w	800a00a <_vfiprintf_r+0x33e>
 800a8be:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800a8c2:	2a00      	cmp	r2, #0
 800a8c4:	f47f ad5c 	bne.w	800a380 <_vfiprintf_r+0x6b4>
 800a8c8:	e7e4      	b.n	800a894 <_vfiprintf_r+0xbc8>
 800a8ca:	9805      	ldr	r0, [sp, #20]
 800a8cc:	aa0e      	add	r2, sp, #56	; 0x38
 800a8ce:	4659      	mov	r1, fp
 800a8d0:	f000 f9aa 	bl	800ac28 <__sfvwrite_r>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	f43f ae7b 	beq.w	800a5d6 <_vfiprintf_r+0x90a>
 800a8e0:	f7ff bb93 	b.w	800a00a <_vfiprintf_r+0x33e>
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	9704      	str	r7, [sp, #16]
 800a8e8:	f8cd 8000 	str.w	r8, [sp]
 800a8ec:	f7f5 fc68 	bl	80001c0 <strlen>
 800a8f0:	9001      	str	r0, [sp, #4]
 800a8f2:	f7ff bb42 	b.w	8009f7a <_vfiprintf_r+0x2ae>
 800a8f6:	9805      	ldr	r0, [sp, #20]
 800a8f8:	aa0e      	add	r2, sp, #56	; 0x38
 800a8fa:	4659      	mov	r1, fp
 800a8fc:	f000 f994 	bl	800ac28 <__sfvwrite_r>
 800a900:	2300      	movs	r3, #0
 800a902:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800a906:	2800      	cmp	r0, #0
 800a908:	f47f ab7f 	bne.w	800a00a <_vfiprintf_r+0x33e>
 800a90c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a910:	1a9f      	subs	r7, r3, r2
 800a912:	2f00      	cmp	r7, #0
 800a914:	f77f ae18 	ble.w	800a548 <_vfiprintf_r+0x87c>
 800a918:	e762      	b.n	800a7e0 <_vfiprintf_r+0xb14>
 800a91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a91c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a91e:	1ae4      	subs	r4, r4, r3
 800a920:	461a      	mov	r2, r3
 800a922:	4620      	mov	r0, r4
 800a924:	f7ff f916 	bl	8009b54 <strncpy>
 800a928:	f899 3001 	ldrb.w	r3, [r9, #1]
 800a92c:	b10b      	cbz	r3, 800a932 <_vfiprintf_r+0xc66>
 800a92e:	f109 0901 	add.w	r9, r9, #1
 800a932:	4638      	mov	r0, r7
 800a934:	4641      	mov	r1, r8
 800a936:	220a      	movs	r2, #10
 800a938:	2300      	movs	r3, #0
 800a93a:	2500      	movs	r5, #0
 800a93c:	f7f6 f8ce 	bl	8000adc <__aeabi_uldivmod>
 800a940:	e717      	b.n	800a772 <_vfiprintf_r+0xaa6>
 800a942:	f015 0040 	ands.w	r0, r5, #64	; 0x40
 800a946:	d023      	beq.n	800a990 <_vfiprintf_r+0xcc4>
 800a948:	9804      	ldr	r0, [sp, #16]
 800a94a:	9204      	str	r2, [sp, #16]
 800a94c:	8807      	ldrh	r7, [r0, #0]
 800a94e:	4688      	mov	r8, r1
 800a950:	e77f      	b.n	800a852 <_vfiprintf_r+0xb86>
 800a952:	46aa      	mov	sl, r5
 800a954:	f7ff bab0 	b.w	8009eb8 <_vfiprintf_r+0x1ec>
 800a958:	2b01      	cmp	r3, #1
 800a95a:	46aa      	mov	sl, r5
 800a95c:	f47f ac6c 	bne.w	800a238 <_vfiprintf_r+0x56c>
 800a960:	f7ff baaf 	b.w	8009ec2 <_vfiprintf_r+0x1f6>
 800a964:	9a03      	ldr	r2, [sp, #12]
 800a966:	601a      	str	r2, [r3, #0]
 800a968:	f7ff b9df 	b.w	8009d2a <_vfiprintf_r+0x5e>
 800a96c:	2b06      	cmp	r3, #6
 800a96e:	bf28      	it	cs
 800a970:	2306      	movcs	r3, #6
 800a972:	4c06      	ldr	r4, [pc, #24]	; (800a98c <_vfiprintf_r+0xcc0>)
 800a974:	9301      	str	r3, [sp, #4]
 800a976:	9704      	str	r7, [sp, #16]
 800a978:	4698      	mov	r8, r3
 800a97a:	f7ff bb61 	b.w	800a040 <_vfiprintf_r+0x374>
 800a97e:	bf00      	nop
 800a980:	0800cab4 	.word	0x0800cab4
 800a984:	0800c944 	.word	0x0800c944
 800a988:	0800c930 	.word	0x0800c930
 800a98c:	0800c958 	.word	0x0800c958
 800a990:	9904      	ldr	r1, [sp, #16]
 800a992:	9204      	str	r2, [sp, #16]
 800a994:	f415 7800 	ands.w	r8, r5, #512	; 0x200
 800a998:	bf16      	itet	ne
 800a99a:	780f      	ldrbne	r7, [r1, #0]
 800a99c:	680f      	ldreq	r7, [r1, #0]
 800a99e:	4680      	movne	r8, r0
 800a9a0:	e757      	b.n	800a852 <_vfiprintf_r+0xb86>
 800a9a2:	9a04      	ldr	r2, [sp, #16]
 800a9a4:	9304      	str	r3, [sp, #16]
 800a9a6:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
 800a9aa:	bf16      	itet	ne
 800a9ac:	7817      	ldrbne	r7, [r2, #0]
 800a9ae:	6817      	ldreq	r7, [r2, #0]
 800a9b0:	4688      	movne	r8, r1
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	f7ff bac4 	b.w	8009f40 <_vfiprintf_r+0x274>
 800a9b8:	9a04      	ldr	r2, [sp, #16]
 800a9ba:	9304      	str	r3, [sp, #16]
 800a9bc:	f415 7800 	ands.w	r8, r5, #512	; 0x200
 800a9c0:	bf16      	itet	ne
 800a9c2:	7817      	ldrbne	r7, [r2, #0]
 800a9c4:	6817      	ldreq	r7, [r2, #0]
 800a9c6:	4688      	movne	r8, r1
 800a9c8:	f7ff bab7 	b.w	8009f3a <_vfiprintf_r+0x26e>
 800a9cc:	f992 7000 	ldrsb.w	r7, [r2]
 800a9d0:	9304      	str	r3, [sp, #16]
 800a9d2:	ea4f 78e7 	mov.w	r8, r7, asr #31
 800a9d6:	4643      	mov	r3, r8
 800a9d8:	f7ff ba61 	b.w	8009e9e <_vfiprintf_r+0x1d2>
 800a9dc:	9a03      	ldr	r2, [sp, #12]
 800a9de:	801a      	strh	r2, [r3, #0]
 800a9e0:	f7ff b9a3 	b.w	8009d2a <_vfiprintf_r+0x5e>
 800a9e4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 800a9e8:	f000 fe55 	bl	800b696 <__retarget_lock_release_recursive>
 800a9ec:	f7ff ba8c 	b.w	8009f08 <_vfiprintf_r+0x23c>
 800a9f0:	9b00      	ldr	r3, [sp, #0]
 800a9f2:	9301      	str	r3, [sp, #4]
 800a9f4:	9704      	str	r7, [sp, #16]
 800a9f6:	9000      	str	r0, [sp, #0]
 800a9f8:	f7ff babf 	b.w	8009f7a <_vfiprintf_r+0x2ae>
 800a9fc:	46e6      	mov	lr, ip
 800a9fe:	e651      	b.n	800a6a4 <_vfiprintf_r+0x9d8>
 800aa00:	2200      	movs	r2, #0
 800aa02:	9200      	str	r2, [sp, #0]
 800aa04:	f7ff b9b1 	b.w	8009d6a <_vfiprintf_r+0x9e>
 800aa08:	1c42      	adds	r2, r0, #1
 800aa0a:	e5d6      	b.n	800a5ba <_vfiprintf_r+0x8ee>
 800aa0c:	9805      	ldr	r0, [sp, #20]
 800aa0e:	aa0e      	add	r2, sp, #56	; 0x38
 800aa10:	4659      	mov	r1, fp
 800aa12:	f000 f909 	bl	800ac28 <__sfvwrite_r>
 800aa16:	2300      	movs	r3, #0
 800aa18:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	f43f ab95 	beq.w	800a14c <_vfiprintf_r+0x480>
 800aa22:	f7ff baf2 	b.w	800a00a <_vfiprintf_r+0x33e>
 800aa26:	468c      	mov	ip, r1
 800aa28:	e50a      	b.n	800a440 <_vfiprintf_r+0x774>
 800aa2a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 800aa2e:	07dc      	lsls	r4, r3, #31
 800aa30:	d407      	bmi.n	800aa42 <_vfiprintf_r+0xd76>
 800aa32:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800aa36:	0598      	lsls	r0, r3, #22
 800aa38:	d403      	bmi.n	800aa42 <_vfiprintf_r+0xd76>
 800aa3a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 800aa3e:	f000 fe2a 	bl	800b696 <__retarget_lock_release_recursive>
 800aa42:	f04f 33ff 	mov.w	r3, #4294967295
 800aa46:	9303      	str	r3, [sp, #12]
 800aa48:	f7ff bae9 	b.w	800a01e <_vfiprintf_r+0x352>
 800aa4c:	9a04      	ldr	r2, [sp, #16]
 800aa4e:	7873      	ldrb	r3, [r6, #1]
 800aa50:	460e      	mov	r6, r1
 800aa52:	f852 1b04 	ldr.w	r1, [r2], #4
 800aa56:	9204      	str	r2, [sp, #16]
 800aa58:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
 800aa5c:	9100      	str	r1, [sp, #0]
 800aa5e:	f7ff b983 	b.w	8009d68 <_vfiprintf_r+0x9c>
 800aa62:	bf00      	nop

0800aa64 <__sbprintf>:
 800aa64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa66:	461f      	mov	r7, r3
 800aa68:	898b      	ldrh	r3, [r1, #12]
 800aa6a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800aa6e:	f023 0302 	bic.w	r3, r3, #2
 800aa72:	f8ad 300c 	strh.w	r3, [sp, #12]
 800aa76:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800aa78:	9319      	str	r3, [sp, #100]	; 0x64
 800aa7a:	89cb      	ldrh	r3, [r1, #14]
 800aa7c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800aa80:	69cb      	ldr	r3, [r1, #28]
 800aa82:	9307      	str	r3, [sp, #28]
 800aa84:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800aa86:	9309      	str	r3, [sp, #36]	; 0x24
 800aa88:	ab1a      	add	r3, sp, #104	; 0x68
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	9304      	str	r3, [sp, #16]
 800aa8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa92:	4615      	mov	r5, r2
 800aa94:	4606      	mov	r6, r0
 800aa96:	9302      	str	r3, [sp, #8]
 800aa98:	9305      	str	r3, [sp, #20]
 800aa9a:	a816      	add	r0, sp, #88	; 0x58
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	9306      	str	r3, [sp, #24]
 800aaa2:	f000 fde6 	bl	800b672 <__retarget_lock_init_recursive>
 800aaa6:	462a      	mov	r2, r5
 800aaa8:	463b      	mov	r3, r7
 800aaaa:	4669      	mov	r1, sp
 800aaac:	4630      	mov	r0, r6
 800aaae:	f7ff f90d 	bl	8009ccc <_vfiprintf_r>
 800aab2:	1e05      	subs	r5, r0, #0
 800aab4:	db07      	blt.n	800aac6 <__sbprintf+0x62>
 800aab6:	4669      	mov	r1, sp
 800aab8:	4630      	mov	r0, r6
 800aaba:	f7fe f995 	bl	8008de8 <_fflush_r>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	bf18      	it	ne
 800aac2:	f04f 35ff 	movne.w	r5, #4294967295
 800aac6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800aaca:	065b      	lsls	r3, r3, #25
 800aacc:	d503      	bpl.n	800aad6 <__sbprintf+0x72>
 800aace:	89a3      	ldrh	r3, [r4, #12]
 800aad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad4:	81a3      	strh	r3, [r4, #12]
 800aad6:	9816      	ldr	r0, [sp, #88]	; 0x58
 800aad8:	f000 fdd5 	bl	800b686 <__retarget_lock_close_recursive>
 800aadc:	4628      	mov	r0, r5
 800aade:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800aae2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aae4 <_write_r>:
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	460c      	mov	r4, r1
 800aae8:	4d08      	ldr	r5, [pc, #32]	; (800ab0c <_write_r+0x28>)
 800aaea:	4684      	mov	ip, r0
 800aaec:	4611      	mov	r1, r2
 800aaee:	4620      	mov	r0, r4
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	602b      	str	r3, [r5, #0]
 800aaf6:	4664      	mov	r4, ip
 800aaf8:	f000 fda4 	bl	800b644 <_write>
 800aafc:	1c43      	adds	r3, r0, #1
 800aafe:	d000      	beq.n	800ab02 <_write_r+0x1e>
 800ab00:	bd38      	pop	{r3, r4, r5, pc}
 800ab02:	682b      	ldr	r3, [r5, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d0fb      	beq.n	800ab00 <_write_r+0x1c>
 800ab08:	6023      	str	r3, [r4, #0]
 800ab0a:	bd38      	pop	{r3, r4, r5, pc}
 800ab0c:	20000b64 	.word	0x20000b64

0800ab10 <__assert_func>:
 800ab10:	b500      	push	{lr}
 800ab12:	4c0b      	ldr	r4, [pc, #44]	; (800ab40 <__assert_func+0x30>)
 800ab14:	6825      	ldr	r5, [r4, #0]
 800ab16:	4614      	mov	r4, r2
 800ab18:	68ee      	ldr	r6, [r5, #12]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	b085      	sub	sp, #20
 800ab1e:	4603      	mov	r3, r0
 800ab20:	460d      	mov	r5, r1
 800ab22:	b14c      	cbz	r4, 800ab38 <__assert_func+0x28>
 800ab24:	4907      	ldr	r1, [pc, #28]	; (800ab44 <__assert_func+0x34>)
 800ab26:	9500      	str	r5, [sp, #0]
 800ab28:	e9cd 1401 	strd	r1, r4, [sp, #4]
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	4906      	ldr	r1, [pc, #24]	; (800ab48 <__assert_func+0x38>)
 800ab30:	f000 f850 	bl	800abd4 <fiprintf>
 800ab34:	f000 fcba 	bl	800b4ac <abort>
 800ab38:	4904      	ldr	r1, [pc, #16]	; (800ab4c <__assert_func+0x3c>)
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	e7f3      	b.n	800ab26 <__assert_func+0x16>
 800ab3e:	bf00      	nop
 800ab40:	200006ec 	.word	0x200006ec
 800ab44:	0800cad4 	.word	0x0800cad4
 800ab48:	0800cae4 	.word	0x0800cae4
 800ab4c:	0800cae0 	.word	0x0800cae0

0800ab50 <_calloc_r>:
 800ab50:	b510      	push	{r4, lr}
 800ab52:	fb02 f101 	mul.w	r1, r2, r1
 800ab56:	f7fa f9ed 	bl	8004f34 <_malloc_r>
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	b168      	cbz	r0, 800ab7a <_calloc_r+0x2a>
 800ab5e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ab62:	f022 0203 	bic.w	r2, r2, #3
 800ab66:	3a04      	subs	r2, #4
 800ab68:	2a24      	cmp	r2, #36	; 0x24
 800ab6a:	d818      	bhi.n	800ab9e <_calloc_r+0x4e>
 800ab6c:	2a13      	cmp	r2, #19
 800ab6e:	d806      	bhi.n	800ab7e <_calloc_r+0x2e>
 800ab70:	4602      	mov	r2, r0
 800ab72:	2300      	movs	r3, #0
 800ab74:	e9c2 3300 	strd	r3, r3, [r2]
 800ab78:	6093      	str	r3, [r2, #8]
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	bd10      	pop	{r4, pc}
 800ab7e:	2300      	movs	r3, #0
 800ab80:	2a1b      	cmp	r2, #27
 800ab82:	e9c0 3300 	strd	r3, r3, [r0]
 800ab86:	d90f      	bls.n	800aba8 <_calloc_r+0x58>
 800ab88:	2a24      	cmp	r2, #36	; 0x24
 800ab8a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800ab8e:	bf11      	iteee	ne
 800ab90:	f100 0210 	addne.w	r2, r0, #16
 800ab94:	6103      	streq	r3, [r0, #16]
 800ab96:	f100 0218 	addeq.w	r2, r0, #24
 800ab9a:	6143      	streq	r3, [r0, #20]
 800ab9c:	e7e9      	b.n	800ab72 <_calloc_r+0x22>
 800ab9e:	2100      	movs	r1, #0
 800aba0:	f7fa fc86 	bl	80054b0 <memset>
 800aba4:	4620      	mov	r0, r4
 800aba6:	bd10      	pop	{r4, pc}
 800aba8:	f100 0208 	add.w	r2, r0, #8
 800abac:	e7e1      	b.n	800ab72 <_calloc_r+0x22>
 800abae:	bf00      	nop

0800abb0 <_close_r>:
 800abb0:	b538      	push	{r3, r4, r5, lr}
 800abb2:	4d07      	ldr	r5, [pc, #28]	; (800abd0 <_close_r+0x20>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	4604      	mov	r4, r0
 800abb8:	4608      	mov	r0, r1
 800abba:	602a      	str	r2, [r5, #0]
 800abbc:	f000 fd46 	bl	800b64c <_close>
 800abc0:	1c43      	adds	r3, r0, #1
 800abc2:	d000      	beq.n	800abc6 <_close_r+0x16>
 800abc4:	bd38      	pop	{r3, r4, r5, pc}
 800abc6:	682b      	ldr	r3, [r5, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d0fb      	beq.n	800abc4 <_close_r+0x14>
 800abcc:	6023      	str	r3, [r4, #0]
 800abce:	bd38      	pop	{r3, r4, r5, pc}
 800abd0:	20000b64 	.word	0x20000b64

0800abd4 <fiprintf>:
 800abd4:	b40e      	push	{r1, r2, r3}
 800abd6:	b510      	push	{r4, lr}
 800abd8:	b083      	sub	sp, #12
 800abda:	ab05      	add	r3, sp, #20
 800abdc:	4c06      	ldr	r4, [pc, #24]	; (800abf8 <fiprintf+0x24>)
 800abde:	f853 2b04 	ldr.w	r2, [r3], #4
 800abe2:	9301      	str	r3, [sp, #4]
 800abe4:	4601      	mov	r1, r0
 800abe6:	6820      	ldr	r0, [r4, #0]
 800abe8:	f7ff f870 	bl	8009ccc <_vfiprintf_r>
 800abec:	b003      	add	sp, #12
 800abee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abf2:	b003      	add	sp, #12
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	200006ec 	.word	0x200006ec

0800abfc <_fstat_r>:
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	460c      	mov	r4, r1
 800ac00:	4d08      	ldr	r5, [pc, #32]	; (800ac24 <_fstat_r+0x28>)
 800ac02:	4603      	mov	r3, r0
 800ac04:	2600      	movs	r6, #0
 800ac06:	4620      	mov	r0, r4
 800ac08:	4611      	mov	r1, r2
 800ac0a:	461c      	mov	r4, r3
 800ac0c:	602e      	str	r6, [r5, #0]
 800ac0e:	f000 fd2b 	bl	800b668 <_fstat>
 800ac12:	1c43      	adds	r3, r0, #1
 800ac14:	d000      	beq.n	800ac18 <_fstat_r+0x1c>
 800ac16:	bd70      	pop	{r4, r5, r6, pc}
 800ac18:	682b      	ldr	r3, [r5, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d0fb      	beq.n	800ac16 <_fstat_r+0x1a>
 800ac1e:	6023      	str	r3, [r4, #0]
 800ac20:	bd70      	pop	{r4, r5, r6, pc}
 800ac22:	bf00      	nop
 800ac24:	20000b64 	.word	0x20000b64

0800ac28 <__sfvwrite_r>:
 800ac28:	6893      	ldr	r3, [r2, #8]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f000 80bb 	beq.w	800ada6 <__sfvwrite_r+0x17e>
 800ac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac34:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800ac38:	fa1f fc83 	uxth.w	ip, r3
 800ac3c:	071b      	lsls	r3, r3, #28
 800ac3e:	b083      	sub	sp, #12
 800ac40:	4617      	mov	r7, r2
 800ac42:	4680      	mov	r8, r0
 800ac44:	460c      	mov	r4, r1
 800ac46:	d525      	bpl.n	800ac94 <__sfvwrite_r+0x6c>
 800ac48:	690b      	ldr	r3, [r1, #16]
 800ac4a:	b31b      	cbz	r3, 800ac94 <__sfvwrite_r+0x6c>
 800ac4c:	f01c 0302 	ands.w	r3, ip, #2
 800ac50:	683d      	ldr	r5, [r7, #0]
 800ac52:	d02e      	beq.n	800acb2 <__sfvwrite_r+0x8a>
 800ac54:	f04f 0a00 	mov.w	sl, #0
 800ac58:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 800af10 <__sfvwrite_r+0x2e8>
 800ac5c:	4656      	mov	r6, sl
 800ac5e:	455e      	cmp	r6, fp
 800ac60:	4633      	mov	r3, r6
 800ac62:	4652      	mov	r2, sl
 800ac64:	bf28      	it	cs
 800ac66:	465b      	movcs	r3, fp
 800ac68:	4640      	mov	r0, r8
 800ac6a:	2e00      	cmp	r6, #0
 800ac6c:	f000 8088 	beq.w	800ad80 <__sfvwrite_r+0x158>
 800ac70:	69e1      	ldr	r1, [r4, #28]
 800ac72:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800ac76:	47e0      	blx	ip
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	f340 808a 	ble.w	800ad92 <__sfvwrite_r+0x16a>
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	1a1b      	subs	r3, r3, r0
 800ac82:	4482      	add	sl, r0
 800ac84:	1a36      	subs	r6, r6, r0
 800ac86:	60bb      	str	r3, [r7, #8]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1e8      	bne.n	800ac5e <__sfvwrite_r+0x36>
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	b003      	add	sp, #12
 800ac90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac94:	4621      	mov	r1, r4
 800ac96:	4640      	mov	r0, r8
 800ac98:	f7fd ff1c 	bl	8008ad4 <__swsetup_r>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	f040 8134 	bne.w	800af0a <__sfvwrite_r+0x2e2>
 800aca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aca6:	683d      	ldr	r5, [r7, #0]
 800aca8:	fa1f fc83 	uxth.w	ip, r3
 800acac:	f01c 0302 	ands.w	r3, ip, #2
 800acb0:	d1d0      	bne.n	800ac54 <__sfvwrite_r+0x2c>
 800acb2:	f01c 0901 	ands.w	r9, ip, #1
 800acb6:	d178      	bne.n	800adaa <__sfvwrite_r+0x182>
 800acb8:	464e      	mov	r6, r9
 800acba:	2e00      	cmp	r6, #0
 800acbc:	d05c      	beq.n	800ad78 <__sfvwrite_r+0x150>
 800acbe:	f41c 7f00 	tst.w	ip, #512	; 0x200
 800acc2:	6820      	ldr	r0, [r4, #0]
 800acc4:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800acc8:	f000 80b2 	beq.w	800ae30 <__sfvwrite_r+0x208>
 800accc:	45b3      	cmp	fp, r6
 800acce:	465a      	mov	r2, fp
 800acd0:	f200 80e1 	bhi.w	800ae96 <__sfvwrite_r+0x26e>
 800acd4:	f41c 6f90 	tst.w	ip, #1152	; 0x480
 800acd8:	d033      	beq.n	800ad42 <__sfvwrite_r+0x11a>
 800acda:	6963      	ldr	r3, [r4, #20]
 800acdc:	6921      	ldr	r1, [r4, #16]
 800acde:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 800ace2:	eba0 0b01 	sub.w	fp, r0, r1
 800ace6:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 800acea:	f10b 0301 	add.w	r3, fp, #1
 800acee:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 800acf2:	4433      	add	r3, r6
 800acf4:	4553      	cmp	r3, sl
 800acf6:	4652      	mov	r2, sl
 800acf8:	bf84      	itt	hi
 800acfa:	469a      	movhi	sl, r3
 800acfc:	4652      	movhi	r2, sl
 800acfe:	f41c 6f80 	tst.w	ip, #1024	; 0x400
 800ad02:	f000 80e6 	beq.w	800aed2 <__sfvwrite_r+0x2aa>
 800ad06:	4611      	mov	r1, r2
 800ad08:	4640      	mov	r0, r8
 800ad0a:	f7fa f913 	bl	8004f34 <_malloc_r>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	f000 80f5 	beq.w	800aefe <__sfvwrite_r+0x2d6>
 800ad14:	465a      	mov	r2, fp
 800ad16:	6921      	ldr	r1, [r4, #16]
 800ad18:	9001      	str	r0, [sp, #4]
 800ad1a:	f7f5 ff81 	bl	8000c20 <memcpy>
 800ad1e:	89a2      	ldrh	r2, [r4, #12]
 800ad20:	9b01      	ldr	r3, [sp, #4]
 800ad22:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ad26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ad2a:	81a2      	strh	r2, [r4, #12]
 800ad2c:	eb03 000b 	add.w	r0, r3, fp
 800ad30:	6123      	str	r3, [r4, #16]
 800ad32:	ebaa 030b 	sub.w	r3, sl, fp
 800ad36:	f8c4 a014 	str.w	sl, [r4, #20]
 800ad3a:	60a3      	str	r3, [r4, #8]
 800ad3c:	6020      	str	r0, [r4, #0]
 800ad3e:	46b3      	mov	fp, r6
 800ad40:	4632      	mov	r2, r6
 800ad42:	4649      	mov	r1, r9
 800ad44:	9201      	str	r2, [sp, #4]
 800ad46:	f000 f923 	bl	800af90 <memmove>
 800ad4a:	68a3      	ldr	r3, [r4, #8]
 800ad4c:	6821      	ldr	r1, [r4, #0]
 800ad4e:	9a01      	ldr	r2, [sp, #4]
 800ad50:	eba3 030b 	sub.w	r3, r3, fp
 800ad54:	440a      	add	r2, r1
 800ad56:	46b2      	mov	sl, r6
 800ad58:	60a3      	str	r3, [r4, #8]
 800ad5a:	6022      	str	r2, [r4, #0]
 800ad5c:	2600      	movs	r6, #0
 800ad5e:	68b8      	ldr	r0, [r7, #8]
 800ad60:	eba0 000a 	sub.w	r0, r0, sl
 800ad64:	44d1      	add	r9, sl
 800ad66:	60b8      	str	r0, [r7, #8]
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	d08f      	beq.n	800ac8c <__sfvwrite_r+0x64>
 800ad6c:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 800ad70:	fa1f fc8c 	uxth.w	ip, ip
 800ad74:	2e00      	cmp	r6, #0
 800ad76:	d1a2      	bne.n	800acbe <__sfvwrite_r+0x96>
 800ad78:	e9d5 9600 	ldrd	r9, r6, [r5]
 800ad7c:	3508      	adds	r5, #8
 800ad7e:	e79c      	b.n	800acba <__sfvwrite_r+0x92>
 800ad80:	e9d5 a600 	ldrd	sl, r6, [r5]
 800ad84:	3508      	adds	r5, #8
 800ad86:	e76a      	b.n	800ac5e <__sfvwrite_r+0x36>
 800ad88:	4621      	mov	r1, r4
 800ad8a:	4640      	mov	r0, r8
 800ad8c:	f7fe f82c 	bl	8008de8 <_fflush_r>
 800ad90:	b378      	cbz	r0, 800adf2 <__sfvwrite_r+0x1ca>
 800ad92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad9e:	81a3      	strh	r3, [r4, #12]
 800ada0:	b003      	add	sp, #12
 800ada2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada6:	2000      	movs	r0, #0
 800ada8:	4770      	bx	lr
 800adaa:	461e      	mov	r6, r3
 800adac:	46aa      	mov	sl, r5
 800adae:	4699      	mov	r9, r3
 800adb0:	4618      	mov	r0, r3
 800adb2:	461d      	mov	r5, r3
 800adb4:	b34e      	cbz	r6, 800ae0a <__sfvwrite_r+0x1e2>
 800adb6:	b380      	cbz	r0, 800ae1a <__sfvwrite_r+0x1f2>
 800adb8:	464a      	mov	r2, r9
 800adba:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 800adbe:	6820      	ldr	r0, [r4, #0]
 800adc0:	42b2      	cmp	r2, r6
 800adc2:	bf28      	it	cs
 800adc4:	4632      	movcs	r2, r6
 800adc6:	4288      	cmp	r0, r1
 800adc8:	d904      	bls.n	800add4 <__sfvwrite_r+0x1ac>
 800adca:	68a1      	ldr	r1, [r4, #8]
 800adcc:	eb03 0b01 	add.w	fp, r3, r1
 800add0:	455a      	cmp	r2, fp
 800add2:	dc70      	bgt.n	800aeb6 <__sfvwrite_r+0x28e>
 800add4:	4293      	cmp	r3, r2
 800add6:	dc61      	bgt.n	800ae9c <__sfvwrite_r+0x274>
 800add8:	69e1      	ldr	r1, [r4, #28]
 800adda:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800adde:	462a      	mov	r2, r5
 800ade0:	4640      	mov	r0, r8
 800ade2:	47e0      	blx	ip
 800ade4:	f1b0 0b00 	subs.w	fp, r0, #0
 800ade8:	ddd3      	ble.n	800ad92 <__sfvwrite_r+0x16a>
 800adea:	ebb9 090b 	subs.w	r9, r9, fp
 800adee:	d0cb      	beq.n	800ad88 <__sfvwrite_r+0x160>
 800adf0:	2001      	movs	r0, #1
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	eba3 030b 	sub.w	r3, r3, fp
 800adf8:	445d      	add	r5, fp
 800adfa:	eba6 060b 	sub.w	r6, r6, fp
 800adfe:	60bb      	str	r3, [r7, #8]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f43f af43 	beq.w	800ac8c <__sfvwrite_r+0x64>
 800ae06:	2e00      	cmp	r6, #0
 800ae08:	d1d5      	bne.n	800adb6 <__sfvwrite_r+0x18e>
 800ae0a:	f10a 0308 	add.w	r3, sl, #8
 800ae0e:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 800ae12:	469a      	mov	sl, r3
 800ae14:	3308      	adds	r3, #8
 800ae16:	2e00      	cmp	r6, #0
 800ae18:	d0f9      	beq.n	800ae0e <__sfvwrite_r+0x1e6>
 800ae1a:	4632      	mov	r2, r6
 800ae1c:	210a      	movs	r1, #10
 800ae1e:	4628      	mov	r0, r5
 800ae20:	f7f5 fa3e 	bl	80002a0 <memchr>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	d067      	beq.n	800aef8 <__sfvwrite_r+0x2d0>
 800ae28:	3001      	adds	r0, #1
 800ae2a:	eba0 0905 	sub.w	r9, r0, r5
 800ae2e:	e7c3      	b.n	800adb8 <__sfvwrite_r+0x190>
 800ae30:	6923      	ldr	r3, [r4, #16]
 800ae32:	4283      	cmp	r3, r0
 800ae34:	d317      	bcc.n	800ae66 <__sfvwrite_r+0x23e>
 800ae36:	6963      	ldr	r3, [r4, #20]
 800ae38:	42b3      	cmp	r3, r6
 800ae3a:	d814      	bhi.n	800ae66 <__sfvwrite_r+0x23e>
 800ae3c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ae40:	42b2      	cmp	r2, r6
 800ae42:	bf28      	it	cs
 800ae44:	4632      	movcs	r2, r6
 800ae46:	69e1      	ldr	r1, [r4, #28]
 800ae48:	fb92 f2f3 	sdiv	r2, r2, r3
 800ae4c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800ae50:	fb02 f303 	mul.w	r3, r2, r3
 800ae54:	4640      	mov	r0, r8
 800ae56:	464a      	mov	r2, r9
 800ae58:	47e0      	blx	ip
 800ae5a:	f1b0 0a00 	subs.w	sl, r0, #0
 800ae5e:	dd98      	ble.n	800ad92 <__sfvwrite_r+0x16a>
 800ae60:	eba6 060a 	sub.w	r6, r6, sl
 800ae64:	e77b      	b.n	800ad5e <__sfvwrite_r+0x136>
 800ae66:	45b3      	cmp	fp, r6
 800ae68:	46da      	mov	sl, fp
 800ae6a:	bf28      	it	cs
 800ae6c:	46b2      	movcs	sl, r6
 800ae6e:	4652      	mov	r2, sl
 800ae70:	4649      	mov	r1, r9
 800ae72:	f000 f88d 	bl	800af90 <memmove>
 800ae76:	68a3      	ldr	r3, [r4, #8]
 800ae78:	6822      	ldr	r2, [r4, #0]
 800ae7a:	eba3 030a 	sub.w	r3, r3, sl
 800ae7e:	4452      	add	r2, sl
 800ae80:	60a3      	str	r3, [r4, #8]
 800ae82:	6022      	str	r2, [r4, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d1eb      	bne.n	800ae60 <__sfvwrite_r+0x238>
 800ae88:	4621      	mov	r1, r4
 800ae8a:	4640      	mov	r0, r8
 800ae8c:	f7fd ffac 	bl	8008de8 <_fflush_r>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	d0e5      	beq.n	800ae60 <__sfvwrite_r+0x238>
 800ae94:	e77d      	b.n	800ad92 <__sfvwrite_r+0x16a>
 800ae96:	46b3      	mov	fp, r6
 800ae98:	4632      	mov	r2, r6
 800ae9a:	e752      	b.n	800ad42 <__sfvwrite_r+0x11a>
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	9201      	str	r2, [sp, #4]
 800aea0:	f000 f876 	bl	800af90 <memmove>
 800aea4:	9a01      	ldr	r2, [sp, #4]
 800aea6:	68a3      	ldr	r3, [r4, #8]
 800aea8:	1a9b      	subs	r3, r3, r2
 800aeaa:	60a3      	str	r3, [r4, #8]
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	4413      	add	r3, r2
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	4693      	mov	fp, r2
 800aeb4:	e799      	b.n	800adea <__sfvwrite_r+0x1c2>
 800aeb6:	4629      	mov	r1, r5
 800aeb8:	465a      	mov	r2, fp
 800aeba:	f000 f869 	bl	800af90 <memmove>
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	445b      	add	r3, fp
 800aec2:	6023      	str	r3, [r4, #0]
 800aec4:	4621      	mov	r1, r4
 800aec6:	4640      	mov	r0, r8
 800aec8:	f7fd ff8e 	bl	8008de8 <_fflush_r>
 800aecc:	2800      	cmp	r0, #0
 800aece:	d08c      	beq.n	800adea <__sfvwrite_r+0x1c2>
 800aed0:	e75f      	b.n	800ad92 <__sfvwrite_r+0x16a>
 800aed2:	4640      	mov	r0, r8
 800aed4:	f000 f8ee 	bl	800b0b4 <_realloc_r>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2800      	cmp	r0, #0
 800aedc:	f47f af26 	bne.w	800ad2c <__sfvwrite_r+0x104>
 800aee0:	6921      	ldr	r1, [r4, #16]
 800aee2:	4640      	mov	r0, r8
 800aee4:	f7fe f88a 	bl	8008ffc <_free_r>
 800aee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeec:	220c      	movs	r2, #12
 800aeee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aef2:	f8c8 2000 	str.w	r2, [r8]
 800aef6:	e74e      	b.n	800ad96 <__sfvwrite_r+0x16e>
 800aef8:	1c72      	adds	r2, r6, #1
 800aefa:	4691      	mov	r9, r2
 800aefc:	e75d      	b.n	800adba <__sfvwrite_r+0x192>
 800aefe:	220c      	movs	r2, #12
 800af00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af04:	f8c8 2000 	str.w	r2, [r8]
 800af08:	e745      	b.n	800ad96 <__sfvwrite_r+0x16e>
 800af0a:	f04f 30ff 	mov.w	r0, #4294967295
 800af0e:	e6be      	b.n	800ac8e <__sfvwrite_r+0x66>
 800af10:	7ffffc00 	.word	0x7ffffc00

0800af14 <_isatty_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	4d07      	ldr	r5, [pc, #28]	; (800af34 <_isatty_r+0x20>)
 800af18:	2200      	movs	r2, #0
 800af1a:	4604      	mov	r4, r0
 800af1c:	4608      	mov	r0, r1
 800af1e:	602a      	str	r2, [r5, #0]
 800af20:	f000 fb99 	bl	800b656 <_isatty>
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	d000      	beq.n	800af2a <_isatty_r+0x16>
 800af28:	bd38      	pop	{r3, r4, r5, pc}
 800af2a:	682b      	ldr	r3, [r5, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d0fb      	beq.n	800af28 <_isatty_r+0x14>
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	bd38      	pop	{r3, r4, r5, pc}
 800af34:	20000b64 	.word	0x20000b64

0800af38 <_lseek_r>:
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	460c      	mov	r4, r1
 800af3c:	4d08      	ldr	r5, [pc, #32]	; (800af60 <_lseek_r+0x28>)
 800af3e:	4684      	mov	ip, r0
 800af40:	4611      	mov	r1, r2
 800af42:	4620      	mov	r0, r4
 800af44:	461a      	mov	r2, r3
 800af46:	2300      	movs	r3, #0
 800af48:	602b      	str	r3, [r5, #0]
 800af4a:	4664      	mov	r4, ip
 800af4c:	f000 fb81 	bl	800b652 <_lseek>
 800af50:	1c43      	adds	r3, r0, #1
 800af52:	d000      	beq.n	800af56 <_lseek_r+0x1e>
 800af54:	bd38      	pop	{r3, r4, r5, pc}
 800af56:	682b      	ldr	r3, [r5, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d0fb      	beq.n	800af54 <_lseek_r+0x1c>
 800af5c:	6023      	str	r3, [r4, #0]
 800af5e:	bd38      	pop	{r3, r4, r5, pc}
 800af60:	20000b64 	.word	0x20000b64

0800af64 <__ascii_mbtowc>:
 800af64:	b082      	sub	sp, #8
 800af66:	b149      	cbz	r1, 800af7c <__ascii_mbtowc+0x18>
 800af68:	b15a      	cbz	r2, 800af82 <__ascii_mbtowc+0x1e>
 800af6a:	b16b      	cbz	r3, 800af88 <__ascii_mbtowc+0x24>
 800af6c:	7813      	ldrb	r3, [r2, #0]
 800af6e:	600b      	str	r3, [r1, #0]
 800af70:	7812      	ldrb	r2, [r2, #0]
 800af72:	1e10      	subs	r0, r2, #0
 800af74:	bf18      	it	ne
 800af76:	2001      	movne	r0, #1
 800af78:	b002      	add	sp, #8
 800af7a:	4770      	bx	lr
 800af7c:	a901      	add	r1, sp, #4
 800af7e:	2a00      	cmp	r2, #0
 800af80:	d1f3      	bne.n	800af6a <__ascii_mbtowc+0x6>
 800af82:	4610      	mov	r0, r2
 800af84:	b002      	add	sp, #8
 800af86:	4770      	bx	lr
 800af88:	f06f 0001 	mvn.w	r0, #1
 800af8c:	e7f4      	b.n	800af78 <__ascii_mbtowc+0x14>
 800af8e:	bf00      	nop

0800af90 <memmove>:
 800af90:	4288      	cmp	r0, r1
 800af92:	d90d      	bls.n	800afb0 <memmove+0x20>
 800af94:	188b      	adds	r3, r1, r2
 800af96:	4283      	cmp	r3, r0
 800af98:	d90a      	bls.n	800afb0 <memmove+0x20>
 800af9a:	eb00 0c02 	add.w	ip, r0, r2
 800af9e:	b1ba      	cbz	r2, 800afd0 <memmove+0x40>
 800afa0:	4662      	mov	r2, ip
 800afa2:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 800afa6:	f802 cd01 	strb.w	ip, [r2, #-1]!
 800afaa:	4299      	cmp	r1, r3
 800afac:	d1f9      	bne.n	800afa2 <memmove+0x12>
 800afae:	4770      	bx	lr
 800afb0:	2a0f      	cmp	r2, #15
 800afb2:	d80e      	bhi.n	800afd2 <memmove+0x42>
 800afb4:	4603      	mov	r3, r0
 800afb6:	f102 3cff 	add.w	ip, r2, #4294967295
 800afba:	b14a      	cbz	r2, 800afd0 <memmove+0x40>
 800afbc:	f10c 0c01 	add.w	ip, ip, #1
 800afc0:	3b01      	subs	r3, #1
 800afc2:	448c      	add	ip, r1
 800afc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afc8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afcc:	4561      	cmp	r1, ip
 800afce:	d1f9      	bne.n	800afc4 <memmove+0x34>
 800afd0:	4770      	bx	lr
 800afd2:	ea40 0301 	orr.w	r3, r0, r1
 800afd6:	079b      	lsls	r3, r3, #30
 800afd8:	d150      	bne.n	800b07c <memmove+0xec>
 800afda:	f1a2 0310 	sub.w	r3, r2, #16
 800afde:	b570      	push	{r4, r5, r6, lr}
 800afe0:	f101 0c20 	add.w	ip, r1, #32
 800afe4:	f023 050f 	bic.w	r5, r3, #15
 800afe8:	f101 0e10 	add.w	lr, r1, #16
 800afec:	f100 0410 	add.w	r4, r0, #16
 800aff0:	44ac      	add	ip, r5
 800aff2:	091b      	lsrs	r3, r3, #4
 800aff4:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 800aff8:	f844 5c10 	str.w	r5, [r4, #-16]
 800affc:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 800b000:	f844 5c0c 	str.w	r5, [r4, #-12]
 800b004:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 800b008:	f844 5c08 	str.w	r5, [r4, #-8]
 800b00c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 800b010:	f844 5c04 	str.w	r5, [r4, #-4]
 800b014:	f10e 0e10 	add.w	lr, lr, #16
 800b018:	45e6      	cmp	lr, ip
 800b01a:	f104 0410 	add.w	r4, r4, #16
 800b01e:	d1e9      	bne.n	800aff4 <memmove+0x64>
 800b020:	3301      	adds	r3, #1
 800b022:	f012 0f0c 	tst.w	r2, #12
 800b026:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800b02a:	f002 040f 	and.w	r4, r2, #15
 800b02e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 800b032:	d027      	beq.n	800b084 <memmove+0xf4>
 800b034:	3c04      	subs	r4, #4
 800b036:	f024 0603 	bic.w	r6, r4, #3
 800b03a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 800b03e:	441e      	add	r6, r3
 800b040:	1f1c      	subs	r4, r3, #4
 800b042:	468e      	mov	lr, r1
 800b044:	f85e 5b04 	ldr.w	r5, [lr], #4
 800b048:	f844 5f04 	str.w	r5, [r4, #4]!
 800b04c:	42b4      	cmp	r4, r6
 800b04e:	d1f9      	bne.n	800b044 <memmove+0xb4>
 800b050:	f10c 0401 	add.w	r4, ip, #1
 800b054:	f002 0203 	and.w	r2, r2, #3
 800b058:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b05c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b060:	f102 3cff 	add.w	ip, r2, #4294967295
 800b064:	b14a      	cbz	r2, 800b07a <memmove+0xea>
 800b066:	f10c 0c01 	add.w	ip, ip, #1
 800b06a:	3b01      	subs	r3, #1
 800b06c:	448c      	add	ip, r1
 800b06e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b072:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b076:	4561      	cmp	r1, ip
 800b078:	d1f9      	bne.n	800b06e <memmove+0xde>
 800b07a:	bd70      	pop	{r4, r5, r6, pc}
 800b07c:	f102 3cff 	add.w	ip, r2, #4294967295
 800b080:	4603      	mov	r3, r0
 800b082:	e79b      	b.n	800afbc <memmove+0x2c>
 800b084:	4622      	mov	r2, r4
 800b086:	e7eb      	b.n	800b060 <memmove+0xd0>

0800b088 <_read_r>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	460c      	mov	r4, r1
 800b08c:	4d08      	ldr	r5, [pc, #32]	; (800b0b0 <_read_r+0x28>)
 800b08e:	4684      	mov	ip, r0
 800b090:	4611      	mov	r1, r2
 800b092:	4620      	mov	r0, r4
 800b094:	461a      	mov	r2, r3
 800b096:	2300      	movs	r3, #0
 800b098:	602b      	str	r3, [r5, #0]
 800b09a:	4664      	mov	r4, ip
 800b09c:	f000 face 	bl	800b63c <_read>
 800b0a0:	1c43      	adds	r3, r0, #1
 800b0a2:	d000      	beq.n	800b0a6 <_read_r+0x1e>
 800b0a4:	bd38      	pop	{r3, r4, r5, pc}
 800b0a6:	682b      	ldr	r3, [r5, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d0fb      	beq.n	800b0a4 <_read_r+0x1c>
 800b0ac:	6023      	str	r3, [r4, #0]
 800b0ae:	bd38      	pop	{r3, r4, r5, pc}
 800b0b0:	20000b64 	.word	0x20000b64

0800b0b4 <_realloc_r>:
 800b0b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b8:	4616      	mov	r6, r2
 800b0ba:	2900      	cmp	r1, #0
 800b0bc:	f000 809d 	beq.w	800b1fa <_realloc_r+0x146>
 800b0c0:	f106 050b 	add.w	r5, r6, #11
 800b0c4:	4607      	mov	r7, r0
 800b0c6:	460c      	mov	r4, r1
 800b0c8:	f7fa fa44 	bl	8005554 <__malloc_lock>
 800b0cc:	2d16      	cmp	r5, #22
 800b0ce:	d85f      	bhi.n	800b190 <_realloc_r+0xdc>
 800b0d0:	2510      	movs	r5, #16
 800b0d2:	462a      	mov	r2, r5
 800b0d4:	42ae      	cmp	r6, r5
 800b0d6:	d860      	bhi.n	800b19a <_realloc_r+0xe6>
 800b0d8:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800b0dc:	f02e 0803 	bic.w	r8, lr, #3
 800b0e0:	4590      	cmp	r8, r2
 800b0e2:	f1a4 0908 	sub.w	r9, r4, #8
 800b0e6:	da63      	bge.n	800b1b0 <_realloc_r+0xfc>
 800b0e8:	4bbd      	ldr	r3, [pc, #756]	; (800b3e0 <_realloc_r+0x32c>)
 800b0ea:	6899      	ldr	r1, [r3, #8]
 800b0ec:	eb09 0c08 	add.w	ip, r9, r8
 800b0f0:	4561      	cmp	r1, ip
 800b0f2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800b0f6:	f000 8096 	beq.w	800b226 <_realloc_r+0x172>
 800b0fa:	f020 0301 	bic.w	r3, r0, #1
 800b0fe:	4463      	add	r3, ip
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	07db      	lsls	r3, r3, #31
 800b104:	d46d      	bmi.n	800b1e2 <_realloc_r+0x12e>
 800b106:	f020 0003 	bic.w	r0, r0, #3
 800b10a:	eb08 0300 	add.w	r3, r8, r0
 800b10e:	4293      	cmp	r3, r2
 800b110:	da49      	bge.n	800b1a6 <_realloc_r+0xf2>
 800b112:	f01e 0f01 	tst.w	lr, #1
 800b116:	d111      	bne.n	800b13c <_realloc_r+0x88>
 800b118:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800b11c:	eba9 0b03 	sub.w	fp, r9, r3
 800b120:	f8db 1004 	ldr.w	r1, [fp, #4]
 800b124:	f021 0103 	bic.w	r1, r1, #3
 800b128:	4408      	add	r0, r1
 800b12a:	4440      	add	r0, r8
 800b12c:	4290      	cmp	r0, r2
 800b12e:	f280 8112 	bge.w	800b356 <_realloc_r+0x2a2>
 800b132:	eb08 0301 	add.w	r3, r8, r1
 800b136:	4293      	cmp	r3, r2
 800b138:	f280 80e7 	bge.w	800b30a <_realloc_r+0x256>
 800b13c:	4631      	mov	r1, r6
 800b13e:	4638      	mov	r0, r7
 800b140:	f7f9 fef8 	bl	8004f34 <_malloc_r>
 800b144:	4606      	mov	r6, r0
 800b146:	b1e8      	cbz	r0, 800b184 <_realloc_r+0xd0>
 800b148:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b14c:	f023 0301 	bic.w	r3, r3, #1
 800b150:	444b      	add	r3, r9
 800b152:	f1a0 0208 	sub.w	r2, r0, #8
 800b156:	4293      	cmp	r3, r2
 800b158:	f000 80d1 	beq.w	800b2fe <_realloc_r+0x24a>
 800b15c:	f1a8 0204 	sub.w	r2, r8, #4
 800b160:	2a24      	cmp	r2, #36	; 0x24
 800b162:	f200 80f4 	bhi.w	800b34e <_realloc_r+0x29a>
 800b166:	2a13      	cmp	r2, #19
 800b168:	f200 80ab 	bhi.w	800b2c2 <_realloc_r+0x20e>
 800b16c:	4603      	mov	r3, r0
 800b16e:	4622      	mov	r2, r4
 800b170:	6811      	ldr	r1, [r2, #0]
 800b172:	6019      	str	r1, [r3, #0]
 800b174:	6851      	ldr	r1, [r2, #4]
 800b176:	6059      	str	r1, [r3, #4]
 800b178:	6892      	ldr	r2, [r2, #8]
 800b17a:	609a      	str	r2, [r3, #8]
 800b17c:	4621      	mov	r1, r4
 800b17e:	4638      	mov	r0, r7
 800b180:	f7fd ff3c 	bl	8008ffc <_free_r>
 800b184:	4638      	mov	r0, r7
 800b186:	f7fa f9eb 	bl	8005560 <__malloc_unlock>
 800b18a:	4630      	mov	r0, r6
 800b18c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b190:	f025 0507 	bic.w	r5, r5, #7
 800b194:	2d00      	cmp	r5, #0
 800b196:	462a      	mov	r2, r5
 800b198:	da9c      	bge.n	800b0d4 <_realloc_r+0x20>
 800b19a:	230c      	movs	r3, #12
 800b19c:	603b      	str	r3, [r7, #0]
 800b19e:	2600      	movs	r6, #0
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a6:	4698      	mov	r8, r3
 800b1a8:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
 800b1ac:	60d3      	str	r3, [r2, #12]
 800b1ae:	609a      	str	r2, [r3, #8]
 800b1b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b1b4:	eba8 0205 	sub.w	r2, r8, r5
 800b1b8:	2a0f      	cmp	r2, #15
 800b1ba:	f003 0301 	and.w	r3, r3, #1
 800b1be:	eb09 0008 	add.w	r0, r9, r8
 800b1c2:	d81f      	bhi.n	800b204 <_realloc_r+0x150>
 800b1c4:	ea48 0303 	orr.w	r3, r8, r3
 800b1c8:	f8c9 3004 	str.w	r3, [r9, #4]
 800b1cc:	6843      	ldr	r3, [r0, #4]
 800b1ce:	f043 0301 	orr.w	r3, r3, #1
 800b1d2:	6043      	str	r3, [r0, #4]
 800b1d4:	4638      	mov	r0, r7
 800b1d6:	4626      	mov	r6, r4
 800b1d8:	f7fa f9c2 	bl	8005560 <__malloc_unlock>
 800b1dc:	4630      	mov	r0, r6
 800b1de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e2:	f01e 0f01 	tst.w	lr, #1
 800b1e6:	d1a9      	bne.n	800b13c <_realloc_r+0x88>
 800b1e8:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800b1ec:	eba9 0b03 	sub.w	fp, r9, r3
 800b1f0:	f8db 1004 	ldr.w	r1, [fp, #4]
 800b1f4:	f021 0103 	bic.w	r1, r1, #3
 800b1f8:	e79b      	b.n	800b132 <_realloc_r+0x7e>
 800b1fa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fe:	4611      	mov	r1, r2
 800b200:	f7f9 be98 	b.w	8004f34 <_malloc_r>
 800b204:	eb09 0105 	add.w	r1, r9, r5
 800b208:	432b      	orrs	r3, r5
 800b20a:	f042 0201 	orr.w	r2, r2, #1
 800b20e:	f8c9 3004 	str.w	r3, [r9, #4]
 800b212:	604a      	str	r2, [r1, #4]
 800b214:	6843      	ldr	r3, [r0, #4]
 800b216:	f043 0301 	orr.w	r3, r3, #1
 800b21a:	6043      	str	r3, [r0, #4]
 800b21c:	3108      	adds	r1, #8
 800b21e:	4638      	mov	r0, r7
 800b220:	f7fd feec 	bl	8008ffc <_free_r>
 800b224:	e7d6      	b.n	800b1d4 <_realloc_r+0x120>
 800b226:	f020 0003 	bic.w	r0, r0, #3
 800b22a:	eb08 0100 	add.w	r1, r8, r0
 800b22e:	f105 0c10 	add.w	ip, r5, #16
 800b232:	4561      	cmp	r1, ip
 800b234:	da50      	bge.n	800b2d8 <_realloc_r+0x224>
 800b236:	f01e 0f01 	tst.w	lr, #1
 800b23a:	f47f af7f 	bne.w	800b13c <_realloc_r+0x88>
 800b23e:	f854 1c08 	ldr.w	r1, [r4, #-8]
 800b242:	eba9 0b01 	sub.w	fp, r9, r1
 800b246:	f8db 1004 	ldr.w	r1, [fp, #4]
 800b24a:	f021 0103 	bic.w	r1, r1, #3
 800b24e:	4408      	add	r0, r1
 800b250:	eb00 0a08 	add.w	sl, r0, r8
 800b254:	45d4      	cmp	ip, sl
 800b256:	f73f af6c 	bgt.w	800b132 <_realloc_r+0x7e>
 800b25a:	465e      	mov	r6, fp
 800b25c:	f8db 100c 	ldr.w	r1, [fp, #12]
 800b260:	f856 0f08 	ldr.w	r0, [r6, #8]!
 800b264:	f1a8 0204 	sub.w	r2, r8, #4
 800b268:	2a24      	cmp	r2, #36	; 0x24
 800b26a:	60c1      	str	r1, [r0, #12]
 800b26c:	6088      	str	r0, [r1, #8]
 800b26e:	f200 80dc 	bhi.w	800b42a <_realloc_r+0x376>
 800b272:	2a13      	cmp	r2, #19
 800b274:	f240 80d7 	bls.w	800b426 <_realloc_r+0x372>
 800b278:	6821      	ldr	r1, [r4, #0]
 800b27a:	f8cb 1008 	str.w	r1, [fp, #8]
 800b27e:	6861      	ldr	r1, [r4, #4]
 800b280:	f8cb 100c 	str.w	r1, [fp, #12]
 800b284:	2a1b      	cmp	r2, #27
 800b286:	f200 80e0 	bhi.w	800b44a <_realloc_r+0x396>
 800b28a:	3408      	adds	r4, #8
 800b28c:	f10b 0210 	add.w	r2, fp, #16
 800b290:	6821      	ldr	r1, [r4, #0]
 800b292:	6011      	str	r1, [r2, #0]
 800b294:	6861      	ldr	r1, [r4, #4]
 800b296:	6051      	str	r1, [r2, #4]
 800b298:	68a1      	ldr	r1, [r4, #8]
 800b29a:	6091      	str	r1, [r2, #8]
 800b29c:	eb0b 0105 	add.w	r1, fp, r5
 800b2a0:	ebaa 0205 	sub.w	r2, sl, r5
 800b2a4:	f042 0201 	orr.w	r2, r2, #1
 800b2a8:	6099      	str	r1, [r3, #8]
 800b2aa:	604a      	str	r2, [r1, #4]
 800b2ac:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b2b0:	f003 0301 	and.w	r3, r3, #1
 800b2b4:	431d      	orrs	r5, r3
 800b2b6:	4638      	mov	r0, r7
 800b2b8:	f8cb 5004 	str.w	r5, [fp, #4]
 800b2bc:	f7fa f950 	bl	8005560 <__malloc_unlock>
 800b2c0:	e76e      	b.n	800b1a0 <_realloc_r+0xec>
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	6003      	str	r3, [r0, #0]
 800b2c6:	6863      	ldr	r3, [r4, #4]
 800b2c8:	6043      	str	r3, [r0, #4]
 800b2ca:	2a1b      	cmp	r2, #27
 800b2cc:	d869      	bhi.n	800b3a2 <_realloc_r+0x2ee>
 800b2ce:	f104 0208 	add.w	r2, r4, #8
 800b2d2:	f100 0308 	add.w	r3, r0, #8
 800b2d6:	e74b      	b.n	800b170 <_realloc_r+0xbc>
 800b2d8:	eb09 0205 	add.w	r2, r9, r5
 800b2dc:	609a      	str	r2, [r3, #8]
 800b2de:	1b4b      	subs	r3, r1, r5
 800b2e0:	f043 0301 	orr.w	r3, r3, #1
 800b2e4:	6053      	str	r3, [r2, #4]
 800b2e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b2ea:	f003 0301 	and.w	r3, r3, #1
 800b2ee:	431d      	orrs	r5, r3
 800b2f0:	4638      	mov	r0, r7
 800b2f2:	f844 5c04 	str.w	r5, [r4, #-4]
 800b2f6:	f7fa f933 	bl	8005560 <__malloc_unlock>
 800b2fa:	4626      	mov	r6, r4
 800b2fc:	e750      	b.n	800b1a0 <_realloc_r+0xec>
 800b2fe:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b302:	f023 0303 	bic.w	r3, r3, #3
 800b306:	4498      	add	r8, r3
 800b308:	e752      	b.n	800b1b0 <_realloc_r+0xfc>
 800b30a:	465e      	mov	r6, fp
 800b30c:	f8db 100c 	ldr.w	r1, [fp, #12]
 800b310:	f856 0f08 	ldr.w	r0, [r6, #8]!
 800b314:	f1a8 0204 	sub.w	r2, r8, #4
 800b318:	2a24      	cmp	r2, #36	; 0x24
 800b31a:	60c1      	str	r1, [r0, #12]
 800b31c:	6088      	str	r0, [r1, #8]
 800b31e:	d84d      	bhi.n	800b3bc <_realloc_r+0x308>
 800b320:	2a13      	cmp	r2, #19
 800b322:	d949      	bls.n	800b3b8 <_realloc_r+0x304>
 800b324:	6821      	ldr	r1, [r4, #0]
 800b326:	f8cb 1008 	str.w	r1, [fp, #8]
 800b32a:	6861      	ldr	r1, [r4, #4]
 800b32c:	f8cb 100c 	str.w	r1, [fp, #12]
 800b330:	2a1b      	cmp	r2, #27
 800b332:	d857      	bhi.n	800b3e4 <_realloc_r+0x330>
 800b334:	3408      	adds	r4, #8
 800b336:	f10b 0210 	add.w	r2, fp, #16
 800b33a:	4698      	mov	r8, r3
 800b33c:	6823      	ldr	r3, [r4, #0]
 800b33e:	6013      	str	r3, [r2, #0]
 800b340:	6863      	ldr	r3, [r4, #4]
 800b342:	6053      	str	r3, [r2, #4]
 800b344:	68a3      	ldr	r3, [r4, #8]
 800b346:	6093      	str	r3, [r2, #8]
 800b348:	46d9      	mov	r9, fp
 800b34a:	4634      	mov	r4, r6
 800b34c:	e730      	b.n	800b1b0 <_realloc_r+0xfc>
 800b34e:	4621      	mov	r1, r4
 800b350:	f7ff fe1e 	bl	800af90 <memmove>
 800b354:	e712      	b.n	800b17c <_realloc_r+0xc8>
 800b356:	e9dc 1302 	ldrd	r1, r3, [ip, #8]
 800b35a:	465e      	mov	r6, fp
 800b35c:	60cb      	str	r3, [r1, #12]
 800b35e:	6099      	str	r1, [r3, #8]
 800b360:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800b364:	f8db 300c 	ldr.w	r3, [fp, #12]
 800b368:	60cb      	str	r3, [r1, #12]
 800b36a:	f1a8 0204 	sub.w	r2, r8, #4
 800b36e:	2a24      	cmp	r2, #36	; 0x24
 800b370:	6099      	str	r1, [r3, #8]
 800b372:	d82d      	bhi.n	800b3d0 <_realloc_r+0x31c>
 800b374:	2a13      	cmp	r2, #19
 800b376:	d929      	bls.n	800b3cc <_realloc_r+0x318>
 800b378:	6823      	ldr	r3, [r4, #0]
 800b37a:	f8cb 3008 	str.w	r3, [fp, #8]
 800b37e:	6863      	ldr	r3, [r4, #4]
 800b380:	f8cb 300c 	str.w	r3, [fp, #12]
 800b384:	2a1b      	cmp	r2, #27
 800b386:	d842      	bhi.n	800b40e <_realloc_r+0x35a>
 800b388:	3408      	adds	r4, #8
 800b38a:	f10b 0310 	add.w	r3, fp, #16
 800b38e:	6822      	ldr	r2, [r4, #0]
 800b390:	601a      	str	r2, [r3, #0]
 800b392:	6862      	ldr	r2, [r4, #4]
 800b394:	605a      	str	r2, [r3, #4]
 800b396:	68a2      	ldr	r2, [r4, #8]
 800b398:	609a      	str	r2, [r3, #8]
 800b39a:	4680      	mov	r8, r0
 800b39c:	46d9      	mov	r9, fp
 800b39e:	4634      	mov	r4, r6
 800b3a0:	e706      	b.n	800b1b0 <_realloc_r+0xfc>
 800b3a2:	68a3      	ldr	r3, [r4, #8]
 800b3a4:	6083      	str	r3, [r0, #8]
 800b3a6:	68e3      	ldr	r3, [r4, #12]
 800b3a8:	60c3      	str	r3, [r0, #12]
 800b3aa:	2a24      	cmp	r2, #36	; 0x24
 800b3ac:	d026      	beq.n	800b3fc <_realloc_r+0x348>
 800b3ae:	f104 0210 	add.w	r2, r4, #16
 800b3b2:	f100 0310 	add.w	r3, r0, #16
 800b3b6:	e6db      	b.n	800b170 <_realloc_r+0xbc>
 800b3b8:	4632      	mov	r2, r6
 800b3ba:	e7be      	b.n	800b33a <_realloc_r+0x286>
 800b3bc:	4621      	mov	r1, r4
 800b3be:	4630      	mov	r0, r6
 800b3c0:	4698      	mov	r8, r3
 800b3c2:	46d9      	mov	r9, fp
 800b3c4:	f7ff fde4 	bl	800af90 <memmove>
 800b3c8:	4634      	mov	r4, r6
 800b3ca:	e6f1      	b.n	800b1b0 <_realloc_r+0xfc>
 800b3cc:	4633      	mov	r3, r6
 800b3ce:	e7de      	b.n	800b38e <_realloc_r+0x2da>
 800b3d0:	4621      	mov	r1, r4
 800b3d2:	4680      	mov	r8, r0
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	f7ff fddb 	bl	800af90 <memmove>
 800b3da:	46d9      	mov	r9, fp
 800b3dc:	4634      	mov	r4, r6
 800b3de:	e6e7      	b.n	800b1b0 <_realloc_r+0xfc>
 800b3e0:	200002dc 	.word	0x200002dc
 800b3e4:	68a1      	ldr	r1, [r4, #8]
 800b3e6:	f8cb 1010 	str.w	r1, [fp, #16]
 800b3ea:	68e1      	ldr	r1, [r4, #12]
 800b3ec:	f8cb 1014 	str.w	r1, [fp, #20]
 800b3f0:	2a24      	cmp	r2, #36	; 0x24
 800b3f2:	d020      	beq.n	800b436 <_realloc_r+0x382>
 800b3f4:	3410      	adds	r4, #16
 800b3f6:	f10b 0218 	add.w	r2, fp, #24
 800b3fa:	e79e      	b.n	800b33a <_realloc_r+0x286>
 800b3fc:	6923      	ldr	r3, [r4, #16]
 800b3fe:	6103      	str	r3, [r0, #16]
 800b400:	6961      	ldr	r1, [r4, #20]
 800b402:	6141      	str	r1, [r0, #20]
 800b404:	f104 0218 	add.w	r2, r4, #24
 800b408:	f100 0318 	add.w	r3, r0, #24
 800b40c:	e6b0      	b.n	800b170 <_realloc_r+0xbc>
 800b40e:	68a3      	ldr	r3, [r4, #8]
 800b410:	f8cb 3010 	str.w	r3, [fp, #16]
 800b414:	68e3      	ldr	r3, [r4, #12]
 800b416:	f8cb 3014 	str.w	r3, [fp, #20]
 800b41a:	2a24      	cmp	r2, #36	; 0x24
 800b41c:	d021      	beq.n	800b462 <_realloc_r+0x3ae>
 800b41e:	3410      	adds	r4, #16
 800b420:	f10b 0318 	add.w	r3, fp, #24
 800b424:	e7b3      	b.n	800b38e <_realloc_r+0x2da>
 800b426:	4632      	mov	r2, r6
 800b428:	e732      	b.n	800b290 <_realloc_r+0x1dc>
 800b42a:	4621      	mov	r1, r4
 800b42c:	4630      	mov	r0, r6
 800b42e:	f7ff fdaf 	bl	800af90 <memmove>
 800b432:	4b16      	ldr	r3, [pc, #88]	; (800b48c <_realloc_r+0x3d8>)
 800b434:	e732      	b.n	800b29c <_realloc_r+0x1e8>
 800b436:	6922      	ldr	r2, [r4, #16]
 800b438:	f8cb 2018 	str.w	r2, [fp, #24]
 800b43c:	6962      	ldr	r2, [r4, #20]
 800b43e:	f8cb 201c 	str.w	r2, [fp, #28]
 800b442:	3418      	adds	r4, #24
 800b444:	f10b 0220 	add.w	r2, fp, #32
 800b448:	e777      	b.n	800b33a <_realloc_r+0x286>
 800b44a:	68a1      	ldr	r1, [r4, #8]
 800b44c:	f8cb 1010 	str.w	r1, [fp, #16]
 800b450:	68e1      	ldr	r1, [r4, #12]
 800b452:	f8cb 1014 	str.w	r1, [fp, #20]
 800b456:	2a24      	cmp	r2, #36	; 0x24
 800b458:	d00d      	beq.n	800b476 <_realloc_r+0x3c2>
 800b45a:	3410      	adds	r4, #16
 800b45c:	f10b 0218 	add.w	r2, fp, #24
 800b460:	e716      	b.n	800b290 <_realloc_r+0x1dc>
 800b462:	6923      	ldr	r3, [r4, #16]
 800b464:	f8cb 3018 	str.w	r3, [fp, #24]
 800b468:	6963      	ldr	r3, [r4, #20]
 800b46a:	f8cb 301c 	str.w	r3, [fp, #28]
 800b46e:	3418      	adds	r4, #24
 800b470:	f10b 0320 	add.w	r3, fp, #32
 800b474:	e78b      	b.n	800b38e <_realloc_r+0x2da>
 800b476:	6922      	ldr	r2, [r4, #16]
 800b478:	f8cb 2018 	str.w	r2, [fp, #24]
 800b47c:	6962      	ldr	r2, [r4, #20]
 800b47e:	f8cb 201c 	str.w	r2, [fp, #28]
 800b482:	3418      	adds	r4, #24
 800b484:	f10b 0220 	add.w	r2, fp, #32
 800b488:	e702      	b.n	800b290 <_realloc_r+0x1dc>
 800b48a:	bf00      	nop
 800b48c:	200002dc 	.word	0x200002dc

0800b490 <__ascii_wctomb>:
 800b490:	b149      	cbz	r1, 800b4a6 <__ascii_wctomb+0x16>
 800b492:	2aff      	cmp	r2, #255	; 0xff
 800b494:	d802      	bhi.n	800b49c <__ascii_wctomb+0xc>
 800b496:	700a      	strb	r2, [r1, #0]
 800b498:	2001      	movs	r0, #1
 800b49a:	4770      	bx	lr
 800b49c:	238a      	movs	r3, #138	; 0x8a
 800b49e:	6003      	str	r3, [r0, #0]
 800b4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a4:	4770      	bx	lr
 800b4a6:	4608      	mov	r0, r1
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop

0800b4ac <abort>:
 800b4ac:	b508      	push	{r3, lr}
 800b4ae:	2006      	movs	r0, #6
 800b4b0:	f000 f804 	bl	800b4bc <raise>
 800b4b4:	2001      	movs	r0, #1
 800b4b6:	f7f8 f85b 	bl	8003570 <_exit>
 800b4ba:	bf00      	nop

0800b4bc <raise>:
 800b4bc:	b538      	push	{r3, r4, r5, lr}
 800b4be:	4b15      	ldr	r3, [pc, #84]	; (800b514 <raise+0x58>)
 800b4c0:	281f      	cmp	r0, #31
 800b4c2:	681d      	ldr	r5, [r3, #0]
 800b4c4:	d820      	bhi.n	800b508 <raise+0x4c>
 800b4c6:	f8d5 2148 	ldr.w	r2, [r5, #328]	; 0x148
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	b162      	cbz	r2, 800b4e8 <raise+0x2c>
 800b4ce:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 800b4d2:	b14b      	cbz	r3, 800b4e8 <raise+0x2c>
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d015      	beq.n	800b504 <raise+0x48>
 800b4d8:	1c59      	adds	r1, r3, #1
 800b4da:	d00f      	beq.n	800b4fc <raise+0x40>
 800b4dc:	2500      	movs	r5, #0
 800b4de:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800b4e2:	4798      	blx	r3
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	bd38      	pop	{r3, r4, r5, pc}
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	f000 f82b 	bl	800b544 <_getpid_r>
 800b4ee:	4622      	mov	r2, r4
 800b4f0:	4601      	mov	r1, r0
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4f8:	f000 b80e 	b.w	800b518 <_kill_r>
 800b4fc:	2316      	movs	r3, #22
 800b4fe:	602b      	str	r3, [r5, #0]
 800b500:	2001      	movs	r0, #1
 800b502:	bd38      	pop	{r3, r4, r5, pc}
 800b504:	2000      	movs	r0, #0
 800b506:	bd38      	pop	{r3, r4, r5, pc}
 800b508:	2316      	movs	r3, #22
 800b50a:	602b      	str	r3, [r5, #0]
 800b50c:	f04f 30ff 	mov.w	r0, #4294967295
 800b510:	bd38      	pop	{r3, r4, r5, pc}
 800b512:	bf00      	nop
 800b514:	200006ec 	.word	0x200006ec

0800b518 <_kill_r>:
 800b518:	b570      	push	{r4, r5, r6, lr}
 800b51a:	460c      	mov	r4, r1
 800b51c:	4d08      	ldr	r5, [pc, #32]	; (800b540 <_kill_r+0x28>)
 800b51e:	4603      	mov	r3, r0
 800b520:	2600      	movs	r6, #0
 800b522:	4620      	mov	r0, r4
 800b524:	4611      	mov	r1, r2
 800b526:	461c      	mov	r4, r3
 800b528:	602e      	str	r6, [r5, #0]
 800b52a:	f000 f899 	bl	800b660 <_kill>
 800b52e:	1c43      	adds	r3, r0, #1
 800b530:	d000      	beq.n	800b534 <_kill_r+0x1c>
 800b532:	bd70      	pop	{r4, r5, r6, pc}
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d0fb      	beq.n	800b532 <_kill_r+0x1a>
 800b53a:	6023      	str	r3, [r4, #0]
 800b53c:	bd70      	pop	{r4, r5, r6, pc}
 800b53e:	bf00      	nop
 800b540:	20000b64 	.word	0x20000b64

0800b544 <_getpid_r>:
 800b544:	f000 b88e 	b.w	800b664 <_getpid>

0800b548 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 800b548:	4770      	bx	lr

0800b54a <arch_printk_char_out>:
}
 800b54a:	2000      	movs	r0, #0
 800b54c:	4770      	bx	lr

0800b54e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 800b54e:	b40f      	push	{r0, r1, r2, r3}
 800b550:	b507      	push	{r0, r1, r2, lr}
 800b552:	a904      	add	r1, sp, #16
 800b554:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 800b558:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 800b55a:	f7f6 fdcd 	bl	80020f8 <vprintk>

	va_end(ap);
}
 800b55e:	b003      	add	sp, #12
 800b560:	f85d eb04 	ldr.w	lr, [sp], #4
 800b564:	b004      	add	sp, #16
 800b566:	4770      	bx	lr

0800b568 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800b568:	4604      	mov	r4, r0
 800b56a:	b508      	push	{r3, lr}
 800b56c:	4608      	mov	r0, r1
 800b56e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 800b570:	461a      	mov	r2, r3
 800b572:	47a0      	blx	r4
	return z_impl_z_current_get();
 800b574:	f7f9 faf2 	bl	8004b5c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 800b578:	f7f7 feec 	bl	8003354 <z_impl_k_thread_abort>

0800b57c <_ldiv5>:
	uint32_t v_lo = *v;
 800b57c:	e9d0 2100 	ldrd	r2, r1, [r0]
{
 800b580:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
 800b582:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
 800b586:	fba2 2403 	umull	r2, r4, r2, r3
 800b58a:	18d5      	adds	r5, r2, r3
 800b58c:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
 800b590:	fba1 1303 	umull	r1, r3, r1, r3
 800b594:	1852      	adds	r2, r2, r1
 800b596:	eb44 0403 	adc.w	r4, r4, r3
 800b59a:	1952      	adds	r2, r2, r5
 800b59c:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
 800b5a0:	1889      	adds	r1, r1, r2
 800b5a2:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
 800b5a6:	e9c0 1300 	strd	r1, r3, [r0]
}
 800b5aa:	bd30      	pop	{r4, r5, pc}

0800b5ac <_get_digit>:
	if (*digit_count > 0) {
 800b5ac:	680a      	ldr	r2, [r1, #0]
 800b5ae:	2a00      	cmp	r2, #0
{
 800b5b0:	b510      	push	{r4, lr}
 800b5b2:	4603      	mov	r3, r0
	if (*digit_count > 0) {
 800b5b4:	dd0f      	ble.n	800b5d6 <_get_digit+0x2a>
		--*digit_count;
 800b5b6:	3a01      	subs	r2, #1
 800b5b8:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	6844      	ldr	r4, [r0, #4]
 800b5be:	200a      	movs	r0, #10
 800b5c0:	fba2 1200 	umull	r1, r2, r2, r0
 800b5c4:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
 800b5c8:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
 800b5ca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800b5ce:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
 800b5d2:	3030      	adds	r0, #48	; 0x30
}
 800b5d4:	bd10      	pop	{r4, pc}
		rval = '0';
 800b5d6:	2030      	movs	r0, #48	; 0x30
 800b5d8:	e7fc      	b.n	800b5d4 <_get_digit+0x28>

0800b5da <outs>:
{
 800b5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5de:	4607      	mov	r7, r0
 800b5e0:	4688      	mov	r8, r1
 800b5e2:	4615      	mov	r5, r2
 800b5e4:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800b5e6:	4614      	mov	r4, r2
 800b5e8:	42b4      	cmp	r4, r6
 800b5ea:	eba4 0005 	sub.w	r0, r4, r5
 800b5ee:	d302      	bcc.n	800b5f6 <outs+0x1c>
 800b5f0:	b93e      	cbnz	r6, 800b602 <outs+0x28>
 800b5f2:	7823      	ldrb	r3, [r4, #0]
 800b5f4:	b12b      	cbz	r3, 800b602 <outs+0x28>
		int rc = out((int)*sp++, ctx);
 800b5f6:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b5fa:	4641      	mov	r1, r8
 800b5fc:	47b8      	blx	r7
		if (rc < 0) {
 800b5fe:	2800      	cmp	r0, #0
 800b600:	daf2      	bge.n	800b5e8 <outs+0xe>
}
 800b602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b606 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
 800b606:	4770      	bx	lr

0800b608 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 800b608:	2000      	movs	r0, #0
 800b60a:	4770      	bx	lr

0800b60c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 800b60c:	f000 bb81 	b.w	800bd12 <z_fatal_error>

0800b610 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 800b610:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 800b612:	6800      	ldr	r0, [r0, #0]
 800b614:	f000 bb7d 	b.w	800bd12 <z_fatal_error>

0800b618 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800b618:	2100      	movs	r1, #0
 800b61a:	2001      	movs	r0, #1
 800b61c:	f7ff bff6 	b.w	800b60c <z_arm_fatal_error>

0800b620 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 800b620:	b508      	push	{r3, lr}
	handler();
 800b622:	f7f7 fc89 	bl	8002f38 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 800b626:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800b62a:	f7f7 bd5d 	b.w	80030e8 <z_arm_exc_exit>

0800b62e <malloc_prepare>:
}
 800b62e:	2000      	movs	r0, #0
 800b630:	4770      	bx	lr

0800b632 <_stdout_hook_default>:
}
 800b632:	f04f 30ff 	mov.w	r0, #4294967295
 800b636:	4770      	bx	lr

0800b638 <_stdin_hook_default>:
}
 800b638:	2000      	movs	r0, #0
 800b63a:	4770      	bx	lr

0800b63c <_read>:
{
 800b63c:	4608      	mov	r0, r1
 800b63e:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
 800b640:	f7f7 bf6a 	b.w	8003518 <z_impl_zephyr_read_stdin>

0800b644 <_write>:
{
 800b644:	4608      	mov	r0, r1
 800b646:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800b648:	f7f7 bf7a 	b.w	8003540 <z_impl_zephyr_write_stdout>

0800b64c <_close>:
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295
 800b650:	4770      	bx	lr

0800b652 <_lseek>:
}
 800b652:	2000      	movs	r0, #0
 800b654:	4770      	bx	lr

0800b656 <_isatty>:
}
 800b656:	2802      	cmp	r0, #2
 800b658:	bfcc      	ite	gt
 800b65a:	2000      	movgt	r0, #0
 800b65c:	2001      	movle	r0, #1
 800b65e:	4770      	bx	lr

0800b660 <_kill>:
}
 800b660:	2000      	movs	r0, #0
 800b662:	4770      	bx	lr

0800b664 <_getpid>:
}
 800b664:	2000      	movs	r0, #0
 800b666:	4770      	bx	lr

0800b668 <_fstat>:
	st->st_mode = S_IFCHR;
 800b668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b66c:	604b      	str	r3, [r1, #4]
}
 800b66e:	2000      	movs	r0, #0
 800b670:	4770      	bx	lr

0800b672 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800b672:	b510      	push	{r4, lr}
 800b674:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
 800b676:	2014      	movs	r0, #20
 800b678:	f7f9 fc4c 	bl	8004f14 <malloc>
 800b67c:	6020      	str	r0, [r4, #0]
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
 800b67e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
 800b682:	f000 bb79 	b.w	800bd78 <z_impl_k_mutex_init>

0800b686 <__retarget_lock_close_recursive>:
 800b686:	f7f9 bc4d 	b.w	8004f24 <free>

0800b68a <__retarget_lock_acquire_recursive>:
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
 800b68a:	f04f 32ff 	mov.w	r2, #4294967295
 800b68e:	f04f 33ff 	mov.w	r3, #4294967295
 800b692:	f7f8 bec9 	b.w	8004428 <z_impl_k_mutex_lock>

0800b696 <__retarget_lock_release_recursive>:
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
 800b696:	f7f8 bf3f 	b.w	8004518 <z_impl_k_mutex_unlock>

0800b69a <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 800b69a:	2200      	movs	r2, #0
{
 800b69c:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 800b69e:	4611      	mov	r1, r2
 800b6a0:	2006      	movs	r0, #6
 800b6a2:	f7f7 fc31 	bl	8002f08 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	4611      	mov	r1, r2
 800b6aa:	2007      	movs	r0, #7
 800b6ac:	f7f7 fc2c 	bl	8002f08 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	2008      	movs	r0, #8
 800b6b6:	f7f7 fc27 	bl	8002f08 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	4611      	mov	r1, r2
 800b6be:	2009      	movs	r0, #9
 800b6c0:	f7f7 fc22 	bl	8002f08 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	200a      	movs	r0, #10
 800b6ca:	f7f7 fc1d 	bl	8002f08 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	4611      	mov	r1, r2
 800b6d2:	2017      	movs	r0, #23
 800b6d4:	f7f7 fc18 	bl	8002f08 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800b6d8:	2200      	movs	r2, #0
 800b6da:	4611      	mov	r1, r2
 800b6dc:	2028      	movs	r0, #40	; 0x28
 800b6de:	f7f7 fc13 	bl	8002f08 <z_arm_irq_priority_set>
}
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	bd08      	pop	{r3, pc}

0800b6e6 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, dev);
 800b6e6:	6902      	ldr	r2, [r0, #16]
 800b6e8:	2110      	movs	r1, #16
 800b6ea:	200a      	movs	r0, #10
 800b6ec:	f7f7 bf5c 	b.w	80035a8 <__stm32_exti_isr.isra.0>

0800b6f0 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, dev);
 800b6f0:	6902      	ldr	r2, [r0, #16]
 800b6f2:	210a      	movs	r1, #10
 800b6f4:	2005      	movs	r0, #5
 800b6f6:	f7f7 bf57 	b.w	80035a8 <__stm32_exti_isr.isra.0>

0800b6fa <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, dev);
 800b6fa:	6902      	ldr	r2, [r0, #16]
 800b6fc:	2105      	movs	r1, #5
 800b6fe:	2004      	movs	r0, #4
 800b700:	f7f7 bf52 	b.w	80035a8 <__stm32_exti_isr.isra.0>

0800b704 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, dev);
 800b704:	6902      	ldr	r2, [r0, #16]
 800b706:	2104      	movs	r1, #4
 800b708:	2003      	movs	r0, #3
 800b70a:	f7f7 bf4d 	b.w	80035a8 <__stm32_exti_isr.isra.0>

0800b70e <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, dev);
 800b70e:	6902      	ldr	r2, [r0, #16]
 800b710:	2103      	movs	r1, #3
 800b712:	2002      	movs	r0, #2
 800b714:	f7f7 bf48 	b.w	80035a8 <__stm32_exti_isr.isra.0>

0800b718 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, dev);
 800b718:	6902      	ldr	r2, [r0, #16]
 800b71a:	2102      	movs	r1, #2
 800b71c:	2001      	movs	r0, #1
 800b71e:	f7f7 bf43 	b.w	80035a8 <__stm32_exti_isr.isra.0>

0800b722 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, dev);
 800b722:	6902      	ldr	r2, [r0, #16]
 800b724:	2101      	movs	r1, #1
 800b726:	2000      	movs	r0, #0
 800b728:	f7f7 bf3e 	b.w	80035a8 <__stm32_exti_isr.isra.0>

0800b72c <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 800b72c:	680b      	ldr	r3, [r1, #0]
 800b72e:	f1a3 0248 	sub.w	r2, r3, #72	; 0x48
 800b732:	2a18      	cmp	r2, #24
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus);
 800b734:	bf9f      	itttt	ls
 800b736:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 800b73a:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
	reg_val |= pclken->enr;
 800b73e:	6849      	ldrls	r1, [r1, #4]
	reg_val = *reg;
 800b740:	681a      	ldrls	r2, [r3, #0]
	reg_val |= pclken->enr;
 800b742:	bf9d      	ittte	ls
 800b744:	430a      	orrls	r2, r1
	return 0;
 800b746:	2000      	movls	r0, #0
	*reg = reg_val;
 800b748:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 800b74a:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 800b74e:	4770      	bx	lr

0800b750 <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 800b750:	680b      	ldr	r3, [r1, #0]
 800b752:	f1a3 0248 	sub.w	r2, r3, #72	; 0x48
 800b756:	2a18      	cmp	r2, #24
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus);
 800b758:	bf9f      	itttt	ls
 800b75a:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 800b75e:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
	reg_val &= ~pclken->enr;
 800b762:	6849      	ldrls	r1, [r1, #4]
	reg_val = *reg;
 800b764:	681a      	ldrls	r2, [r3, #0]
	reg_val &= ~pclken->enr;
 800b766:	bf9d      	ittte	ls
 800b768:	438a      	bicls	r2, r1
	return 0;
 800b76a:	2000      	movls	r0, #0
	*reg = reg_val;
 800b76c:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 800b76e:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 800b772:	4770      	bx	lr

0800b774 <get_pllout_frequency>:
}
 800b774:	200a      	movs	r0, #10
 800b776:	4770      	bx	lr

0800b778 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800b778:	6843      	ldr	r3, [r0, #4]
 800b77a:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800b77c:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 800b77e:	600b      	str	r3, [r1, #0]
}
 800b780:	2000      	movs	r0, #0
 800b782:	4770      	bx	lr

0800b784 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800b784:	6843      	ldr	r3, [r0, #4]
 800b786:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800b788:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 800b78a:	4042      	eors	r2, r0
 800b78c:	400a      	ands	r2, r1
 800b78e:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 800b790:	615a      	str	r2, [r3, #20]
}
 800b792:	2000      	movs	r0, #0
 800b794:	4770      	bx	lr

0800b796 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800b796:	6843      	ldr	r3, [r0, #4]
 800b798:	685b      	ldr	r3, [r3, #4]
}
 800b79a:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 800b79c:	6199      	str	r1, [r3, #24]
}
 800b79e:	4770      	bx	lr

0800b7a0 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800b7a0:	6843      	ldr	r3, [r0, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
}
 800b7a4:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800b7a6:	6299      	str	r1, [r3, #40]	; 0x28
 800b7a8:	4770      	bx	lr

0800b7aa <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800b7aa:	6843      	ldr	r3, [r0, #4]
 800b7ac:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800b7ae:	6953      	ldr	r3, [r2, #20]
 800b7b0:	404b      	eors	r3, r1
 800b7b2:	6153      	str	r3, [r2, #20]
}
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	4770      	bx	lr

0800b7b8 <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->data;
 800b7b8:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 800b7ba:	6898      	ldr	r0, [r3, #8]
{
 800b7bc:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 800b7be:	b158      	cbz	r0, 800b7d8 <gpio_stm32_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800b7c0:	2400      	movs	r4, #0
 800b7c2:	4281      	cmp	r1, r0
 800b7c4:	d112      	bne.n	800b7ec <gpio_stm32_manage_callback+0x34>
	return node->next;
 800b7c6:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 800b7c8:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 800b7ca:	b954      	cbnz	r4, 800b7e2 <gpio_stm32_manage_callback+0x2a>
 800b7cc:	428d      	cmp	r5, r1
	list->head = node;
 800b7ce:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 800b7d0:	d100      	bne.n	800b7d4 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 800b7d2:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 800b7d8:	b96a      	cbnz	r2, 800b7f6 <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 800b7da:	2000      	movs	r0, #0
}
 800b7dc:	bd30      	pop	{r4, r5, pc}
 800b7de:	4628      	mov	r0, r5
 800b7e0:	e7ef      	b.n	800b7c2 <gpio_stm32_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 800b7e2:	428d      	cmp	r5, r1
	parent->next = child;
 800b7e4:	6020      	str	r0, [r4, #0]
	list->tail = node;
 800b7e6:	bf08      	it	eq
 800b7e8:	60dc      	streq	r4, [r3, #12]
}
 800b7ea:	e7f3      	b.n	800b7d4 <gpio_stm32_manage_callback+0x1c>
	return node->next;
 800b7ec:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	2d00      	cmp	r5, #0
 800b7f2:	d1f4      	bne.n	800b7de <gpio_stm32_manage_callback+0x26>
			if (!set) {
 800b7f4:	b13a      	cbz	r2, 800b806 <gpio_stm32_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
 800b7f6:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 800b7f8:	689a      	ldr	r2, [r3, #8]
 800b7fa:	600a      	str	r2, [r1, #0]
	list->head = node;
 800b7fc:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 800b7fe:	2800      	cmp	r0, #0
 800b800:	d1eb      	bne.n	800b7da <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 800b802:	60d9      	str	r1, [r3, #12]
}
 800b804:	e7ea      	b.n	800b7dc <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 800b806:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 800b80a:	e7e7      	b.n	800b7dc <gpio_stm32_manage_callback+0x24>

0800b80c <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 800b80c:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800b80e:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 800b810:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b812:	6867      	ldr	r7, [r4, #4]
 800b814:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800b816:	f3c2 1680 	ubfx	r6, r2, #6, #1
 800b81a:	ea27 0700 	bic.w	r7, r7, r0
 800b81e:	408e      	lsls	r6, r1
 800b820:	433e      	orrs	r6, r7
 800b822:	6066      	str	r6, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b824:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 800b828:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800b82c:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800b830:	f04f 0e03 	mov.w	lr, #3
 800b834:	007f      	lsls	r7, r7, #1
 800b836:	fa0e f707 	lsl.w	r7, lr, r7
 800b83a:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b83e:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 800b842:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800b846:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 800b84a:	007f      	lsls	r7, r7, #1
 800b84c:	40be      	lsls	r6, r7
 800b84e:	ea46 060c 	orr.w	r6, r6, ip
 800b852:	60a6      	str	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b854:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 800b858:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b85c:	68e7      	ldr	r7, [r4, #12]
 800b85e:	0076      	lsls	r6, r6, #1
 800b860:	fa0e f606 	lsl.w	r6, lr, r6
 800b864:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b868:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 800b86c:	fab6 f686 	clz	r6, r6
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 800b870:	f002 0530 	and.w	r5, r2, #48	; 0x30
 800b874:	0076      	lsls	r6, r6, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800b876:	f3c2 2241 	ubfx	r2, r2, #9, #2
 800b87a:	40b2      	lsls	r2, r6
 800b87c:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 800b87e:	2d20      	cmp	r5, #32
 800b880:	60e2      	str	r2, [r4, #12]
 800b882:	d115      	bne.n	800b8b0 <gpio_stm32_configure_raw.isra.0+0xa4>
		if (pin < 8) {
 800b884:	2907      	cmp	r1, #7
 800b886:	dc2b      	bgt.n	800b8e0 <gpio_stm32_configure_raw.isra.0+0xd4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b888:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b88c:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 800b88e:	b32a      	cbz	r2, 800b8dc <gpio_stm32_configure_raw.isra.0+0xd0>
  return __builtin_clz(value);
 800b890:	fab2 f282 	clz	r2, r2
 800b894:	0092      	lsls	r2, r2, #2
 800b896:	260f      	movs	r6, #15
 800b898:	fa06 f202 	lsl.w	r2, r6, r2
 800b89c:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8a0:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 800b8a4:	fab2 f282 	clz	r2, r2
 800b8a8:	0092      	lsls	r2, r2, #2
 800b8aa:	4093      	lsls	r3, r2
 800b8ac:	430b      	orrs	r3, r1
 800b8ae:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8b0:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800b8b4:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b8b8:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8ba:	fa90 f0a0 	rbit	r0, r0
 800b8be:	005b      	lsls	r3, r3, #1
 800b8c0:	2103      	movs	r1, #3
  return __builtin_clz(value);
 800b8c2:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 800b8c6:	092d      	lsrs	r5, r5, #4
 800b8c8:	fa01 f303 	lsl.w	r3, r1, r3
 800b8cc:	0040      	lsls	r0, r0, #1
 800b8ce:	ea22 0303 	bic.w	r3, r2, r3
 800b8d2:	fa05 f000 	lsl.w	r0, r5, r0
 800b8d6:	4318      	orrs	r0, r3
 800b8d8:	6020      	str	r0, [r4, #0]
}
 800b8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 800b8dc:	462a      	mov	r2, r5
 800b8de:	e7d9      	b.n	800b894 <gpio_stm32_configure_raw.isra.0+0x88>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b8e0:	0a02      	lsrs	r2, r0, #8
 800b8e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8e4:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 800b8e8:	b181      	cbz	r1, 800b90c <gpio_stm32_configure_raw.isra.0+0x100>
  return __builtin_clz(value);
 800b8ea:	fab1 f181 	clz	r1, r1
 800b8ee:	0089      	lsls	r1, r1, #2
 800b8f0:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8f2:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800b8f6:	fab2 f282 	clz	r2, r2
 800b8fa:	fa07 f101 	lsl.w	r1, r7, r1
 800b8fe:	0092      	lsls	r2, r2, #2
 800b900:	ea26 0101 	bic.w	r1, r6, r1
 800b904:	4093      	lsls	r3, r2
 800b906:	430b      	orrs	r3, r1
 800b908:	6263      	str	r3, [r4, #36]	; 0x24
}
 800b90a:	e7d1      	b.n	800b8b0 <gpio_stm32_configure_raw.isra.0+0xa4>
    return 32U;
 800b90c:	4629      	mov	r1, r5
 800b90e:	e7ee      	b.n	800b8ee <gpio_stm32_configure_raw.isra.0+0xe2>

0800b910 <gpio_stm32_config>:
{
 800b910:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 800b912:	039a      	lsls	r2, r3, #14
{
 800b914:	b510      	push	{r4, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 800b916:	d51a      	bpl.n	800b94e <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 800b918:	079c      	lsls	r4, r3, #30
 800b91a:	d511      	bpl.n	800b940 <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 800b91c:	075a      	lsls	r2, r3, #29
 800b91e:	d52f      	bpl.n	800b980 <gpio_stm32_config+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800b920:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 800b922:	06dc      	lsls	r4, r3, #27
 800b924:	d50e      	bpl.n	800b944 <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800b926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800b92a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
	const struct gpio_stm32_config *cfg = dev->config;
 800b92e:	6844      	ldr	r4, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800b930:	d11c      	bne.n	800b96c <gpio_stm32_config+0x5c>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 800b932:	035b      	lsls	r3, r3, #13
 800b934:	d514      	bpl.n	800b960 <gpio_stm32_config+0x50>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800b936:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800b938:	2301      	movs	r3, #1
 800b93a:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 800b93c:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 800b93e:	e00f      	b.n	800b960 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 800b940:	2210      	movs	r2, #16
 800b942:	e7ee      	b.n	800b922 <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800b944:	069c      	lsls	r4, r3, #26
 800b946:	d5f0      	bpl.n	800b92a <gpio_stm32_config+0x1a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800b948:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 800b94c:	e7ed      	b.n	800b92a <gpio_stm32_config+0x1a>
	} else if  ((flags & GPIO_INPUT) != 0) {
 800b94e:	03dc      	lsls	r4, r3, #15
 800b950:	d511      	bpl.n	800b976 <gpio_stm32_config+0x66>
		if ((flags & GPIO_PULL_UP) != 0) {
 800b952:	06da      	lsls	r2, r3, #27
 800b954:	d411      	bmi.n	800b97a <gpio_stm32_config+0x6a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800b956:	f013 0220 	ands.w	r2, r3, #32
 800b95a:	bf18      	it	ne
 800b95c:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 800b960:	6840      	ldr	r0, [r0, #4]
 800b962:	2300      	movs	r3, #0
 800b964:	f7ff ff52 	bl	800b80c <gpio_stm32_configure_raw.isra.0>
	return 0;
 800b968:	2000      	movs	r0, #0
}
 800b96a:	bd10      	pop	{r4, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800b96c:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800b96e:	2301      	movs	r3, #1
 800b970:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 800b972:	61a3      	str	r3, [r4, #24]
	return 0;
 800b974:	e7f4      	b.n	800b960 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800b976:	2230      	movs	r2, #48	; 0x30
 800b978:	e7f2      	b.n	800b960 <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800b97a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b97e:	e7ef      	b.n	800b960 <gpio_stm32_config+0x50>
				return -ENOTSUP;
 800b980:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800b984:	e7f1      	b.n	800b96a <gpio_stm32_config+0x5a>

0800b986 <gpio_stm32_isr>:
{
 800b986:	460b      	mov	r3, r1
 800b988:	6889      	ldr	r1, [r1, #8]
 800b98a:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800b98c:	b169      	cbz	r1, 800b9aa <gpio_stm32_isr+0x24>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 800b98e:	2501      	movs	r5, #1
 800b990:	685e      	ldr	r6, [r3, #4]
	return node->next;
 800b992:	680c      	ldr	r4, [r1, #0]
 800b994:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 800b996:	688a      	ldr	r2, [r1, #8]
 800b998:	402a      	ands	r2, r5
 800b99a:	d002      	beq.n	800b9a2 <gpio_stm32_isr+0x1c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 800b99c:	684b      	ldr	r3, [r1, #4]
 800b99e:	4630      	mov	r0, r6
 800b9a0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800b9a2:	b114      	cbz	r4, 800b9aa <gpio_stm32_isr+0x24>
 800b9a4:	4621      	mov	r1, r4
 800b9a6:	6824      	ldr	r4, [r4, #0]
 800b9a8:	e7f5      	b.n	800b996 <gpio_stm32_isr+0x10>
}
 800b9aa:	bd70      	pop	{r4, r5, r6, pc}

0800b9ac <gpio_stm32_configure>:
{
 800b9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ae:	461f      	mov	r7, r3
 800b9b0:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 800b9b2:	6840      	ldr	r0, [r0, #4]
{
 800b9b4:	460e      	mov	r6, r1
 800b9b6:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 800b9b8:	f7ff ff28 	bl	800b80c <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 800b9bc:	2f11      	cmp	r7, #17
 800b9be:	d108      	bne.n	800b9d2 <gpio_stm32_configure+0x26>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	fa03 f606 	lsl.w	r6, r3, r6
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800b9c6:	6863      	ldr	r3, [r4, #4]
 800b9c8:	685b      	ldr	r3, [r3, #4]
		if (gpio_out == STM32_ODR_1) {
 800b9ca:	052a      	lsls	r2, r5, #20
	WRITE_REG(gpio->BSRR, pins);
 800b9cc:	bf4c      	ite	mi
 800b9ce:	619e      	strmi	r6, [r3, #24]
 800b9d0:	629e      	strpl	r6, [r3, #40]	; 0x28
}
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b9d6 <gpio_pin_configure_dt>:
{
 800b9d6:	b4f0      	push	{r4, r5, r6, r7}
 800b9d8:	4602      	mov	r2, r0
	return gpio_pin_configure(spec->port,
 800b9da:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
 800b9dc:	88d3      	ldrh	r3, [r2, #6]
	return gpio_pin_configure(spec->port,
 800b9de:	7916      	ldrb	r6, [r2, #4]
 800b9e0:	430b      	orrs	r3, r1
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 800b9e2:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
 800b9e4:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 800b9e6:	6901      	ldr	r1, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 800b9e8:	d506      	bpl.n	800b9f8 <gpio_pin_configure_dt+0x22>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 800b9ea:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 800b9ee:	d003      	beq.n	800b9f8 <gpio_pin_configure_dt+0x22>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800b9f0:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 800b9f2:	bf48      	it	mi
 800b9f4:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800b9f8:	680c      	ldr	r4, [r1, #0]
 800b9fa:	2501      	movs	r5, #1
 800b9fc:	40b5      	lsls	r5, r6
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800b9fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800ba02:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800ba04:	bf4c      	ite	mi
 800ba06:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800ba08:	43ac      	bicpl	r4, r5
 800ba0a:	600c      	str	r4, [r1, #0]
	return api->pin_configure(port, pin, flags);
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	4631      	mov	r1, r6
}
 800ba10:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
 800ba12:	4718      	bx	r3

0800ba14 <dht_init>:
	.sample_fetch = &dht_sample_fetch,
	.channel_get = &dht_channel_get,
};

static int dht_init(const struct device *dev)
{
 800ba14:	b510      	push	{r4, lr}
	int rc = 0;
	const struct dht_config *cfg = dev->config;
 800ba16:	6844      	ldr	r4, [r0, #4]

	if (!device_is_ready(cfg->dio_gpio.port)) {
 800ba18:	6820      	ldr	r0, [r4, #0]
 800ba1a:	f000 f964 	bl	800bce6 <z_device_is_ready>
 800ba1e:	b130      	cbz	r0, 800ba2e <dht_init+0x1a>
		LOG_ERR("GPIO device not ready");
		return -ENODEV;
	}

	rc = gpio_pin_configure_dt(&cfg->dio_gpio, GPIO_OUTPUT_INACTIVE);
 800ba20:	4620      	mov	r0, r4
 800ba22:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000

	return rc;
}
 800ba26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rc = gpio_pin_configure_dt(&cfg->dio_gpio, GPIO_OUTPUT_INACTIVE);
 800ba2a:	f7ff bfd4 	b.w	800b9d6 <gpio_pin_configure_dt>
}
 800ba2e:	f06f 0012 	mvn.w	r0, #18
 800ba32:	bd10      	pop	{r4, pc}

0800ba34 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 800ba34:	4603      	mov	r3, r0
 800ba36:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
 800ba38:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800ba3a:	7919      	ldrb	r1, [r3, #4]
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	fa03 f101 	lsl.w	r1, r3, r1
 800ba42:	6903      	ldr	r3, [r0, #16]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 800ba48:	bf18      	it	ne
 800ba4a:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 800ba4e:	b112      	cbz	r2, 800ba56 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
 800ba50:	6883      	ldr	r3, [r0, #8]
 800ba52:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 800ba54:	4718      	bx	r3
 800ba56:	6883      	ldr	r3, [r0, #8]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	e7fb      	b.n	800ba54 <gpio_pin_set_dt.isra.0+0x20>

0800ba5c <dht_sample_fetch>:
{
 800ba5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	gpio_pin_set_dt(&cfg->dio_gpio, true);
 800ba60:	6844      	ldr	r4, [r0, #4]
	struct dht_data *drv_data = dev->data;
 800ba62:	6905      	ldr	r5, [r0, #16]
{
 800ba64:	b08d      	sub	sp, #52	; 0x34
 800ba66:	4607      	mov	r7, r0
	gpio_pin_set_dt(&cfg->dio_gpio, true);
 800ba68:	2101      	movs	r1, #1
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	f7ff ffe2 	bl	800ba34 <gpio_pin_set_dt.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
 800ba70:	f244 6050 	movw	r0, #18000	; 0x4650
 800ba74:	f7f9 fa2a 	bl	8004ecc <z_impl_k_busy_wait>
	gpio_pin_set_dt(&cfg->dio_gpio, false);
 800ba78:	2100      	movs	r1, #0
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f7ff ffda 	bl	800ba34 <gpio_pin_set_dt.isra.0>
	gpio_pin_configure_dt(&cfg->dio_gpio, GPIO_INPUT);
 800ba80:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ba84:	4620      	mov	r0, r4
 800ba86:	f7ff ffa6 	bl	800b9d6 <gpio_pin_configure_dt>
	if (dht_measure_signal_duration(dev, false) == -1) {
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	f7f5 fb8f 	bl	80011b0 <dht_measure_signal_duration.isra.0>
 800ba92:	3001      	adds	r0, #1
 800ba94:	d10a      	bne.n	800baac <dht_sample_fetch+0x50>
		ret = -EIO;
 800ba96:	f06f 0504 	mvn.w	r5, #4
	gpio_pin_configure_dt(&cfg->dio_gpio, GPIO_OUTPUT_INACTIVE);
 800ba9a:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f7ff ff99 	bl	800b9d6 <gpio_pin_configure_dt>
}
 800baa4:	4628      	mov	r0, r5
 800baa6:	b00d      	add	sp, #52	; 0x34
 800baa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (dht_measure_signal_duration(dev, true) == -1) {
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	2101      	movs	r1, #1
 800bab0:	f7f5 fb7e 	bl	80011b0 <dht_measure_signal_duration.isra.0>
 800bab4:	3001      	adds	r0, #1
 800bab6:	d0ee      	beq.n	800ba96 <dht_sample_fetch+0x3a>
	if (dht_measure_signal_duration(dev, false) == -1) {
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	2100      	movs	r1, #0
 800babc:	f7f5 fb78 	bl	80011b0 <dht_measure_signal_duration.isra.0>
 800bac0:	3001      	adds	r0, #1
 800bac2:	d0e8      	beq.n	800ba96 <dht_sample_fetch+0x3a>
 800bac4:	ae02      	add	r6, sp, #8
 800bac6:	46b1      	mov	r9, r6
	for (i = 0U; i < DHT_DATA_BITS_NUM; i++) {
 800bac8:	f04f 0800 	mov.w	r8, #0
		if (dht_measure_signal_duration(dev, true) == -1) {
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	2101      	movs	r1, #1
 800bad0:	f7f5 fb6e 	bl	80011b0 <dht_measure_signal_duration.isra.0>
 800bad4:	3001      	adds	r0, #1
 800bad6:	d0de      	beq.n	800ba96 <dht_sample_fetch+0x3a>
		signal_duration[i] = dht_measure_signal_duration(dev, false);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	2100      	movs	r1, #0
 800badc:	f7f5 fb68 	bl	80011b0 <dht_measure_signal_duration.isra.0>
 800bae0:	f809 0b01 	strb.w	r0, [r9], #1
		if (signal_duration[i] == -1) {
 800bae4:	3001      	adds	r0, #1
 800bae6:	d0d6      	beq.n	800ba96 <dht_sample_fetch+0x3a>
	for (i = 0U; i < DHT_DATA_BITS_NUM; i++) {
 800bae8:	f108 0801 	add.w	r8, r8, #1
 800baec:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
 800baf0:	d1ec      	bne.n	800bacc <dht_sample_fetch+0x70>
	min_duration = signal_duration[0];
 800baf2:	f99d 3008 	ldrsb.w	r3, [sp, #8]
	for (i = 1U; i < DHT_DATA_BITS_NUM; i++) {
 800baf6:	2201      	movs	r2, #1
	max_duration = signal_duration[0];
 800baf8:	4619      	mov	r1, r3
		if (min_duration > signal_duration[i]) {
 800bafa:	56b0      	ldrsb	r0, [r6, r2]
 800bafc:	4283      	cmp	r3, r0
 800bafe:	bfa8      	it	ge
 800bb00:	4603      	movge	r3, r0
	for (i = 1U; i < DHT_DATA_BITS_NUM; i++) {
 800bb02:	3201      	adds	r2, #1
 800bb04:	4281      	cmp	r1, r0
 800bb06:	bfb8      	it	lt
 800bb08:	4601      	movlt	r1, r0
 800bb0a:	2a28      	cmp	r2, #40	; 0x28
 800bb0c:	d1f5      	bne.n	800bafa <dht_sample_fetch+0x9e>
	avg_duration = ((int16_t)min_duration + (int16_t)max_duration) / 2;
 800bb0e:	440b      	add	r3, r1
 800bb10:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
	(void)memset(buf, 0, sizeof(buf));
 800bb14:	2100      	movs	r1, #0
	avg_duration = ((int16_t)min_duration + (int16_t)max_duration) / 2;
 800bb16:	f343 0347 	sbfx	r3, r3, #1, #8
	(void)memset(buf, 0, sizeof(buf));
 800bb1a:	9100      	str	r1, [sp, #0]
 800bb1c:	f88d 1004 	strb.w	r1, [sp, #4]
	for (i = 0U; i < DHT_DATA_BITS_NUM; i++) {
 800bb20:	4608      	mov	r0, r1
			buf[j] = (buf[j] << 1) | 1;
 800bb22:	aa0c      	add	r2, sp, #48	; 0x30
 800bb24:	1857      	adds	r7, r2, r1
		if (signal_duration[i] >= avg_duration) {
 800bb26:	f916 cb01 	ldrsb.w	ip, [r6], #1
			buf[j] = (buf[j] << 1) | 1;
 800bb2a:	f817 2c30 	ldrb.w	r2, [r7, #-48]
		if (signal_duration[i] >= avg_duration) {
 800bb2e:	459c      	cmp	ip, r3
 800bb30:	ea4f 0242 	mov.w	r2, r2, lsl #1
			buf[j] = (buf[j] << 1) | 1;
 800bb34:	bfa8      	it	ge
 800bb36:	f042 0201 	orrge.w	r2, r2, #1
			buf[j] = buf[j] << 1;
 800bb3a:	b2d2      	uxtb	r2, r2
 800bb3c:	f807 2c30 	strb.w	r2, [r7, #-48]
		if (i % 8 == 7U) {
 800bb40:	f000 0207 	and.w	r2, r0, #7
 800bb44:	2a07      	cmp	r2, #7
	for (i = 0U; i < DHT_DATA_BITS_NUM; i++) {
 800bb46:	f100 0001 	add.w	r0, r0, #1
			j++;
 800bb4a:	bf08      	it	eq
 800bb4c:	3101      	addeq	r1, #1
	for (i = 0U; i < DHT_DATA_BITS_NUM; i++) {
 800bb4e:	2828      	cmp	r0, #40	; 0x28
 800bb50:	d1e7      	bne.n	800bb22 <dht_sample_fetch+0xc6>
	if (((buf[0] + buf[1] + buf[2] + buf[3]) & 0xFF) != buf[4]) {
 800bb52:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bb56:	f89d 3000 	ldrb.w	r3, [sp]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bb60:	4413      	add	r3, r2
 800bb62:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bb66:	4413      	add	r3, r2
 800bb68:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d191      	bne.n	800ba96 <dht_sample_fetch+0x3a>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800bb72:	9b00      	ldr	r3, [sp, #0]
 800bb74:	602b      	str	r3, [r5, #0]
	int ret = 0;
 800bb76:	2500      	movs	r5, #0
 800bb78:	e78f      	b.n	800ba9a <dht_sample_fetch+0x3e>

0800bb7a <uart_stm32_err_check>:
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 800bb7a:	6843      	ldr	r3, [r0, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800bb7e:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 800bb80:	69da      	ldr	r2, [r3, #28]
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 800bb82:	07d1      	lsls	r1, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800bb84:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800bb86:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 800bb8a:	bf48      	it	mi
 800bb8c:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800bb90:	0792      	lsls	r2, r2, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 800bb92:	69da      	ldr	r2, [r3, #28]
		err |= UART_ERROR_FRAMING;
 800bb94:	bf48      	it	mi
 800bb96:	f040 0004 	orrmi.w	r0, r0, #4
 800bb9a:	05d1      	lsls	r1, r2, #23
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 800bb9c:	bf42      	ittt	mi
 800bb9e:	f44f 7280 	movmi.w	r2, #256	; 0x100
		err |= UART_BREAK;
 800bba2:	f040 0008 	orrmi.w	r0, r0, #8
 800bba6:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 800bba8:	07c2      	lsls	r2, r0, #31
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800bbaa:	bf44      	itt	mi
 800bbac:	2208      	movmi	r2, #8
 800bbae:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 800bbb0:	0781      	lsls	r1, r0, #30
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 800bbb2:	bf44      	itt	mi
 800bbb4:	2201      	movmi	r2, #1
 800bbb6:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 800bbb8:	0742      	lsls	r2, r0, #29
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 800bbba:	bf44      	itt	mi
 800bbbc:	2202      	movmi	r2, #2
 800bbbe:	621a      	strmi	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 800bbc0:	2204      	movs	r2, #4
 800bbc2:	621a      	str	r2, [r3, #32]
}
 800bbc4:	4770      	bx	lr

0800bbc6 <uart_stm32_poll_out>:
{
 800bbc6:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 800bbc8:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 800bbca:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800bbcc:	69d3      	ldr	r3, [r2, #28]
 800bbce:	061b      	lsls	r3, r3, #24
 800bbd0:	d5fc      	bpl.n	800bbcc <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 800bbd2:	f04f 0210 	mov.w	r2, #16
 800bbd6:	f3ef 8311 	mrs	r3, BASEPRI
 800bbda:	f382 8812 	msr	BASEPRI_MAX, r2
 800bbde:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 800bbe2:	6802      	ldr	r2, [r0, #0]
 800bbe4:	69d4      	ldr	r4, [r2, #28]
 800bbe6:	0624      	lsls	r4, r4, #24
 800bbe8:	d404      	bmi.n	800bbf4 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 800bbea:	f383 8811 	msr	BASEPRI, r3
 800bbee:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 800bbf2:	e7ea      	b.n	800bbca <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800bbf4:	b289      	uxth	r1, r1
 800bbf6:	8511      	strh	r1, [r2, #40]	; 0x28
	__asm__ volatile(
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
}
 800bc00:	bd10      	pop	{r4, pc}

0800bc02 <uart_stm32_poll_in>:
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 800bc02:	6843      	ldr	r3, [r0, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800bc06:	69da      	ldr	r2, [r3, #28]
 800bc08:	0710      	lsls	r0, r2, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800bc0a:	bf44      	itt	mi
 800bc0c:	2208      	movmi	r2, #8
 800bc0e:	621a      	strmi	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800bc10:	69da      	ldr	r2, [r3, #28]
 800bc12:	0692      	lsls	r2, r2, #26
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800bc14:	bf43      	ittte	mi
 800bc16:	8c9b      	ldrhmi	r3, [r3, #36]	; 0x24
 800bc18:	700b      	strbmi	r3, [r1, #0]
	return 0;
 800bc1a:	2000      	movmi	r0, #0
		return -1;
 800bc1c:	f04f 30ff 	movpl.w	r0, #4294967295
}
 800bc20:	4770      	bx	lr

0800bc22 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 800bc22:	6903      	ldr	r3, [r0, #16]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 800bc28:	6843      	ldr	r3, [r0, #4]
 800bc2a:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800bc2c:	6813      	ldr	r3, [r2, #0]
 800bc2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800bc32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc36:	d02d      	beq.n	800bc94 <uart_stm32_config_get+0x72>
		return UART_CFG_PARITY_NONE;
 800bc38:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 800bc3c:	4243      	negs	r3, r0
 800bc3e:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800bc40:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800bc42:	6853      	ldr	r3, [r2, #4]
 800bc44:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800bc48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc4c:	d024      	beq.n	800bc98 <uart_stm32_config_get+0x76>
 800bc4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc52:	d023      	beq.n	800bc9c <uart_stm32_config_get+0x7a>
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	bf14      	ite	ne
 800bc58:	2303      	movne	r3, #3
 800bc5a:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800bc5c:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800bc5e:	6810      	ldr	r0, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800bc60:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800bc62:	f000 2010 	and.w	r0, r0, #268439552	; 0x10001000
	switch (db) {
 800bc66:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800bc6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bc6e:	d017      	beq.n	800bca0 <uart_stm32_config_get+0x7e>
 800bc70:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 800bc74:	d119      	bne.n	800bcaa <uart_stm32_config_get+0x88>
			return UART_CFG_DATA_BITS_6;
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	bf0c      	ite	eq
 800bc7a:	2302      	moveq	r3, #2
 800bc7c:	2301      	movne	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800bc7e:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800bc80:	6893      	ldr	r3, [r2, #8]
 800bc82:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800bc86:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 800bc8a:	4253      	negs	r3, r2
 800bc8c:	4153      	adcs	r3, r2
 800bc8e:	71cb      	strb	r3, [r1, #7]
}
 800bc90:	2000      	movs	r0, #0
 800bc92:	4770      	bx	lr
	switch (parity) {
 800bc94:	2302      	movs	r3, #2
 800bc96:	e7d3      	b.n	800bc40 <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_0_5;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	e7df      	b.n	800bc5c <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 800bc9c:	2302      	movs	r3, #2
 800bc9e:	e7dd      	b.n	800bc5c <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_9;
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	bf14      	ite	ne
 800bca4:	2303      	movne	r3, #3
 800bca6:	2304      	moveq	r3, #4
 800bca8:	e7e9      	b.n	800bc7e <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	bf14      	ite	ne
 800bcae:	2302      	movne	r3, #2
 800bcb0:	2303      	moveq	r3, #3
 800bcb2:	e7e4      	b.n	800bc7e <uart_stm32_config_get+0x5c>

0800bcb4 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 800bcb4:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 800bcb6:	6803      	ldr	r3, [r0, #0]
 800bcb8:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 800bcba:	7903      	ldrb	r3, [r0, #4]
 800bcbc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	00db      	lsls	r3, r3, #3
 800bcc4:	6805      	ldr	r5, [r0, #0]
 800bcc6:	6814      	ldr	r4, [r2, #0]
 800bcc8:	441d      	add	r5, r3
 800bcca:	42ac      	cmp	r4, r5
 800bccc:	d902      	bls.n	800bcd4 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
 800bcce:	f06f 0001 	mvn.w	r0, #1
}
 800bcd2:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 800bcd4:	7965      	ldrb	r5, [r4, #5]
 800bcd6:	428d      	cmp	r5, r1
 800bcd8:	d002      	beq.n	800bce0 <pinctrl_lookup_state+0x2c>
		(*state)++;
 800bcda:	3408      	adds	r4, #8
 800bcdc:	6014      	str	r4, [r2, #0]
 800bcde:	e7f1      	b.n	800bcc4 <pinctrl_lookup_state+0x10>
			return 0;
 800bce0:	2000      	movs	r0, #0
 800bce2:	e7f6      	b.n	800bcd2 <pinctrl_lookup_state+0x1e>

0800bce4 <z_device_state_init>:
}
 800bce4:	4770      	bx	lr

0800bce6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 800bce6:	b138      	cbz	r0, 800bcf8 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 800bce8:	68c3      	ldr	r3, [r0, #12]
 800bcea:	8818      	ldrh	r0, [r3, #0]
 800bcec:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800bcf0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800bcf4:	4258      	negs	r0, r3
 800bcf6:	4158      	adcs	r0, r3
}
 800bcf8:	4770      	bx	lr

0800bcfa <arch_system_halt>:
	__asm__ volatile(
 800bcfa:	f04f 0210 	mov.w	r2, #16
 800bcfe:	f3ef 8311 	mrs	r3, BASEPRI
 800bd02:	f382 8812 	msr	BASEPRI_MAX, r2
 800bd06:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 800bd0a:	e7fe      	b.n	800bd0a <arch_system_halt+0x10>

0800bd0c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 800bd0c:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 800bd0e:	f7ff fff4 	bl	800bcfa <arch_system_halt>

0800bd12 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800bd12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd14:	4605      	mov	r5, r0
 800bd16:	460e      	mov	r6, r1
 800bd18:	f04f 0310 	mov.w	r3, #16
 800bd1c:	f3ef 8711 	mrs	r7, BASEPRI
 800bd20:	f383 8812 	msr	BASEPRI_MAX, r3
 800bd24:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800bd28:	f7f8 ff18 	bl	8004b5c <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 800bd2c:	4631      	mov	r1, r6
 800bd2e:	4604      	mov	r4, r0
 800bd30:	4628      	mov	r0, r5
 800bd32:	f7ff ffeb 	bl	800bd0c <k_sys_fatal_error_handler>
	__asm__ volatile(
 800bd36:	f387 8811 	msr	BASEPRI, r7
 800bd3a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800bd3e:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800bd40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bd44:	f7f7 bb06 	b.w	8003354 <z_impl_k_thread_abort>

0800bd48 <z_early_memset>:
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 800bd48:	f7f9 bbb2 	b.w	80054b0 <memset>

0800bd4c <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800bd4c:	f7f4 bf68 	b.w	8000c20 <memcpy>

0800bd50 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800bd50:	b508      	push	{r3, lr}
	__asm__ volatile(
 800bd52:	f04f 0210 	mov.w	r2, #16
 800bd56:	f3ef 8311 	mrs	r3, BASEPRI
 800bd5a:	f382 8812 	msr	BASEPRI_MAX, r2
 800bd5e:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800bd62:	f7f7 f8b3 	bl	8002ecc <arch_cpu_idle>
 800bd66:	e7f4      	b.n	800bd52 <idle+0x2>

0800bd68 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 800bd68:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800bd6c:	428b      	cmp	r3, r1
 800bd6e:	d001      	beq.n	800bd74 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 800bd70:	f7f8 bdb2 	b.w	80048d8 <z_set_prio>
}
 800bd74:	2000      	movs	r0, #0
 800bd76:	4770      	bx	lr

0800bd78 <z_impl_k_mutex_init>:
{
 800bd78:	4603      	mov	r3, r0
	mutex->owner = NULL;
 800bd7a:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
 800bd7c:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
 800bd80:	e9c3 3300 	strd	r3, r3, [r3]
}
 800bd84:	4770      	bx	lr

0800bd86 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 800bd86:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 800bd8a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800bd8c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800bd8e:	2300      	movs	r3, #0
	node->prev = NULL;
 800bd90:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 800bd94:	4770      	bx	lr

0800bd96 <unpend_thread_no_timeout>:
{
 800bd96:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 800bd98:	f7ff fff5 	bl	800bd86 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800bd9c:	7b43      	ldrb	r3, [r0, #13]
 800bd9e:	f023 0302 	bic.w	r3, r3, #2
 800bda2:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 800bda4:	2300      	movs	r3, #0
 800bda6:	6083      	str	r3, [r0, #8]
}
 800bda8:	bd08      	pop	{r3, pc}

0800bdaa <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800bdaa:	4603      	mov	r3, r0
 800bdac:	b920      	cbnz	r0, 800bdb8 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdae:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 800bdb2:	b90a      	cbnz	r2, 800bdb8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 800bdb4:	f7f7 b8e8 	b.w	8002f88 <arch_swap>
	__asm__ volatile(
 800bdb8:	f383 8811 	msr	BASEPRI, r3
 800bdbc:	f3bf 8f6f 	isb	sy
}
 800bdc0:	4770      	bx	lr

0800bdc2 <z_reschedule_unlocked>:
	__asm__ volatile(
 800bdc2:	f04f 0310 	mov.w	r3, #16
 800bdc6:	f3ef 8011 	mrs	r0, BASEPRI
 800bdca:	f383 8812 	msr	BASEPRI_MAX, r3
 800bdce:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800bdd2:	f7ff bfea 	b.w	800bdaa <z_reschedule_irqlock>

0800bdd6 <z_priq_dumb_best>:
{
 800bdd6:	4603      	mov	r3, r0
	return list->head == list;
 800bdd8:	6800      	ldr	r0, [r0, #0]
}
 800bdda:	4283      	cmp	r3, r0
 800bddc:	bf08      	it	eq
 800bdde:	2000      	moveq	r0, #0
 800bde0:	4770      	bx	lr

0800bde2 <z_ready_thread>:
{
 800bde2:	b510      	push	{r4, lr}
 800bde4:	f04f 0310 	mov.w	r3, #16
 800bde8:	f3ef 8411 	mrs	r4, BASEPRI
 800bdec:	f383 8812 	msr	BASEPRI_MAX, r3
 800bdf0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 800bdf4:	f7f8 fcca 	bl	800478c <ready_thread>
	__asm__ volatile(
 800bdf8:	f384 8811 	msr	BASEPRI, r4
 800bdfc:	f3bf 8f6f 	isb	sy
}
 800be00:	bd10      	pop	{r4, pc}

0800be02 <z_thread_timeout>:
{
 800be02:	b510      	push	{r4, lr}
 800be04:	4601      	mov	r1, r0
	__asm__ volatile(
 800be06:	f04f 0310 	mov.w	r3, #16
 800be0a:	f3ef 8411 	mrs	r4, BASEPRI
 800be0e:	f383 8812 	msr	BASEPRI_MAX, r3
 800be12:	f3bf 8f6f 	isb	sy
		if (!killed) {
 800be16:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 800be1a:	f013 0f28 	tst.w	r3, #40	; 0x28
 800be1e:	d10d      	bne.n	800be3c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 800be20:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 800be24:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 800be26:	b10b      	cbz	r3, 800be2c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 800be28:	f7ff ffb5 	bl	800bd96 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800be2c:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 800be30:	f023 0314 	bic.w	r3, r3, #20
 800be34:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 800be38:	f7f8 fca8 	bl	800478c <ready_thread>
	__asm__ volatile(
 800be3c:	f384 8811 	msr	BASEPRI, r4
 800be40:	f3bf 8f6f 	isb	sy
}
 800be44:	bd10      	pop	{r4, pc}

0800be46 <add_to_waitq_locked>:
{
 800be46:	b538      	push	{r3, r4, r5, lr}
 800be48:	4604      	mov	r4, r0
 800be4a:	460d      	mov	r5, r1
	unready_thread(thread);
 800be4c:	f7f8 fcf2 	bl	8004834 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 800be50:	7b63      	ldrb	r3, [r4, #13]
 800be52:	f043 0302 	orr.w	r3, r3, #2
 800be56:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 800be58:	b195      	cbz	r5, 800be80 <add_to_waitq_locked+0x3a>
 800be5a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 800be5c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800be5e:	429d      	cmp	r5, r3
 800be60:	d015      	beq.n	800be8e <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800be62:	b1a3      	cbz	r3, 800be8e <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
 800be64:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 800be68:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 800be6c:	4291      	cmp	r1, r2
 800be6e:	d008      	beq.n	800be82 <add_to_waitq_locked+0x3c>
		return b2 - b1;
 800be70:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 800be72:	2a00      	cmp	r2, #0
 800be74:	dd05      	ble.n	800be82 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
 800be76:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800be78:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 800be7c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800be7e:	605c      	str	r4, [r3, #4]
}
 800be80:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 800be82:	686a      	ldr	r2, [r5, #4]
 800be84:	4293      	cmp	r3, r2
 800be86:	d002      	beq.n	800be8e <add_to_waitq_locked+0x48>
 800be88:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d1ec      	bne.n	800be68 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
 800be8e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 800be90:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 800be94:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800be96:	606c      	str	r4, [r5, #4]
}
 800be98:	e7f2      	b.n	800be80 <add_to_waitq_locked+0x3a>

0800be9a <z_unpend_first_thread>:
{
 800be9a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800be9c:	f04f 0310 	mov.w	r3, #16
 800bea0:	f3ef 8511 	mrs	r5, BASEPRI
 800bea4:	f383 8812 	msr	BASEPRI_MAX, r3
 800bea8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 800beac:	f7ff ff93 	bl	800bdd6 <z_priq_dumb_best>
		if (thread != NULL) {
 800beb0:	4604      	mov	r4, r0
 800beb2:	b120      	cbz	r0, 800bebe <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
 800beb4:	f7ff ff6f 	bl	800bd96 <unpend_thread_no_timeout>
 800beb8:	3018      	adds	r0, #24
 800beba:	f000 f806 	bl	800beca <z_abort_timeout>
	__asm__ volatile(
 800bebe:	f385 8811 	msr	BASEPRI, r5
 800bec2:	f3bf 8f6f 	isb	sy
}
 800bec6:	4620      	mov	r0, r4
 800bec8:	bd38      	pop	{r3, r4, r5, pc}

0800beca <z_abort_timeout>:
{
 800beca:	b510      	push	{r4, lr}
	__asm__ volatile(
 800becc:	f04f 0210 	mov.w	r2, #16
 800bed0:	f3ef 8411 	mrs	r4, BASEPRI
 800bed4:	f382 8812 	msr	BASEPRI_MAX, r2
 800bed8:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 800bedc:	6803      	ldr	r3, [r0, #0]
 800bede:	b13b      	cbz	r3, 800bef0 <z_abort_timeout+0x26>
			remove_timeout(to);
 800bee0:	f7f8 feec 	bl	8004cbc <remove_timeout>
			ret = 0;
 800bee4:	2000      	movs	r0, #0
	__asm__ volatile(
 800bee6:	f384 8811 	msr	BASEPRI, r4
 800beea:	f3bf 8f6f 	isb	sy
}
 800beee:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 800bef0:	f06f 0015 	mvn.w	r0, #21
 800bef4:	e7f7      	b.n	800bee6 <z_abort_timeout+0x1c>

0800bef6 <z_set_timeout_expiry>:
{
 800bef6:	b570      	push	{r4, r5, r6, lr}
 800bef8:	4604      	mov	r4, r0
 800befa:	460d      	mov	r5, r1
	__asm__ volatile(
 800befc:	f04f 0310 	mov.w	r3, #16
 800bf00:	f3ef 8611 	mrs	r6, BASEPRI
 800bf04:	f383 8812 	msr	BASEPRI_MAX, r3
 800bf08:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 800bf0c:	f7f8 feb0 	bl	8004c70 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800bf10:	2801      	cmp	r0, #1
 800bf12:	dd05      	ble.n	800bf20 <z_set_timeout_expiry+0x2a>
 800bf14:	42a0      	cmp	r0, r4
 800bf16:	db03      	blt.n	800bf20 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 800bf18:	4629      	mov	r1, r5
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f7f7 ff98 	bl	8003e50 <sys_clock_set_timeout>
	__asm__ volatile(
 800bf20:	f386 8811 	msr	BASEPRI, r6
 800bf24:	f3bf 8f6f 	isb	sy
}
 800bf28:	bd70      	pop	{r4, r5, r6, pc}

0800bf2a <sys_clock_tick_get_32>:
{
 800bf2a:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 800bf2c:	f7f8 ffb6 	bl	8004e9c <sys_clock_tick_get>
}
 800bf30:	bd08      	pop	{r3, pc}

0800bf32 <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
 800bf32:	f7f8 bfb3 	b.w	8004e9c <sys_clock_tick_get>
