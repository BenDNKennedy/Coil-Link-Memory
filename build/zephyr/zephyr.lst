
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	00 07 00 20 35 11 00 08 73 2a 00 08 09 11 00 08     ... 5...s*......
 8000010:	09 11 00 08 09 11 00 08 09 11 00 08 00 00 00 00     ................
	...
 800002c:	29 0e 00 08 09 11 00 08 00 00 00 00 d5 0d 00 08     )...............
 800003c:	2d 1b 00 08                                         -...

08000040 <_irq_vector_table>:
 8000040:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 8000050:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 8000060:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 8000070:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 8000080:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 8000090:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 80000a0:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 80000b0:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 80000c0:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 80000d0:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 80000e0:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 80000f0:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 8000100:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 8000110:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 8000120:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 8000130:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 8000140:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 8000150:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 8000160:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 8000170:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 8000180:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 8000190:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08 d9 0e 00 08     ................
 80001a0:	d9 0e 00 08 d9 0e 00 08 d9 0e 00 08                 ............

Disassembly of section text:

080001ac <__aeabi_uldivmod>:
 80001ac:	b953      	cbnz	r3, 80001c4 <__aeabi_uldivmod+0x18>
 80001ae:	b94a      	cbnz	r2, 80001c4 <__aeabi_uldivmod+0x18>
 80001b0:	2900      	cmp	r1, #0
 80001b2:	bf08      	it	eq
 80001b4:	2800      	cmpeq	r0, #0
 80001b6:	bf1c      	itt	ne
 80001b8:	f04f 31ff 	movne.w	r1, #4294967295
 80001bc:	f04f 30ff 	movne.w	r0, #4294967295
 80001c0:	f000 b80c 	b.w	80001dc <__aeabi_idiv0>
 80001c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001cc:	f000 f808 	bl	80001e0 <__udivmoddi4>
 80001d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001d8:	b004      	add	sp, #16
 80001da:	4770      	bx	lr

080001dc <__aeabi_idiv0>:
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop

080001e0 <__udivmoddi4>:
 80001e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001e4:	4607      	mov	r7, r0
 80001e6:	468c      	mov	ip, r1
 80001e8:	4608      	mov	r0, r1
 80001ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80001ec:	4615      	mov	r5, r2
 80001ee:	463c      	mov	r4, r7
 80001f0:	4619      	mov	r1, r3
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	f040 80c6 	bne.w	8000384 <__udivmoddi4+0x1a4>
 80001f8:	4282      	cmp	r2, r0
 80001fa:	fab2 f782 	clz	r7, r2
 80001fe:	d946      	bls.n	800028e <__udivmoddi4+0xae>
 8000200:	b14f      	cbz	r7, 8000216 <__udivmoddi4+0x36>
 8000202:	f1c7 0e20 	rsb	lr, r7, #32
 8000206:	fa24 fe0e 	lsr.w	lr, r4, lr
 800020a:	fa00 f307 	lsl.w	r3, r0, r7
 800020e:	40bd      	lsls	r5, r7
 8000210:	ea4e 0c03 	orr.w	ip, lr, r3
 8000214:	40bc      	lsls	r4, r7
 8000216:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800021a:	fa1f fe85 	uxth.w	lr, r5
 800021e:	fbbc f9f8 	udiv	r9, ip, r8
 8000222:	0c22      	lsrs	r2, r4, #16
 8000224:	fb08 c319 	mls	r3, r8, r9, ip
 8000228:	fb09 fa0e 	mul.w	sl, r9, lr
 800022c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000230:	459a      	cmp	sl, r3
 8000232:	d928      	bls.n	8000286 <__udivmoddi4+0xa6>
 8000234:	18eb      	adds	r3, r5, r3
 8000236:	f109 30ff 	add.w	r0, r9, #4294967295
 800023a:	d204      	bcs.n	8000246 <__udivmoddi4+0x66>
 800023c:	459a      	cmp	sl, r3
 800023e:	d902      	bls.n	8000246 <__udivmoddi4+0x66>
 8000240:	f1a9 0002 	sub.w	r0, r9, #2
 8000244:	442b      	add	r3, r5
 8000246:	eba3 030a 	sub.w	r3, r3, sl
 800024a:	b2a4      	uxth	r4, r4
 800024c:	fbb3 f2f8 	udiv	r2, r3, r8
 8000250:	fb08 3312 	mls	r3, r8, r2, r3
 8000254:	fb02 fe0e 	mul.w	lr, r2, lr
 8000258:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800025c:	45a6      	cmp	lr, r4
 800025e:	d914      	bls.n	800028a <__udivmoddi4+0xaa>
 8000260:	192c      	adds	r4, r5, r4
 8000262:	f102 33ff 	add.w	r3, r2, #4294967295
 8000266:	d203      	bcs.n	8000270 <__udivmoddi4+0x90>
 8000268:	45a6      	cmp	lr, r4
 800026a:	d901      	bls.n	8000270 <__udivmoddi4+0x90>
 800026c:	1e93      	subs	r3, r2, #2
 800026e:	442c      	add	r4, r5
 8000270:	eba4 040e 	sub.w	r4, r4, lr
 8000274:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000278:	b11e      	cbz	r6, 8000282 <__udivmoddi4+0xa2>
 800027a:	40fc      	lsrs	r4, r7
 800027c:	2300      	movs	r3, #0
 800027e:	6034      	str	r4, [r6, #0]
 8000280:	6073      	str	r3, [r6, #4]
 8000282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000286:	4648      	mov	r0, r9
 8000288:	e7dd      	b.n	8000246 <__udivmoddi4+0x66>
 800028a:	4613      	mov	r3, r2
 800028c:	e7f0      	b.n	8000270 <__udivmoddi4+0x90>
 800028e:	b902      	cbnz	r2, 8000292 <__udivmoddi4+0xb2>
 8000290:	deff      	udf	#255	; 0xff
 8000292:	bb87      	cbnz	r7, 80002f6 <__udivmoddi4+0x116>
 8000294:	1a83      	subs	r3, r0, r2
 8000296:	2101      	movs	r1, #1
 8000298:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029c:	b2aa      	uxth	r2, r5
 800029e:	fbb3 fcfe 	udiv	ip, r3, lr
 80002a2:	0c20      	lsrs	r0, r4, #16
 80002a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002a8:	fb0c f802 	mul.w	r8, ip, r2
 80002ac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002b0:	4598      	cmp	r8, r3
 80002b2:	d963      	bls.n	800037c <__udivmoddi4+0x19c>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ba:	d204      	bcs.n	80002c6 <__udivmoddi4+0xe6>
 80002bc:	4598      	cmp	r8, r3
 80002be:	d902      	bls.n	80002c6 <__udivmoddi4+0xe6>
 80002c0:	f1ac 0002 	sub.w	r0, ip, #2
 80002c4:	442b      	add	r3, r5
 80002c6:	eba3 0308 	sub.w	r3, r3, r8
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d4:	fb0c f202 	mul.w	r2, ip, r2
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	42a2      	cmp	r2, r4
 80002de:	d94f      	bls.n	8000380 <__udivmoddi4+0x1a0>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f10c 33ff 	add.w	r3, ip, #4294967295
 80002e6:	d204      	bcs.n	80002f2 <__udivmoddi4+0x112>
 80002e8:	42a2      	cmp	r2, r4
 80002ea:	d902      	bls.n	80002f2 <__udivmoddi4+0x112>
 80002ec:	f1ac 0302 	sub.w	r3, ip, #2
 80002f0:	442c      	add	r4, r5
 80002f2:	1aa4      	subs	r4, r4, r2
 80002f4:	e7be      	b.n	8000274 <__udivmoddi4+0x94>
 80002f6:	f1c7 0c20 	rsb	ip, r7, #32
 80002fa:	fa20 f80c 	lsr.w	r8, r0, ip
 80002fe:	fa00 f307 	lsl.w	r3, r0, r7
 8000302:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000306:	40bd      	lsls	r5, r7
 8000308:	ea4c 0203 	orr.w	r2, ip, r3
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	b2ab      	uxth	r3, r5
 8000312:	fbb8 fcfe 	udiv	ip, r8, lr
 8000316:	0c11      	lsrs	r1, r2, #16
 8000318:	fb0e 801c 	mls	r0, lr, ip, r8
 800031c:	fb0c f903 	mul.w	r9, ip, r3
 8000320:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000324:	4581      	cmp	r9, r0
 8000326:	fa04 f407 	lsl.w	r4, r4, r7
 800032a:	d923      	bls.n	8000374 <__udivmoddi4+0x194>
 800032c:	1828      	adds	r0, r5, r0
 800032e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000332:	d204      	bcs.n	800033e <__udivmoddi4+0x15e>
 8000334:	4581      	cmp	r9, r0
 8000336:	d902      	bls.n	800033e <__udivmoddi4+0x15e>
 8000338:	f1ac 0102 	sub.w	r1, ip, #2
 800033c:	4428      	add	r0, r5
 800033e:	eba0 0009 	sub.w	r0, r0, r9
 8000342:	b292      	uxth	r2, r2
 8000344:	fbb0 fcfe 	udiv	ip, r0, lr
 8000348:	fb0e 001c 	mls	r0, lr, ip, r0
 800034c:	fb0c f803 	mul.w	r8, ip, r3
 8000350:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000354:	4598      	cmp	r8, r3
 8000356:	d90f      	bls.n	8000378 <__udivmoddi4+0x198>
 8000358:	18eb      	adds	r3, r5, r3
 800035a:	f10c 32ff 	add.w	r2, ip, #4294967295
 800035e:	d204      	bcs.n	800036a <__udivmoddi4+0x18a>
 8000360:	4598      	cmp	r8, r3
 8000362:	d902      	bls.n	800036a <__udivmoddi4+0x18a>
 8000364:	f1ac 0202 	sub.w	r2, ip, #2
 8000368:	442b      	add	r3, r5
 800036a:	eba3 0308 	sub.w	r3, r3, r8
 800036e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000372:	e791      	b.n	8000298 <__udivmoddi4+0xb8>
 8000374:	4661      	mov	r1, ip
 8000376:	e7e2      	b.n	800033e <__udivmoddi4+0x15e>
 8000378:	4662      	mov	r2, ip
 800037a:	e7f6      	b.n	800036a <__udivmoddi4+0x18a>
 800037c:	4660      	mov	r0, ip
 800037e:	e7a2      	b.n	80002c6 <__udivmoddi4+0xe6>
 8000380:	4663      	mov	r3, ip
 8000382:	e7b6      	b.n	80002f2 <__udivmoddi4+0x112>
 8000384:	4283      	cmp	r3, r0
 8000386:	d905      	bls.n	8000394 <__udivmoddi4+0x1b4>
 8000388:	b10e      	cbz	r6, 800038e <__udivmoddi4+0x1ae>
 800038a:	e9c6 7000 	strd	r7, r0, [r6]
 800038e:	2100      	movs	r1, #0
 8000390:	4608      	mov	r0, r1
 8000392:	e776      	b.n	8000282 <__udivmoddi4+0xa2>
 8000394:	fab3 f183 	clz	r1, r3
 8000398:	b981      	cbnz	r1, 80003bc <__udivmoddi4+0x1dc>
 800039a:	4283      	cmp	r3, r0
 800039c:	d301      	bcc.n	80003a2 <__udivmoddi4+0x1c2>
 800039e:	42ba      	cmp	r2, r7
 80003a0:	d80a      	bhi.n	80003b8 <__udivmoddi4+0x1d8>
 80003a2:	1abc      	subs	r4, r7, r2
 80003a4:	eb60 0303 	sbc.w	r3, r0, r3
 80003a8:	2001      	movs	r0, #1
 80003aa:	469c      	mov	ip, r3
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	d068      	beq.n	8000482 <__udivmoddi4+0x2a2>
 80003b0:	e9c6 4c00 	strd	r4, ip, [r6]
 80003b4:	2100      	movs	r1, #0
 80003b6:	e764      	b.n	8000282 <__udivmoddi4+0xa2>
 80003b8:	4608      	mov	r0, r1
 80003ba:	e7f7      	b.n	80003ac <__udivmoddi4+0x1cc>
 80003bc:	f1c1 0c20 	rsb	ip, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 f40c 	lsr.w	r4, r2, ip
 80003c6:	431c      	orrs	r4, r3
 80003c8:	fa02 f501 	lsl.w	r5, r2, r1
 80003cc:	fa00 f301 	lsl.w	r3, r0, r1
 80003d0:	fa27 f20c 	lsr.w	r2, r7, ip
 80003d4:	fa20 fb0c 	lsr.w	fp, r0, ip
 80003d8:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80003dc:	4313      	orrs	r3, r2
 80003de:	fbbb f8f9 	udiv	r8, fp, r9
 80003e2:	fa1f fe84 	uxth.w	lr, r4
 80003e6:	fb09 bb18 	mls	fp, r9, r8, fp
 80003ea:	0c1a      	lsrs	r2, r3, #16
 80003ec:	fb08 fa0e 	mul.w	sl, r8, lr
 80003f0:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 80003f4:	4592      	cmp	sl, r2
 80003f6:	fa07 f701 	lsl.w	r7, r7, r1
 80003fa:	d93e      	bls.n	800047a <__udivmoddi4+0x29a>
 80003fc:	18a2      	adds	r2, r4, r2
 80003fe:	f108 30ff 	add.w	r0, r8, #4294967295
 8000402:	d204      	bcs.n	800040e <__udivmoddi4+0x22e>
 8000404:	4592      	cmp	sl, r2
 8000406:	d902      	bls.n	800040e <__udivmoddi4+0x22e>
 8000408:	f1a8 0002 	sub.w	r0, r8, #2
 800040c:	4422      	add	r2, r4
 800040e:	eba2 020a 	sub.w	r2, r2, sl
 8000412:	b29b      	uxth	r3, r3
 8000414:	fbb2 f8f9 	udiv	r8, r2, r9
 8000418:	fb09 2218 	mls	r2, r9, r8, r2
 800041c:	fb08 fe0e 	mul.w	lr, r8, lr
 8000420:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000424:	4596      	cmp	lr, r2
 8000426:	d92a      	bls.n	800047e <__udivmoddi4+0x29e>
 8000428:	18a2      	adds	r2, r4, r2
 800042a:	f108 33ff 	add.w	r3, r8, #4294967295
 800042e:	d204      	bcs.n	800043a <__udivmoddi4+0x25a>
 8000430:	4596      	cmp	lr, r2
 8000432:	d902      	bls.n	800043a <__udivmoddi4+0x25a>
 8000434:	f1a8 0302 	sub.w	r3, r8, #2
 8000438:	4422      	add	r2, r4
 800043a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043e:	fba0 9305 	umull	r9, r3, r0, r5
 8000442:	eba2 020e 	sub.w	r2, r2, lr
 8000446:	429a      	cmp	r2, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	4698      	mov	r8, r3
 800044c:	d302      	bcc.n	8000454 <__udivmoddi4+0x274>
 800044e:	d106      	bne.n	800045e <__udivmoddi4+0x27e>
 8000450:	454f      	cmp	r7, r9
 8000452:	d204      	bcs.n	800045e <__udivmoddi4+0x27e>
 8000454:	ebb9 0e05 	subs.w	lr, r9, r5
 8000458:	eb63 0804 	sbc.w	r8, r3, r4
 800045c:	3801      	subs	r0, #1
 800045e:	b186      	cbz	r6, 8000482 <__udivmoddi4+0x2a2>
 8000460:	ebb7 030e 	subs.w	r3, r7, lr
 8000464:	eb62 0708 	sbc.w	r7, r2, r8
 8000468:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046c:	40cb      	lsrs	r3, r1
 800046e:	ea4c 0303 	orr.w	r3, ip, r3
 8000472:	40cf      	lsrs	r7, r1
 8000474:	e9c6 3700 	strd	r3, r7, [r6]
 8000478:	e79c      	b.n	80003b4 <__udivmoddi4+0x1d4>
 800047a:	4640      	mov	r0, r8
 800047c:	e7c7      	b.n	800040e <__udivmoddi4+0x22e>
 800047e:	4643      	mov	r3, r8
 8000480:	e7db      	b.n	800043a <__udivmoddi4+0x25a>
 8000482:	4631      	mov	r1, r6
 8000484:	e6fd      	b.n	8000282 <__udivmoddi4+0xa2>
	...

08000488 <main>:
static const struct gpio_dt_spec led0 = GPIO_DT_SPEC_GET(LED0_NODE, gpios);
//static const struct gpio_dt_spec led1 = GPIO_DT_SPEC_GET(LED1_NODE, gpios);
//static const struct gpio_dt_spec led2 = GPIO_DT_SPEC_GET(LED2_NODE, gpios);

void main(void)	
{
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 800048a:	4c14      	ldr	r4, [pc, #80]	; (80004dc <main+0x54>)
 800048c:	4620      	mov	r0, r4
 800048e:	f002 fd72 	bl	8002f76 <z_device_is_ready>
	int ret;

	if (!device_is_ready(led0.port)) {
 8000492:	b308      	cbz	r0, 80004d8 <main+0x50>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 8000494:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
 8000496:	68a1      	ldr	r1, [r4, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8000498:	6813      	ldr	r3, [r2, #0]
 800049a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800049e:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
 80004a0:	4620      	mov	r0, r4
 80004a2:	680b      	ldr	r3, [r1, #0]
 80004a4:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80004a8:	2107      	movs	r1, #7
 80004aa:	4798      	blx	r3
	}

	ret = gpio_pin_configure_dt(&led0, GPIO_OUTPUT_ACTIVE);
	//ret = gpio_pin_configure_dt(&led1, GPIO_OUTPUT_ACTIVE);
	//ret = gpio_pin_configure_dt(&led2, GPIO_OUTPUT_ACTIVE);
	if (ret < 0) {
 80004ac:	2800      	cmp	r0, #0
 80004ae:	db13      	blt.n	80004d8 <main+0x50>
	while (1) {
		ret = gpio_pin_toggle_dt(&led0);
		//ret = gpio_pin_toggle_dt(&led1);
		//ret = gpio_pin_toggle_dt(&led2);

		printk("Test Text %s\n", CONFIG_BOARD);
 80004b0:	4e0b      	ldr	r6, [pc, #44]	; (80004e0 <main+0x58>)
 80004b2:	4f0c      	ldr	r7, [pc, #48]	; (80004e4 <main+0x5c>)
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
 80004b4:	68a3      	ldr	r3, [r4, #8]
 80004b6:	2180      	movs	r1, #128	; 0x80
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4620      	mov	r0, r4
 80004bc:	4798      	blx	r3
 80004be:	4631      	mov	r1, r6
 80004c0:	4605      	mov	r5, r0
 80004c2:	4638      	mov	r0, r7
 80004c4:	f002 fa55 	bl	8002972 <printk>

		if (ret < 0) {
 80004c8:	2d00      	cmp	r5, #0
 80004ca:	db05      	blt.n	80004d8 <main+0x50>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 80004cc:	2100      	movs	r1, #0
 80004ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80004d2:	f002 f86f 	bl	80025b4 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 80004d6:	e7ed      	b.n	80004b4 <main+0x2c>
			return;
		}
		k_msleep(sleep_time);
	}
}
 80004d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004da:	bf00      	nop
 80004dc:	08003278 	.word	0x08003278
 80004e0:	080038da 	.word	0x080038da
 80004e4:	080038e8 	.word	0x080038e8

080004e8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80004e8:	680b      	ldr	r3, [r1, #0]
 80004ea:	3301      	adds	r3, #1
 80004ec:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80004ee:	4b01      	ldr	r3, [pc, #4]	; (80004f4 <char_out+0xc>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4718      	bx	r3
 80004f4:	20000000 	.word	0x20000000

080004f8 <__printk_hook_install>:
	_char_out = fn;
 80004f8:	4b01      	ldr	r3, [pc, #4]	; (8000500 <__printk_hook_install+0x8>)
 80004fa:	6018      	str	r0, [r3, #0]
}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000000 	.word	0x20000000

08000504 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 8000504:	b51f      	push	{r0, r1, r2, r3, r4, lr}

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
 8000506:	2400      	movs	r4, #0
{
 8000508:	4602      	mov	r2, r0
 800050a:	460b      	mov	r3, r1
 * returned from invoking @p out.
 */
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 800050c:	9400      	str	r4, [sp, #0]
 800050e:	a903      	add	r1, sp, #12
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <vprintk+0x18>)
		struct out_context ctx = { 0 };
 8000512:	9403      	str	r4, [sp, #12]
 8000514:	f000 f804 	bl	8000520 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 8000518:	b004      	add	sp, #16
 800051a:	bd10      	pop	{r4, pc}
 800051c:	080004e9 	.word	0x080004e9

08000520 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 8000520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000524:	b091      	sub	sp, #68	; 0x44
 8000526:	468b      	mov	fp, r1
 8000528:	9002      	str	r0, [sp, #8]
 800052a:	4692      	mov	sl, r2
 800052c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 800052e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000530:	f89a 0000 	ldrb.w	r0, [sl]
 8000534:	b908      	cbnz	r0, 800053a <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8000536:	4628      	mov	r0, r5
 8000538:	e363      	b.n	8000c02 <z_cbvprintf_impl+0x6e2>
		if (*fp != '%') {
 800053a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 800053c:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
 8000540:	d007      	beq.n	8000552 <z_cbvprintf_impl+0x32>
			OUTC('%');
 8000542:	9b02      	ldr	r3, [sp, #8]
 8000544:	4659      	mov	r1, fp
 8000546:	4798      	blx	r3
 8000548:	2800      	cmp	r0, #0
 800054a:	f2c0 835a 	blt.w	8000c02 <z_cbvprintf_impl+0x6e2>
 800054e:	3501      	adds	r5, #1
			break;
 8000550:	e212      	b.n	8000978 <z_cbvprintf_impl+0x458>
		} state = {
 8000552:	2218      	movs	r2, #24
 8000554:	2100      	movs	r1, #0
 8000556:	a80a      	add	r0, sp, #40	; 0x28
 8000558:	f002 faad 	bl	8002ab6 <memset>
	if (*sp == '%') {
 800055c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000560:	2b25      	cmp	r3, #37	; 0x25
 8000562:	d078      	beq.n	8000656 <z_cbvprintf_impl+0x136>
 8000564:	2200      	movs	r2, #0
 8000566:	4610      	mov	r0, r2
 8000568:	4696      	mov	lr, r2
 800056a:	4694      	mov	ip, r2
 800056c:	4616      	mov	r6, r2
 800056e:	4639      	mov	r1, r7
		switch (*sp) {
 8000570:	f817 3b01 	ldrb.w	r3, [r7], #1
 8000574:	2b2b      	cmp	r3, #43	; 0x2b
 8000576:	f000 809d 	beq.w	80006b4 <z_cbvprintf_impl+0x194>
 800057a:	f200 8094 	bhi.w	80006a6 <z_cbvprintf_impl+0x186>
 800057e:	2b20      	cmp	r3, #32
 8000580:	f000 809b 	beq.w	80006ba <z_cbvprintf_impl+0x19a>
 8000584:	2b23      	cmp	r3, #35	; 0x23
 8000586:	f000 809b 	beq.w	80006c0 <z_cbvprintf_impl+0x1a0>
 800058a:	b12e      	cbz	r6, 8000598 <z_cbvprintf_impl+0x78>
 800058c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8000590:	f046 0604 	orr.w	r6, r6, #4
 8000594:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8000598:	f1bc 0f00 	cmp.w	ip, #0
 800059c:	d005      	beq.n	80005aa <z_cbvprintf_impl+0x8a>
 800059e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 80005a2:	f046 0608 	orr.w	r6, r6, #8
 80005a6:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 80005aa:	f1be 0f00 	cmp.w	lr, #0
 80005ae:	d005      	beq.n	80005bc <z_cbvprintf_impl+0x9c>
 80005b0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 80005b4:	f046 0610 	orr.w	r6, r6, #16
 80005b8:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 80005bc:	b128      	cbz	r0, 80005ca <z_cbvprintf_impl+0xaa>
 80005be:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80005c2:	f040 0020 	orr.w	r0, r0, #32
 80005c6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 80005ca:	b12a      	cbz	r2, 80005d8 <z_cbvprintf_impl+0xb8>
 80005cc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80005d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005d4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
 80005d8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80005dc:	f002 0044 	and.w	r0, r2, #68	; 0x44
 80005e0:	2844      	cmp	r0, #68	; 0x44
 80005e2:	d103      	bne.n	80005ec <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 80005e4:	f36f 1286 	bfc	r2, #6, #1
 80005e8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
 80005ec:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 80005f0:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
 80005f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005f6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 80005fa:	d17b      	bne.n	80006f4 <z_cbvprintf_impl+0x1d4>
		conv->width_star = true;
 80005fc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8000600:	f042 0201 	orr.w	r2, r2, #1
			++sp;
 8000604:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 8000606:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
 800060a:	781a      	ldrb	r2, [r3, #0]
 800060c:	2a2e      	cmp	r2, #46	; 0x2e
 800060e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8000612:	bf0c      	ite	eq
 8000614:	2101      	moveq	r1, #1
 8000616:	2100      	movne	r1, #0
 8000618:	f361 0241 	bfi	r2, r1, #1, #1
 800061c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
 8000620:	d174      	bne.n	800070c <z_cbvprintf_impl+0x1ec>
	if (*sp == '*') {
 8000622:	785a      	ldrb	r2, [r3, #1]
 8000624:	2a2a      	cmp	r2, #42	; 0x2a
 8000626:	d06a      	beq.n	80006fe <z_cbvprintf_impl+0x1de>
	++sp;
 8000628:	3301      	adds	r3, #1
	size_t val = 0;
 800062a:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 800062c:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 800062e:	4618      	mov	r0, r3
 8000630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000634:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000638:	2f09      	cmp	r7, #9
 800063a:	f240 808e 	bls.w	800075a <z_cbvprintf_impl+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
 800063e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
 8000642:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
 8000644:	f3c2 0040 	ubfx	r0, r2, #1, #1
 8000648:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
 800064c:	f361 0241 	bfi	r2, r1, #1, #1
 8000650:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 8000654:	e05a      	b.n	800070c <z_cbvprintf_impl+0x1ec>
		conv->specifier = *sp++;
 8000656:	f10a 0702 	add.w	r7, sl, #2
 800065a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
 800065e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000662:	07d9      	lsls	r1, r3, #31
 8000664:	f140 8149 	bpl.w	80008fa <z_cbvprintf_impl+0x3da>
			width = va_arg(ap, int);
 8000668:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
 800066c:	f1b9 0f00 	cmp.w	r9, #0
 8000670:	da07      	bge.n	8000682 <z_cbvprintf_impl+0x162>
				conv->flag_dash = true;
 8000672:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8000676:	f042 0204 	orr.w	r2, r2, #4
 800067a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
 800067e:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
 8000682:	075a      	lsls	r2, r3, #29
 8000684:	f140 8142 	bpl.w	800090c <z_cbvprintf_impl+0x3ec>
			int arg = va_arg(ap, int);
 8000688:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 800068c:	f1b8 0f00 	cmp.w	r8, #0
 8000690:	f280 8141 	bge.w	8000916 <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
 8000694:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000698:	f36f 0341 	bfc	r3, #1, #1
 800069c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
 80006a0:	f04f 38ff 	mov.w	r8, #4294967295
 80006a4:	e137      	b.n	8000916 <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
 80006a6:	2b2d      	cmp	r3, #45	; 0x2d
 80006a8:	d00c      	beq.n	80006c4 <z_cbvprintf_impl+0x1a4>
 80006aa:	2b30      	cmp	r3, #48	; 0x30
 80006ac:	f47f af6d 	bne.w	800058a <z_cbvprintf_impl+0x6a>
			conv->flag_zero = true;
 80006b0:	2201      	movs	r2, #1
	} while (loop);
 80006b2:	e75c      	b.n	800056e <z_cbvprintf_impl+0x4e>
			conv->flag_plus = true;
 80006b4:	f04f 0c01 	mov.w	ip, #1
 80006b8:	e759      	b.n	800056e <z_cbvprintf_impl+0x4e>
			conv->flag_space = true;
 80006ba:	f04f 0e01 	mov.w	lr, #1
 80006be:	e756      	b.n	800056e <z_cbvprintf_impl+0x4e>
			conv->flag_hash = true;
 80006c0:	2001      	movs	r0, #1
 80006c2:	e754      	b.n	800056e <z_cbvprintf_impl+0x4e>
		switch (*sp) {
 80006c4:	2601      	movs	r6, #1
 80006c6:	e752      	b.n	800056e <z_cbvprintf_impl+0x4e>
		val = 10U * val + *sp++ - '0';
 80006c8:	fb0c 0202 	mla	r2, ip, r2, r0
 80006cc:	3a30      	subs	r2, #48	; 0x30
 80006ce:	4633      	mov	r3, r6
 80006d0:	461e      	mov	r6, r3
 80006d2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80006d6:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 80006da:	2f09      	cmp	r7, #9
 80006dc:	d9f4      	bls.n	80006c8 <z_cbvprintf_impl+0x1a8>
	if (sp != wp) {
 80006de:	4299      	cmp	r1, r3
 80006e0:	d093      	beq.n	800060a <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 80006e2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
 80006e6:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
 80006e8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 80006ea:	f362 0141 	bfi	r1, r2, #1, #1
 80006ee:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 80006f2:	e78a      	b.n	800060a <z_cbvprintf_impl+0xea>
 80006f4:	460b      	mov	r3, r1
	size_t val = 0;
 80006f6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 80006f8:	f04f 0c0a 	mov.w	ip, #10
 80006fc:	e7e8      	b.n	80006d0 <z_cbvprintf_impl+0x1b0>
		conv->prec_star = true;
 80006fe:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8000702:	f042 0204 	orr.w	r2, r2, #4
 8000706:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
 800070a:	3302      	adds	r3, #2
	switch (*sp) {
 800070c:	461f      	mov	r7, r3
 800070e:	f817 2b01 	ldrb.w	r2, [r7], #1
 8000712:	2a6c      	cmp	r2, #108	; 0x6c
 8000714:	d041      	beq.n	800079a <z_cbvprintf_impl+0x27a>
 8000716:	d825      	bhi.n	8000764 <z_cbvprintf_impl+0x244>
 8000718:	2a68      	cmp	r2, #104	; 0x68
 800071a:	d02b      	beq.n	8000774 <z_cbvprintf_impl+0x254>
 800071c:	2a6a      	cmp	r2, #106	; 0x6a
 800071e:	d046      	beq.n	80007ae <z_cbvprintf_impl+0x28e>
 8000720:	2a4c      	cmp	r2, #76	; 0x4c
 8000722:	d04c      	beq.n	80007be <z_cbvprintf_impl+0x29e>
 8000724:	461f      	mov	r7, r3
	conv->specifier = *sp++;
 8000726:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 800072a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
 800072e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
 8000732:	2a78      	cmp	r2, #120	; 0x78
 8000734:	f200 80d9 	bhi.w	80008ea <z_cbvprintf_impl+0x3ca>
 8000738:	2a57      	cmp	r2, #87	; 0x57
 800073a:	d84d      	bhi.n	80007d8 <z_cbvprintf_impl+0x2b8>
 800073c:	2a41      	cmp	r2, #65	; 0x41
 800073e:	d003      	beq.n	8000748 <z_cbvprintf_impl+0x228>
 8000740:	3a45      	subs	r2, #69	; 0x45
 8000742:	2a02      	cmp	r2, #2
 8000744:	f200 80d1 	bhi.w	80008ea <z_cbvprintf_impl+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
 8000748:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800074c:	2204      	movs	r2, #4
 800074e:	f362 0302 	bfi	r3, r2, #0, #3
 8000752:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
 8000756:	2301      	movs	r3, #1
			break;
 8000758:	e09e      	b.n	8000898 <z_cbvprintf_impl+0x378>
		val = 10U * val + *sp++ - '0';
 800075a:	fb06 2101 	mla	r1, r6, r1, r2
 800075e:	3930      	subs	r1, #48	; 0x30
 8000760:	4603      	mov	r3, r0
 8000762:	e764      	b.n	800062e <z_cbvprintf_impl+0x10e>
	switch (*sp) {
 8000764:	2a74      	cmp	r2, #116	; 0x74
 8000766:	d026      	beq.n	80007b6 <z_cbvprintf_impl+0x296>
 8000768:	2a7a      	cmp	r2, #122	; 0x7a
 800076a:	d1db      	bne.n	8000724 <z_cbvprintf_impl+0x204>
		conv->length_mod = LENGTH_Z;
 800076c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000770:	2206      	movs	r2, #6
 8000772:	e00d      	b.n	8000790 <z_cbvprintf_impl+0x270>
		if (*++sp == 'h') {
 8000774:	785a      	ldrb	r2, [r3, #1]
 8000776:	2a68      	cmp	r2, #104	; 0x68
 8000778:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800077c:	d106      	bne.n	800078c <z_cbvprintf_impl+0x26c>
			conv->length_mod = LENGTH_HH;
 800077e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8000780:	f361 02c6 	bfi	r2, r1, #3, #4
 8000784:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
 8000788:	1c9f      	adds	r7, r3, #2
 800078a:	e7cc      	b.n	8000726 <z_cbvprintf_impl+0x206>
			conv->length_mod = LENGTH_H;
 800078c:	4613      	mov	r3, r2
 800078e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
 8000790:	f362 03c6 	bfi	r3, r2, #3, #4
 8000794:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
 8000798:	e7c5      	b.n	8000726 <z_cbvprintf_impl+0x206>
		if (*++sp == 'l') {
 800079a:	785a      	ldrb	r2, [r3, #1]
 800079c:	2a6c      	cmp	r2, #108	; 0x6c
 800079e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80007a2:	d101      	bne.n	80007a8 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_LL;
 80007a4:	2104      	movs	r1, #4
 80007a6:	e7eb      	b.n	8000780 <z_cbvprintf_impl+0x260>
			conv->length_mod = LENGTH_L;
 80007a8:	4613      	mov	r3, r2
 80007aa:	2203      	movs	r2, #3
 80007ac:	e7f0      	b.n	8000790 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_J;
 80007ae:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80007b2:	2205      	movs	r2, #5
 80007b4:	e7ec      	b.n	8000790 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_T;
 80007b6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80007ba:	2207      	movs	r2, #7
 80007bc:	e7e8      	b.n	8000790 <z_cbvprintf_impl+0x270>
		conv->unsupported = true;
 80007be:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80007c2:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80007c6:	f023 0302 	bic.w	r3, r3, #2
 80007ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
 80007d6:	e7a6      	b.n	8000726 <z_cbvprintf_impl+0x206>
	switch (conv->specifier) {
 80007d8:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 80007dc:	2920      	cmp	r1, #32
 80007de:	f200 8084 	bhi.w	80008ea <z_cbvprintf_impl+0x3ca>
 80007e2:	a001      	add	r0, pc, #4	; (adr r0, 80007e8 <z_cbvprintf_impl+0x2c8>)
 80007e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80007e8:	080008ad 	.word	0x080008ad
 80007ec:	080008eb 	.word	0x080008eb
 80007f0:	080008eb 	.word	0x080008eb
 80007f4:	080008eb 	.word	0x080008eb
 80007f8:	080008eb 	.word	0x080008eb
 80007fc:	080008eb 	.word	0x080008eb
 8000800:	080008eb 	.word	0x080008eb
 8000804:	080008eb 	.word	0x080008eb
 8000808:	080008eb 	.word	0x080008eb
 800080c:	08000749 	.word	0x08000749
 8000810:	080008eb 	.word	0x080008eb
 8000814:	080008ad 	.word	0x080008ad
 8000818:	0800086d 	.word	0x0800086d
 800081c:	08000749 	.word	0x08000749
 8000820:	08000749 	.word	0x08000749
 8000824:	08000749 	.word	0x08000749
 8000828:	080008eb 	.word	0x080008eb
 800082c:	0800086d 	.word	0x0800086d
 8000830:	080008eb 	.word	0x080008eb
 8000834:	080008eb 	.word	0x080008eb
 8000838:	080008eb 	.word	0x080008eb
 800083c:	080008eb 	.word	0x080008eb
 8000840:	080008b5 	.word	0x080008b5
 8000844:	080008ad 	.word	0x080008ad
 8000848:	080008d1 	.word	0x080008d1
 800084c:	080008eb 	.word	0x080008eb
 8000850:	080008eb 	.word	0x080008eb
 8000854:	080008d1 	.word	0x080008d1
 8000858:	080008eb 	.word	0x080008eb
 800085c:	080008ad 	.word	0x080008ad
 8000860:	080008eb 	.word	0x080008eb
 8000864:	080008eb 	.word	0x080008eb
 8000868:	080008ad 	.word	0x080008ad
		conv->specifier_cat = SPECIFIER_SINT;
 800086c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8000870:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000872:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8000876:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 800087a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 800087c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
 8000880:	bf02      	ittt	eq
 8000882:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
 8000886:	f041 0101 	orreq.w	r1, r1, #1
 800088a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
 800088e:	2a63      	cmp	r2, #99	; 0x63
 8000890:	d131      	bne.n	80008f6 <z_cbvprintf_impl+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8000892:	3b00      	subs	r3, #0
 8000894:	bf18      	it	ne
 8000896:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8000898:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800089c:	f3c2 0140 	ubfx	r1, r2, #1, #1
 80008a0:	430b      	orrs	r3, r1
 80008a2:	f363 0241 	bfi	r2, r3, #1, #1
 80008a6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 80008aa:	e6d8      	b.n	800065e <z_cbvprintf_impl+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
 80008ac:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 80008b0:	2002      	movs	r0, #2
 80008b2:	e7de      	b.n	8000872 <z_cbvprintf_impl+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
 80008b4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008b8:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80008bc:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 80008c0:	2103      	movs	r1, #3
 80008c2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008c6:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 80008c8:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008cc:	4143      	adcs	r3, r0
 80008ce:	e7e3      	b.n	8000898 <z_cbvprintf_impl+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
 80008d0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 80008d4:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 80008d6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 80008da:	f361 0202 	bfi	r2, r1, #0, #3
 80008de:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
 80008e2:	bf14      	ite	ne
 80008e4:	2301      	movne	r3, #1
 80008e6:	2300      	moveq	r3, #0
 80008e8:	e7d6      	b.n	8000898 <z_cbvprintf_impl+0x378>
		conv->invalid = true;
 80008ea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e7ce      	b.n	8000898 <z_cbvprintf_impl+0x378>
		} else if (conv->width_present) {
 80008fa:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
 80008fe:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8000900:	bfb4      	ite	lt
 8000902:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
 8000906:	f04f 39ff 	movge.w	r9, #4294967295
 800090a:	e6ba      	b.n	8000682 <z_cbvprintf_impl+0x162>
		} else if (conv->prec_present) {
 800090c:	079b      	lsls	r3, r3, #30
 800090e:	f57f aec7 	bpl.w	80006a0 <z_cbvprintf_impl+0x180>
			precision = conv->prec_value;
 8000912:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
 8000916:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
 800091a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 800091c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
 8000920:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
 8000924:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8000928:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 800092a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 800092e:	d135      	bne.n	800099c <z_cbvprintf_impl+0x47c>
			switch (length_mod) {
 8000930:	1ecb      	subs	r3, r1, #3
 8000932:	2b04      	cmp	r3, #4
 8000934:	d822      	bhi.n	800097c <z_cbvprintf_impl+0x45c>
 8000936:	e8df f003 	tbb	[pc, r3]
 800093a:	0903      	.short	0x0903
 800093c:	2109      	.short	0x2109
 800093e:	21          	.byte	0x21
 800093f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 8000940:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 8000944:	17da      	asrs	r2, r3, #31
 8000946:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
 800094a:	e006      	b.n	800095a <z_cbvprintf_impl+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
 800094c:	3407      	adds	r4, #7
 800094e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 8000952:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8000956:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
 800095a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800095e:	f013 0603 	ands.w	r6, r3, #3
 8000962:	d059      	beq.n	8000a18 <z_cbvprintf_impl+0x4f8>
			OUTS(sp, fp);
 8000964:	9802      	ldr	r0, [sp, #8]
 8000966:	463b      	mov	r3, r7
 8000968:	4652      	mov	r2, sl
 800096a:	4659      	mov	r1, fp
 800096c:	f002 f85e 	bl	8002a2c <outs>
 8000970:	2800      	cmp	r0, #0
 8000972:	f2c0 8146 	blt.w	8000c02 <z_cbvprintf_impl+0x6e2>
 8000976:	4405      	add	r5, r0
			continue;
 8000978:	46ba      	mov	sl, r7
 800097a:	e5d9      	b.n	8000530 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 800097c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000980:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000982:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8000986:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 800098a:	d102      	bne.n	8000992 <z_cbvprintf_impl+0x472>
				value->sint = (signed char)value->sint;
 800098c:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
 8000990:	e7d8      	b.n	8000944 <z_cbvprintf_impl+0x424>
			} else if (length_mod == LENGTH_H) {
 8000992:	2902      	cmp	r1, #2
 8000994:	d1e1      	bne.n	800095a <z_cbvprintf_impl+0x43a>
				value->sint = (short)value->sint;
 8000996:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800099a:	e7d3      	b.n	8000944 <z_cbvprintf_impl+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
 800099c:	2b02      	cmp	r3, #2
 800099e:	d129      	bne.n	80009f4 <z_cbvprintf_impl+0x4d4>
			switch (length_mod) {
 80009a0:	1ecb      	subs	r3, r1, #3
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	d813      	bhi.n	80009ce <z_cbvprintf_impl+0x4ae>
 80009a6:	e8df f003 	tbb	[pc, r3]
 80009aa:	0a03      	.short	0x0a03
 80009ac:	120a      	.short	0x120a
 80009ae:	12          	.byte	0x12
 80009af:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 80009b0:	6822      	ldr	r2, [r4, #0]
 80009b2:	920a      	str	r2, [sp, #40]	; 0x28
 80009b4:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
 80009b6:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 80009b8:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
 80009ba:	4604      	mov	r4, r0
 80009bc:	e7cd      	b.n	800095a <z_cbvprintf_impl+0x43a>
					(uint_value_type)va_arg(ap,
 80009be:	1de0      	adds	r0, r4, #7
 80009c0:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 80009c4:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 80009c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
 80009cc:	e7f5      	b.n	80009ba <z_cbvprintf_impl+0x49a>
					(uint_value_type)va_arg(ap, size_t);
 80009ce:	f854 3b04 	ldr.w	r3, [r4], #4
 80009d2:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 80009d4:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 80009d6:	f04f 0300 	mov.w	r3, #0
 80009da:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
 80009dc:	d105      	bne.n	80009ea <z_cbvprintf_impl+0x4ca>
				value->uint = (unsigned char)value->uint;
 80009de:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
 80009e2:	930a      	str	r3, [sp, #40]	; 0x28
 80009e4:	2300      	movs	r3, #0
 80009e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80009e8:	e7b7      	b.n	800095a <z_cbvprintf_impl+0x43a>
			} else if (length_mod == LENGTH_H) {
 80009ea:	2902      	cmp	r1, #2
 80009ec:	d1b5      	bne.n	800095a <z_cbvprintf_impl+0x43a>
				value->uint = (unsigned short)value->uint;
 80009ee:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80009f2:	e7f6      	b.n	80009e2 <z_cbvprintf_impl+0x4c2>
		} else if (specifier_cat == SPECIFIER_FP) {
 80009f4:	2b04      	cmp	r3, #4
 80009f6:	d109      	bne.n	8000a0c <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
 80009f8:	1de3      	adds	r3, r4, #7
 80009fa:	f023 0307 	bic.w	r3, r3, #7
 80009fe:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 8000a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000a0a:	e7a6      	b.n	800095a <z_cbvprintf_impl+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000a0c:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 8000a0e:	bf04      	itt	eq
 8000a10:	f854 3b04 	ldreq.w	r3, [r4], #4
 8000a14:	930a      	streq	r3, [sp, #40]	; 0x28
 8000a16:	e7a0      	b.n	800095a <z_cbvprintf_impl+0x43a>
		switch (conv->specifier) {
 8000a18:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000a1c:	2878      	cmp	r0, #120	; 0x78
 8000a1e:	d8ab      	bhi.n	8000978 <z_cbvprintf_impl+0x458>
 8000a20:	2862      	cmp	r0, #98	; 0x62
 8000a22:	d822      	bhi.n	8000a6a <z_cbvprintf_impl+0x54a>
 8000a24:	2825      	cmp	r0, #37	; 0x25
 8000a26:	f43f ad8c 	beq.w	8000542 <z_cbvprintf_impl+0x22>
 8000a2a:	2858      	cmp	r0, #88	; 0x58
 8000a2c:	d1a4      	bne.n	8000978 <z_cbvprintf_impl+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000a2e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8000a38:	ab04      	add	r3, sp, #16
 8000a3a:	aa0c      	add	r2, sp, #48	; 0x30
 8000a3c:	f001 ffb0 	bl	80029a0 <encode_uint>
 8000a40:	4682      	mov	sl, r0
			if (precision >= 0) {
 8000a42:	f1b8 0f00 	cmp.w	r8, #0
 8000a46:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8000a4a:	db0c      	blt.n	8000a66 <z_cbvprintf_impl+0x546>
				conv->flag_zero = false;
 8000a4c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
 8000a50:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
 8000a54:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000a58:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 8000a5a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
 8000a5e:	d902      	bls.n	8000a66 <z_cbvprintf_impl+0x546>
					conv->pad0_value = precision - (int)len;
 8000a60:	eba8 0303 	sub.w	r3, r8, r3
 8000a64:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
 8000a66:	4680      	mov	r8, r0
 8000a68:	e03e      	b.n	8000ae8 <z_cbvprintf_impl+0x5c8>
		switch (conv->specifier) {
 8000a6a:	3863      	subs	r0, #99	; 0x63
 8000a6c:	2815      	cmp	r0, #21
 8000a6e:	d883      	bhi.n	8000978 <z_cbvprintf_impl+0x458>
 8000a70:	a201      	add	r2, pc, #4	; (adr r2, 8000a78 <z_cbvprintf_impl+0x558>)
 8000a72:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000a76:	bf00      	nop
 8000a78:	08000af9 	.word	0x08000af9
 8000a7c:	08000b5d 	.word	0x08000b5d
 8000a80:	08000979 	.word	0x08000979
 8000a84:	08000979 	.word	0x08000979
 8000a88:	08000979 	.word	0x08000979
 8000a8c:	08000979 	.word	0x08000979
 8000a90:	08000b5d 	.word	0x08000b5d
 8000a94:	08000979 	.word	0x08000979
 8000a98:	08000979 	.word	0x08000979
 8000a9c:	08000979 	.word	0x08000979
 8000aa0:	08000979 	.word	0x08000979
 8000aa4:	08000bb7 	.word	0x08000bb7
 8000aa8:	08000b85 	.word	0x08000b85
 8000aac:	08000b89 	.word	0x08000b89
 8000ab0:	08000979 	.word	0x08000979
 8000ab4:	08000979 	.word	0x08000979
 8000ab8:	08000ad1 	.word	0x08000ad1
 8000abc:	08000979 	.word	0x08000979
 8000ac0:	08000b85 	.word	0x08000b85
 8000ac4:	08000979 	.word	0x08000979
 8000ac8:	08000979 	.word	0x08000979
 8000acc:	08000b85 	.word	0x08000b85
			if (precision >= 0) {
 8000ad0:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 8000ad4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
 8000ad8:	db0a      	blt.n	8000af0 <z_cbvprintf_impl+0x5d0>
				len = strnlen(bps, precision);
 8000ada:	4641      	mov	r1, r8
 8000adc:	4650      	mov	r0, sl
 8000ade:	f001 ffd6 	bl	8002a8e <strnlen>
			bpe = bps + len;
 8000ae2:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
 8000ae6:	2600      	movs	r6, #0
		if (bps == NULL) {
 8000ae8:	f1ba 0f00 	cmp.w	sl, #0
 8000aec:	d10c      	bne.n	8000b08 <z_cbvprintf_impl+0x5e8>
 8000aee:	e743      	b.n	8000978 <z_cbvprintf_impl+0x458>
				len = strlen(bps);
 8000af0:	4650      	mov	r0, sl
 8000af2:	f001 ffc5 	bl	8002a80 <strlen>
 8000af6:	e7f4      	b.n	8000ae2 <z_cbvprintf_impl+0x5c2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000afa:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
 8000afe:	2600      	movs	r6, #0
			bps = buf;
 8000b00:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
 8000b04:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
 8000b08:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
 8000b0c:	b106      	cbz	r6, 8000b10 <z_cbvprintf_impl+0x5f0>
			nj_len += 1U;
 8000b0e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8000b10:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8000b14:	06d0      	lsls	r0, r2, #27
 8000b16:	d568      	bpl.n	8000bea <z_cbvprintf_impl+0x6ca>
			nj_len += 2U;
 8000b18:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 8000b1a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 8000b1c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
 8000b1e:	bf48      	it	mi
 8000b20:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
 8000b22:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8000b24:	bf48      	it	mi
 8000b26:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 8000b28:	f1b9 0f00 	cmp.w	r9, #0
 8000b2c:	dd76      	ble.n	8000c1c <z_cbvprintf_impl+0x6fc>
			if (!conv->flag_dash) {
 8000b2e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
 8000b32:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
 8000b36:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000b3a:	9303      	str	r3, [sp, #12]
 8000b3c:	0753      	lsls	r3, r2, #29
 8000b3e:	d46d      	bmi.n	8000c1c <z_cbvprintf_impl+0x6fc>
				if (conv->flag_zero) {
 8000b40:	0650      	lsls	r0, r2, #25
 8000b42:	d561      	bpl.n	8000c08 <z_cbvprintf_impl+0x6e8>
					if (sign != 0) {
 8000b44:	b146      	cbz	r6, 8000b58 <z_cbvprintf_impl+0x638>
						OUTC(sign);
 8000b46:	9b02      	ldr	r3, [sp, #8]
 8000b48:	4659      	mov	r1, fp
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	4798      	blx	r3
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	db57      	blt.n	8000c02 <z_cbvprintf_impl+0x6e2>
						sign = 0;
 8000b52:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 8000b54:	3501      	adds	r5, #1
						sign = 0;
 8000b56:	461e      	mov	r6, r3
					pad = '0';
 8000b58:	2330      	movs	r3, #48	; 0x30
 8000b5a:	e056      	b.n	8000c0a <z_cbvprintf_impl+0x6ea>
			if (conv->flag_plus) {
 8000b5c:	071e      	lsls	r6, r3, #28
 8000b5e:	d40f      	bmi.n	8000b80 <z_cbvprintf_impl+0x660>
				sign = ' ';
 8000b60:	f013 0610 	ands.w	r6, r3, #16
 8000b64:	bf18      	it	ne
 8000b66:	2620      	movne	r6, #32
			sint = value->sint;
 8000b68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	f6bf af5e 	bge.w	8000a2e <z_cbvprintf_impl+0x50e>
				value->uint = (uint_value_type)-sint;
 8000b72:	4252      	negs	r2, r2
 8000b74:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b78:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
 8000b7c:	262d      	movs	r6, #45	; 0x2d
 8000b7e:	e756      	b.n	8000a2e <z_cbvprintf_impl+0x50e>
				sign = '+';
 8000b80:	262b      	movs	r6, #43	; 0x2b
 8000b82:	e7f1      	b.n	8000b68 <z_cbvprintf_impl+0x648>
		switch (conv->specifier) {
 8000b84:	2600      	movs	r6, #0
 8000b86:	e752      	b.n	8000a2e <z_cbvprintf_impl+0x50e>
			if (value->ptr != NULL) {
 8000b88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000b8a:	b340      	cbz	r0, 8000bde <z_cbvprintf_impl+0x6be>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000b8c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	aa0c      	add	r2, sp, #48	; 0x30
 8000b94:	ab04      	add	r3, sp, #16
 8000b96:	2100      	movs	r1, #0
 8000b98:	f001 ff02 	bl	80029a0 <encode_uint>
				conv->altform_0c = true;
 8000b9c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8000ba0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000ba4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000ba8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000bac:	4682      	mov	sl, r0
				conv->altform_0c = true;
 8000bae:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
 8000bb2:	2600      	movs	r6, #0
				goto prec_int_pad0;
 8000bb4:	e745      	b.n	8000a42 <z_cbvprintf_impl+0x522>
				store_count(conv, value->ptr, count);
 8000bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
 8000bb8:	2907      	cmp	r1, #7
 8000bba:	f63f aedd 	bhi.w	8000978 <z_cbvprintf_impl+0x458>
 8000bbe:	e8df f001 	tbb	[pc, r1]
 8000bc2:	040c      	.short	0x040c
 8000bc4:	08080c06 	.word	0x08080c06
 8000bc8:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 8000bca:	701d      	strb	r5, [r3, #0]
		break;
 8000bcc:	e6d4      	b.n	8000978 <z_cbvprintf_impl+0x458>
		*(short *)dp = (short)count;
 8000bce:	801d      	strh	r5, [r3, #0]
		break;
 8000bd0:	e6d2      	b.n	8000978 <z_cbvprintf_impl+0x458>
		*(intmax_t *)dp = (intmax_t)count;
 8000bd2:	17ea      	asrs	r2, r5, #31
 8000bd4:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 8000bd8:	e6ce      	b.n	8000978 <z_cbvprintf_impl+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000bda:	601d      	str	r5, [r3, #0]
		break;
 8000bdc:	e6cc      	b.n	8000978 <z_cbvprintf_impl+0x458>
			bps = "(nil)";
 8000bde:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000ca8 <z_cbvprintf_impl+0x788>
 8000be2:	4606      	mov	r6, r0
			bpe = bps + 5;
 8000be4:	f10a 0805 	add.w	r8, sl, #5
 8000be8:	e78e      	b.n	8000b08 <z_cbvprintf_impl+0x5e8>
		} else if (conv->altform_0) {
 8000bea:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 8000bec:	bf48      	it	mi
 8000bee:	3301      	addmi	r3, #1
 8000bf0:	e793      	b.n	8000b1a <z_cbvprintf_impl+0x5fa>
					OUTC(pad);
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	9303      	str	r3, [sp, #12]
 8000bf6:	4659      	mov	r1, fp
 8000bf8:	9b02      	ldr	r3, [sp, #8]
 8000bfa:	4798      	blx	r3
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	9b03      	ldr	r3, [sp, #12]
 8000c00:	da04      	bge.n	8000c0c <z_cbvprintf_impl+0x6ec>
#undef OUTS
#undef OUTC
}
 8000c02:	b011      	add	sp, #68	; 0x44
 8000c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8000c08:	2320      	movs	r3, #32
 8000c0a:	444d      	add	r5, r9
 8000c0c:	464a      	mov	r2, r9
				while (width-- > 0) {
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	eba5 0109 	sub.w	r1, r5, r9
 8000c14:	f109 39ff 	add.w	r9, r9, #4294967295
 8000c18:	dceb      	bgt.n	8000bf2 <z_cbvprintf_impl+0x6d2>
 8000c1a:	460d      	mov	r5, r1
		if (sign != 0) {
 8000c1c:	b136      	cbz	r6, 8000c2c <z_cbvprintf_impl+0x70c>
			OUTC(sign);
 8000c1e:	9b02      	ldr	r3, [sp, #8]
 8000c20:	4659      	mov	r1, fp
 8000c22:	4630      	mov	r0, r6
 8000c24:	4798      	blx	r3
 8000c26:	2800      	cmp	r0, #0
 8000c28:	dbeb      	blt.n	8000c02 <z_cbvprintf_impl+0x6e2>
 8000c2a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000c2c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000c30:	06d9      	lsls	r1, r3, #27
 8000c32:	d401      	bmi.n	8000c38 <z_cbvprintf_impl+0x718>
 8000c34:	071a      	lsls	r2, r3, #28
 8000c36:	d506      	bpl.n	8000c46 <z_cbvprintf_impl+0x726>
				OUTC('0');
 8000c38:	9b02      	ldr	r3, [sp, #8]
 8000c3a:	4659      	mov	r1, fp
 8000c3c:	2030      	movs	r0, #48	; 0x30
 8000c3e:	4798      	blx	r3
 8000c40:	2800      	cmp	r0, #0
 8000c42:	dbde      	blt.n	8000c02 <z_cbvprintf_impl+0x6e2>
 8000c44:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000c46:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000c4a:	06db      	lsls	r3, r3, #27
 8000c4c:	d507      	bpl.n	8000c5e <z_cbvprintf_impl+0x73e>
				OUTC(conv->specifier);
 8000c4e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000c52:	9b02      	ldr	r3, [sp, #8]
 8000c54:	4659      	mov	r1, fp
 8000c56:	4798      	blx	r3
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	dbd2      	blt.n	8000c02 <z_cbvprintf_impl+0x6e2>
 8000c5c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000c5e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8000c60:	442e      	add	r6, r5
 8000c62:	1b73      	subs	r3, r6, r5
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	dc16      	bgt.n	8000c96 <z_cbvprintf_impl+0x776>
			OUTS(bps, bpe);
 8000c68:	9802      	ldr	r0, [sp, #8]
 8000c6a:	4643      	mov	r3, r8
 8000c6c:	4652      	mov	r2, sl
 8000c6e:	4659      	mov	r1, fp
 8000c70:	f001 fedc 	bl	8002a2c <outs>
 8000c74:	2800      	cmp	r0, #0
 8000c76:	dbc4      	blt.n	8000c02 <z_cbvprintf_impl+0x6e2>
 8000c78:	4405      	add	r5, r0
		while (width > 0) {
 8000c7a:	44a9      	add	r9, r5
 8000c7c:	eba9 0305 	sub.w	r3, r9, r5
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f77f ae79 	ble.w	8000978 <z_cbvprintf_impl+0x458>
			OUTC(' ');
 8000c86:	9b02      	ldr	r3, [sp, #8]
 8000c88:	4659      	mov	r1, fp
 8000c8a:	2020      	movs	r0, #32
 8000c8c:	4798      	blx	r3
 8000c8e:	2800      	cmp	r0, #0
 8000c90:	dbb7      	blt.n	8000c02 <z_cbvprintf_impl+0x6e2>
 8000c92:	3501      	adds	r5, #1
			--width;
 8000c94:	e7f2      	b.n	8000c7c <z_cbvprintf_impl+0x75c>
				OUTC('0');
 8000c96:	9b02      	ldr	r3, [sp, #8]
 8000c98:	4659      	mov	r1, fp
 8000c9a:	2030      	movs	r0, #48	; 0x30
 8000c9c:	4798      	blx	r3
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	dbaf      	blt.n	8000c02 <z_cbvprintf_impl+0x6e2>
 8000ca2:	3501      	adds	r5, #1
 8000ca4:	e7dd      	b.n	8000c62 <z_cbvprintf_impl+0x742>
 8000ca6:	bf00      	nop
 8000ca8:	080038f6 	.word	0x080038f6

08000cac <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000cac:	f04f 0210 	mov.w	r2, #16
 8000cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8000cb4:	f382 8812 	msr	BASEPRI_MAX, r2
 8000cb8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000cbc:	f383 8811 	msr	BASEPRI, r3
 8000cc0:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8000cc4:	4b02      	ldr	r3, [pc, #8]	; (8000cd0 <stm32l4_init+0x24>)
 8000cc6:	4a03      	ldr	r2, [pc, #12]	; (8000cd4 <stm32l4_init+0x28>)
 8000cc8:	601a      	str	r2, [r3, #0]

	return 0;
}
 8000cca:	2000      	movs	r0, #0
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	2000003c 	.word	0x2000003c
 8000cd4:	003d0900 	.word	0x003d0900

08000cd8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8000cd8:	4901      	ldr	r1, [pc, #4]	; (8000ce0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8000cda:	2210      	movs	r2, #16
	str	r2, [r1]
 8000cdc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8000cde:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8000ce0:	e000ed10 	.word	0xe000ed10

08000ce4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8000ce4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8000ce6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8000ce8:	f380 8811 	msr	BASEPRI, r0
	isb
 8000cec:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8000cf0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8000cf4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8000cf6:	b662      	cpsie	i
	isb
 8000cf8:	f3bf 8f6f 	isb	sy

	bx	lr
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8000d00:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db08      	blt.n	8000d18 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d06:	2201      	movs	r2, #1
 8000d08:	f000 001f 	and.w	r0, r0, #31
 8000d0c:	fa02 f000 	lsl.w	r0, r2, r0
 8000d10:	095b      	lsrs	r3, r3, #5
 8000d12:	4a02      	ldr	r2, [pc, #8]	; (8000d1c <arch_irq_enable+0x1c>)
 8000d14:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8000d20:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000d22:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	bfa8      	it	ge
 8000d26:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8000d2a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	bfb8      	it	lt
 8000d30:	4b06      	ldrlt	r3, [pc, #24]	; (8000d4c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8000d36:	bfac      	ite	ge
 8000d38:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	bfb4      	ite	lt
 8000d44:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d46:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed14 	.word	0xe000ed14

08000d50 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8000d50:	bf30      	wfi
    b z_SysNmiOnReset
 8000d52:	f7ff bffd 	b.w	8000d50 <z_SysNmiOnReset>
 8000d56:	bf00      	nop

08000d58 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000d58:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8000d5a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <z_arm_prep_c+0x44>)
 8000d5e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000d62:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d68:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8000d6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000d70:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000d78:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8000d7c:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000d80:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8000d84:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8000d88:	f001 f89e 	bl	8001ec8 <z_bss_zero>
	z_data_copy();
 8000d8c:	f001 fc90 	bl	80026b0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8000d90:	f000 f9c4 	bl	800111c <z_arm_interrupt_init>
	z_cstart();
 8000d94:	f001 f8dc 	bl	8001f50 <z_cstart>
 8000d98:	08000000 	.word	0x08000000
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8000da0:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8000da2:	490a      	ldr	r1, [pc, #40]	; (8000dcc <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8000da4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8000da6:	6809      	ldr	r1, [r1, #0]
 8000da8:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000daa:	4909      	ldr	r1, [pc, #36]	; (8000dd0 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8000dac:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000dae:	684b      	ldr	r3, [r1, #4]
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	604b      	str	r3, [r1, #4]
 8000db6:	2300      	movs	r3, #0
 8000db8:	f383 8811 	msr	BASEPRI, r3
 8000dbc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8000dc0:	6893      	ldr	r3, [r2, #8]
}
 8000dc2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	200002b8 	.word	0x200002b8
 8000dcc:	080038c0 	.word	0x080038c0
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8000dd4:	4912      	ldr	r1, [pc, #72]	; (8000e20 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8000dd6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8000dd8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8000ddc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8000dde:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8000de2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8000de6:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8000de8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8000dec:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8000df0:	4f0c      	ldr	r7, [pc, #48]	; (8000e24 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8000df2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8000df6:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8000df8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8000dfa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8000dfc:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 8000dfe:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8000e00:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8000e02:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8000e06:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8000e08:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8000e0a:	f000 f9cb 	bl	80011a4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8000e0e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8000e12:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8000e16:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8000e1a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8000e1e:	4770      	bx	lr
    ldr r1, =_kernel
 8000e20:	200002b8 	.word	0x200002b8
    ldr v4, =_SCS_ICSR
 8000e24:	e000ed04 	.word	0xe000ed04

08000e28 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8000e28:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8000e2c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8000e2e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8000e32:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8000e36:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8000e38:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8000e3c:	2902      	cmp	r1, #2
    beq _oops
 8000e3e:	d0ff      	beq.n	8000e40 <_oops>

08000e40 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8000e40:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 8000e42:	f001 fe0e 	bl	8002a62 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8000e46:	bd01      	pop	{r0, pc}

08000e48 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8000e48:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8000e4c:	9b00      	ldr	r3, [sp, #0]
 8000e4e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8000e52:	490a      	ldr	r1, [pc, #40]	; (8000e7c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8000e54:	9b01      	ldr	r3, [sp, #4]
 8000e56:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8000e5a:	9b02      	ldr	r3, [sp, #8]
 8000e5c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8000e60:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8000e64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e68:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8000e6c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8000e70:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8000e72:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8000e74:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8000e76:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	0800298d 	.word	0x0800298d

08000e80 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8000e80:	4a09      	ldr	r2, [pc, #36]	; (8000ea8 <z_check_thread_stack_fail+0x28>)
{
 8000e82:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8000e84:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 8000e86:	b170      	cbz	r0, 8000ea6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8000e88:	f113 0f16 	cmn.w	r3, #22
 8000e8c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8000e8e:	d005      	beq.n	8000e9c <z_check_thread_stack_fail+0x1c>
 8000e90:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d805      	bhi.n	8000ea4 <z_check_thread_stack_fail+0x24>
 8000e98:	4283      	cmp	r3, r0
 8000e9a:	d203      	bcs.n	8000ea4 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8000e9c:	4281      	cmp	r1, r0
 8000e9e:	bf28      	it	cs
 8000ea0:	2000      	movcs	r0, #0
 8000ea2:	4770      	bx	lr
 8000ea4:	2000      	movs	r0, #0
}
 8000ea6:	4770      	bx	lr
 8000ea8:	200002b8 	.word	0x200002b8

08000eac <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8000eac:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <arch_switch_to_main_thread+0x28>)
 8000eb0:	6098      	str	r0, [r3, #8]
{
 8000eb2:	460d      	mov	r5, r1
 8000eb4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8000eb6:	f000 f975 	bl	80011a4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8000eba:	4620      	mov	r0, r4
 8000ebc:	f385 8809 	msr	PSP, r5
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	b663      	cpsie	if
 8000ec4:	f381 8811 	msr	BASEPRI, r1
 8000ec8:	f3bf 8f6f 	isb	sy
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f001 fd5c 	bl	800298c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8000ed4:	200002b8 	.word	0x200002b8

08000ed8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8000ed8:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8000eda:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8000ede:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8000ee2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8000ee6:	4904      	ldr	r1, [pc, #16]	; (8000ef8 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8000ee8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8000eea:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8000eec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8000eee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8000ef2:	4902      	ldr	r1, [pc, #8]	; (8000efc <_isr_wrapper+0x24>)
	bx r1
 8000ef4:	4708      	bx	r1
 8000ef6:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8000ef8:	08003308 	.word	0x08003308
	ldr r1, =z_arm_int_exit
 8000efc:	08000f01 	.word	0x08000f01

08000f00 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8000f02:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8000f04:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8000f06:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8000f08:	d003      	beq.n	8000f12 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8000f0a:	4903      	ldr	r1, [pc, #12]	; (8000f18 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8000f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8000f10:	600a      	str	r2, [r1, #0]

08000f12 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8000f12:	4770      	bx	lr
	ldr r3, =_kernel
 8000f14:	200002b8 	.word	0x200002b8
	ldr r1, =_SCS_ICSR
 8000f18:	e000ed04 	.word	0xe000ed04

08000f1c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8000f1c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <mem_manage_fault+0x74>)
{
 8000f20:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8000f22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8000f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8000f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
 8000f28:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8000f2a:	0790      	lsls	r0, r2, #30
 8000f2c:	d520      	bpl.n	8000f70 <mem_manage_fault+0x54>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 8000f2e:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8000f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f32:	0612      	lsls	r2, r2, #24
 8000f34:	d51c      	bpl.n	8000f70 <mem_manage_fault+0x54>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
 8000f36:	b119      	cbz	r1, 8000f40 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8000f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8000f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8000f42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8000f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f46:	06d2      	lsls	r2, r2, #27
 8000f48:	d415      	bmi.n	8000f76 <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8000f4c:	079b      	lsls	r3, r3, #30
 8000f4e:	d412      	bmi.n	8000f76 <mem_manage_fault+0x5a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8000f50:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <mem_manage_fault+0x74>)
 8000f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f56:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 8000f58:	bf42      	ittt	mi
 8000f5a:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
 8000f5c:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
 8000f60:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8000f62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f64:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8000f68:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	7023      	strb	r3, [r4, #0]

	return reason;
}
 8000f6e:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
 8000f70:	f06f 0015 	mvn.w	r0, #21
 8000f74:	e7e4      	b.n	8000f40 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <mem_manage_fault+0x74>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	0519      	lsls	r1, r3, #20
 8000f7c:	d5e8      	bpl.n	8000f50 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8000f7e:	4629      	mov	r1, r5
 8000f80:	f7ff ff7e 	bl	8000e80 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8000f84:	2800      	cmp	r0, #0
 8000f86:	d0e3      	beq.n	8000f50 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000f88:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	e7e0      	b.n	8000f52 <mem_manage_fault+0x36>
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <bus_fault.constprop.0+0x38>)
 8000f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8000f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8000f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f9c:	0592      	lsls	r2, r2, #22
 8000f9e:	d508      	bpl.n	8000fb2 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8000fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8000fa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fa4:	0412      	lsls	r2, r2, #16
 8000fa6:	d504      	bpl.n	8000fb2 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 8000fa8:	b118      	cbz	r0, 8000fb2 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8000faa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <bus_fault.constprop.0+0x38>)
 8000fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8000fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fb8:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8000fba:	bf58      	it	pl
 8000fbc:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8000fbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8000fc0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8000fc2:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 8000fc6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8000fc8:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8000fd0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8000fd2:	4b48      	ldr	r3, [pc, #288]	; (80010f4 <z_arm_fault+0x124>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
{
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8000fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fde:	2600      	movs	r6, #0
 8000fe0:	f386 8811 	msr	BASEPRI, r6
 8000fe4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8000fe8:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 8000fec:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 8000ff0:	d111      	bne.n	8001016 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8000ff2:	f002 010c 	and.w	r1, r2, #12
 8000ff6:	2908      	cmp	r1, #8
 8000ff8:	d00d      	beq.n	8001016 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8000ffa:	0711      	lsls	r1, r2, #28
 8000ffc:	d401      	bmi.n	8001002 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 8000ffe:	4605      	mov	r5, r0
			*nested_exc = true;
 8001000:	2601      	movs	r6, #1
	*recoverable = false;
 8001002:	2200      	movs	r2, #0
	switch (fault) {
 8001004:	3b03      	subs	r3, #3
	*recoverable = false;
 8001006:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 800100a:	2b03      	cmp	r3, #3
 800100c:	d86b      	bhi.n	80010e6 <z_arm_fault+0x116>
 800100e:	e8df f003 	tbb	[pc, r3]
 8001012:	5504      	.short	0x5504
 8001014:	5d59      	.short	0x5d59
		return NULL;
 8001016:	4635      	mov	r5, r6
 8001018:	e7f3      	b.n	8001002 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800101a:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <z_arm_fault+0x124>)
 800101c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800101e:	f014 0402 	ands.w	r4, r4, #2
 8001022:	d160      	bne.n	80010e6 <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8001024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001026:	2a00      	cmp	r2, #0
 8001028:	db15      	blt.n	8001056 <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800102a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800102c:	0052      	lsls	r2, r2, #1
 800102e:	d512      	bpl.n	8001056 <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
 8001030:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8001032:	f832 1c02 	ldrh.w	r1, [r2, #-2]
 8001036:	f64d 7202 	movw	r2, #57090	; 0xdf02
 800103a:	4291      	cmp	r1, r2
 800103c:	d00a      	beq.n	8001054 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
 800103e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001042:	b30a      	cbz	r2, 8001088 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
 8001044:	f10d 0207 	add.w	r2, sp, #7
 8001048:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 800104a:	4628      	mov	r0, r5
 800104c:	f7ff ff66 	bl	8000f1c <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
 8001050:	4604      	mov	r4, r0
		break;
 8001052:	e000      	b.n	8001056 <z_arm_fault+0x86>
			reason = esf->basic.r0;
 8001054:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8001056:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800105a:	b99b      	cbnz	r3, 8001084 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800105c:	2220      	movs	r2, #32
 800105e:	4629      	mov	r1, r5
 8001060:	a802      	add	r0, sp, #8
 8001062:	f001 fd1d 	bl	8002aa0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8001066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001068:	2e00      	cmp	r6, #0
 800106a:	d03e      	beq.n	80010ea <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 800106c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001070:	b922      	cbnz	r2, 800107c <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8001072:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8001076:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800107a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 800107c:	a902      	add	r1, sp, #8
 800107e:	4620      	mov	r0, r4
 8001080:	f001 fced 	bl	8002a5e <z_arm_fatal_error>
}
 8001084:	b00a      	add	sp, #40	; 0x28
 8001086:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
 8001088:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800108c:	b12a      	cbz	r2, 800109a <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
 800108e:	f10d 0107 	add.w	r1, sp, #7
 8001092:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8001094:	f7ff ff7e 	bl	8000f94 <bus_fault.constprop.0>
 8001098:	e7da      	b.n	8001050 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
 800109a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800109c:	b292      	uxth	r2, r2
 800109e:	2a00      	cmp	r2, #0
 80010a0:	d0d9      	beq.n	8001056 <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80010a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 80010a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 80010a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 80010a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 80010aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 80010ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80010ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010b0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80010b4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
 80010ba:	e7cc      	b.n	8001056 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
 80010bc:	f10d 0207 	add.w	r2, sp, #7
 80010c0:	2100      	movs	r1, #0
 80010c2:	e7c2      	b.n	800104a <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
 80010c4:	f10d 0107 	add.w	r1, sp, #7
 80010c8:	2000      	movs	r0, #0
 80010ca:	e7e3      	b.n	8001094 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <z_arm_fault+0x124>)
 80010ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 80010d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 80010d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 80010d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 80010d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 80010d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80010da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010dc:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80010e0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80010e6:	2400      	movs	r4, #0
 80010e8:	e7b5      	b.n	8001056 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80010ea:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80010ee:	f023 0301 	bic.w	r3, r3, #1
 80010f2:	e7c2      	b.n	800107a <z_arm_fault+0xaa>
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80010f8:	4a02      	ldr	r2, [pc, #8]	; (8001104 <z_arm_fault_init+0xc>)
 80010fa:	6953      	ldr	r3, [r2, #20]
 80010fc:	f043 0310 	orr.w	r3, r3, #16
 8001100:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8001108:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 800110c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8001110:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8001112:	4672      	mov	r2, lr
	bl z_arm_fault
 8001114:	f7ff ff5c 	bl	8000fd0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8001118:	bd01      	pop	{r0, pc}
 800111a:	bf00      	nop

0800111c <z_arm_interrupt_init>:
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	2110      	movs	r1, #16
 8001122:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8001124:	3301      	adds	r3, #1
 8001126:	2b5b      	cmp	r3, #91	; 0x5b
 8001128:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 800112c:	d1f9      	bne.n	8001122 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100

08001134 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001134:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8001136:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 800113a:	4808      	ldr	r0, [pc, #32]	; (800115c <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 800113c:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
 8001140:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8001142:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8001146:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 800114a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 800114c:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800114e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8001152:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8001156:	f7ff fdff 	bl	8000d58 <z_arm_prep_c>
 800115a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 800115c:	200008c0 	.word	0x200008c0

08001160 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <z_impl_k_thread_abort+0x24>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	4283      	cmp	r3, r0
 8001166:	d10b      	bne.n	8001180 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001168:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 800116c:	b143      	cbz	r3, 8001180 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <z_impl_k_thread_abort+0x28>)
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001176:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 8001178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800117a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800117e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 8001180:	f001 ba36 	b.w	80025f0 <z_thread_abort>
 8001184:	200002b8 	.word	0x200002b8
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 800118c:	4b02      	ldr	r3, [pc, #8]	; (8001198 <z_arm_configure_static_mpu_regions+0xc>)
 800118e:	4a03      	ldr	r2, [pc, #12]	; (800119c <z_arm_configure_static_mpu_regions+0x10>)
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <z_arm_configure_static_mpu_regions+0x14>)
 8001192:	2101      	movs	r1, #1
 8001194:	f000 b86e 	b.w	8001274 <arm_core_mpu_configure_static_mpu_regions>
 8001198:	20050000 	.word	0x20050000
 800119c:	20000000 	.word	0x20000000
 80011a0:	0800366c 	.word	0x0800366c

080011a4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 80011a4:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 80011a8:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
 80011aa:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 80011ae:	2140      	movs	r1, #64	; 0x40
 80011b0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 80011b4:	4618      	mov	r0, r3
 80011b6:	2101      	movs	r1, #1
 80011b8:	f000 b866 	b.w	8001288 <arm_core_mpu_configure_dynamic_mpu_regions>
 80011bc:	20000188 	.word	0x20000188
 80011c0:	150b0000 	.word	0x150b0000

080011c4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 80011c4:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 80011c6:	4f1f      	ldr	r7, [pc, #124]	; (8001244 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 80011c8:	2600      	movs	r6, #0
 80011ca:	428e      	cmp	r6, r1
 80011cc:	db01      	blt.n	80011d2 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80011ce:	4610      	mov	r0, r2
 80011d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
 80011d2:	6844      	ldr	r4, [r0, #4]
 80011d4:	b39c      	cbz	r4, 800123e <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
 80011d6:	b153      	cbz	r3, 80011ee <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 80011d8:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 80011dc:	ea14 0f0c 	tst.w	r4, ip
 80011e0:	d118      	bne.n	8001214 <mpu_configure_regions+0x50>
		&&
 80011e2:	2c1f      	cmp	r4, #31
 80011e4:	d916      	bls.n	8001214 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
 80011e6:	6805      	ldr	r5, [r0, #0]
		&&
 80011e8:	ea1c 0f05 	tst.w	ip, r5
 80011ec:	d112      	bne.n	8001214 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 80011ee:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 80011f0:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80011f2:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80011f6:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
 80011f8:	d90f      	bls.n	800121a <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
 80011fa:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80011fe:	d80e      	bhi.n	800121e <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8001200:	3c01      	subs	r4, #1
 8001202:	fab4 f484 	clz	r4, r4
 8001206:	f1c4 041f 	rsb	r4, r4, #31
 800120a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 800120c:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800120e:	ea4c 0404 	orr.w	r4, ip, r4
 8001212:	d906      	bls.n	8001222 <mpu_configure_regions+0x5e>
			return -EINVAL;
 8001214:	f06f 0215 	mvn.w	r2, #21
 8001218:	e7d9      	b.n	80011ce <mpu_configure_regions+0xa>
		return REGION_32B;
 800121a:	2408      	movs	r4, #8
 800121c:	e7f6      	b.n	800120c <mpu_configure_regions+0x48>
		return REGION_4G;
 800121e:	243e      	movs	r4, #62	; 0x3e
 8001220:	e7f4      	b.n	800120c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001222:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 8001226:	4315      	orrs	r5, r2
 8001228:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800122c:	f044 0401 	orr.w	r4, r4, #1
 8001230:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001234:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
 8001238:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800123a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 800123e:	3601      	adds	r6, #1
 8001240:	300c      	adds	r0, #12
 8001242:	e7c2      	b.n	80011ca <mpu_configure_regions+0x6>
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <arm_core_mpu_enable+0x14>)
 800124a:	2205      	movs	r2, #5
 800124c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8001250:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001254:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001260:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8001264:	4b02      	ldr	r3, [pc, #8]	; (8001270 <arm_core_mpu_disable+0x10>)
 8001266:	2200      	movs	r2, #0
 8001268:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8001274:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8001276:	4c03      	ldr	r4, [pc, #12]	; (8001284 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8001278:	2301      	movs	r3, #1
 800127a:	7822      	ldrb	r2, [r4, #0]
 800127c:	f7ff ffa2 	bl	80011c4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8001280:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8001282:	bd10      	pop	{r4, pc}
 8001284:	200002ec 	.word	0x200002ec

08001288 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8001288:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 800128c:	2300      	movs	r3, #0
 800128e:	7812      	ldrb	r2, [r2, #0]
 8001290:	f7ff ff98 	bl	80011c4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8001294:	f110 0f16 	cmn.w	r0, #22
 8001298:	d002      	beq.n	80012a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 800129a:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800129c:	2807      	cmp	r0, #7
 800129e:	dd00      	ble.n	80012a2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 80012a0:	bd08      	pop	{r3, pc}
 80012a2:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 80012a6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80012aa:	3001      	adds	r0, #1
 80012ac:	e7f6      	b.n	800129c <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
 80012ae:	bf00      	nop
 80012b0:	200002ec 	.word	0x200002ec
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 80012b8:	4914      	ldr	r1, [pc, #80]	; (800130c <z_arm_mpu_init+0x54>)
 80012ba:	6808      	ldr	r0, [r1, #0]
 80012bc:	2808      	cmp	r0, #8
{
 80012be:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 80012c0:	d821      	bhi.n	8001306 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 80012c2:	f7ff ffcd 	bl	8001260 <arm_core_mpu_disable>
 80012c6:	4c12      	ldr	r4, [pc, #72]	; (8001310 <z_arm_mpu_init+0x58>)
 80012c8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80012ca:	2200      	movs	r2, #0
 80012cc:	4290      	cmp	r0, r2
 80012ce:	f101 010c 	add.w	r1, r1, #12
 80012d2:	d105      	bne.n	80012e0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <z_arm_mpu_init+0x5c>)
 80012d6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 80012d8:	f7ff ffb6 	bl	8001248 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 80012dc:	2000      	movs	r0, #0
}
 80012de:	bd10      	pop	{r4, pc}
 80012e0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80012e4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80012e8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80012ec:	4313      	orrs	r3, r2
 80012ee:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80012f2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80012f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8001302:	3201      	adds	r2, #1
 8001304:	e7e2      	b.n	80012cc <z_arm_mpu_init+0x14>
		return -1;
 8001306:	f04f 30ff 	mov.w	r0, #4294967295
 800130a:	e7e8      	b.n	80012de <z_arm_mpu_init+0x26>
 800130c:	08003678 	.word	0x08003678
 8001310:	e000ed00 	.word	0xe000ed00
 8001314:	200002ec 	.word	0x200002ec

08001318 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
 8001318:	4b01      	ldr	r3, [pc, #4]	; (8001320 <__stdout_hook_install+0x8>)
 800131a:	6018      	str	r0, [r3, #0]
}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000004 	.word	0x20000004

08001324 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 8001324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001328:	4f0d      	ldr	r7, [pc, #52]	; (8001360 <__stm32_exti_isr.isra.0+0x3c>)
 800132a:	4604      	mov	r4, r0
 800132c:	460e      	mov	r6, r1
 800132e:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001330:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8001334:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8001338:	42b4      	cmp	r4, r6
 800133a:	db01      	blt.n	8001340 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 800133c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001340:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001342:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8001346:	ea33 0202 	bics.w	r2, r3, r2
 800134a:	d107      	bne.n	800135c <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800134c:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 800134e:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8001352:	b11b      	cbz	r3, 800135c <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8001354:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8001358:	4620      	mov	r0, r4
 800135a:	4798      	blx	r3
	for (line = min; line < max; line++) {
 800135c:	3401      	adds	r4, #1
 800135e:	e7eb      	b.n	8001338 <__stm32_exti_isr.isra.0+0x14>
 8001360:	40010400 	.word	0x40010400

08001364 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8001366:	2301      	movs	r3, #1
 8001368:	6811      	ldr	r1, [r2, #0]
 800136a:	4083      	lsls	r3, r0
 800136c:	430b      	orrs	r3, r1
 800136e:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8001370:	4b02      	ldr	r3, [pc, #8]	; (800137c <stm32_exti_enable+0x18>)
 8001372:	5618      	ldrsb	r0, [r3, r0]
 8001374:	f7ff bcc4 	b.w	8000d00 <arch_irq_enable>
 8001378:	40010400 	.word	0x40010400
 800137c:	08003929 	.word	0x08003929

08001380 <stm32_exti_disable>:
	if (line < 32) {
 8001380:	281f      	cmp	r0, #31
 8001382:	dc07      	bgt.n	8001394 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001384:	4904      	ldr	r1, [pc, #16]	; (8001398 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8001386:	2201      	movs	r2, #1
 8001388:	680b      	ldr	r3, [r1, #0]
 800138a:	fa02 f000 	lsl.w	r0, r2, r0
 800138e:	ea23 0000 	bic.w	r0, r3, r0
 8001392:	6008      	str	r0, [r1, #0]
}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40010400 	.word	0x40010400

0800139c <stm32_exti_trigger>:
	switch (trigger) {
 800139c:	2903      	cmp	r1, #3
 800139e:	d80f      	bhi.n	80013c0 <stm32_exti_trigger+0x24>
 80013a0:	e8df f001 	tbb	[pc, r1]
 80013a4:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 80013aa:	2201      	movs	r2, #1
 80013ac:	6899      	ldr	r1, [r3, #8]
 80013ae:	fa02 f000 	lsl.w	r0, r2, r0
 80013b2:	ea21 0100 	bic.w	r1, r1, r0
 80013b6:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80013be:	60d8      	str	r0, [r3, #12]
}
 80013c0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80013c2:	2301      	movs	r3, #1
 80013c4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <stm32_exti_trigger+0x64>)
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	4302      	orrs	r2, r0
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	e7f2      	b.n	80013b8 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80013d2:	2301      	movs	r3, #1
 80013d4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <stm32_exti_trigger+0x64>)
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	4302      	orrs	r2, r0
 80013de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	ea22 0000 	bic.w	r0, r2, r0
 80013e6:	6098      	str	r0, [r3, #8]
}
 80013e8:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80013ea:	2301      	movs	r3, #1
 80013ec:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <stm32_exti_trigger+0x64>)
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	4302      	orrs	r2, r0
 80013f6:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	4310      	orrs	r0, r2
 80013fc:	e7df      	b.n	80013be <stm32_exti_trigger+0x22>
 80013fe:	bf00      	nop
 8001400:	40010400 	.word	0x40010400

08001404 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <stm32_exti_set_callback+0x20>)
{
 8001406:	b510      	push	{r4, lr}
 8001408:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 800140a:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800140e:	b928      	cbnz	r0, 800141c <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8001410:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8001414:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001418:	605a      	str	r2, [r3, #4]

	return 0;
}
 800141a:	bd10      	pop	{r4, pc}
		return -EBUSY;
 800141c:	f06f 000f 	mvn.w	r0, #15
 8001420:	e7fb      	b.n	800141a <stm32_exti_set_callback+0x16>
 8001422:	bf00      	nop
 8001424:	20000194 	.word	0x20000194

08001428 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <stm32_exti_unset_callback+0x10>)
 800142a:	2200      	movs	r2, #0
 800142c:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8001430:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001434:	605a      	str	r2, [r3, #4]
}
 8001436:	4770      	bx	lr
 8001438:	20000194 	.word	0x20000194

0800143c <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800143c:	4b02      	ldr	r3, [pc, #8]	; (8001448 <LL_RCC_HSI_IsReady+0xc>)
 800143e:	6818      	ldr	r0, [r3, #0]
}
 8001440:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000

0800144c <stm32_clock_control_configure>:
__unused
static int enabled_clock(uint32_t src_clk)
{
	int r = 0;

	switch (src_clk) {
 800144c:	680b      	ldr	r3, [r1, #0]
 800144e:	3b01      	subs	r3, #1
 8001450:	2b07      	cmp	r3, #7
 8001452:	d814      	bhi.n	800147e <stm32_clock_control_configure+0x32>
 8001454:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <stm32_clock_control_configure+0x38>)
 8001456:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]

	ARG_UNUSED(dev);
	ARG_UNUSED(data);

	err = enabled_clock(pclken->bus);
	if (err < 0) {
 800145a:	2800      	cmp	r0, #0
 800145c:	db11      	blt.n	8001482 <stm32_clock_control_configure+0x36>
		/* Attempt to configure a src clock not available or not valid */
		return err;
	}

	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 800145e:	6849      	ldr	r1, [r1, #4]
					STM32_CLOCK_SHIFT_GET(pclken->enr);
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) +
					STM32_CLOCK_REG_GET(pclken->enr));
 8001460:	b2cb      	uxtb	r3, r1
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) +
 8001462:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001466:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 800146a:	f3c1 4202 	ubfx	r2, r1, #16, #3
	reg_val = *reg;
 800146e:	6818      	ldr	r0, [r3, #0]
					STM32_CLOCK_SHIFT_GET(pclken->enr);
 8001470:	f3c1 2104 	ubfx	r1, r1, #8, #5
	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 8001474:	408a      	lsls	r2, r1
	reg_val |= dt_val;
 8001476:	4302      	orrs	r2, r0
	*reg = reg_val;
 8001478:	601a      	str	r2, [r3, #0]

	return 0;
 800147a:	2000      	movs	r0, #0
 800147c:	4770      	bx	lr
	err = enabled_clock(pclken->bus);
 800147e:	f06f 0085 	mvn.w	r0, #133	; 0x85
#else
	/* No src clock available: Not supported */
	return -ENOTSUP;
#endif
}
 8001482:	4770      	bx	lr
 8001484:	080038c4 	.word	0x080038c4

08001488 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <stm32_clock_control_get_subsys_rate+0x6c>)
{
 800148a:	b510      	push	{r4, lr}
 800148c:	4614      	mov	r4, r2
	uint32_t ahb_clock = SystemCoreClock;
 800148e:	681a      	ldr	r2, [r3, #0]
	/* AHB3 bus exists, but w/o dedicated prescaler */
	uint32_t ahb3_clock = ahb_clock;
#endif

#if defined(STM32_SRC_PCLK)
	if (pclken->bus == STM32_SRC_PCLK) {
 8001490:	680b      	ldr	r3, [r1, #0]
 8001492:	2b07      	cmp	r3, #7
 8001494:	d014      	beq.n	80014c0 <stm32_clock_control_get_subsys_rate+0x38>
	}
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8001496:	2b08      	cmp	r3, #8
 8001498:	d809      	bhi.n	80014ae <stm32_clock_control_get_subsys_rate+0x26>
 800149a:	b18b      	cbz	r3, 80014c0 <stm32_clock_control_get_subsys_rate+0x38>
 800149c:	3b01      	subs	r3, #1
 800149e:	2b07      	cmp	r3, #7
 80014a0:	d80e      	bhi.n	80014c0 <stm32_clock_control_get_subsys_rate+0x38>
 80014a2:	e8df f003 	tbb	[pc, r3]
 80014a6:	0d21      	.short	0x0d21
 80014a8:	140d1e1e 	.word	0x140d1e1e
 80014ac:	170d      	.short	0x170d
 80014ae:	2b58      	cmp	r3, #88	; 0x58
 80014b0:	d00d      	beq.n	80014ce <stm32_clock_control_get_subsys_rate+0x46>
 80014b2:	d808      	bhi.n	80014c6 <stm32_clock_control_get_subsys_rate+0x3e>
 80014b4:	2b4c      	cmp	r3, #76	; 0x4c
 80014b6:	d00a      	beq.n	80014ce <stm32_clock_control_get_subsys_rate+0x46>
 80014b8:	2b50      	cmp	r3, #80	; 0x50
 80014ba:	d008      	beq.n	80014ce <stm32_clock_control_get_subsys_rate+0x46>
 80014bc:	2b48      	cmp	r3, #72	; 0x48
 80014be:	d006      	beq.n	80014ce <stm32_clock_control_get_subsys_rate+0x46>
 80014c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80014c4:	e00f      	b.n	80014e6 <stm32_clock_control_get_subsys_rate+0x5e>
 80014c6:	2b5c      	cmp	r3, #92	; 0x5c
 80014c8:	d001      	beq.n	80014ce <stm32_clock_control_get_subsys_rate+0x46>
 80014ca:	2b60      	cmp	r3, #96	; 0x60
 80014cc:	e7f7      	b.n	80014be <stm32_clock_control_get_subsys_rate+0x36>
		*rate = ahb3_clock;
		break;
#endif
#if defined(STM32_SRC_SYSCLK)
	case STM32_SRC_SYSCLK:
		*rate = SystemCoreClock * STM32_CORE_PRESCALER;
 80014ce:	6022      	str	r2, [r4, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80014d0:	2000      	movs	r0, #0
		break;
 80014d2:	e008      	b.n	80014e6 <stm32_clock_control_get_subsys_rate+0x5e>
		if (get_pllout_frequency() == 0) {
 80014d4:	f001 fb68 	bl	8002ba8 <get_pllout_frequency>
 80014d8:	b148      	cbz	r0, 80014ee <stm32_clock_control_get_subsys_rate+0x66>
		*rate = get_pllout_frequency();
 80014da:	f001 fb65 	bl	8002ba8 <get_pllout_frequency>
 80014de:	6020      	str	r0, [r4, #0]
		break;
 80014e0:	e7f6      	b.n	80014d0 <stm32_clock_control_get_subsys_rate+0x48>
		*rate = STM32_LSE_FREQ;
 80014e2:	2000      	movs	r0, #0
 80014e4:	6020      	str	r0, [r4, #0]
}
 80014e6:	bd10      	pop	{r4, pc}
		*rate = STM32_HSI_FREQ;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <stm32_clock_control_get_subsys_rate+0x70>)
 80014ea:	6023      	str	r3, [r4, #0]
 80014ec:	e7f0      	b.n	80014d0 <stm32_clock_control_get_subsys_rate+0x48>
			return -EIO;
 80014ee:	f06f 0004 	mvn.w	r0, #4
 80014f2:	e7f8      	b.n	80014e6 <stm32_clock_control_get_subsys_rate+0x5e>
 80014f4:	2000003c 	.word	0x2000003c
 80014f8:	00f42400 	.word	0x00f42400

080014fc <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 80014fc:	b570      	push	{r4, r5, r6, lr}
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80014fe:	4c38      	ldr	r4, [pc, #224]	; (80015e0 <stm32_clock_control_init+0xe4>)

	new_flash_freq = RCC_CALC_FLASH_FREQ(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				      STM32_FLASH_PRESCALER);

	/* If freq increases, set flash latency before any clock setting */
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8001500:	4e38      	ldr	r6, [pc, #224]	; (80015e4 <stm32_clock_control_init+0xe8>)
	config_enable_default_clocks();
 8001502:	f000 f889 	bl	8001618 <config_enable_default_clocks>
	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 8001506:	f000 fc05 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 800150a:	68a3      	ldr	r3, [r4, #8]
 800150c:	4a36      	ldr	r2, [pc, #216]	; (80015e8 <stm32_clock_control_init+0xec>)
 800150e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001512:	5cd3      	ldrb	r3, [r2, r3]
 8001514:	fa20 f503 	lsr.w	r5, r0, r3
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8001518:	42b5      	cmp	r5, r6
 800151a:	d802      	bhi.n	8001522 <stm32_clock_control_init+0x26>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 800151c:	4833      	ldr	r0, [pc, #204]	; (80015ec <stm32_clock_control_init+0xf0>)
 800151e:	f000 fc47 	bl	8001db0 <LL_SetFlashLatency>
		if (LL_RCC_HSI_IsReady() != 1) {
 8001522:	f7ff ff8b 	bl	800143c <LL_RCC_HSI_IsReady>
 8001526:	2801      	cmp	r0, #1
 8001528:	d007      	beq.n	800153a <stm32_clock_control_init+0x3e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001530:	6023      	str	r3, [r4, #0]
			while (LL_RCC_HSI_IsReady() != 1) {
 8001532:	f7ff ff83 	bl	800143c <LL_RCC_HSI_IsReady>
 8001536:	2801      	cmp	r0, #1
 8001538:	d1fb      	bne.n	8001532 <stm32_clock_control_init+0x36>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800153a:	68a3      	ldr	r3, [r4, #8]
 800153c:	f003 030c 	and.w	r3, r3, #12
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8001540:	2b0c      	cmp	r3, #12
 8001542:	d11a      	bne.n	800157a <stm32_clock_control_init+0x7e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001544:	68a3      	ldr	r3, [r4, #8]
 8001546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800154a:	60a3      	str	r3, [r4, #8]
	if (LL_RCC_HSI_IsReady() != 1) {
 800154c:	f7ff ff76 	bl	800143c <LL_RCC_HSI_IsReady>
 8001550:	2801      	cmp	r0, #1
 8001552:	d007      	beq.n	8001564 <stm32_clock_control_init+0x68>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001554:	6823      	ldr	r3, [r4, #0]
 8001556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155a:	6023      	str	r3, [r4, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 800155c:	f7ff ff6e 	bl	800143c <LL_RCC_HSI_IsReady>
 8001560:	2801      	cmp	r0, #1
 8001562:	d1fb      	bne.n	800155c <stm32_clock_control_init+0x60>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001564:	68a3      	ldr	r3, [r4, #8]
 8001566:	f023 0303 	bic.w	r3, r3, #3
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001570:	68a3      	ldr	r3, [r4, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8001576:	2b04      	cmp	r3, #4
 8001578:	d1fa      	bne.n	8001570 <stm32_clock_control_init+0x74>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001580:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8001582:	68e3      	ldr	r3, [r4, #12]
 8001584:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001588:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800158c:	60e3      	str	r3, [r4, #12]
	config_pll_sysclock();
 800158e:	f000 f831 	bl	80015f4 <config_pll_sysclock>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001592:	6823      	ldr	r3, [r4, #0]
 8001594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001598:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	019b      	lsls	r3, r3, #6
 800159e:	d5fc      	bpl.n	800159a <stm32_clock_control_init+0x9e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80015a0:	68a3      	ldr	r3, [r4, #8]
 80015a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015a6:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80015a8:	68a3      	ldr	r3, [r4, #8]
 80015aa:	f043 0303 	orr.w	r3, r3, #3
 80015ae:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015b0:	68a3      	ldr	r3, [r4, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
	}

#if STM32_SYSCLK_SRC_PLL
	/* Set PLL as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 80015b6:	2b0c      	cmp	r3, #12
 80015b8:	d1fa      	bne.n	80015b0 <stm32_clock_control_init+0xb4>
		LL_RCC_SetAHBPrescaler(ahb_prescaler(STM32_CORE_PRESCALER));
	}

#if defined(FLASH_ACR_LATENCY)
	/* If freq not increased, set flash latency after all clock setting */
	if (old_flash_freq >= CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 80015ba:	42b5      	cmp	r5, r6
 80015bc:	d902      	bls.n	80015c4 <stm32_clock_control_init+0xc8>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 80015be:	480b      	ldr	r0, [pc, #44]	; (80015ec <stm32_clock_control_init+0xf0>)
 80015c0:	f000 fbf6 	bl	8001db0 <LL_SetFlashLatency>
	}
#endif /* FLASH_ACR_LATENCY */

	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <stm32_clock_control_init+0xf4>)
 80015c6:	4a09      	ldr	r2, [pc, #36]	; (80015ec <stm32_clock_control_init+0xf0>)
 80015c8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80015ca:	68a3      	ldr	r3, [r4, #8]
 80015cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015d0:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80015d2:	68a3      	ldr	r3, [r4, #8]
 80015d4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80015d8:	60a3      	str	r3, [r4, #8]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80015da:	2000      	movs	r0, #0
 80015dc:	bd70      	pop	{r4, r5, r6, pc}
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	04c4b3ff 	.word	0x04c4b3ff
 80015e8:	08003993 	.word	0x08003993
 80015ec:	04c4b400 	.word	0x04c4b400
 80015f0:	2000003c 	.word	0x2000003c

080015f4 <config_pll_sysclock>:
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <config_pll_sysclock+0x18>)
 80015f6:	4906      	ldr	r1, [pc, #24]	; (8001610 <config_pll_sysclock+0x1c>)
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	4011      	ands	r1, r2
 80015fc:	4a05      	ldr	r2, [pc, #20]	; (8001614 <config_pll_sysclock+0x20>)
 80015fe:	430a      	orrs	r2, r1
 8001600:	60da      	str	r2, [r3, #12]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001608:	60da      	str	r2, [r3, #12]
				    pllm(STM32_PLL_M_DIVISOR),
				    STM32_PLL_N_MULTIPLIER,
				    pllr(STM32_PLL_R_DIVISOR));

	LL_RCC_PLL_EnableDomain_SYS();
}
 800160a:	4770      	bx	lr
 800160c:	40021000 	.word	0x40021000
 8001610:	f9ff808c 	.word	0xf9ff808c
 8001614:	02001402 	.word	0x02001402

08001618 <config_enable_default_clocks>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <config_enable_default_clocks+0x1c>)
 800161a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800161c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001620:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001622:	6d9b      	ldr	r3, [r3, #88]	; 0x58

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8001624:	b082      	sub	sp, #8
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800162c:	9b01      	ldr	r3, [sp, #4]
#endif
#if defined(CONFIG_SOC_SERIES_STM32WBX)
	/* HW semaphore Clock enable */
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_HSEM);
#endif
}
 800162e:	b002      	add	sp, #8
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000

08001638 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8001638:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <uart_console_init+0x24>)
 800163c:	4808      	ldr	r0, [pc, #32]	; (8001660 <uart_console_init+0x28>)
 800163e:	6018      	str	r0, [r3, #0]
 8001640:	f001 fc99 	bl	8002f76 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 8001644:	b138      	cbz	r0, 8001656 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <uart_console_init+0x2c>)
 8001648:	f7ff fe66 	bl	8001318 <__stdout_hook_install>
	__printk_hook_install(console_out);
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <uart_console_init+0x2c>)
 800164e:	f7fe ff53 	bl	80004f8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 8001652:	2000      	movs	r0, #0
}
 8001654:	bd08      	pop	{r3, pc}
		return -ENODEV;
 8001656:	f06f 0012 	mvn.w	r0, #18
 800165a:	e7fb      	b.n	8001654 <uart_console_init+0x1c>
 800165c:	20000214 	.word	0x20000214
 8001660:	080032d8 	.word	0x080032d8
 8001664:	08001669 	.word	0x08001669

08001668 <console_out>:
	if ('\n' == c) {
 8001668:	280a      	cmp	r0, #10
{
 800166a:	b538      	push	{r3, r4, r5, lr}
 800166c:	4d07      	ldr	r5, [pc, #28]	; (800168c <console_out+0x24>)
 800166e:	4604      	mov	r4, r0
	if ('\n' == c) {
 8001670:	d104      	bne.n	800167c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 8001672:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8001674:	6883      	ldr	r3, [r0, #8]
 8001676:	210d      	movs	r1, #13
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 800167c:	6828      	ldr	r0, [r5, #0]
 800167e:	6883      	ldr	r3, [r0, #8]
 8001680:	b2e1      	uxtb	r1, r4
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	4798      	blx	r3
}
 8001686:	4620      	mov	r0, r4
 8001688:	bd38      	pop	{r3, r4, r5, pc}
 800168a:	bf00      	nop
 800168c:	20000214 	.word	0x20000214

08001690 <clock_control_on.constprop.0>:
 *
 * @param dev Device structure whose driver controls the clock.
 * @param sys Opaque data representing the clock.
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
 8001690:	b570      	push	{r4, r5, r6, lr}
 8001692:	4605      	mov	r5, r0
 8001694:	4c07      	ldr	r4, [pc, #28]	; (80016b4 <clock_control_on.constprop.0+0x24>)
 8001696:	4620      	mov	r0, r4
 8001698:	f001 fc6d 	bl	8002f76 <z_device_is_ready>
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 800169c:	b130      	cbz	r0, 80016ac <clock_control_on.constprop.0+0x1c>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 800169e:	68a3      	ldr	r3, [r4, #8]
 80016a0:	4629      	mov	r1, r5
 80016a2:	4620      	mov	r0, r4
 80016a4:	681b      	ldr	r3, [r3, #0]
}
 80016a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->on(dev, sys);
 80016aa:	4718      	bx	r3
}
 80016ac:	f06f 0012 	mvn.w	r0, #18
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
 80016b2:	bf00      	nop
 80016b4:	080031b8 	.word	0x080031b8

080016b8 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 80016b8:	b508      	push	{r3, lr}
  * @rmtoll CR2          IOSV          LL_PWR_EnableVddIO2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80016ba:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <gpio_stm32_init+0x20>)
	struct gpio_stm32_data *data = dev->data;
	int ret;

	data->dev = dev;
 80016bc:	6903      	ldr	r3, [r0, #16]
 80016be:	6058      	str	r0, [r3, #4]
 80016c0:	6853      	ldr	r3, [r2, #4]
					(clock_control_subsys_t *)&cfg->pclken);
 80016c2:	6840      	ldr	r0, [r0, #4]
 80016c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c8:	6053      	str	r3, [r2, #4]
		ret = clock_control_on(clk,
 80016ca:	300c      	adds	r0, #12
 80016cc:	f7ff ffe0 	bl	8001690 <clock_control_on.constprop.0>

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 80016d0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 80016d4:	bd08      	pop	{r3, pc}
 80016d6:	bf00      	nop
 80016d8:	40007000 	.word	0x40007000

080016dc <gpio_stm32_pin_interrupt_configure>:
{
 80016dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016de:	460c      	mov	r4, r1
 80016e0:	4611      	mov	r1, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 80016e2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 80016e6:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 80016e8:	6902      	ldr	r2, [r0, #16]
{
 80016ea:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 80016ec:	d123      	bne.n	8001736 <gpio_stm32_pin_interrupt_configure+0x5a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80016ee:	f004 0303 	and.w	r3, r4, #3
 80016f2:	3304      	adds	r3, #4
 80016f4:	009a      	lsls	r2, r3, #2
 80016f6:	230f      	movs	r3, #15
 80016f8:	4093      	lsls	r3, r2
 80016fa:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4933      	ldr	r1, [pc, #204]	; (80017d0 <gpio_stm32_pin_interrupt_configure+0xf4>)
 8001702:	3202      	adds	r2, #2
 8001704:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001708:	0c19      	lsrs	r1, r3, #16
 800170a:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8001712:	fab2 f282 	clz	r2, r2
 8001716:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	429a      	cmp	r2, r3
 800171c:	d109      	bne.n	8001732 <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 800171e:	4620      	mov	r0, r4
 8001720:	f7ff fe2e 	bl	8001380 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8001724:	4620      	mov	r0, r4
 8001726:	f7ff fe7f 	bl	8001428 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 800172a:	2100      	movs	r1, #0
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff fe35 	bl	800139c <stm32_exti_trigger>
	int err = 0;
 8001732:	2500      	movs	r5, #0
 8001734:	e03e      	b.n	80017b4 <gpio_stm32_pin_interrupt_configure+0xd8>
	if (mode == GPIO_INT_MODE_LEVEL) {
 8001736:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800173a:	d042      	beq.n	80017c2 <gpio_stm32_pin_interrupt_configure+0xe6>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 800173c:	4925      	ldr	r1, [pc, #148]	; (80017d4 <gpio_stm32_pin_interrupt_configure+0xf8>)
 800173e:	4620      	mov	r0, r4
 8001740:	f7ff fe60 	bl	8001404 <stm32_exti_set_callback>
 8001744:	4605      	mov	r5, r0
 8001746:	2800      	cmp	r0, #0
 8001748:	d13e      	bne.n	80017c8 <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 800174a:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <gpio_stm32_pin_interrupt_configure+0xfc>)
	gpio_stm32_enable_int(cfg->port, pin);
 800174c:	68bf      	ldr	r7, [r7, #8]
	struct stm32_pclken pclken = {
 800174e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001752:	466b      	mov	r3, sp
 8001754:	e883 0003 	stmia.w	r3, {r0, r1}
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff99 	bl	8001690 <clock_control_on.constprop.0>
	if (ret != 0) {
 800175e:	b9c0      	cbnz	r0, 8001792 <gpio_stm32_pin_interrupt_configure+0xb6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001760:	f004 0103 	and.w	r1, r4, #3
 8001764:	3104      	adds	r1, #4
 8001766:	008b      	lsls	r3, r1, #2
 8001768:	210f      	movs	r1, #15
 800176a:	4099      	lsls	r1, r3
 800176c:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8001770:	b2ca      	uxtb	r2, r1
 8001772:	0092      	lsls	r2, r2, #2
 8001774:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001778:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800177c:	0c0b      	lsrs	r3, r1, #16
 800177e:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 800178c:	409f      	lsls	r7, r3
 800178e:	430f      	orrs	r7, r1
 8001790:	6097      	str	r7, [r2, #8]
	switch (trig) {
 8001792:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
 8001796:	d010      	beq.n	80017ba <gpio_stm32_pin_interrupt_configure+0xde>
 8001798:	f1b6 6fc0 	cmp.w	r6, #100663296	; 0x6000000
 800179c:	d00f      	beq.n	80017be <gpio_stm32_pin_interrupt_configure+0xe2>
 800179e:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 80017a2:	bf14      	ite	ne
 80017a4:	2100      	movne	r1, #0
 80017a6:	2102      	moveq	r1, #2
	stm32_exti_trigger(pin, edge);
 80017a8:	4620      	mov	r0, r4
 80017aa:	f7ff fdf7 	bl	800139c <stm32_exti_trigger>
	stm32_exti_enable(pin);
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff fdd8 	bl	8001364 <stm32_exti_enable>
}
 80017b4:	4628      	mov	r0, r5
 80017b6:	b003      	add	sp, #12
 80017b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 80017ba:	2101      	movs	r1, #1
 80017bc:	e7f4      	b.n	80017a8 <gpio_stm32_pin_interrupt_configure+0xcc>
		edge = STM32_EXTI_TRIG_BOTH;
 80017be:	2103      	movs	r1, #3
 80017c0:	e7f2      	b.n	80017a8 <gpio_stm32_pin_interrupt_configure+0xcc>
		err = -ENOTSUP;
 80017c2:	f06f 0585 	mvn.w	r5, #133	; 0x85
 80017c6:	e7f5      	b.n	80017b4 <gpio_stm32_pin_interrupt_configure+0xd8>
		err = -EBUSY;
 80017c8:	f06f 050f 	mvn.w	r5, #15
	return err;
 80017cc:	e7f2      	b.n	80017b4 <gpio_stm32_pin_interrupt_configure+0xd8>
 80017ce:	bf00      	nop
 80017d0:	40010000 	.word	0x40010000
 80017d4:	08002dbb 	.word	0x08002dbb
 80017d8:	08003664 	.word	0x08003664

080017dc <uart_stm32_set_baudrate>:
	}
}
#endif /* CONFIG_PM */

static inline void uart_stm32_set_baudrate(const struct device *dev, uint32_t baud_rate)
{
 80017dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
					   &clock_rate) < 0) {
			LOG_ERR("Failed call clock_control_get_rate(pclken[1])");
			return;
		}
	} else {
		if (clock_control_get_rate(data->clock,
 80017de:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 80017e0:	6846      	ldr	r6, [r0, #4]
		if (clock_control_get_rate(data->clock,
 80017e2:	685c      	ldr	r4, [r3, #4]
					   (clock_control_subsys_t)&config->pclken[0],
 80017e4:	6877      	ldr	r7, [r6, #4]
{
 80017e6:	460d      	mov	r5, r1
 80017e8:	4620      	mov	r0, r4
 80017ea:	f001 fbc4 	bl	8002f76 <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 80017ee:	b1f8      	cbz	r0, 8001830 <uart_stm32_set_baudrate+0x54>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 80017f0:	68a3      	ldr	r3, [r4, #8]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	b1e3      	cbz	r3, 8001830 <uart_stm32_set_baudrate+0x54>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 80017f6:	aa01      	add	r2, sp, #4
 80017f8:	4639      	mov	r1, r7
 80017fa:	4620      	mov	r0, r4
 80017fc:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 80017fe:	2800      	cmp	r0, #0
 8001800:	db16      	blt.n	8001830 <uart_stm32_set_baudrate+0x54>
			return;
		}
	}

#if HAS_LPUART_1
	if (IS_LPUART_INSTANCE(config->usart)) {
 8001802:	6836      	ldr	r6, [r6, #0]
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <uart_stm32_set_baudrate+0x6c>)

		presc_val = presc_idx << USART_PRESC_PRESCALER_Pos;

		LL_LPUART_SetPrescaler(config->usart, presc_val);
#else
		lpuartdiv = lpuartdiv_calc(clock_rate, baud_rate);
 8001806:	9c01      	ldr	r4, [sp, #4]
	if (IS_LPUART_INSTANCE(config->usart)) {
 8001808:	429e      	cmp	r6, r3
	lpuartdiv += baud_rate / 2;
 800180a:	ea4f 0055 	mov.w	r0, r5, lsr #1
	if (IS_LPUART_INSTANCE(config->usart)) {
 800180e:	d111      	bne.n	8001834 <uart_stm32_set_baudrate+0x58>
	lpuartdiv /= baud_rate;
 8001810:	2300      	movs	r3, #0
 8001812:	4619      	mov	r1, r3
	lpuartdiv += baud_rate / 2;
 8001814:	f44f 7780 	mov.w	r7, #256	; 0x100
	lpuartdiv /= baud_rate;
 8001818:	462a      	mov	r2, r5
 800181a:	fbe4 0107 	umlal	r0, r1, r4, r7
 800181e:	f7fe fcc5 	bl	80001ac <__aeabi_uldivmod>
		if (lpuartdiv < LPUART_BRR_MIN_VALUE || lpuartdiv > LPUART_BRR_MASK) {
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <uart_stm32_set_baudrate+0x70>)
 8001824:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8001828:	429a      	cmp	r2, r3
 800182a:	d801      	bhi.n	8001830 <uart_stm32_set_baudrate+0x54>
  if (BaudRate != 0U)
  {
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
  }
#else
  if (BaudRate != 0U)
 800182c:	b105      	cbz	r5, 8001830 <uart_stm32_set_baudrate+0x54>
  {
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, BaudRate);
 800182e:	60f0      	str	r0, [r6, #12]
				     baud_rate);

#if HAS_LPUART_1
	}
#endif /* HAS_LPUART_1 */
}
 8001830:	b003      	add	sp, #12
 8001832:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *         @arg @ref LL_USART_OVERSAMPLING_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8001834:	6833      	ldr	r3, [r6, #0]
  else
  {
#if defined(USART_PRESC_PRESCALER)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001836:	4404      	add	r4, r0
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8001838:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800183c:	fbb4 f4f5 	udiv	r4, r4, r5
 8001840:	b2a4      	uxth	r4, r4
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8001842:	6033      	str	r3, [r6, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001844:	60f4      	str	r4, [r6, #12]
 8001846:	e7f3      	b.n	8001830 <uart_stm32_set_baudrate+0x54>
 8001848:	40008000 	.word	0x40008000
 800184c:	000ffcff 	.word	0x000ffcff

08001850 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8001850:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = dev->config;
 8001854:	6844      	ldr	r4, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8001856:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 8001858:	4d40      	ldr	r5, [pc, #256]	; (800195c <uart_stm32_init+0x10c>)
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 800185a:	f8d4 8004 	ldr.w	r8, [r4, #4]
	data->clock = clk;
 800185e:	607d      	str	r5, [r7, #4]
{
 8001860:	4606      	mov	r6, r0
 8001862:	4628      	mov	r0, r5
 8001864:	f001 fb87 	bl	8002f76 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8001868:	2800      	cmp	r0, #0
 800186a:	d072      	beq.n	8001952 <uart_stm32_init+0x102>
	return api->on(dev, sys);
 800186c:	68ab      	ldr	r3, [r5, #8]
 800186e:	4628      	mov	r0, r5
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4641      	mov	r1, r8
 8001874:	4798      	blx	r3
	if (err != 0) {
 8001876:	4605      	mov	r5, r0
 8001878:	2800      	cmp	r0, #0
 800187a:	d161      	bne.n	8001940 <uart_stm32_init+0xf0>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 800187c:	4601      	mov	r1, r0
 800187e:	aa01      	add	r2, sp, #4
 8001880:	69a0      	ldr	r0, [r4, #24]
 8001882:	f001 fb5f 	bl	8002f44 <pinctrl_lookup_state>
	if (ret < 0) {
 8001886:	2800      	cmp	r0, #0
 8001888:	db66      	blt.n	8001958 <uart_stm32_init+0x108>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 800188a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800188c:	462a      	mov	r2, r5
 800188e:	7919      	ldrb	r1, [r3, #4]
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	f000 f9f9 	bl	8001c88 <pinctrl_configure_pins>
		}
	}

	/* Configure dt provided device signals when available */
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
 8001896:	2800      	cmp	r0, #0
 8001898:	db5e      	blt.n	8001958 <uart_stm32_init+0x108>
		return err;
	}

	LL_USART_Disable(config->usart);
 800189a:	6820      	ldr	r0, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800189c:	6821      	ldr	r1, [r4, #0]
 800189e:	6803      	ldr	r3, [r0, #0]
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	6003      	str	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018a6:	e850 3f00 	ldrex	r3, [r0]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80018aa:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018ae:	e840 3200 	strex	r2, r3, [r0]
 80018b2:	2a00      	cmp	r2, #0
 80018b4:	d1f7      	bne.n	80018a6 <uart_stm32_init+0x56>
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 80018b6:	6923      	ldr	r3, [r4, #16]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d045      	beq.n	8001948 <uart_stm32_init+0xf8>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 80018bc:	2b01      	cmp	r3, #1
 80018be:	bf0a      	itet	eq
 80018c0:	f44f 5080 	moveq.w	r0, #4096	; 0x1000
 80018c4:	2000      	movne	r0, #0
 80018c6:	f44f 62c0 	moveq.w	r2, #1536	; 0x600
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80018ca:	680b      	ldr	r3, [r1, #0]
 80018cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80018d4:	4302      	orrs	r2, r0
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80018da:	684b      	ldr	r3, [r1, #4]
 80018dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018e0:	604b      	str	r3, [r1, #4]
	LL_USART_ConfigCharacter(config->usart,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 80018e2:	7b23      	ldrb	r3, [r4, #12]
 80018e4:	b12b      	cbz	r3, 80018f2 <uart_stm32_init+0xa2>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 80018e6:	6873      	ldr	r3, [r6, #4]
 80018e8:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80018ea:	6893      	ldr	r3, [r2, #8]
 80018ec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80018f0:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80018f2:	6839      	ldr	r1, [r7, #0]
 80018f4:	4630      	mov	r0, r6
 80018f6:	f7ff ff71 	bl	80017dc <uart_stm32_set_baudrate>

	/* Enable the single wire / half-duplex mode */
	if (config->single_wire) {
 80018fa:	7d22      	ldrb	r2, [r4, #20]
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	b11a      	cbz	r2, 8001908 <uart_stm32_init+0xb8>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	f042 0208 	orr.w	r2, r2, #8
 8001906:	609a      	str	r2, [r3, #8]
		LL_USART_EnableHalfDuplex(config->usart);
	}

#ifdef LL_USART_TXRX_SWAPPED
	if (config->tx_rx_swap) {
 8001908:	7d62      	ldrb	r2, [r4, #21]
 800190a:	b11a      	cbz	r2, 8001914 <uart_stm32_init+0xc4>
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001912:	605a      	str	r2, [r3, #4]
		LL_USART_SetTXRXSwap(config->usart, LL_USART_TXRX_SWAPPED);
	}
#endif

#ifdef LL_USART_RXPIN_LEVEL_INVERTED
	if (config->rx_invert) {
 8001914:	7da2      	ldrb	r2, [r4, #22]
 8001916:	b11a      	cbz	r2, 8001920 <uart_stm32_init+0xd0>
  MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800191e:	605a      	str	r2, [r3, #4]
		LL_USART_SetRXPinLevel(config->usart, LL_USART_RXPIN_LEVEL_INVERTED);
	}
#endif

#ifdef LL_USART_TXPIN_LEVEL_INVERTED
	if (config->tx_invert) {
 8001920:	7de2      	ldrb	r2, [r4, #23]
 8001922:	b11a      	cbz	r2, 800192c <uart_stm32_init+0xdc>
  MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800192a:	605a      	str	r2, [r3, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8001934:	69da      	ldr	r2, [r3, #28]
 8001936:	0291      	lsls	r1, r2, #10
 8001938:	d5fc      	bpl.n	8001934 <uart_stm32_init+0xe4>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800193a:	69da      	ldr	r2, [r3, #28]
 800193c:	0252      	lsls	r2, r2, #9
 800193e:	d5fc      	bpl.n	800193a <uart_stm32_init+0xea>
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8001940:	4628      	mov	r0, r5
 8001942:	b002      	add	sp, #8
 8001944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8001948:	f44f 5080 	mov.w	r0, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800194c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001950:	e7bb      	b.n	80018ca <uart_stm32_init+0x7a>
		return -ENODEV;
 8001952:	f06f 0512 	mvn.w	r5, #18
 8001956:	e7f3      	b.n	8001940 <uart_stm32_init+0xf0>
	if (err < 0) {
 8001958:	4605      	mov	r5, r0
 800195a:	e7f1      	b.n	8001940 <uart_stm32_init+0xf0>
 800195c:	080031b8 	.word	0x080031b8

08001960 <uart_stm32_configure>:
{
 8001960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8001964:	790b      	ldrb	r3, [r1, #4]
	const struct uart_stm32_config *config = dev->config;
 8001966:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8001968:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 800196a:	2b01      	cmp	r3, #1
{
 800196c:	460c      	mov	r4, r1
	switch (parity) {
 800196e:	d01c      	beq.n	80019aa <uart_stm32_configure+0x4a>
		return LL_USART_PARITY_NONE;
 8001970:	2b02      	cmp	r3, #2
 8001972:	bf0c      	ite	eq
 8001974:	f44f 6880 	moveq.w	r8, #1024	; 0x400
 8001978:	f04f 0800 	movne.w	r8, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800197c:	f894 9005 	ldrb.w	r9, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8001980:	79a7      	ldrb	r7, [r4, #6]
 8001982:	f1b9 0f02 	cmp.w	r9, #2
 8001986:	bf96      	itet	ls
 8001988:	4a49      	ldrls	r2, [pc, #292]	; (8001ab0 <uart_stm32_configure+0x150>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800198a:	f44f 5100 	movhi.w	r1, #8192	; 0x2000
 800198e:	f832 1019 	ldrhls.w	r1, [r2, r9, lsl #1]
	switch (db) {
 8001992:	2f02      	cmp	r7, #2
 8001994:	d00c      	beq.n	80019b0 <uart_stm32_configure+0x50>
 8001996:	2f04      	cmp	r7, #4
 8001998:	f000 8084 	beq.w	8001aa4 <uart_stm32_configure+0x144>
			return LL_USART_DATAWIDTH_8B;
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf14      	ite	ne
 80019a0:	f44f 5e80 	movne.w	lr, #4096	; 0x1000
 80019a4:	f04f 0e00 	moveq.w	lr, #0
 80019a8:	e008      	b.n	80019bc <uart_stm32_configure+0x5c>
	switch (parity) {
 80019aa:	f44f 68c0 	mov.w	r8, #1536	; 0x600
 80019ae:	e7e5      	b.n	800197c <uart_stm32_configure+0x1c>
			return LL_USART_DATAWIDTH_8B;
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf0c      	ite	eq
 80019b4:	f04f 5e80 	moveq.w	lr, #268435456	; 0x10000000
 80019b8:	f04f 0e00 	movne.w	lr, #0
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 80019bc:	79e2      	ldrb	r2, [r4, #7]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 80019be:	f1a3 0a03 	sub.w	sl, r3, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 80019c2:	2a01      	cmp	r2, #1
 80019c4:	bf14      	ite	ne
 80019c6:	f04f 0c00 	movne.w	ip, #0
 80019ca:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 80019ce:	f1ba 0f01 	cmp.w	sl, #1
 80019d2:	d96a      	bls.n	8001aaa <uart_stm32_configure+0x14a>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 80019d4:	b10b      	cbz	r3, 80019da <uart_stm32_configure+0x7a>
 80019d6:	2f04      	cmp	r7, #4
 80019d8:	d067      	beq.n	8001aaa <uart_stm32_configure+0x14a>
	if (IS_LPUART_INSTANCE(config->usart) &&
 80019da:	682b      	ldr	r3, [r5, #0]
 80019dc:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001ab4 <uart_stm32_configure+0x154>
 80019e0:	4553      	cmp	r3, sl
 80019e2:	d102      	bne.n	80019ea <uart_stm32_configure+0x8a>
 80019e4:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 80019e8:	d05f      	beq.n	8001aaa <uart_stm32_configure+0x14a>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 80019ea:	2f01      	cmp	r7, #1
 80019ec:	d95d      	bls.n	8001aaa <uart_stm32_configure+0x14a>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 80019ee:	2f04      	cmp	r7, #4
 80019f0:	d05b      	beq.n	8001aaa <uart_stm32_configure+0x14a>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 80019f2:	b1c2      	cbz	r2, 8001a26 <uart_stm32_configure+0xc6>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 80019f4:	4f30      	ldr	r7, [pc, #192]	; (8001ab8 <uart_stm32_configure+0x158>)
 80019f6:	42bb      	cmp	r3, r7
 80019f8:	d013      	beq.n	8001a22 <uart_stm32_configure+0xc2>
 80019fa:	f5a7 4774 	sub.w	r7, r7, #62464	; 0xf400
 80019fe:	42bb      	cmp	r3, r7
 8001a00:	d00f      	beq.n	8001a22 <uart_stm32_configure+0xc2>
 8001a02:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001a06:	42bb      	cmp	r3, r7
 8001a08:	d00b      	beq.n	8001a22 <uart_stm32_configure+0xc2>
 8001a0a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001a0e:	42bb      	cmp	r3, r7
 8001a10:	d007      	beq.n	8001a22 <uart_stm32_configure+0xc2>
 8001a12:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001a16:	42bb      	cmp	r3, r7
 8001a18:	d003      	beq.n	8001a22 <uart_stm32_configure+0xc2>
 8001a1a:	f507 5740 	add.w	r7, r7, #12288	; 0x3000
 8001a1e:	42bb      	cmp	r3, r7
 8001a20:	d143      	bne.n	8001aaa <uart_stm32_configure+0x14a>
 8001a22:	2a01      	cmp	r2, #1
 8001a24:	d141      	bne.n	8001aaa <uart_stm32_configure+0x14a>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8001a34:	4590      	cmp	r8, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8001a36:	bf1f      	itttt	ne
 8001a38:	681a      	ldrne	r2, [r3, #0]
 8001a3a:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001a3e:	ea42 0208 	orrne.w	r2, r2, r8
 8001a42:	601a      	strne	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8001a4a:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001a4c:	bf1f      	itttt	ne
 8001a4e:	685f      	ldrne	r7, [r3, #4]
 8001a50:	f427 5740 	bicne.w	r7, r7, #12288	; 0x3000
 8001a54:	430f      	orrne	r7, r1
 8001a56:	605f      	strne	r7, [r3, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 8001a5e:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8001a60:	bf1f      	itttt	ne
 8001a62:	6819      	ldrne	r1, [r3, #0]
 8001a64:	f021 2110 	bicne.w	r1, r1, #268439552	; 0x10001000
 8001a68:	ea41 010e 	orrne.w	r1, r1, lr
 8001a6c:	6019      	strne	r1, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8001a6e:	689a      	ldr	r2, [r3, #8]
	if (cfg->baudrate != data->baud_rate) {
 8001a70:	6821      	ldr	r1, [r4, #0]
 8001a72:	f402 7240 	and.w	r2, r2, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8001a76:	4594      	cmp	ip, r2
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001a78:	bf1f      	itttt	ne
 8001a7a:	689a      	ldrne	r2, [r3, #8]
 8001a7c:	f422 7240 	bicne.w	r2, r2, #768	; 0x300
 8001a80:	ea42 020c 	orrne.w	r2, r2, ip
 8001a84:	609a      	strne	r2, [r3, #8]
	if (cfg->baudrate != data->baud_rate) {
 8001a86:	6833      	ldr	r3, [r6, #0]
 8001a88:	4299      	cmp	r1, r3
 8001a8a:	d003      	beq.n	8001a94 <uart_stm32_configure+0x134>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8001a8c:	f7ff fea6 	bl	80017dc <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	6033      	str	r3, [r6, #0]
	LL_USART_Enable(config->usart);
 8001a94:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001a96:	6813      	ldr	r3, [r2, #0]
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6013      	str	r3, [r2, #0]
	return 0;
 8001a9e:	2000      	movs	r0, #0
};
 8001aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (db) {
 8001aa4:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
 8001aa8:	e788      	b.n	80019bc <uart_stm32_configure+0x5c>
		return -ENOTSUP;
 8001aaa:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001aae:	e7f7      	b.n	8001aa0 <uart_stm32_configure+0x140>
 8001ab0:	080038d4 	.word	0x080038d4
 8001ab4:	40008000 	.word	0x40008000
 8001ab8:	40013800 	.word	0x40013800

08001abc <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8001abc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8001ac0:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8001ac2:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8001ac4:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8001ac6:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <elapsed+0x34>)
 8001aca:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8001ace:	4909      	ldr	r1, [pc, #36]	; (8001af4 <elapsed+0x38>)
 8001ad0:	d101      	bne.n	8001ad6 <elapsed+0x1a>
	    || (val1 < val2)) {
 8001ad2:	4282      	cmp	r2, r0
 8001ad4:	d206      	bcs.n	8001ae4 <elapsed+0x28>
		overflow_cyc += last_load;
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	680c      	ldr	r4, [r1, #0]
 8001ada:	4422      	add	r2, r4
 8001adc:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8001ade:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001ae2:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	680a      	ldr	r2, [r1, #0]
 8001ae8:	4413      	add	r3, r2
}
 8001aea:	1a18      	subs	r0, r3, r0
 8001aec:	bd10      	pop	{r4, pc}
 8001aee:	bf00      	nop
 8001af0:	200002b4 	.word	0x200002b4
 8001af4:	200002b0 	.word	0x200002b0

08001af8 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <sys_clock_driver_init+0x28>)
 8001afa:	2210      	movs	r2, #16
 8001afc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <sys_clock_driver_init+0x2c>)
 8001b02:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001b06:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <sys_clock_driver_init+0x30>)
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8001b0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001b12:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001b14:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	f042 0207 	orr.w	r2, r2, #7
 8001b1c:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00
 8001b24:	200002b0 	.word	0x200002b0
 8001b28:	200002b4 	.word	0x200002b4

08001b2c <sys_clock_isr>:
{
 8001b2c:	b508      	push	{r3, lr}
	elapsed();
 8001b2e:	f7ff ffc5 	bl	8001abc <elapsed>
	cycle_count += overflow_cyc;
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <sys_clock_isr+0x38>)
 8001b34:	4a0c      	ldr	r2, [pc, #48]	; (8001b68 <sys_clock_isr+0x3c>)
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	6811      	ldr	r1, [r2, #0]
 8001b3a:	4408      	add	r0, r1
 8001b3c:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <sys_clock_isr+0x40>)
 8001b44:	6813      	ldr	r3, [r2, #0]
 8001b46:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001b4a:	1ac0      	subs	r0, r0, r3
 8001b4c:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8001b50:	fb01 3300 	mla	r3, r1, r0, r3
 8001b54:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8001b56:	f000 fe89 	bl	800286c <sys_clock_announce>
}
 8001b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8001b5e:	f7ff b9cf 	b.w	8000f00 <z_arm_exc_exit>
 8001b62:	bf00      	nop
 8001b64:	200002b4 	.word	0x200002b4
 8001b68:	200002ac 	.word	0x200002ac
 8001b6c:	200002a8 	.word	0x200002a8

08001b70 <sys_clock_set_timeout>:
{
 8001b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b72:	4c31      	ldr	r4, [pc, #196]	; (8001c38 <sys_clock_set_timeout+0xc8>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8001b74:	b159      	cbz	r1, 8001b8e <sys_clock_set_timeout+0x1e>
 8001b76:	1c42      	adds	r2, r0, #1
 8001b78:	d109      	bne.n	8001b8e <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8001b7a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001b7e:	6913      	ldr	r3, [r2, #16]
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8001b86:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001b8a:	6023      	str	r3, [r4, #0]
}
 8001b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001b8e:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8001b90:	6825      	ldr	r5, [r4, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001b92:	d022      	beq.n	8001bda <sys_clock_set_timeout+0x6a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001b94:	2801      	cmp	r0, #1
 8001b96:	dd23      	ble.n	8001be0 <sys_clock_set_timeout+0x70>
 8001b98:	f5b0 6f03 	cmp.w	r0, #2096	; 0x830
 8001b9c:	dc22      	bgt.n	8001be4 <sys_clock_set_timeout+0x74>
 8001b9e:	1e47      	subs	r7, r0, #1
	__asm__ volatile(
 8001ba0:	f04f 0310 	mov.w	r3, #16
 8001ba4:	f3ef 8611 	mrs	r6, BASEPRI
 8001ba8:	f383 8812 	msr	BASEPRI_MAX, r3
 8001bac:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8001bb0:	f7ff ff84 	bl	8001abc <elapsed>
	cycle_count += pending;
 8001bb4:	4921      	ldr	r1, [pc, #132]	; (8001c3c <sys_clock_set_timeout+0xcc>)
	val1 = SysTick->VAL;
 8001bb6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 8001bba:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 8001bbc:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8001bc0:	680b      	ldr	r3, [r1, #0]
 8001bc2:	4418      	add	r0, r3
	overflow_cyc = 0U;
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <sys_clock_set_timeout+0xd0>)
	cycle_count += pending;
 8001bc6:	6008      	str	r0, [r1, #0]
	overflow_cyc = 0U;
 8001bc8:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8001bca:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <sys_clock_set_timeout+0xd4>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8001bce:	1a83      	subs	r3, r0, r2
 8001bd0:	d50b      	bpl.n	8001bea <sys_clock_set_timeout+0x7a>
		delay = MAX(delay, MIN_DELAY);
 8001bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 8001bd6:	6023      	str	r3, [r4, #0]
 8001bd8:	e01a      	b.n	8001c10 <sys_clock_set_timeout+0xa0>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001bda:	f44f 6003 	mov.w	r0, #2096	; 0x830
 8001bde:	e7de      	b.n	8001b9e <sys_clock_set_timeout+0x2e>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001be0:	2700      	movs	r7, #0
 8001be2:	e7dd      	b.n	8001ba0 <sys_clock_set_timeout+0x30>
 8001be4:	f44f 6703 	mov.w	r7, #2096	; 0x830
 8001be8:	e7da      	b.n	8001ba0 <sys_clock_set_timeout+0x30>
		delay = ticks * CYC_PER_TICK;
 8001bea:	f44f 5efa 	mov.w	lr, #8000	; 0x1f40
		delay += unannounced;
 8001bee:	fb0e 3307 	mla	r3, lr, r7, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001bf2:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
		delay -= unannounced;
 8001bf6:	1a12      	subs	r2, r2, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001bf8:	331f      	adds	r3, #31
 8001bfa:	fbb3 f3fe 	udiv	r3, r3, lr
		delay -= unannounced;
 8001bfe:	fb0e 2303 	mla	r3, lr, r3, r2
		delay = MAX(delay, MIN_DELAY);
 8001c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c06:	d9e4      	bls.n	8001bd2 <sys_clock_set_timeout+0x62>
		if (delay > MAX_CYCLES) {
 8001c08:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <sys_clock_set_timeout+0xd8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d9e3      	bls.n	8001bd6 <sys_clock_set_timeout+0x66>
			last_load = MAX_CYCLES;
 8001c0e:	6022      	str	r2, [r4, #0]
	val2 = SysTick->VAL;
 8001c10:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 8001c14:	6824      	ldr	r4, [r4, #0]
	val2 = SysTick->VAL;
 8001c16:	6993      	ldr	r3, [r2, #24]
	if (val1 < val2) {
 8001c18:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 8001c1a:	bf38      	it	cc
 8001c1c:	44ac      	addcc	ip, r5
	SysTick->LOAD = last_load - 1;
 8001c1e:	3c01      	subs	r4, #1
		cycle_count += (val1 - val2);
 8001c20:	ebac 0c03 	sub.w	ip, ip, r3
	SysTick->LOAD = last_load - 1;
 8001c24:	6154      	str	r4, [r2, #20]
		cycle_count += (val1 - val2);
 8001c26:	4460      	add	r0, ip
	SysTick->VAL = 0; /* resets timer to last_load */
 8001c28:	2400      	movs	r4, #0
 8001c2a:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 8001c2c:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 8001c2e:	f386 8811 	msr	BASEPRI, r6
 8001c32:	f3bf 8f6f 	isb	sy
 8001c36:	e7a9      	b.n	8001b8c <sys_clock_set_timeout+0x1c>
 8001c38:	200002b0 	.word	0x200002b0
 8001c3c:	200002ac 	.word	0x200002ac
 8001c40:	200002b4 	.word	0x200002b4
 8001c44:	200002a8 	.word	0x200002a8
 8001c48:	00ffdc00 	.word	0x00ffdc00

08001c4c <sys_clock_elapsed>:
{
 8001c4c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8001c4e:	f04f 0310 	mov.w	r3, #16
 8001c52:	f3ef 8411 	mrs	r4, BASEPRI
 8001c56:	f383 8812 	msr	BASEPRI_MAX, r3
 8001c5a:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8001c5e:	f7ff ff2d 	bl	8001abc <elapsed>
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <sys_clock_elapsed+0x34>)
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <sys_clock_elapsed+0x38>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	4403      	add	r3, r0
	__asm__ volatile(
 8001c6e:	f384 8811 	msr	BASEPRI, r4
 8001c72:	f3bf 8f6f 	isb	sy
}
 8001c76:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001c7a:	fbb3 f0f0 	udiv	r0, r3, r0
 8001c7e:	bd10      	pop	{r4, pc}
 8001c80:	200002ac 	.word	0x200002ac
 8001c84:	200002a8 	.word	0x200002a8

08001c88 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8001c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 8001c8c:	4f20      	ldr	r7, [pc, #128]	; (8001d10 <pinctrl_configure_pins+0x88>)
 8001c8e:	4604      	mov	r4, r0
 8001c90:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 8001c94:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8001c96:	42b4      	cmp	r4, r6
 8001c98:	d101      	bne.n	8001c9e <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	e014      	b.n	8001cc8 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 8001c9e:	6822      	ldr	r2, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8001ca0:	06d1      	lsls	r1, r2, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8001ca2:	f002 091f 	and.w	r9, r2, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8001ca6:	d411      	bmi.n	8001ccc <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8001ca8:	6865      	ldr	r5, [r4, #4]
 8001caa:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8001cae:	f3c2 1a47 	ubfx	sl, r2, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8001cb2:	f3c2 2243 	ubfx	r2, r2, #9, #4
 8001cb6:	2a0a      	cmp	r2, #10
 8001cb8:	d827      	bhi.n	8001d0a <pinctrl_configure_pins+0x82>
	port_device = gpio_ports[STM32_PORT(pin)];
 8001cba:	f857 8022 	ldr.w	r8, [r7, r2, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001cbe:	f1b8 0f00 	cmp.w	r8, #0
 8001cc2:	d111      	bne.n	8001ce8 <pinctrl_configure_pins+0x60>
		return -ENODEV;
 8001cc4:	f06f 0012 	mvn.w	r0, #18
}
 8001cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8001ccc:	f1b9 0f10 	cmp.w	r9, #16
 8001cd0:	d008      	beq.n	8001ce4 <pinctrl_configure_pins+0x5c>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 8001cd2:	f1b9 0f11 	cmp.w	r9, #17
 8001cd6:	d1ea      	bne.n	8001cae <pinctrl_configure_pins+0x26>
			uint32_t gpio_out = pins[i].pincfg &
 8001cd8:	6865      	ldr	r5, [r4, #4]
			if (gpio_out != 0) {
 8001cda:	052b      	lsls	r3, r5, #20
 8001cdc:	d5e7      	bpl.n	8001cae <pinctrl_configure_pins+0x26>
				pin_cgf = pins[i].pincfg | STM32_MODER_OUTPUT_MODE;
 8001cde:	f045 0510 	orr.w	r5, r5, #16
 8001ce2:	e7e4      	b.n	8001cae <pinctrl_configure_pins+0x26>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 8001ce4:	2530      	movs	r5, #48	; 0x30
 8001ce6:	e7e2      	b.n	8001cae <pinctrl_configure_pins+0x26>
 8001ce8:	4640      	mov	r0, r8
 8001cea:	f001 f944 	bl	8002f76 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	d0e8      	beq.n	8001cc4 <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 8001cf2:	464b      	mov	r3, r9
 8001cf4:	462a      	mov	r2, r5
 8001cf6:	f00a 010f 	and.w	r1, sl, #15
 8001cfa:	4640      	mov	r0, r8
 8001cfc:	f001 f870 	bl	8002de0 <gpio_stm32_configure>
		if (ret < 0) {
 8001d00:	2800      	cmp	r0, #0
 8001d02:	f104 0408 	add.w	r4, r4, #8
 8001d06:	dac6      	bge.n	8001c96 <pinctrl_configure_pins+0xe>
 8001d08:	e7de      	b.n	8001cc8 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 8001d0a:	f06f 0015 	mvn.w	r0, #21
 8001d0e:	e7db      	b.n	8001cc8 <pinctrl_configure_pins+0x40>
 8001d10:	08003850 	.word	0x08003850

08001d14 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d14:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001d16:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d18:	68d9      	ldr	r1, [r3, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d1a:	f012 020c 	ands.w	r2, r2, #12
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x18>
 8001d20:	2a0c      	cmp	r2, #12
 8001d22:	d115      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d24:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d28:	2901      	cmp	r1, #1
 8001d2a:	d118      	bne.n	8001d5e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d2c:	6819      	ldr	r1, [r3, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d2e:	481d      	ldr	r0, [pc, #116]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d30:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d32:	bf55      	itete	pl
 8001d34:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d38:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d3a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d3e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001d42:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d46:	b34a      	cbz	r2, 8001d9c <HAL_RCC_GetSysClockFreq+0x88>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d48:	2a0c      	cmp	r2, #12
 8001d4a:	d009      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0x4c>
 8001d4c:	2000      	movs	r0, #0
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco / pllr;
  }

  return sysclockfreq;
 8001d4e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d50:	2a04      	cmp	r2, #4
 8001d52:	d022      	beq.n	8001d9a <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d54:	2a08      	cmp	r2, #8
 8001d56:	4814      	ldr	r0, [pc, #80]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d58:	bf18      	it	ne
 8001d5a:	2000      	movne	r0, #0
 8001d5c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d5e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001d66:	2a02      	cmp	r2, #2
 8001d68:	d015      	beq.n	8001d96 <HAL_RCC_GetSysClockFreq+0x82>
 8001d6a:	490f      	ldr	r1, [pc, #60]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d6c:	2a03      	cmp	r2, #3
 8001d6e:	bf08      	it	eq
 8001d70:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d72:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001d7a:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d7c:	68d8      	ldr	r0, [r3, #12]
 8001d7e:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d82:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d86:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d88:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d8a:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d8c:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8001d90:	fbb2 f0f0 	udiv	r0, r2, r0
 8001d94:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <HAL_RCC_GetSysClockFreq+0x98>)
 8001d98:	e7eb      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8001d9a:	4804      	ldr	r0, [pc, #16]	; (8001dac <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	0800387c 	.word	0x0800387c
 8001da8:	007a1200 	.word	0x007a1200
 8001dac:	00f42400 	.word	0x00f42400

08001db0 <LL_SetFlashLatency>:
  ErrorStatus status = SUCCESS;

  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */

  /* Frequency cannot be equal to 0 or greater than max clock */
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 8001db0:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <LL_SetFlashLatency+0x7c>)
 8001db2:	1e42      	subs	r2, r0, #1
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d833      	bhi.n	8001e20 <LL_SetFlashLatency+0x70>
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8001db8:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <LL_SetFlashLatency+0x80>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  {
    status = ERROR;
  }
  else
  {
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8001dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc4:	d10f      	bne.n	8001de6 <LL_SetFlashLatency+0x36>
          latency = LL_FLASH_LATENCY_1;
        }
        /* else HCLKFrequency <= 10MHz default LL_FLASH_LATENCY_0 0WS */
      }
#else
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <LL_SetFlashLatency+0x84>)
 8001dc8:	4298      	cmp	r0, r3
 8001dca:	d81a      	bhi.n	8001e02 <LL_SetFlashLatency+0x52>
      {
        /* 64 < HCLK <= 80 => 4WS (5 CPU cycles) */
        latency = LL_FLASH_LATENCY_4;
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <LL_SetFlashLatency+0x88>)
 8001dce:	4298      	cmp	r0, r3
 8001dd0:	d828      	bhi.n	8001e24 <LL_SetFlashLatency+0x74>
      {
        /* 48 < HCLK <= 64 => 3WS (4 CPU cycles) */
        latency = LL_FLASH_LATENCY_3;
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <LL_SetFlashLatency+0x8c>)
 8001dd4:	4298      	cmp	r0, r3
 8001dd6:	d827      	bhi.n	8001e28 <LL_SetFlashLatency+0x78>
        /* 32 < HCLK <= 48 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <LL_SetFlashLatency+0x90>)
        /* 12 < HCLK <= 18 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 8001dda:	4298      	cmp	r0, r3
 8001ddc:	bf94      	ite	ls
 8001dde:	2300      	movls	r3, #0
 8001de0:	2301      	movhi	r3, #1
  ErrorStatus status = SUCCESS;
 8001de2:	2000      	movs	r0, #0
 8001de4:	e011      	b.n	8001e0a <LL_SetFlashLatency+0x5a>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <LL_SetFlashLatency+0x94>)
 8001de8:	4298      	cmp	r0, r3
 8001dea:	d80c      	bhi.n	8001e06 <LL_SetFlashLatency+0x56>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 8001dec:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 8001df0:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 8001df4:	4298      	cmp	r0, r3
 8001df6:	d815      	bhi.n	8001e24 <LL_SetFlashLatency+0x74>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <LL_SetFlashLatency+0x98>)
 8001dfa:	4298      	cmp	r0, r3
 8001dfc:	d814      	bhi.n	8001e28 <LL_SetFlashLatency+0x78>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <LL_SetFlashLatency+0x9c>)
 8001e00:	e7eb      	b.n	8001dda <LL_SetFlashLatency+0x2a>
        latency = LL_FLASH_LATENCY_4;
 8001e02:	2304      	movs	r3, #4
 8001e04:	e7ed      	b.n	8001de2 <LL_SetFlashLatency+0x32>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8001e06:	2300      	movs	r3, #0
        status = ERROR;
 8001e08:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001e0a:	4911      	ldr	r1, [pc, #68]	; (8001e50 <LL_SetFlashLatency+0xa0>)
 8001e0c:	680a      	ldr	r2, [r1, #0]
 8001e0e:	f022 0207 	bic.w	r2, r2, #7
 8001e12:	431a      	orrs	r2, r3
 8001e14:	600a      	str	r2, [r1, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001e16:	680a      	ldr	r2, [r1, #0]
 8001e18:	f002 0207 	and.w	r2, r2, #7

    LL_FLASH_SetLatency(latency);

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(LL_FLASH_GetLatency() != latency)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d000      	beq.n	8001e22 <LL_SetFlashLatency+0x72>
    {
      status = ERROR;
 8001e20:	2001      	movs	r0, #1
    }
  }
  return status;
}
 8001e22:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e7dc      	b.n	8001de2 <LL_SetFlashLatency+0x32>
        latency = LL_FLASH_LATENCY_2;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e7da      	b.n	8001de2 <LL_SetFlashLatency+0x32>
 8001e2c:	04c4b3ff 	.word	0x04c4b3ff
 8001e30:	40007000 	.word	0x40007000
 8001e34:	03d09000 	.word	0x03d09000
 8001e38:	02dc6c00 	.word	0x02dc6c00
 8001e3c:	01e84800 	.word	0x01e84800
 8001e40:	00f42400 	.word	0x00f42400
 8001e44:	018cba80 	.word	0x018cba80
 8001e48:	00b71b00 	.word	0x00b71b00
 8001e4c:	005b8d80 	.word	0x005b8d80
 8001e50:	40022000 	.word	0x40022000

08001e54 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001e54:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <z_sys_init_run_level+0x3c>)
{
 8001e56:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001e58:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8001e5c:	3001      	adds	r0, #1
 8001e5e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8001e62:	42a6      	cmp	r6, r4
 8001e64:	d800      	bhi.n	8001e68 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8001e66:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8001e68:	e9d4 3500 	ldrd	r3, r5, [r4]
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	4798      	blx	r3
		if (dev != NULL) {
 8001e70:	b165      	cbz	r5, 8001e8c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 8001e72:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 8001e74:	b130      	cbz	r0, 8001e84 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8001e76:	2800      	cmp	r0, #0
 8001e78:	bfb8      	it	lt
 8001e7a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8001e7c:	28ff      	cmp	r0, #255	; 0xff
 8001e7e:	bfa8      	it	ge
 8001e80:	20ff      	movge	r0, #255	; 0xff
 8001e82:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8001e84:	785a      	ldrb	r2, [r3, #1]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001e8c:	3408      	adds	r4, #8
 8001e8e:	e7e8      	b.n	8001e62 <z_sys_init_run_level+0xe>
 8001e90:	080038ac 	.word	0x080038ac

08001e94 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8001e94:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <bg_thread_main+0x2c>)
 8001e98:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8001e9a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 8001e9c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8001e9e:	f7ff ffd9 	bl	8001e54 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8001ea2:	f000 fd57 	bl	8002954 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8001ea6:	2003      	movs	r0, #3
 8001ea8:	f7ff ffd4 	bl	8001e54 <z_sys_init_run_level>

	z_init_static_threads();
 8001eac:	f000 f8ea 	bl	8002084 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
 8001eb0:	f7fe faea 	bl	8000488 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8001eb4:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <bg_thread_main+0x30>)
 8001eb6:	7b13      	ldrb	r3, [r2, #12]
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8001ebe:	bd08      	pop	{r3, pc}
 8001ec0:	200002ed 	.word	0x200002ed
 8001ec4:	20000100 	.word	0x20000100

08001ec8 <z_bss_zero>:
{
 8001ec8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8001eca:	4803      	ldr	r0, [pc, #12]	; (8001ed8 <z_bss_zero+0x10>)
 8001ecc:	4a03      	ldr	r2, [pc, #12]	; (8001edc <z_bss_zero+0x14>)
 8001ece:	2100      	movs	r1, #0
 8001ed0:	1a12      	subs	r2, r2, r0
 8001ed2:	f001 f881 	bl	8002fd8 <z_early_memset>
}
 8001ed6:	bd08      	pop	{r3, pc}
 8001ed8:	20000080 	.word	0x20000080
 8001edc:	200002f0 	.word	0x200002f0

08001ee0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 8001ee0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 8001ee2:	2300      	movs	r3, #0
{
 8001ee4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
 8001eec:	4e13      	ldr	r6, [pc, #76]	; (8001f3c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001eee:	4d14      	ldr	r5, [pc, #80]	; (8001f40 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8001ef8:	4912      	ldr	r1, [pc, #72]	; (8001f44 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001efa:	2318      	movs	r3, #24
 8001efc:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
 8001f00:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 8001f04:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 8001f06:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8001f0a:	fb00 1104 	mla	r1, r0, r4, r1
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <z_init_cpu+0x68>)
 8001f10:	9500      	str	r5, [sp, #0]
 8001f12:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f16:	4630      	mov	r0, r6
 8001f18:	f000 f882 	bl	8002020 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8001f1c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8001f1e:	480b      	ldr	r0, [pc, #44]	; (8001f4c <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
 8001f20:	752c      	strb	r4, [r5, #20]
 8001f22:	f023 0304 	bic.w	r3, r3, #4
 8001f26:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8001f28:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8001f2c:	fb03 0404 	mla	r4, r3, r4, r0
 8001f30:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 8001f32:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
 8001f34:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 8001f36:	b006      	add	sp, #24
 8001f38:	bd70      	pop	{r4, r5, r6, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000080 	.word	0x20000080
 8001f40:	200002b8 	.word	0x200002b8
 8001f44:	20000740 	.word	0x20000740
 8001f48:	08002fe1 	.word	0x08002fe1
 8001f4c:	200008c0 	.word	0x200008c0

08001f50 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8001f50:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8001f52:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <z_cstart+0xb4>)
 8001f54:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001f56:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8001f5a:	4d2b      	ldr	r5, [pc, #172]	; (8002008 <z_cstart+0xb8>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
 8001f5c:	4e2b      	ldr	r6, [pc, #172]	; (800200c <z_cstart+0xbc>)
 8001f5e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001f60:	4f2b      	ldr	r7, [pc, #172]	; (8002010 <z_cstart+0xc0>)
 8001f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f66:	2400      	movs	r4, #0
 8001f68:	616b      	str	r3, [r5, #20]
 8001f6a:	23f0      	movs	r3, #240	; 0xf0
 8001f6c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8001f70:	77ec      	strb	r4, [r5, #31]
 8001f72:	762c      	strb	r4, [r5, #24]
 8001f74:	766c      	strb	r4, [r5, #25]
 8001f76:	76ac      	strb	r4, [r5, #26]
 8001f78:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8001f7c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001f7e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001f82:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8001f84:	f7ff f8b8 	bl	80010f8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8001f88:	f7fe fea6 	bl	8000cd8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f90:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8001f92:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8001f94:	f7ff f990 	bl	80012b8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8001f98:	f7ff f8f8 	bl	800118c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 8001f9c:	f240 1301 	movw	r3, #257	; 0x101
 8001fa0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8001fa4:	ab06      	add	r3, sp, #24
 8001fa6:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 8001fa8:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
 8001fac:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8001fae:	f000 ffe1 	bl	8002f74 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7ff ff4e 	bl	8001e54 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8001fb8:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 8001fba:	4d16      	ldr	r5, [pc, #88]	; (8002014 <z_cstart+0xc4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8001fbc:	f7ff ff4a 	bl	8001e54 <z_sys_init_run_level>
	z_sched_init();
 8001fc0:	f000 fa64 	bl	800248c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <z_cstart+0xc8>)
	_kernel.ready_q.cache = &z_main_thread;
 8001fc6:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001fc8:	9305      	str	r3, [sp, #20]
 8001fca:	2301      	movs	r3, #1
 8001fcc:	4913      	ldr	r1, [pc, #76]	; (800201c <z_cstart+0xcc>)
 8001fce:	9400      	str	r4, [sp, #0]
 8001fd0:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8001fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd8:	463b      	mov	r3, r7
 8001fda:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001fde:	4628      	mov	r0, r5
 8001fe0:	f000 f81e 	bl	8002020 <z_setup_new_thread>
 8001fe4:	7b6a      	ldrb	r2, [r5, #13]
 8001fe6:	4606      	mov	r6, r0
 8001fe8:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 8001fec:	4628      	mov	r0, r5
 8001fee:	736a      	strb	r2, [r5, #13]
 8001ff0:	f001 f830 	bl	8003054 <z_ready_thread>
	z_init_cpu(0);
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7ff ff73 	bl	8001ee0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8001ffa:	463a      	mov	r2, r7
 8001ffc:	4631      	mov	r1, r6
 8001ffe:	4628      	mov	r0, r5
 8002000:	f7fe ff54 	bl	8000eac <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8002004:	20001100 	.word	0x20001100
 8002008:	e000ed00 	.word	0xe000ed00
 800200c:	200002b8 	.word	0x200002b8
 8002010:	08001e95 	.word	0x08001e95
 8002014:	20000100 	.word	0x20000100
 8002018:	080039a3 	.word	0x080039a3
 800201c:	20000300 	.word	0x20000300

08002020 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8002020:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8002024:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002026:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8002028:	2604      	movs	r6, #4
 800202a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 800202c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800202e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8002030:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 8002034:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002036:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8002038:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800203c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 800203e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002040:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8002044:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8002046:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 800204a:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 800204e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 8002050:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 8002052:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002054:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002058:	9202      	str	r2, [sp, #8]
 800205a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800205c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 800205e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002062:	9200      	str	r2, [sp, #0]
 8002064:	4642      	mov	r2, r8
{
 8002066:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002068:	f7fe feee 	bl	8000e48 <arch_new_thread>
	if (!_current) {
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 800206e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	b103      	cbz	r3, 8002076 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8002074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 8002076:	6723      	str	r3, [r4, #112]	; 0x70
}
 8002078:	4640      	mov	r0, r8
 800207a:	b004      	add	sp, #16
 800207c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002080:	200002b8 	.word	0x200002b8

08002084 <z_init_static_threads>:
{
 8002084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002086:	4c22      	ldr	r4, [pc, #136]	; (8002110 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8002088:	4d22      	ldr	r5, [pc, #136]	; (8002114 <z_init_static_threads+0x90>)
{
 800208a:	b087      	sub	sp, #28
 800208c:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 800208e:	42ae      	cmp	r6, r5
 8002090:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8002094:	d30b      	bcc.n	80020ae <z_init_static_threads+0x2a>
	k_sched_lock();
 8002096:	f000 f88f 	bl	80021b8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800209a:	4c1d      	ldr	r4, [pc, #116]	; (8002110 <z_init_static_threads+0x8c>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800209c:	4f1e      	ldr	r7, [pc, #120]	; (8002118 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 800209e:	260a      	movs	r6, #10
 80020a0:	42ac      	cmp	r4, r5
 80020a2:	d320      	bcc.n	80020e6 <z_init_static_threads+0x62>
}
 80020a4:	b007      	add	sp, #28
 80020a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80020aa:	f000 b9d3 	b.w	8002454 <k_sched_unlock>
		z_setup_new_thread(
 80020ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80020b2:	9305      	str	r3, [sp, #20]
 80020b4:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80020b8:	9304      	str	r3, [sp, #16]
 80020ba:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80020be:	9303      	str	r3, [sp, #12]
 80020c0:	f854 3c18 	ldr.w	r3, [r4, #-24]
 80020c4:	9302      	str	r3, [sp, #8]
 80020c6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80020d6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80020da:	f7ff ffa1 	bl	8002020 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 80020de:	f854 3c30 	ldr.w	r3, [r4, #-48]
 80020e2:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 80020e4:	e7d2      	b.n	800208c <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 80020e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020e8:	1c53      	adds	r3, r2, #1
 80020ea:	d009      	beq.n	8002100 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 80020ec:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80020f0:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80020f4:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 80020f8:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80020fa:	d103      	bne.n	8002104 <z_init_static_threads+0x80>
	z_sched_start(thread);
 80020fc:	f000 f942 	bl	8002384 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002100:	3430      	adds	r4, #48	; 0x30
 8002102:	e7cd      	b.n	80020a0 <z_init_static_threads+0x1c>
 8002104:	4639      	mov	r1, r7
 8002106:	3018      	adds	r0, #24
 8002108:	f000 fb36 	bl	8002778 <z_add_timeout>
 800210c:	e7f8      	b.n	8002100 <z_init_static_threads+0x7c>
 800210e:	bf00      	nop
 8002110:	20000080 	.word	0x20000080
 8002114:	20000080 	.word	0x20000080
 8002118:	08003075 	.word	0x08003075

0800211c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 800211c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 800211e:	4d07      	ldr	r5, [pc, #28]	; (800213c <z_reset_time_slice+0x20>)
 8002120:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 8002122:	b154      	cbz	r4, 800213a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 8002124:	f7ff fd92 	bl	8001c4c <sys_clock_elapsed>
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <z_reset_time_slice+0x24>)
 800212a:	4404      	add	r4, r0
 800212c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 800212e:	6828      	ldr	r0, [r5, #0]
 8002130:	2100      	movs	r1, #0
	}
}
 8002132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 8002136:	f000 bfd5 	b.w	80030e4 <z_set_timeout_expiry>
}
 800213a:	bd38      	pop	{r3, r4, r5, pc}
 800213c:	200002e4 	.word	0x200002e4
 8002140:	200002b8 	.word	0x200002b8

08002144 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 8002144:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002146:	f04f 0310 	mov.w	r3, #16
 800214a:	f3ef 8411 	mrs	r4, BASEPRI
 800214e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002152:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 8002156:	4a0c      	ldr	r2, [pc, #48]	; (8002188 <k_sched_time_slice_set+0x44>)
 8002158:	2300      	movs	r3, #0
 800215a:	6113      	str	r3, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800215c:	2800      	cmp	r0, #0
			return ((uint32_t)t) * (to_hz / from_hz);
 800215e:	f04f 030a 	mov.w	r3, #10
 8002162:	fb00 f303 	mul.w	r3, r0, r3
 8002166:	4809      	ldr	r0, [pc, #36]	; (800218c <k_sched_time_slice_set+0x48>)
 8002168:	dc0a      	bgt.n	8002180 <k_sched_time_slice_set+0x3c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
 800216a:	6003      	str	r3, [r0, #0]
		}
		slice_max_prio = prio;
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <k_sched_time_slice_set+0x4c>)
		z_reset_time_slice(_current);
 800216e:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
 8002170:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 8002172:	f7ff ffd3 	bl	800211c <z_reset_time_slice>
	__asm__ volatile(
 8002176:	f384 8811 	msr	BASEPRI, r4
 800217a:	f3bf 8f6f 	isb	sy
	}
}
 800217e:	bd10      	pop	{r4, pc}
			slice_ticks = MAX(2, slice_ticks);
 8002180:	2b02      	cmp	r3, #2
 8002182:	bfb8      	it	lt
 8002184:	2302      	movlt	r3, #2
 8002186:	e7f0      	b.n	800216a <k_sched_time_slice_set+0x26>
 8002188:	200002b8 	.word	0x200002b8
 800218c:	200002e4 	.word	0x200002e4
 8002190:	200002e0 	.word	0x200002e0

08002194 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8002194:	b949      	cbnz	r1, 80021aa <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002196:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 800219a:	b930      	cbnz	r0, 80021aa <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <z_reschedule+0x16>
	ret = arch_swap(key);
 80021a6:	f7fe bdfb 	b.w	8000da0 <arch_swap>
 80021aa:	f381 8811 	msr	BASEPRI, r1
 80021ae:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
 80021b2:	4770      	bx	lr
 80021b4:	200002b8 	.word	0x200002b8

080021b8 <k_sched_lock>:
	__asm__ volatile(
 80021b8:	f04f 0310 	mov.w	r3, #16
 80021bc:	f3ef 8111 	mrs	r1, BASEPRI
 80021c0:	f383 8812 	msr	BASEPRI_MAX, r3
 80021c4:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <k_sched_lock+0x24>)
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	7bd3      	ldrb	r3, [r2, #15]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80021d2:	f381 8811 	msr	BASEPRI, r1
 80021d6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 80021da:	4770      	bx	lr
 80021dc:	200002b8 	.word	0x200002b8

080021e0 <update_cache>:
{
 80021e0:	b538      	push	{r3, r4, r5, lr}
 80021e2:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
 80021e4:	480c      	ldr	r0, [pc, #48]	; (8002218 <update_cache+0x38>)
 80021e6:	4d0d      	ldr	r5, [pc, #52]	; (800221c <update_cache+0x3c>)
 80021e8:	f000 ff2e 	bl	8003048 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80021ec:	4604      	mov	r4, r0
 80021ee:	b900      	cbnz	r0, 80021f2 <update_cache+0x12>
 80021f0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 80021f2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 80021f4:	b94a      	cbnz	r2, 800220a <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 80021f6:	7b5a      	ldrb	r2, [r3, #13]
 80021f8:	06d2      	lsls	r2, r2, #27
 80021fa:	d106      	bne.n	800220a <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 80021fc:	69a2      	ldr	r2, [r4, #24]
 80021fe:	b922      	cbnz	r2, 800220a <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 8002200:	89da      	ldrh	r2, [r3, #14]
 8002202:	2a7f      	cmp	r2, #127	; 0x7f
 8002204:	d901      	bls.n	800220a <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 8002206:	61ab      	str	r3, [r5, #24]
}
 8002208:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 800220a:	429c      	cmp	r4, r3
 800220c:	d002      	beq.n	8002214 <update_cache+0x34>
			z_reset_time_slice(thread);
 800220e:	4620      	mov	r0, r4
 8002210:	f7ff ff84 	bl	800211c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8002214:	61ac      	str	r4, [r5, #24]
}
 8002216:	e7f7      	b.n	8002208 <update_cache+0x28>
 8002218:	200002d4 	.word	0x200002d4
 800221c:	200002b8 	.word	0x200002b8

08002220 <move_thread_to_end_of_prio_q>:
{
 8002220:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 8002222:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8002226:	7b43      	ldrb	r3, [r0, #13]
 8002228:	2a00      	cmp	r2, #0
{
 800222a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 800222c:	da04      	bge.n	8002238 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800222e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002232:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8002234:	f000 fee0 	bl	8002ff8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8002238:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800223a:	4a15      	ldr	r2, [pc, #84]	; (8002290 <move_thread_to_end_of_prio_q+0x70>)
 800223c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002240:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8002242:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002246:	f102 051c 	add.w	r5, r2, #28
 800224a:	42ab      	cmp	r3, r5
 800224c:	d01b      	beq.n	8002286 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800224e:	b1d3      	cbz	r3, 8002286 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 8002250:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8002254:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 8002258:	4286      	cmp	r6, r0
 800225a:	d00f      	beq.n	800227c <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 800225c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 800225e:	2800      	cmp	r0, #0
 8002260:	dd0c      	ble.n	800227c <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8002262:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 8002264:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 8002268:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 800226a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 800226c:	6890      	ldr	r0, [r2, #8]
 800226e:	1a43      	subs	r3, r0, r1
 8002270:	4258      	negs	r0, r3
}
 8002272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8002276:	4158      	adcs	r0, r3
 8002278:	f7ff bfb2 	b.w	80021e0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 800227c:	42a3      	cmp	r3, r4
 800227e:	d002      	beq.n	8002286 <move_thread_to_end_of_prio_q+0x66>
 8002280:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1e6      	bne.n	8002254 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 8002286:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 800228a:	6021      	str	r1, [r4, #0]
	list->tail = node;
 800228c:	6211      	str	r1, [r2, #32]
}
 800228e:	e7ed      	b.n	800226c <move_thread_to_end_of_prio_q+0x4c>
 8002290:	200002b8 	.word	0x200002b8

08002294 <z_time_slice>:
{
 8002294:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8002296:	f04f 0310 	mov.w	r3, #16
 800229a:	f3ef 8511 	mrs	r5, BASEPRI
 800229e:	f383 8812 	msr	BASEPRI_MAX, r3
 80022a2:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 80022a6:	4b17      	ldr	r3, [pc, #92]	; (8002304 <z_time_slice+0x70>)
 80022a8:	4a17      	ldr	r2, [pc, #92]	; (8002308 <z_time_slice+0x74>)
 80022aa:	689c      	ldr	r4, [r3, #8]
 80022ac:	6811      	ldr	r1, [r2, #0]
 80022ae:	428c      	cmp	r4, r1
 80022b0:	d107      	bne.n	80022c2 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 80022b2:	4620      	mov	r0, r4
 80022b4:	f7ff ff32 	bl	800211c <z_reset_time_slice>
	__asm__ volatile(
 80022b8:	f385 8811 	msr	BASEPRI, r5
 80022bc:	f3bf 8f6f 	isb	sy
}
 80022c0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 80022c2:	2100      	movs	r1, #0
 80022c4:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 80022c6:	4a11      	ldr	r2, [pc, #68]	; (800230c <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	b1c2      	cbz	r2, 80022fe <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 80022cc:	89e2      	ldrh	r2, [r4, #14]
 80022ce:	2a7f      	cmp	r2, #127	; 0x7f
 80022d0:	d815      	bhi.n	80022fe <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 80022d2:	7b62      	ldrb	r2, [r4, #13]
 80022d4:	06d2      	lsls	r2, r2, #27
 80022d6:	d112      	bne.n	80022fe <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 80022d8:	4a0d      	ldr	r2, [pc, #52]	; (8002310 <z_time_slice+0x7c>)
 80022da:	f994 100e 	ldrsb.w	r1, [r4, #14]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	4291      	cmp	r1, r2
 80022e2:	db0c      	blt.n	80022fe <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
 80022e4:	4a0b      	ldr	r2, [pc, #44]	; (8002314 <z_time_slice+0x80>)
 80022e6:	4294      	cmp	r4, r2
 80022e8:	d009      	beq.n	80022fe <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	4282      	cmp	r2, r0
 80022ee:	dc03      	bgt.n	80022f8 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 80022f0:	4620      	mov	r0, r4
 80022f2:	f7ff ff95 	bl	8002220 <move_thread_to_end_of_prio_q>
 80022f6:	e7dc      	b.n	80022b2 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 80022f8:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 80022fa:	611a      	str	r2, [r3, #16]
 80022fc:	e7dc      	b.n	80022b8 <z_time_slice+0x24>
 80022fe:	2200      	movs	r2, #0
 8002300:	e7fb      	b.n	80022fa <z_time_slice+0x66>
 8002302:	bf00      	nop
 8002304:	200002b8 	.word	0x200002b8
 8002308:	200002dc 	.word	0x200002dc
 800230c:	200002e4 	.word	0x200002e4
 8002310:	200002e0 	.word	0x200002e0
 8002314:	20000080 	.word	0x20000080

08002318 <ready_thread>:
{
 8002318:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800231a:	f990 200d 	ldrsb.w	r2, [r0, #13]
 800231e:	7b43      	ldrb	r3, [r0, #13]
 8002320:	2a00      	cmp	r2, #0
 8002322:	db2a      	blt.n	800237a <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8002324:	06da      	lsls	r2, r3, #27
 8002326:	d128      	bne.n	800237a <ready_thread+0x62>
 8002328:	6982      	ldr	r2, [r0, #24]
 800232a:	bb32      	cbnz	r2, 800237a <ready_thread+0x62>
	return list->head == list;
 800232c:	4a14      	ldr	r2, [pc, #80]	; (8002380 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 800232e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002332:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
 8002334:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002338:	f102 051c 	add.w	r5, r2, #28
 800233c:	42ab      	cmp	r3, r5
 800233e:	d017      	beq.n	8002370 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002340:	b1b3      	cbz	r3, 8002370 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 8002342:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8002346:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 800234a:	428e      	cmp	r6, r1
 800234c:	d00b      	beq.n	8002366 <ready_thread+0x4e>
		return b2 - b1;
 800234e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002350:	2900      	cmp	r1, #0
 8002352:	dd08      	ble.n	8002366 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 8002354:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8002356:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 800235a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800235c:	6058      	str	r0, [r3, #4]
}
 800235e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff bf3d 	b.w	80021e0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8002366:	42a3      	cmp	r3, r4
 8002368:	d002      	beq.n	8002370 <ready_thread+0x58>
 800236a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1ea      	bne.n	8002346 <ready_thread+0x2e>
	node->prev = tail;
 8002370:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 8002374:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8002376:	6210      	str	r0, [r2, #32]
}
 8002378:	e7f1      	b.n	800235e <ready_thread+0x46>
}
 800237a:	bc70      	pop	{r4, r5, r6}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	200002b8 	.word	0x200002b8

08002384 <z_sched_start>:
{
 8002384:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002386:	f04f 0210 	mov.w	r2, #16
 800238a:	f3ef 8411 	mrs	r4, BASEPRI
 800238e:	f382 8812 	msr	BASEPRI_MAX, r2
 8002392:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8002396:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8002398:	0751      	lsls	r1, r2, #29
 800239a:	d404      	bmi.n	80023a6 <z_sched_start+0x22>
	__asm__ volatile(
 800239c:	f384 8811 	msr	BASEPRI, r4
 80023a0:	f3bf 8f6f 	isb	sy
}
 80023a4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80023a6:	f022 0204 	bic.w	r2, r2, #4
 80023aa:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 80023ac:	f7ff ffb4 	bl	8002318 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80023b0:	4621      	mov	r1, r4
 80023b2:	4802      	ldr	r0, [pc, #8]	; (80023bc <z_sched_start+0x38>)
}
 80023b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 80023b8:	f7ff beec 	b.w	8002194 <z_reschedule>
 80023bc:	200002ee 	.word	0x200002ee

080023c0 <unready_thread>:
{
 80023c0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 80023c2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 80023c6:	7b43      	ldrb	r3, [r0, #13]
 80023c8:	2a00      	cmp	r2, #0
{
 80023ca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 80023cc:	da04      	bge.n	80023d8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80023ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023d2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80023d4:	f000 fe10 	bl	8002ff8 <sys_dlist_remove>
	update_cache(thread == _current);
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <unready_thread+0x2c>)
 80023da:	6898      	ldr	r0, [r3, #8]
 80023dc:	1a43      	subs	r3, r0, r1
 80023de:	4258      	negs	r0, r3
 80023e0:	4158      	adcs	r0, r3
}
 80023e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 80023e6:	f7ff befb 	b.w	80021e0 <update_cache>
 80023ea:	bf00      	nop
 80023ec:	200002b8 	.word	0x200002b8

080023f0 <z_impl_k_thread_suspend>:
{
 80023f0:	b570      	push	{r4, r5, r6, lr}
 80023f2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 80023f4:	3018      	adds	r0, #24
 80023f6:	f000 fe5f 	bl	80030b8 <z_abort_timeout>
	__asm__ volatile(
 80023fa:	f04f 0310 	mov.w	r3, #16
 80023fe:	f3ef 8611 	mrs	r6, BASEPRI
 8002402:	f383 8812 	msr	BASEPRI_MAX, r3
 8002406:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 800240a:	f994 200d 	ldrsb.w	r2, [r4, #13]
 800240e:	7b63      	ldrb	r3, [r4, #13]
 8002410:	2a00      	cmp	r2, #0
 8002412:	da05      	bge.n	8002420 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002418:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800241a:	4620      	mov	r0, r4
 800241c:	f000 fdec 	bl	8002ff8 <sys_dlist_remove>
		update_cache(thread == _current);
 8002420:	4d0b      	ldr	r5, [pc, #44]	; (8002450 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8002422:	7b63      	ldrb	r3, [r4, #13]
 8002424:	68a8      	ldr	r0, [r5, #8]
 8002426:	f043 0310 	orr.w	r3, r3, #16
 800242a:	7363      	strb	r3, [r4, #13]
 800242c:	1b03      	subs	r3, r0, r4
 800242e:	4258      	negs	r0, r3
 8002430:	4158      	adcs	r0, r3
 8002432:	f7ff fed5 	bl	80021e0 <update_cache>
	__asm__ volatile(
 8002436:	f386 8811 	msr	BASEPRI, r6
 800243a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 800243e:	68ab      	ldr	r3, [r5, #8]
 8002440:	42a3      	cmp	r3, r4
 8002442:	d103      	bne.n	800244c <z_impl_k_thread_suspend+0x5c>
}
 8002444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8002448:	f000 bdf4 	b.w	8003034 <z_reschedule_unlocked>
}
 800244c:	bd70      	pop	{r4, r5, r6, pc}
 800244e:	bf00      	nop
 8002450:	200002b8 	.word	0x200002b8

08002454 <k_sched_unlock>:
{
 8002454:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002456:	f04f 0310 	mov.w	r3, #16
 800245a:	f3ef 8411 	mrs	r4, BASEPRI
 800245e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002462:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <k_sched_unlock+0x34>)
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	7bd3      	ldrb	r3, [r2, #15]
 800246c:	3301      	adds	r3, #1
 800246e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8002470:	2000      	movs	r0, #0
 8002472:	f7ff feb5 	bl	80021e0 <update_cache>
	__asm__ volatile(
 8002476:	f384 8811 	msr	BASEPRI, r4
 800247a:	f3bf 8f6f 	isb	sy
}
 800247e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8002482:	f000 bdd7 	b.w	8003034 <z_reschedule_unlocked>
 8002486:	bf00      	nop
 8002488:	200002b8 	.word	0x200002b8

0800248c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800248e:	2100      	movs	r1, #0
 8002490:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 8002494:	e9c3 2207 	strd	r2, r2, [r3, #28]
 8002498:	4608      	mov	r0, r1
 800249a:	f7ff be53 	b.w	8002144 <k_sched_time_slice_set>
 800249e:	bf00      	nop
 80024a0:	200002b8 	.word	0x200002b8

080024a4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 80024a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 80024a6:	f04f 0310 	mov.w	r3, #16
 80024aa:	f3ef 8511 	mrs	r5, BASEPRI
 80024ae:	f383 8812 	msr	BASEPRI_MAX, r3
 80024b2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 80024b6:	491a      	ldr	r1, [pc, #104]	; (8002520 <z_impl_k_yield+0x7c>)
 80024b8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80024ba:	7b43      	ldrb	r3, [r0, #13]
 80024bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024c0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80024c2:	f000 fd99 	bl	8002ff8 <sys_dlist_remove>
	}
	queue_thread(_current);
 80024c6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 80024c8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 80024ca:	4608      	mov	r0, r1
 80024cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80024d0:	735a      	strb	r2, [r3, #13]
 80024d2:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80024d6:	4282      	cmp	r2, r0
 80024d8:	d01c      	beq.n	8002514 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80024da:	b1da      	cbz	r2, 8002514 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 80024dc:	6a0f      	ldr	r7, [r1, #32]
	int32_t b1 = thread_1->base.prio;
 80024de:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 80024e2:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 80024e6:	42a6      	cmp	r6, r4
 80024e8:	d00f      	beq.n	800250a <z_impl_k_yield+0x66>
		return b2 - b1;
 80024ea:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	dd0c      	ble.n	800250a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 80024f0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 80024f2:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 80024f6:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 80024f8:	6053      	str	r3, [r2, #4]
	update_cache(1);
 80024fa:	2001      	movs	r0, #1
 80024fc:	f7ff fe70 	bl	80021e0 <update_cache>
 8002500:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 8002502:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002506:	f7fe bc4b 	b.w	8000da0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 800250a:	42ba      	cmp	r2, r7
 800250c:	d002      	beq.n	8002514 <z_impl_k_yield+0x70>
 800250e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002510:	2a00      	cmp	r2, #0
 8002512:	d1e6      	bne.n	80024e2 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 8002514:	6a0a      	ldr	r2, [r1, #32]
	node->prev = tail;
 8002516:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 800251a:	6013      	str	r3, [r2, #0]
	list->tail = node;
 800251c:	620b      	str	r3, [r1, #32]
}
 800251e:	e7ec      	b.n	80024fa <z_impl_k_yield+0x56>
 8002520:	200002b8 	.word	0x200002b8

08002524 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8002524:	ea50 0301 	orrs.w	r3, r0, r1
{
 8002528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800252c:	4605      	mov	r5, r0
 800252e:	460e      	mov	r6, r1
	if (ticks == 0) {
 8002530:	d103      	bne.n	800253a <z_tick_sleep+0x16>
		(void) arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
 8002532:	f7ff ffb7 	bl	80024a4 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 8002536:	2000      	movs	r0, #0
 8002538:	e033      	b.n	80025a2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 800253a:	f06f 0401 	mvn.w	r4, #1
 800253e:	1a24      	subs	r4, r4, r0
 8002540:	f04f 33ff 	mov.w	r3, #4294967295
 8002544:	eb63 0301 	sbc.w	r3, r3, r1
 8002548:	2c01      	cmp	r4, #1
 800254a:	f173 0300 	sbcs.w	r3, r3, #0
 800254e:	da02      	bge.n	8002556 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8002550:	f000 fde2 	bl	8003118 <sys_clock_tick_get_32>
 8002554:	1944      	adds	r4, r0, r5
 8002556:	f04f 0310 	mov.w	r3, #16
 800255a:	f3ef 8811 	mrs	r8, BASEPRI
 800255e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002562:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 8002566:	4f10      	ldr	r7, [pc, #64]	; (80025a8 <z_tick_sleep+0x84>)
 8002568:	4b10      	ldr	r3, [pc, #64]	; (80025ac <z_tick_sleep+0x88>)
 800256a:	68b8      	ldr	r0, [r7, #8]
 800256c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 800256e:	f7ff ff27 	bl	80023c0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8002572:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8002574:	490e      	ldr	r1, [pc, #56]	; (80025b0 <z_tick_sleep+0x8c>)
 8002576:	462a      	mov	r2, r5
 8002578:	4633      	mov	r3, r6
 800257a:	3018      	adds	r0, #24
 800257c:	f000 f8fc 	bl	8002778 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	7b53      	ldrb	r3, [r2, #13]
 8002584:	f043 0310 	orr.w	r3, r3, #16
 8002588:	7353      	strb	r3, [r2, #13]
 800258a:	4640      	mov	r0, r8
 800258c:	f7fe fc08 	bl	8000da0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8002590:	f000 fdc2 	bl	8003118 <sys_clock_tick_get_32>
 8002594:	1a20      	subs	r0, r4, r0
 8002596:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 800259a:	2801      	cmp	r0, #1
 800259c:	f173 0300 	sbcs.w	r3, r3, #0
 80025a0:	dbc9      	blt.n	8002536 <z_tick_sleep+0x12>
}
 80025a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025a6:	bf00      	nop
 80025a8:	200002b8 	.word	0x200002b8
 80025ac:	200002dc 	.word	0x200002dc
 80025b0:	08003075 	.word	0x08003075

080025b4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80025b4:	f1b1 3fff 	cmp.w	r1, #4294967295
 80025b8:	bf08      	it	eq
 80025ba:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
 80025be:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80025c0:	d106      	bne.n	80025d0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 80025c2:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <z_impl_k_sleep+0x2c>)
 80025c4:	6898      	ldr	r0, [r3, #8]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
 80025c6:	f7ff ff13 	bl	80023f0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 80025ca:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 80025ce:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 80025d0:	f7ff ffa8 	bl	8002524 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 80025d4:	220a      	movs	r2, #10
 80025d6:	2300      	movs	r3, #0
 80025d8:	17c1      	asrs	r1, r0, #31
 80025da:	f7fd fde7 	bl	80001ac <__aeabi_uldivmod>
	return ret;
 80025de:	e7f6      	b.n	80025ce <z_impl_k_sleep+0x1a>
 80025e0:	200002b8 	.word	0x200002b8

080025e4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 80025e4:	4b01      	ldr	r3, [pc, #4]	; (80025ec <z_impl_z_current_get+0x8>)
 80025e6:	6898      	ldr	r0, [r3, #8]
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	200002b8 	.word	0x200002b8

080025f0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 80025f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025f4:	4604      	mov	r4, r0
 80025f6:	f04f 0310 	mov.w	r3, #16
 80025fa:	f3ef 8611 	mrs	r6, BASEPRI
 80025fe:	f383 8812 	msr	BASEPRI_MAX, r3
 8002602:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 8002606:	7b03      	ldrb	r3, [r0, #12]
 8002608:	07d9      	lsls	r1, r3, #31
 800260a:	d50b      	bpl.n	8002624 <z_thread_abort+0x34>
	__asm__ volatile(
 800260c:	f386 8811 	msr	BASEPRI, r6
 8002610:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 8002614:	4040      	eors	r0, r0
 8002616:	f380 8811 	msr	BASEPRI, r0
 800261a:	f04f 0004 	mov.w	r0, #4
 800261e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8002620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8002624:	7b43      	ldrb	r3, [r0, #13]
 8002626:	071a      	lsls	r2, r3, #28
 8002628:	d504      	bpl.n	8002634 <z_thread_abort+0x44>
 800262a:	f386 8811 	msr	BASEPRI, r6
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	e7f5      	b.n	8002620 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8002634:	f023 0220 	bic.w	r2, r3, #32
 8002638:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 800263c:	09d2      	lsrs	r2, r2, #7
 800263e:	d120      	bne.n	8002682 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8002640:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 8002642:	68a3      	ldr	r3, [r4, #8]
 8002644:	b113      	cbz	r3, 800264c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 8002646:	4620      	mov	r0, r4
 8002648:	f000 fcde 	bl	8003008 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 800264c:	f104 0018 	add.w	r0, r4, #24
 8002650:	f000 fd32 	bl	80030b8 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8002654:	f104 0758 	add.w	r7, r4, #88	; 0x58
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8002658:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 800265c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800265e:	42bd      	cmp	r5, r7
 8002660:	d000      	beq.n	8002664 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8002662:	b9b5      	cbnz	r5, 8002692 <z_thread_abort+0xa2>
		update_cache(1);
 8002664:	2001      	movs	r0, #1
 8002666:	f7ff fdbb 	bl	80021e0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <z_thread_abort+0xbc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	42a3      	cmp	r3, r4
 8002670:	d1db      	bne.n	800262a <z_thread_abort+0x3a>
 8002672:	f3ef 8305 	mrs	r3, IPSR
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1d7      	bne.n	800262a <z_thread_abort+0x3a>
 800267a:	4630      	mov	r0, r6
 800267c:	f7fe fb90 	bl	8000da0 <arch_swap>
	return ret;
 8002680:	e7d3      	b.n	800262a <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002682:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8002686:	f043 0308 	orr.w	r3, r3, #8
 800268a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800268c:	f000 fcb4 	bl	8002ff8 <sys_dlist_remove>
}
 8002690:	e7d7      	b.n	8002642 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 8002692:	4628      	mov	r0, r5
 8002694:	f000 fcb8 	bl	8003008 <unpend_thread_no_timeout>
 8002698:	f105 0018 	add.w	r0, r5, #24
 800269c:	f000 fd0c 	bl	80030b8 <z_abort_timeout>
 80026a0:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 80026a4:	4628      	mov	r0, r5
 80026a6:	f7ff fe37 	bl	8002318 <ready_thread>
 80026aa:	e7d7      	b.n	800265c <z_thread_abort+0x6c>
 80026ac:	200002b8 	.word	0x200002b8

080026b0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 80026b0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 80026b2:	4806      	ldr	r0, [pc, #24]	; (80026cc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 80026b4:	4a06      	ldr	r2, [pc, #24]	; (80026d0 <z_data_copy+0x20>)
 80026b6:	4907      	ldr	r1, [pc, #28]	; (80026d4 <z_data_copy+0x24>)
 80026b8:	1a12      	subs	r2, r2, r0
 80026ba:	f000 fc8f 	bl	8002fdc <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 80026be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 80026c2:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <z_data_copy+0x28>)
 80026c4:	4905      	ldr	r1, [pc, #20]	; (80026dc <z_data_copy+0x2c>)
 80026c6:	4806      	ldr	r0, [pc, #24]	; (80026e0 <z_data_copy+0x30>)
 80026c8:	f000 bc88 	b.w	8002fdc <z_early_memcpy>
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000080 	.word	0x20000080
 80026d4:	080039f0 	.word	0x080039f0
 80026d8:	00000000 	.word	0x00000000
 80026dc:	080039f0 	.word	0x080039f0
 80026e0:	20000000 	.word	0x20000000

080026e4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <elapsed+0x10>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	b90b      	cbnz	r3, 80026ee <elapsed+0xa>
 80026ea:	f7ff baaf 	b.w	8001c4c <sys_clock_elapsed>
}
 80026ee:	2000      	movs	r0, #0
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	200002e8 	.word	0x200002e8

080026f8 <next_timeout>:
	return list->head == list;
 80026f8:	4b10      	ldr	r3, [pc, #64]	; (800273c <next_timeout+0x44>)

static int32_t next_timeout(void)
{
 80026fa:	b510      	push	{r4, lr}
 80026fc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80026fe:	429c      	cmp	r4, r3
 8002700:	bf08      	it	eq
 8002702:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8002704:	f7ff ffee 	bl	80026e4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 8002708:	b1a4      	cbz	r4, 8002734 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 800270a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800270e:	1a1b      	subs	r3, r3, r0
 8002710:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 8002714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002718:	f170 0200 	sbcs.w	r2, r0, #0
 800271c:	da0a      	bge.n	8002734 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 800271e:	2800      	cmp	r0, #0
 8002720:	bfac      	ite	ge
 8002722:	4618      	movge	r0, r3
 8002724:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <next_timeout+0x48>)
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	b113      	cbz	r3, 8002732 <next_timeout+0x3a>
 800272c:	4298      	cmp	r0, r3
 800272e:	bfa8      	it	ge
 8002730:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8002732:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
 8002734:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8002738:	e7f5      	b.n	8002726 <next_timeout+0x2e>
 800273a:	bf00      	nop
 800273c:	20000040 	.word	0x20000040
 8002740:	200002b8 	.word	0x200002b8

08002744 <remove_timeout>:
{
 8002744:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 8002746:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002748:	b168      	cbz	r0, 8002766 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <remove_timeout+0x30>)
 800274c:	6852      	ldr	r2, [r2, #4]
 800274e:	4290      	cmp	r0, r2
 8002750:	d009      	beq.n	8002766 <remove_timeout+0x22>
	if (next(t) != NULL) {
 8002752:	b143      	cbz	r3, 8002766 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8002754:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8002758:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 800275c:	1912      	adds	r2, r2, r4
 800275e:	eb41 0105 	adc.w	r1, r1, r5
 8002762:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 8002766:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 8002768:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800276a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800276c:	2300      	movs	r3, #0
	node->prev = NULL;
 800276e:	e9c0 3300 	strd	r3, r3, [r0]
}
 8002772:	bd30      	pop	{r4, r5, pc}
 8002774:	20000040 	.word	0x20000040

08002778 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	bf08      	it	eq
 800277e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 8002782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002784:	4604      	mov	r4, r0
 8002786:	461f      	mov	r7, r3
 8002788:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800278a:	d067      	beq.n	800285c <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800278c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 800278e:	f04f 0310 	mov.w	r3, #16
 8002792:	f3ef 8611 	mrs	r6, BASEPRI
 8002796:	f383 8812 	msr	BASEPRI_MAX, r3
 800279a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 800279e:	f06f 0201 	mvn.w	r2, #1
 80027a2:	1b53      	subs	r3, r2, r5
 80027a4:	f04f 3cff 	mov.w	ip, #4294967295
 80027a8:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db1b      	blt.n	80027e8 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 80027b0:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <z_add_timeout+0xe8>)
 80027b2:	e9d3 1300 	ldrd	r1, r3, [r3]
 80027b6:	1a52      	subs	r2, r2, r1
 80027b8:	eb6c 0303 	sbc.w	r3, ip, r3
 80027bc:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 80027be:	eb63 0307 	sbc.w	r3, r3, r7
 80027c2:	2d01      	cmp	r5, #1
 80027c4:	f173 0200 	sbcs.w	r2, r3, #0
 80027c8:	bfbc      	itt	lt
 80027ca:	2501      	movlt	r5, #1
 80027cc:	2300      	movlt	r3, #0
 80027ce:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
 80027d2:	4824      	ldr	r0, [pc, #144]	; (8002864 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
 80027d4:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80027d8:	4283      	cmp	r3, r0
 80027da:	d118      	bne.n	800280e <z_add_timeout+0x96>
	node->prev = tail;
 80027dc:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 80027e0:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 80027e4:	6044      	str	r4, [r0, #4]
}
 80027e6:	e026      	b.n	8002836 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 80027e8:	f7ff ff7c 	bl	80026e4 <elapsed>
 80027ec:	3501      	adds	r5, #1
 80027ee:	f147 0700 	adc.w	r7, r7, #0
 80027f2:	182d      	adds	r5, r5, r0
 80027f4:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 80027f8:	e9c4 5704 	strd	r5, r7, [r4, #16]
 80027fc:	e7e9      	b.n	80027d2 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 80027fe:	1a52      	subs	r2, r2, r1
 8002800:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 8002804:	459c      	cmp	ip, r3
 8002806:	e9c4 2504 	strd	r2, r5, [r4, #16]
 800280a:	d0e7      	beq.n	80027dc <z_add_timeout+0x64>
 800280c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0e4      	beq.n	80027dc <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 8002812:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 8002816:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 800281a:	428a      	cmp	r2, r1
 800281c:	eb75 0e07 	sbcs.w	lr, r5, r7
 8002820:	daed      	bge.n	80027fe <z_add_timeout+0x86>
				t->dticks -= to->dticks;
 8002822:	1a8a      	subs	r2, r1, r2
 8002824:	eb67 0505 	sbc.w	r5, r7, r5
 8002828:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 800282c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800282e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8002832:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8002834:	605c      	str	r4, [r3, #4]
	return list->head == list;
 8002836:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002838:	4283      	cmp	r3, r0
 800283a:	d00b      	beq.n	8002854 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 800283c:	429c      	cmp	r4, r3
 800283e:	d109      	bne.n	8002854 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8002840:	f7ff ff5a 	bl	80026f8 <next_timeout>

			if (next_time == 0 ||
 8002844:	b118      	cbz	r0, 800284e <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	4283      	cmp	r3, r0
 800284c:	d002      	beq.n	8002854 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
 800284e:	2100      	movs	r1, #0
 8002850:	f7ff f98e 	bl	8001b70 <sys_clock_set_timeout>
	__asm__ volatile(
 8002854:	f386 8811 	msr	BASEPRI, r6
 8002858:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 800285c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800285e:	bf00      	nop
 8002860:	20000180 	.word	0x20000180
 8002864:	20000040 	.word	0x20000040
 8002868:	200002b8 	.word	0x200002b8

0800286c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 800286c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002870:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8002872:	f7ff fd0f 	bl	8002294 <z_time_slice>
	__asm__ volatile(
 8002876:	f04f 0310 	mov.w	r3, #16
 800287a:	f3ef 8411 	mrs	r4, BASEPRI
 800287e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002882:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 8002886:	4e24      	ldr	r6, [pc, #144]	; (8002918 <sys_clock_announce+0xac>)
	return list->head == list;
 8002888:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800291c <sys_clock_announce+0xb0>
 800288c:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 800288e:	4d24      	ldr	r5, [pc, #144]	; (8002920 <sys_clock_announce+0xb4>)
 8002890:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8002894:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002896:	4540      	cmp	r0, r8
		curr_tick += dt;
 8002898:	e9d5 1e00 	ldrd	r1, lr, [r5]
 800289c:	ea4f 77e2 	mov.w	r7, r2, asr #31
 80028a0:	d00b      	beq.n	80028ba <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 80028a2:	b150      	cbz	r0, 80028ba <sys_clock_announce+0x4e>
 80028a4:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	eb77 090c 	sbcs.w	r9, r7, ip
 80028ae:	da16      	bge.n	80028de <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80028b6:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 80028ba:	1852      	adds	r2, r2, r1
 80028bc:	eb4e 0707 	adc.w	r7, lr, r7
 80028c0:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
 80028c4:	2500      	movs	r5, #0
 80028c6:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 80028c8:	f7ff ff16 	bl	80026f8 <next_timeout>
 80028cc:	4629      	mov	r1, r5
 80028ce:	f7ff f94f 	bl	8001b70 <sys_clock_set_timeout>
	__asm__ volatile(
 80028d2:	f384 8811 	msr	BASEPRI, r4
 80028d6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 80028da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 80028de:	1859      	adds	r1, r3, r1
 80028e0:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 80028e8:	2200      	movs	r2, #0
 80028ea:	2300      	movs	r3, #0
 80028ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 80028f0:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 80028f4:	f7ff ff26 	bl	8002744 <remove_timeout>
 80028f8:	f384 8811 	msr	BASEPRI, r4
 80028fc:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8002900:	6883      	ldr	r3, [r0, #8]
 8002902:	4798      	blx	r3
	__asm__ volatile(
 8002904:	f04f 0310 	mov.w	r3, #16
 8002908:	f3ef 8411 	mrs	r4, BASEPRI
 800290c:	f383 8812 	msr	BASEPRI_MAX, r3
 8002910:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8002914:	e7bc      	b.n	8002890 <sys_clock_announce+0x24>
 8002916:	bf00      	nop
 8002918:	200002e8 	.word	0x200002e8
 800291c:	20000040 	.word	0x20000040
 8002920:	20000180 	.word	0x20000180

08002924 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8002924:	b510      	push	{r4, lr}
 8002926:	f04f 0310 	mov.w	r3, #16
 800292a:	f3ef 8411 	mrs	r4, BASEPRI
 800292e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002932:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 8002936:	f7ff f989 	bl	8001c4c <sys_clock_elapsed>
 800293a:	4a05      	ldr	r2, [pc, #20]	; (8002950 <sys_clock_tick_get+0x2c>)
 800293c:	e9d2 3100 	ldrd	r3, r1, [r2]
 8002940:	18c0      	adds	r0, r0, r3
 8002942:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 8002946:	f384 8811 	msr	BASEPRI, r4
 800294a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 800294e:	bd10      	pop	{r4, pc}
 8002950:	20000180 	.word	0x20000180

08002954 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8002954:	4a02      	ldr	r2, [pc, #8]	; (8002960 <boot_banner+0xc>)
 8002956:	4903      	ldr	r1, [pc, #12]	; (8002964 <boot_banner+0x10>)
 8002958:	4803      	ldr	r0, [pc, #12]	; (8002968 <boot_banner+0x14>)
 800295a:	f000 b80a 	b.w	8002972 <printk>
 800295e:	bf00      	nop
 8002960:	080039ee 	.word	0x080039ee
 8002964:	080039a8 	.word	0x080039a8
 8002968:	080039c8 	.word	0x080039c8

0800296c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 800296c:	4770      	bx	lr

0800296e <arch_printk_char_out>:
}
 800296e:	2000      	movs	r0, #0
 8002970:	4770      	bx	lr

08002972 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 8002972:	b40f      	push	{r0, r1, r2, r3}
 8002974:	b507      	push	{r0, r1, r2, lr}
 8002976:	a904      	add	r1, sp, #16
 8002978:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 800297c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 800297e:	f7fd fdc1 	bl	8000504 <vprintk>

	va_end(ap);
}
 8002982:	b003      	add	sp, #12
 8002984:	f85d eb04 	ldr.w	lr, [sp], #4
 8002988:	b004      	add	sp, #16
 800298a:	4770      	bx	lr

0800298c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800298c:	4604      	mov	r4, r0
 800298e:	b508      	push	{r3, lr}
 8002990:	4608      	mov	r0, r1
 8002992:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8002994:	461a      	mov	r2, r3
 8002996:	47a0      	blx	r4
	return z_impl_z_current_get();
 8002998:	f7ff fe24 	bl	80025e4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 800299c:	f7fe fbe0 	bl	8001160 <z_impl_k_thread_abort>

080029a0 <encode_uint>:
{
 80029a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029a4:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 80029a6:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
 80029a8:	2b6f      	cmp	r3, #111	; 0x6f
{
 80029aa:	4680      	mov	r8, r0
 80029ac:	460f      	mov	r7, r1
 80029ae:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 80029b0:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 80029b4:	d029      	beq.n	8002a0a <encode_uint+0x6a>
 80029b6:	d824      	bhi.n	8002a02 <encode_uint+0x62>
		return 16;
 80029b8:	2b58      	cmp	r3, #88	; 0x58
 80029ba:	bf14      	ite	ne
 80029bc:	260a      	movne	r6, #10
 80029be:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
 80029c0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 80029c4:	4632      	mov	r2, r6
 80029c6:	2300      	movs	r3, #0
 80029c8:	4640      	mov	r0, r8
 80029ca:	4639      	mov	r1, r7
 80029cc:	f7fd fbee 	bl	80001ac <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80029d0:	2a09      	cmp	r2, #9
 80029d2:	b2d4      	uxtb	r4, r2
 80029d4:	d81e      	bhi.n	8002a14 <encode_uint+0x74>
 80029d6:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 80029d8:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80029da:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 80029dc:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80029e0:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 80029e4:	d301      	bcc.n	80029ea <encode_uint+0x4a>
 80029e6:	45d1      	cmp	r9, sl
 80029e8:	d811      	bhi.n	8002a0e <encode_uint+0x6e>
	if (conv->flag_hash) {
 80029ea:	782b      	ldrb	r3, [r5, #0]
 80029ec:	069b      	lsls	r3, r3, #26
 80029ee:	d505      	bpl.n	80029fc <encode_uint+0x5c>
		if (radix == 8) {
 80029f0:	2e08      	cmp	r6, #8
 80029f2:	d115      	bne.n	8002a20 <encode_uint+0x80>
			conv->altform_0 = true;
 80029f4:	78ab      	ldrb	r3, [r5, #2]
 80029f6:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 80029fa:	70ab      	strb	r3, [r5, #2]
}
 80029fc:	4648      	mov	r0, r9
 80029fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8002a02:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 8002a06:	2b70      	cmp	r3, #112	; 0x70
 8002a08:	e7d7      	b.n	80029ba <encode_uint+0x1a>
	switch (specifier) {
 8002a0a:	2608      	movs	r6, #8
 8002a0c:	e7d8      	b.n	80029c0 <encode_uint+0x20>
		value /= radix;
 8002a0e:	4680      	mov	r8, r0
 8002a10:	460f      	mov	r7, r1
 8002a12:	e7d7      	b.n	80029c4 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002a14:	f1bb 0f19 	cmp.w	fp, #25
 8002a18:	bf94      	ite	ls
 8002a1a:	3437      	addls	r4, #55	; 0x37
 8002a1c:	3457      	addhi	r4, #87	; 0x57
 8002a1e:	e7db      	b.n	80029d8 <encode_uint+0x38>
		} else if (radix == 16) {
 8002a20:	2e10      	cmp	r6, #16
 8002a22:	d1eb      	bne.n	80029fc <encode_uint+0x5c>
			conv->altform_0c = true;
 8002a24:	78ab      	ldrb	r3, [r5, #2]
 8002a26:	f043 0310 	orr.w	r3, r3, #16
 8002a2a:	e7e6      	b.n	80029fa <encode_uint+0x5a>

08002a2c <outs>:
{
 8002a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a30:	4607      	mov	r7, r0
 8002a32:	4688      	mov	r8, r1
 8002a34:	4615      	mov	r5, r2
 8002a36:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8002a38:	4614      	mov	r4, r2
 8002a3a:	42b4      	cmp	r4, r6
 8002a3c:	eba4 0005 	sub.w	r0, r4, r5
 8002a40:	d302      	bcc.n	8002a48 <outs+0x1c>
 8002a42:	b93e      	cbnz	r6, 8002a54 <outs+0x28>
 8002a44:	7823      	ldrb	r3, [r4, #0]
 8002a46:	b12b      	cbz	r3, 8002a54 <outs+0x28>
		int rc = out((int)*sp++, ctx);
 8002a48:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002a4c:	4641      	mov	r1, r8
 8002a4e:	47b8      	blx	r7
		if (rc < 0) {
 8002a50:	2800      	cmp	r0, #0
 8002a52:	daf2      	bge.n	8002a3a <outs+0xe>
}
 8002a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a58 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
 8002a58:	4770      	bx	lr

08002a5a <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	4770      	bx	lr

08002a5e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8002a5e:	f000 baa0 	b.w	8002fa2 <z_fatal_error>

08002a62 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 8002a62:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8002a64:	6800      	ldr	r0, [r0, #0]
 8002a66:	f000 ba9c 	b.w	8002fa2 <z_fatal_error>

08002a6a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	f7ff bff6 	b.w	8002a5e <z_arm_fatal_error>

08002a72 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8002a72:	b508      	push	{r3, lr}
	handler();
 8002a74:	f7fe f96c 	bl	8000d50 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8002a78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8002a7c:	f7fe ba40 	b.w	8000f00 <z_arm_exc_exit>

08002a80 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8002a80:	4603      	mov	r3, r0
	size_t n = 0;
 8002a82:	2000      	movs	r0, #0

	while (*s != '\0') {
 8002a84:	5c1a      	ldrb	r2, [r3, r0]
 8002a86:	b902      	cbnz	r2, 8002a8a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8002a88:	4770      	bx	lr
		n++;
 8002a8a:	3001      	adds	r0, #1
 8002a8c:	e7fa      	b.n	8002a84 <strlen+0x4>

08002a8e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8002a8e:	4603      	mov	r3, r0
	size_t n = 0;
 8002a90:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8002a92:	5c1a      	ldrb	r2, [r3, r0]
 8002a94:	b10a      	cbz	r2, 8002a9a <strnlen+0xc>
 8002a96:	4288      	cmp	r0, r1
 8002a98:	d100      	bne.n	8002a9c <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 8002a9a:	4770      	bx	lr
		n++;
 8002a9c:	3001      	adds	r0, #1
 8002a9e:	e7f8      	b.n	8002a92 <strnlen+0x4>

08002aa0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 8002aa0:	b510      	push	{r4, lr}
 8002aa2:	1e43      	subs	r3, r0, #1
 8002aa4:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 8002aa6:	4291      	cmp	r1, r2
 8002aa8:	d100      	bne.n	8002aac <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8002aaa:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 8002aac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ab0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8002ab4:	e7f7      	b.n	8002aa6 <memcpy+0x6>

08002ab6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8002ab6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 8002ab8:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 8002aba:	4603      	mov	r3, r0
	while (n > 0) {
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d100      	bne.n	8002ac2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8002ac0:	4770      	bx	lr
		*(d_byte++) = c_byte;
 8002ac2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002ac6:	e7f9      	b.n	8002abc <memset+0x6>

08002ac8 <_stdout_hook_default>:
}
 8002ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8002acc:	4770      	bx	lr

08002ace <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 8002ace:	2200      	movs	r2, #0
{
 8002ad0:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	2006      	movs	r0, #6
 8002ad6:	f7fe f923 	bl	8000d20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8002ada:	2200      	movs	r2, #0
 8002adc:	4611      	mov	r1, r2
 8002ade:	2007      	movs	r0, #7
 8002ae0:	f7fe f91e 	bl	8000d20 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	2008      	movs	r0, #8
 8002aea:	f7fe f919 	bl	8000d20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8002aee:	2200      	movs	r2, #0
 8002af0:	4611      	mov	r1, r2
 8002af2:	2009      	movs	r0, #9
 8002af4:	f7fe f914 	bl	8000d20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8002af8:	2200      	movs	r2, #0
 8002afa:	4611      	mov	r1, r2
 8002afc:	200a      	movs	r0, #10
 8002afe:	f7fe f90f 	bl	8000d20 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8002b02:	2200      	movs	r2, #0
 8002b04:	4611      	mov	r1, r2
 8002b06:	2017      	movs	r0, #23
 8002b08:	f7fe f90a 	bl	8000d20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4611      	mov	r1, r2
 8002b10:	2028      	movs	r0, #40	; 0x28
 8002b12:	f7fe f905 	bl	8000d20 <z_arm_irq_priority_set>
}
 8002b16:	2000      	movs	r0, #0
 8002b18:	bd08      	pop	{r3, pc}

08002b1a <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, dev);
 8002b1a:	6902      	ldr	r2, [r0, #16]
 8002b1c:	2110      	movs	r1, #16
 8002b1e:	200a      	movs	r0, #10
 8002b20:	f7fe bc00 	b.w	8001324 <__stm32_exti_isr.isra.0>

08002b24 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, dev);
 8002b24:	6902      	ldr	r2, [r0, #16]
 8002b26:	210a      	movs	r1, #10
 8002b28:	2005      	movs	r0, #5
 8002b2a:	f7fe bbfb 	b.w	8001324 <__stm32_exti_isr.isra.0>

08002b2e <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, dev);
 8002b2e:	6902      	ldr	r2, [r0, #16]
 8002b30:	2105      	movs	r1, #5
 8002b32:	2004      	movs	r0, #4
 8002b34:	f7fe bbf6 	b.w	8001324 <__stm32_exti_isr.isra.0>

08002b38 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, dev);
 8002b38:	6902      	ldr	r2, [r0, #16]
 8002b3a:	2104      	movs	r1, #4
 8002b3c:	2003      	movs	r0, #3
 8002b3e:	f7fe bbf1 	b.w	8001324 <__stm32_exti_isr.isra.0>

08002b42 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, dev);
 8002b42:	6902      	ldr	r2, [r0, #16]
 8002b44:	2103      	movs	r1, #3
 8002b46:	2002      	movs	r0, #2
 8002b48:	f7fe bbec 	b.w	8001324 <__stm32_exti_isr.isra.0>

08002b4c <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, dev);
 8002b4c:	6902      	ldr	r2, [r0, #16]
 8002b4e:	2102      	movs	r1, #2
 8002b50:	2001      	movs	r0, #1
 8002b52:	f7fe bbe7 	b.w	8001324 <__stm32_exti_isr.isra.0>

08002b56 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, dev);
 8002b56:	6902      	ldr	r2, [r0, #16]
 8002b58:	2101      	movs	r1, #1
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f7fe bbe2 	b.w	8001324 <__stm32_exti_isr.isra.0>

08002b60 <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8002b60:	680b      	ldr	r3, [r1, #0]
 8002b62:	f1a3 0248 	sub.w	r2, r3, #72	; 0x48
 8002b66:	2a18      	cmp	r2, #24
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus);
 8002b68:	bf9f      	itttt	ls
 8002b6a:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8002b6e:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
	reg_val |= pclken->enr;
 8002b72:	6849      	ldrls	r1, [r1, #4]
	reg_val = *reg;
 8002b74:	681a      	ldrls	r2, [r3, #0]
	reg_val |= pclken->enr;
 8002b76:	bf9d      	ittte	ls
 8002b78:	430a      	orrls	r2, r1
	return 0;
 8002b7a:	2000      	movls	r0, #0
	*reg = reg_val;
 8002b7c:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 8002b7e:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 8002b82:	4770      	bx	lr

08002b84 <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8002b84:	680b      	ldr	r3, [r1, #0]
 8002b86:	f1a3 0248 	sub.w	r2, r3, #72	; 0x48
 8002b8a:	2a18      	cmp	r2, #24
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus);
 8002b8c:	bf9f      	itttt	ls
 8002b8e:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8002b92:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
	reg_val &= ~pclken->enr;
 8002b96:	6849      	ldrls	r1, [r1, #4]
	reg_val = *reg;
 8002b98:	681a      	ldrls	r2, [r3, #0]
	reg_val &= ~pclken->enr;
 8002b9a:	bf9d      	ittte	ls
 8002b9c:	438a      	bicls	r2, r1
	return 0;
 8002b9e:	2000      	movls	r0, #0
	*reg = reg_val;
 8002ba0:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 8002ba2:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 8002ba6:	4770      	bx	lr

08002ba8 <get_pllout_frequency>:
}
 8002ba8:	200a      	movs	r0, #10
 8002baa:	4770      	bx	lr

08002bac <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002bac:	6843      	ldr	r3, [r0, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8002bb0:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8002bb2:	600b      	str	r3, [r1, #0]
}
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	4770      	bx	lr

08002bb8 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002bb8:	6843      	ldr	r3, [r0, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8002bbc:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8002bbe:	4042      	eors	r2, r0
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8002bc4:	615a      	str	r2, [r3, #20]
}
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	4770      	bx	lr

08002bca <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002bca:	6843      	ldr	r3, [r0, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
}
 8002bce:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8002bd0:	6199      	str	r1, [r3, #24]
}
 8002bd2:	4770      	bx	lr

08002bd4 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002bd4:	6843      	ldr	r3, [r0, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
}
 8002bd8:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8002bda:	6299      	str	r1, [r3, #40]	; 0x28
 8002bdc:	4770      	bx	lr

08002bde <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002bde:	6843      	ldr	r3, [r0, #4]
 8002be0:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8002be2:	6953      	ldr	r3, [r2, #20]
 8002be4:	404b      	eors	r3, r1
 8002be6:	6153      	str	r3, [r2, #20]
}
 8002be8:	2000      	movs	r0, #0
 8002bea:	4770      	bx	lr

08002bec <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->data;
 8002bec:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8002bee:	6898      	ldr	r0, [r3, #8]
{
 8002bf0:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8002bf2:	b158      	cbz	r0, 8002c0c <gpio_stm32_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002bf4:	2400      	movs	r4, #0
 8002bf6:	4281      	cmp	r1, r0
 8002bf8:	d112      	bne.n	8002c20 <gpio_stm32_manage_callback+0x34>
	return node->next;
 8002bfa:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 8002bfc:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 8002bfe:	b954      	cbnz	r4, 8002c16 <gpio_stm32_manage_callback+0x2a>
 8002c00:	428d      	cmp	r5, r1
	list->head = node;
 8002c02:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8002c04:	d100      	bne.n	8002c08 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8002c06:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8002c08:	2000      	movs	r0, #0
 8002c0a:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 8002c0c:	b96a      	cbnz	r2, 8002c2a <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8002c0e:	2000      	movs	r0, #0
}
 8002c10:	bd30      	pop	{r4, r5, pc}
 8002c12:	4628      	mov	r0, r5
 8002c14:	e7ef      	b.n	8002bf6 <gpio_stm32_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 8002c16:	428d      	cmp	r5, r1
	parent->next = child;
 8002c18:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8002c1a:	bf08      	it	eq
 8002c1c:	60dc      	streq	r4, [r3, #12]
}
 8002c1e:	e7f3      	b.n	8002c08 <gpio_stm32_manage_callback+0x1c>
	return node->next;
 8002c20:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002c22:	4604      	mov	r4, r0
 8002c24:	2d00      	cmp	r5, #0
 8002c26:	d1f4      	bne.n	8002c12 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8002c28:	b13a      	cbz	r2, 8002c3a <gpio_stm32_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
 8002c2a:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	600a      	str	r2, [r1, #0]
	list->head = node;
 8002c30:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d1eb      	bne.n	8002c0e <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8002c36:	60d9      	str	r1, [r3, #12]
}
 8002c38:	e7ea      	b.n	8002c10 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8002c3a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8002c3e:	e7e7      	b.n	8002c10 <gpio_stm32_manage_callback+0x24>

08002c40 <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8002c40:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c42:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8002c44:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002c46:	6867      	ldr	r7, [r4, #4]
 8002c48:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8002c4a:	f3c2 1680 	ubfx	r6, r2, #6, #1
 8002c4e:	ea27 0700 	bic.w	r7, r7, r0
 8002c52:	408e      	lsls	r6, r1
 8002c54:	433e      	orrs	r6, r7
 8002c56:	6066      	str	r6, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8002c5c:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002c60:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8002c64:	f04f 0e03 	mov.w	lr, #3
 8002c68:	007f      	lsls	r7, r7, #1
 8002c6a:	fa0e f707 	lsl.w	r7, lr, r7
 8002c6e:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8002c76:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8002c7a:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 8002c7e:	007f      	lsls	r7, r7, #1
 8002c80:	40be      	lsls	r6, r7
 8002c82:	ea46 060c 	orr.w	r6, r6, ip
 8002c86:	60a6      	str	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8002c8c:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002c90:	68e7      	ldr	r7, [r4, #12]
 8002c92:	0076      	lsls	r6, r6, #1
 8002c94:	fa0e f606 	lsl.w	r6, lr, r6
 8002c98:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8002ca0:	fab6 f686 	clz	r6, r6
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8002ca4:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8002ca8:	0076      	lsls	r6, r6, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8002caa:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8002cae:	40b2      	lsls	r2, r6
 8002cb0:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8002cb2:	2d20      	cmp	r5, #32
 8002cb4:	60e2      	str	r2, [r4, #12]
 8002cb6:	d115      	bne.n	8002ce4 <gpio_stm32_configure_raw.isra.0+0xa4>
		if (pin < 8) {
 8002cb8:	2907      	cmp	r1, #7
 8002cba:	dc2b      	bgt.n	8002d14 <gpio_stm32_configure_raw.isra.0+0xd4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002cc0:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 8002cc2:	b32a      	cbz	r2, 8002d10 <gpio_stm32_configure_raw.isra.0+0xd0>
  return __builtin_clz(value);
 8002cc4:	fab2 f282 	clz	r2, r2
 8002cc8:	0092      	lsls	r2, r2, #2
 8002cca:	260f      	movs	r6, #15
 8002ccc:	fa06 f202 	lsl.w	r2, r6, r2
 8002cd0:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 8002cd8:	fab2 f282 	clz	r2, r2
 8002cdc:	0092      	lsls	r2, r2, #2
 8002cde:	4093      	lsls	r3, r2
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8002ce8:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002cec:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	fa90 f0a0 	rbit	r0, r0
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	2103      	movs	r1, #3
  return __builtin_clz(value);
 8002cf6:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8002cfa:	092d      	lsrs	r5, r5, #4
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	0040      	lsls	r0, r0, #1
 8002d02:	ea22 0303 	bic.w	r3, r2, r3
 8002d06:	fa05 f000 	lsl.w	r0, r5, r0
 8002d0a:	4318      	orrs	r0, r3
 8002d0c:	6020      	str	r0, [r4, #0]
}
 8002d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8002d10:	462a      	mov	r2, r5
 8002d12:	e7d9      	b.n	8002cc8 <gpio_stm32_configure_raw.isra.0+0x88>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002d14:	0a02      	lsrs	r2, r0, #8
 8002d16:	6a66      	ldr	r6, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8002d1c:	b181      	cbz	r1, 8002d40 <gpio_stm32_configure_raw.isra.0+0x100>
  return __builtin_clz(value);
 8002d1e:	fab1 f181 	clz	r1, r1
 8002d22:	0089      	lsls	r1, r1, #2
 8002d24:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002d2a:	fab2 f282 	clz	r2, r2
 8002d2e:	fa07 f101 	lsl.w	r1, r7, r1
 8002d32:	0092      	lsls	r2, r2, #2
 8002d34:	ea26 0101 	bic.w	r1, r6, r1
 8002d38:	4093      	lsls	r3, r2
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	6263      	str	r3, [r4, #36]	; 0x24
}
 8002d3e:	e7d1      	b.n	8002ce4 <gpio_stm32_configure_raw.isra.0+0xa4>
    return 32U;
 8002d40:	4629      	mov	r1, r5
 8002d42:	e7ee      	b.n	8002d22 <gpio_stm32_configure_raw.isra.0+0xe2>

08002d44 <gpio_stm32_config>:
{
 8002d44:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8002d46:	039a      	lsls	r2, r3, #14
{
 8002d48:	b510      	push	{r4, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 8002d4a:	d51a      	bpl.n	8002d82 <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8002d4c:	079c      	lsls	r4, r3, #30
 8002d4e:	d511      	bpl.n	8002d74 <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8002d50:	075a      	lsls	r2, r3, #29
 8002d52:	d52f      	bpl.n	8002db4 <gpio_stm32_config+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8002d54:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8002d56:	06dc      	lsls	r4, r3, #27
 8002d58:	d50e      	bpl.n	8002d78 <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8002d5e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
	const struct gpio_stm32_config *cfg = dev->config;
 8002d62:	6844      	ldr	r4, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8002d64:	d11c      	bne.n	8002da0 <gpio_stm32_config+0x5c>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8002d66:	035b      	lsls	r3, r3, #13
 8002d68:	d514      	bpl.n	8002d94 <gpio_stm32_config+0x50>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002d6a:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 8002d70:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 8002d72:	e00f      	b.n	8002d94 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8002d74:	2210      	movs	r2, #16
 8002d76:	e7ee      	b.n	8002d56 <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8002d78:	069c      	lsls	r4, r3, #26
 8002d7a:	d5f0      	bpl.n	8002d5e <gpio_stm32_config+0x1a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8002d7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8002d80:	e7ed      	b.n	8002d5e <gpio_stm32_config+0x1a>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8002d82:	03dc      	lsls	r4, r3, #15
 8002d84:	d511      	bpl.n	8002daa <gpio_stm32_config+0x66>
		if ((flags & GPIO_PULL_UP) != 0) {
 8002d86:	06da      	lsls	r2, r3, #27
 8002d88:	d411      	bmi.n	8002dae <gpio_stm32_config+0x6a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8002d8a:	f013 0220 	ands.w	r2, r3, #32
 8002d8e:	bf18      	it	ne
 8002d90:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8002d94:	6840      	ldr	r0, [r0, #4]
 8002d96:	2300      	movs	r3, #0
 8002d98:	f7ff ff52 	bl	8002c40 <gpio_stm32_configure_raw.isra.0>
	return 0;
 8002d9c:	2000      	movs	r0, #0
}
 8002d9e:	bd10      	pop	{r4, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002da0:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002da2:	2301      	movs	r3, #1
 8002da4:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 8002da6:	61a3      	str	r3, [r4, #24]
	return 0;
 8002da8:	e7f4      	b.n	8002d94 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8002daa:	2230      	movs	r2, #48	; 0x30
 8002dac:	e7f2      	b.n	8002d94 <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db2:	e7ef      	b.n	8002d94 <gpio_stm32_config+0x50>
				return -ENOTSUP;
 8002db4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002db8:	e7f1      	b.n	8002d9e <gpio_stm32_config+0x5a>

08002dba <gpio_stm32_isr>:
{
 8002dba:	460b      	mov	r3, r1
 8002dbc:	6889      	ldr	r1, [r1, #8]
 8002dbe:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002dc0:	b169      	cbz	r1, 8002dde <gpio_stm32_isr+0x24>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8002dc2:	2501      	movs	r5, #1
 8002dc4:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8002dc6:	680c      	ldr	r4, [r1, #0]
 8002dc8:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8002dca:	688a      	ldr	r2, [r1, #8]
 8002dcc:	402a      	ands	r2, r5
 8002dce:	d002      	beq.n	8002dd6 <gpio_stm32_isr+0x1c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8002dd0:	684b      	ldr	r3, [r1, #4]
 8002dd2:	4630      	mov	r0, r6
 8002dd4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002dd6:	b114      	cbz	r4, 8002dde <gpio_stm32_isr+0x24>
 8002dd8:	4621      	mov	r1, r4
 8002dda:	6824      	ldr	r4, [r4, #0]
 8002ddc:	e7f5      	b.n	8002dca <gpio_stm32_isr+0x10>
}
 8002dde:	bd70      	pop	{r4, r5, r6, pc}

08002de0 <gpio_stm32_configure>:
{
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	461f      	mov	r7, r3
 8002de4:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8002de6:	6840      	ldr	r0, [r0, #4]
{
 8002de8:	460e      	mov	r6, r1
 8002dea:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8002dec:	f7ff ff28 	bl	8002c40 <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 8002df0:	2f11      	cmp	r7, #17
 8002df2:	d108      	bne.n	8002e06 <gpio_stm32_configure+0x26>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002df4:	2301      	movs	r3, #1
 8002df6:	fa03 f606 	lsl.w	r6, r3, r6
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002dfa:	6863      	ldr	r3, [r4, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
		if (gpio_out == STM32_ODR_1) {
 8002dfe:	052a      	lsls	r2, r5, #20
	WRITE_REG(gpio->BSRR, pins);
 8002e00:	bf4c      	ite	mi
 8002e02:	619e      	strmi	r6, [r3, #24]
 8002e04:	629e      	strpl	r6, [r3, #40]	; 0x28
}
 8002e06:	2000      	movs	r0, #0
 8002e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002e0a <uart_stm32_err_check>:
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8002e0a:	6843      	ldr	r3, [r0, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002e0e:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8002e10:	69da      	ldr	r2, [r3, #28]
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 8002e12:	07d1      	lsls	r1, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002e14:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002e16:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 8002e1a:	bf48      	it	mi
 8002e1c:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002e20:	0792      	lsls	r2, r2, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 8002e22:	69da      	ldr	r2, [r3, #28]
		err |= UART_ERROR_FRAMING;
 8002e24:	bf48      	it	mi
 8002e26:	f040 0004 	orrmi.w	r0, r0, #4
 8002e2a:	05d1      	lsls	r1, r2, #23
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 8002e2c:	bf42      	ittt	mi
 8002e2e:	f44f 7280 	movmi.w	r2, #256	; 0x100
		err |= UART_BREAK;
 8002e32:	f040 0008 	orrmi.w	r0, r0, #8
 8002e36:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 8002e38:	07c2      	lsls	r2, r0, #31
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002e3a:	bf44      	itt	mi
 8002e3c:	2208      	movmi	r2, #8
 8002e3e:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 8002e40:	0781      	lsls	r1, r0, #30
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8002e42:	bf44      	itt	mi
 8002e44:	2201      	movmi	r2, #1
 8002e46:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 8002e48:	0742      	lsls	r2, r0, #29
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8002e4a:	bf44      	itt	mi
 8002e4c:	2202      	movmi	r2, #2
 8002e4e:	621a      	strmi	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8002e50:	2204      	movs	r2, #4
 8002e52:	621a      	str	r2, [r3, #32]
}
 8002e54:	4770      	bx	lr

08002e56 <uart_stm32_poll_out>:
{
 8002e56:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 8002e58:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 8002e5a:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8002e5c:	69d3      	ldr	r3, [r2, #28]
 8002e5e:	061b      	lsls	r3, r3, #24
 8002e60:	d5fc      	bpl.n	8002e5c <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 8002e62:	f04f 0210 	mov.w	r2, #16
 8002e66:	f3ef 8311 	mrs	r3, BASEPRI
 8002e6a:	f382 8812 	msr	BASEPRI_MAX, r2
 8002e6e:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 8002e72:	6802      	ldr	r2, [r0, #0]
 8002e74:	69d4      	ldr	r4, [r2, #28]
 8002e76:	0624      	lsls	r4, r4, #24
 8002e78:	d404      	bmi.n	8002e84 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 8002e7a:	f383 8811 	msr	BASEPRI, r3
 8002e7e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8002e82:	e7ea      	b.n	8002e5a <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8002e84:	b289      	uxth	r1, r1
 8002e86:	8511      	strh	r1, [r2, #40]	; 0x28
	__asm__ volatile(
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
}
 8002e90:	bd10      	pop	{r4, pc}

08002e92 <uart_stm32_poll_in>:
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8002e92:	6843      	ldr	r3, [r0, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	0710      	lsls	r0, r2, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002e9a:	bf44      	itt	mi
 8002e9c:	2208      	movmi	r2, #8
 8002e9e:	621a      	strmi	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	0692      	lsls	r2, r2, #26
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002ea4:	bf43      	ittte	mi
 8002ea6:	8c9b      	ldrhmi	r3, [r3, #36]	; 0x24
 8002ea8:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8002eaa:	2000      	movmi	r0, #0
		return -1;
 8002eac:	f04f 30ff 	movpl.w	r0, #4294967295
}
 8002eb0:	4770      	bx	lr

08002eb2 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8002eb2:	6903      	ldr	r3, [r0, #16]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 8002eb8:	6843      	ldr	r3, [r0, #4]
 8002eba:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8002ebc:	6813      	ldr	r3, [r2, #0]
 8002ebe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8002ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec6:	d02d      	beq.n	8002f24 <uart_stm32_config_get+0x72>
		return UART_CFG_PARITY_NONE;
 8002ec8:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 8002ecc:	4243      	negs	r3, r0
 8002ece:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8002ed0:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8002ed2:	6853      	ldr	r3, [r2, #4]
 8002ed4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8002ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002edc:	d024      	beq.n	8002f28 <uart_stm32_config_get+0x76>
 8002ede:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ee2:	d023      	beq.n	8002f2c <uart_stm32_config_get+0x7a>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf14      	ite	ne
 8002ee8:	2303      	movne	r3, #3
 8002eea:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8002eec:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8002eee:	6810      	ldr	r0, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8002ef0:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8002ef2:	f000 2010 	and.w	r0, r0, #268439552	; 0x10001000
	switch (db) {
 8002ef6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8002efa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002efe:	d017      	beq.n	8002f30 <uart_stm32_config_get+0x7e>
 8002f00:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8002f04:	d119      	bne.n	8002f3a <uart_stm32_config_get+0x88>
			return UART_CFG_DATA_BITS_6;
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	bf0c      	ite	eq
 8002f0a:	2302      	moveq	r3, #2
 8002f0c:	2301      	movne	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8002f0e:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8002f10:	6893      	ldr	r3, [r2, #8]
 8002f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8002f16:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8002f1a:	4253      	negs	r3, r2
 8002f1c:	4153      	adcs	r3, r2
 8002f1e:	71cb      	strb	r3, [r1, #7]
}
 8002f20:	2000      	movs	r0, #0
 8002f22:	4770      	bx	lr
	switch (parity) {
 8002f24:	2302      	movs	r3, #2
 8002f26:	e7d3      	b.n	8002ed0 <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_0_5;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e7df      	b.n	8002eec <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e7dd      	b.n	8002eec <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_9;
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf14      	ite	ne
 8002f34:	2303      	movne	r3, #3
 8002f36:	2304      	moveq	r3, #4
 8002f38:	e7e9      	b.n	8002f0e <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	bf14      	ite	ne
 8002f3e:	2302      	movne	r3, #2
 8002f40:	2303      	moveq	r3, #3
 8002f42:	e7e4      	b.n	8002f0e <uart_stm32_config_get+0x5c>

08002f44 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8002f44:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 8002f46:	6803      	ldr	r3, [r0, #0]
 8002f48:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 8002f4a:	7903      	ldrb	r3, [r0, #4]
 8002f4c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002f50:	3b01      	subs	r3, #1
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	6805      	ldr	r5, [r0, #0]
 8002f56:	6814      	ldr	r4, [r2, #0]
 8002f58:	441d      	add	r5, r3
 8002f5a:	42ac      	cmp	r4, r5
 8002f5c:	d902      	bls.n	8002f64 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
 8002f5e:	f06f 0001 	mvn.w	r0, #1
}
 8002f62:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 8002f64:	7965      	ldrb	r5, [r4, #5]
 8002f66:	428d      	cmp	r5, r1
 8002f68:	d002      	beq.n	8002f70 <pinctrl_lookup_state+0x2c>
		(*state)++;
 8002f6a:	3408      	adds	r4, #8
 8002f6c:	6014      	str	r4, [r2, #0]
 8002f6e:	e7f1      	b.n	8002f54 <pinctrl_lookup_state+0x10>
			return 0;
 8002f70:	2000      	movs	r0, #0
 8002f72:	e7f6      	b.n	8002f62 <pinctrl_lookup_state+0x1e>

08002f74 <z_device_state_init>:
}
 8002f74:	4770      	bx	lr

08002f76 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8002f76:	b138      	cbz	r0, 8002f88 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8002f78:	68c3      	ldr	r3, [r0, #12]
 8002f7a:	8818      	ldrh	r0, [r3, #0]
 8002f7c:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8002f80:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8002f84:	4258      	negs	r0, r3
 8002f86:	4158      	adcs	r0, r3
}
 8002f88:	4770      	bx	lr

08002f8a <arch_system_halt>:
	__asm__ volatile(
 8002f8a:	f04f 0210 	mov.w	r2, #16
 8002f8e:	f3ef 8311 	mrs	r3, BASEPRI
 8002f92:	f382 8812 	msr	BASEPRI_MAX, r2
 8002f96:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8002f9a:	e7fe      	b.n	8002f9a <arch_system_halt+0x10>

08002f9c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8002f9c:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8002f9e:	f7ff fff4 	bl	8002f8a <arch_system_halt>

08002fa2 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8002fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa4:	4605      	mov	r5, r0
 8002fa6:	460e      	mov	r6, r1
 8002fa8:	f04f 0310 	mov.w	r3, #16
 8002fac:	f3ef 8711 	mrs	r7, BASEPRI
 8002fb0:	f383 8812 	msr	BASEPRI_MAX, r3
 8002fb4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8002fb8:	f7ff fb14 	bl	80025e4 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 8002fbc:	4631      	mov	r1, r6
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	f7ff ffeb 	bl	8002f9c <k_sys_fatal_error_handler>
	__asm__ volatile(
 8002fc6:	f387 8811 	msr	BASEPRI, r7
 8002fca:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8002fce:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8002fd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002fd4:	f7fe b8c4 	b.w	8001160 <z_impl_k_thread_abort>

08002fd8 <z_early_memset>:
	(void) memset(dst, c, n);
 8002fd8:	f7ff bd6d 	b.w	8002ab6 <memset>

08002fdc <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 8002fdc:	f7ff bd60 	b.w	8002aa0 <memcpy>

08002fe0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8002fe0:	b508      	push	{r3, lr}
	__asm__ volatile(
 8002fe2:	f04f 0210 	mov.w	r2, #16
 8002fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8002fea:	f382 8812 	msr	BASEPRI_MAX, r2
 8002fee:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8002ff2:	f7fd fe77 	bl	8000ce4 <arch_cpu_idle>
 8002ff6:	e7f4      	b.n	8002fe2 <idle+0x2>

08002ff8 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8002ff8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8002ffc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8002ffe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8003000:	2300      	movs	r3, #0
	node->prev = NULL;
 8003002:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 8003006:	4770      	bx	lr

08003008 <unpend_thread_no_timeout>:
{
 8003008:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 800300a:	f7ff fff5 	bl	8002ff8 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800300e:	7b43      	ldrb	r3, [r0, #13]
 8003010:	f023 0302 	bic.w	r3, r3, #2
 8003014:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8003016:	2300      	movs	r3, #0
 8003018:	6083      	str	r3, [r0, #8]
}
 800301a:	bd08      	pop	{r3, pc}

0800301c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800301c:	4603      	mov	r3, r0
 800301e:	b920      	cbnz	r0, 800302a <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003020:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 8003024:	b90a      	cbnz	r2, 800302a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8003026:	f7fd bebb 	b.w	8000da0 <arch_swap>
	__asm__ volatile(
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
}
 8003032:	4770      	bx	lr

08003034 <z_reschedule_unlocked>:
	__asm__ volatile(
 8003034:	f04f 0310 	mov.w	r3, #16
 8003038:	f3ef 8011 	mrs	r0, BASEPRI
 800303c:	f383 8812 	msr	BASEPRI_MAX, r3
 8003040:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8003044:	f7ff bfea 	b.w	800301c <z_reschedule_irqlock>

08003048 <z_priq_dumb_best>:
{
 8003048:	4603      	mov	r3, r0
	return list->head == list;
 800304a:	6800      	ldr	r0, [r0, #0]
}
 800304c:	4283      	cmp	r3, r0
 800304e:	bf08      	it	eq
 8003050:	2000      	moveq	r0, #0
 8003052:	4770      	bx	lr

08003054 <z_ready_thread>:
{
 8003054:	b510      	push	{r4, lr}
 8003056:	f04f 0310 	mov.w	r3, #16
 800305a:	f3ef 8411 	mrs	r4, BASEPRI
 800305e:	f383 8812 	msr	BASEPRI_MAX, r3
 8003062:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8003066:	f7ff f957 	bl	8002318 <ready_thread>
	__asm__ volatile(
 800306a:	f384 8811 	msr	BASEPRI, r4
 800306e:	f3bf 8f6f 	isb	sy
}
 8003072:	bd10      	pop	{r4, pc}

08003074 <z_thread_timeout>:
{
 8003074:	b510      	push	{r4, lr}
 8003076:	4601      	mov	r1, r0
	__asm__ volatile(
 8003078:	f04f 0310 	mov.w	r3, #16
 800307c:	f3ef 8411 	mrs	r4, BASEPRI
 8003080:	f383 8812 	msr	BASEPRI_MAX, r3
 8003084:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8003088:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 800308c:	f013 0f28 	tst.w	r3, #40	; 0x28
 8003090:	d10d      	bne.n	80030ae <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 8003092:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 8003096:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 8003098:	b10b      	cbz	r3, 800309e <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 800309a:	f7ff ffb5 	bl	8003008 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800309e:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 80030a2:	f023 0314 	bic.w	r3, r3, #20
 80030a6:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 80030aa:	f7ff f935 	bl	8002318 <ready_thread>
	__asm__ volatile(
 80030ae:	f384 8811 	msr	BASEPRI, r4
 80030b2:	f3bf 8f6f 	isb	sy
}
 80030b6:	bd10      	pop	{r4, pc}

080030b8 <z_abort_timeout>:
{
 80030b8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80030ba:	f04f 0210 	mov.w	r2, #16
 80030be:	f3ef 8411 	mrs	r4, BASEPRI
 80030c2:	f382 8812 	msr	BASEPRI_MAX, r2
 80030c6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 80030ca:	6803      	ldr	r3, [r0, #0]
 80030cc:	b13b      	cbz	r3, 80030de <z_abort_timeout+0x26>
			remove_timeout(to);
 80030ce:	f7ff fb39 	bl	8002744 <remove_timeout>
			ret = 0;
 80030d2:	2000      	movs	r0, #0
	__asm__ volatile(
 80030d4:	f384 8811 	msr	BASEPRI, r4
 80030d8:	f3bf 8f6f 	isb	sy
}
 80030dc:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 80030de:	f06f 0015 	mvn.w	r0, #21
 80030e2:	e7f7      	b.n	80030d4 <z_abort_timeout+0x1c>

080030e4 <z_set_timeout_expiry>:
{
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	4604      	mov	r4, r0
 80030e8:	460d      	mov	r5, r1
	__asm__ volatile(
 80030ea:	f04f 0310 	mov.w	r3, #16
 80030ee:	f3ef 8611 	mrs	r6, BASEPRI
 80030f2:	f383 8812 	msr	BASEPRI_MAX, r3
 80030f6:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 80030fa:	f7ff fafd 	bl	80026f8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 80030fe:	2801      	cmp	r0, #1
 8003100:	dd05      	ble.n	800310e <z_set_timeout_expiry+0x2a>
 8003102:	42a0      	cmp	r0, r4
 8003104:	db03      	blt.n	800310e <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8003106:	4629      	mov	r1, r5
 8003108:	4620      	mov	r0, r4
 800310a:	f7fe fd31 	bl	8001b70 <sys_clock_set_timeout>
	__asm__ volatile(
 800310e:	f386 8811 	msr	BASEPRI, r6
 8003112:	f3bf 8f6f 	isb	sy
}
 8003116:	bd70      	pop	{r4, r5, r6, pc}

08003118 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 8003118:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 800311a:	f7ff fc03 	bl	8002924 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 800311e:	bd08      	pop	{r3, pc}
